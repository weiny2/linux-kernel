/*
 * Copyright Â© 2017 Intel Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *
 */

#include <linux/sched/mm.h>

#include "display/intel_frontbuffer.h"
#include "gem/i915_gem_object_blt.h"
#include "gt/intel_gt.h"
#include "gt/intel_gt_requests.h"
#include "i915_drv.h"
#include "i915_gem_clflush.h"
#include "i915_gem_context.h"
#include "i915_gem_mman.h"
#include "i915_gem_lmem.h"
#include "i915_gem_object.h"
#include "i915_gem_object_blt.h"
#include "i915_gem_region.h"
#include "i915_globals.h"
#include "i915_svm.h"
#include "i915_trace.h"

static struct i915_global_object {
	struct i915_global base;
	struct kmem_cache *slab_objects;
} global;

struct drm_i915_gem_object *i915_gem_object_alloc(void)
{
	return kmem_cache_zalloc(global.slab_objects, GFP_KERNEL);
}

void i915_gem_object_free(struct drm_i915_gem_object *obj)
{
	return kmem_cache_free(global.slab_objects, obj);
}

void i915_gem_object_init(struct drm_i915_gem_object *obj,
			  const struct drm_i915_gem_object_ops *ops,
			  struct lock_class_key *key)
{
	__mutex_init(&obj->mm.lock, "obj->mm.lock", key);

	spin_lock_init(&obj->vma.lock);
	INIT_LIST_HEAD(&obj->vma.list);

	INIT_LIST_HEAD(&obj->mm.link);

	INIT_LIST_HEAD(&obj->lut_list);

	spin_lock_init(&obj->mmo.lock);
	INIT_LIST_HEAD(&obj->mmo.offsets);

	init_rcu_head(&obj->rcu);

	obj->ops = ops;

	obj->mm.madv = I915_MADV_WILLNEED;
	INIT_RADIX_TREE(&obj->mm.get_page.radix, GFP_KERNEL | __GFP_NOWARN);
	mutex_init(&obj->mm.get_page.lock);
}

/**
 * Mark up the object's coherency levels for a given cache_level
 * @obj: #drm_i915_gem_object
 * @cache_level: cache level
 */
void i915_gem_object_set_cache_coherency(struct drm_i915_gem_object *obj,
					 unsigned int cache_level)
{
	obj->cache_level = cache_level;

	if (cache_level != I915_CACHE_NONE)
		obj->cache_coherent = (I915_BO_CACHE_COHERENT_FOR_READ |
				       I915_BO_CACHE_COHERENT_FOR_WRITE);
	else if (i915_gem_object_use_llc(obj))
		obj->cache_coherent = I915_BO_CACHE_COHERENT_FOR_READ;
	else
		obj->cache_coherent = 0;

	obj->cache_dirty =
		!(obj->cache_coherent & I915_BO_CACHE_COHERENT_FOR_WRITE);
}

void i915_gem_close_object(struct drm_gem_object *gem, struct drm_file *file)
{
	struct drm_i915_gem_object *obj = to_intel_bo(gem);
	struct drm_i915_file_private *fpriv = file->driver_priv;
	struct i915_lut_handle *lut, *ln;
	struct i915_mmap_offset *mmo;
	LIST_HEAD(close);

	i915_gem_object_lock(obj);
	list_for_each_entry_safe(lut, ln, &obj->lut_list, obj_link) {
		struct i915_gem_context *ctx = lut->ctx;

		if (ctx->file_priv != fpriv)
			continue;

		i915_gem_context_get(ctx);
		list_move(&lut->obj_link, &close);
	}
	i915_gem_object_unlock(obj);

	spin_lock(&obj->mmo.lock);
	list_for_each_entry(mmo, &obj->mmo.offsets, offset) {
		if (mmo->file != file)
			continue;

		spin_unlock(&obj->mmo.lock);
		drm_vma_node_revoke(&mmo->vma_node, file);
		spin_lock(&obj->mmo.lock);
	}
	spin_unlock(&obj->mmo.lock);

	list_for_each_entry_safe(lut, ln, &close, obj_link) {
		struct i915_gem_context *ctx = lut->ctx;
		struct i915_vma *vma;

		/*
		 * We allow the process to have multiple handles to the same
		 * vma, in the same fd namespace, by virtue of flink/open.
		 */

		mutex_lock(&ctx->mutex);
		vma = radix_tree_delete(&ctx->handles_vma, lut->handle);
		if (vma) {
			GEM_BUG_ON(vma->obj != obj);
			GEM_BUG_ON(!atomic_read(&vma->open_count));
			if (atomic_dec_and_test(&vma->open_count) &&
			    !i915_vma_is_ggtt(vma))
				i915_vma_close(vma);
		}
		mutex_unlock(&ctx->mutex);

		i915_gem_context_put(lut->ctx);
		i915_lut_handle_free(lut);
		i915_gem_object_put(obj);
	}
}

int i915_gem_object_prepare_move(struct drm_i915_gem_object *obj)
{
	int err;

	lockdep_assert_held(&obj->base.dev->struct_mutex);

	if (obj->mm.madv != I915_MADV_WILLNEED)
		return -EINVAL;

	if (i915_gem_object_needs_bit17_swizzle(obj))
		return -EINVAL;

	if (atomic_read(&obj->mm.pages_pin_count) >
	    atomic_read(&obj->bind_count))
		return -EBUSY;

	if (i915_gem_object_is_framebuffer(obj))
		return -EBUSY;

	i915_gem_object_release_mmap(obj);

	GEM_BUG_ON(obj->mm.mapping);
	GEM_BUG_ON(obj->base.filp && mapping_mapped(obj->base.filp->f_mapping));

	err = i915_gem_object_wait(obj,
				   I915_WAIT_INTERRUPTIBLE |
				   I915_WAIT_ALL,
				   MAX_SCHEDULE_TIMEOUT);
	if (err)
		return err;

	return i915_gem_object_unbind(obj,
				      I915_GEM_OBJECT_UNBIND_ACTIVE);
}

int i915_gem_object_migrate(struct drm_i915_gem_object *obj,
			    struct intel_context *ce,
			    enum intel_region_id id)
{
	struct drm_i915_private *i915 = to_i915(obj->base.dev);
	struct drm_i915_gem_object *donor;
	struct intel_memory_region *mem;
	struct sg_table *pages = NULL;
	unsigned int page_sizes;
	int err = 0;

	lockdep_assert_held(&i915->drm.struct_mutex);

	GEM_BUG_ON(id >= INTEL_REGION_UNKNOWN);
	GEM_BUG_ON(obj->mm.madv != I915_MADV_WILLNEED);
	if (obj->mm.region->id == intel_region_map[id])
		return 0;

	mem = i915->mm.regions[id];

	donor = i915_gem_object_create_region(mem, obj->base.size, 0);
	if (IS_ERR(donor))
		return PTR_ERR(donor);

	/* Copy backing-pages if we have to */
	if (i915_gem_object_has_pages(obj)) {
		err = i915_gem_object_pin_pages(obj);
		if (err)
			goto err_put_donor;

		err = i915_gem_object_copy_blt(obj, donor, ce);
		if (err)
			goto err_put_donor;

		i915_gem_object_lock(donor);
		err = i915_gem_object_set_to_cpu_domain(donor, false);
		i915_gem_object_unlock(donor);
		if (err)
			goto err_put_donor;

		intel_gt_retire_requests(&i915->gt);

		i915_gem_object_unbind(donor, 0);
		err = i915_gem_object_unbind(obj, 0);
		if (err)
			goto err_put_donor;

		mutex_lock(&obj->mm.lock);

		pages = __i915_gem_object_unset_pages(obj);
		obj->ops->put_pages(obj, pages);

		mutex_unlock(&obj->mm.lock);

		page_sizes = donor->mm.page_sizes.phys;
		pages = __i915_gem_object_unset_pages(donor);
	}

	if (obj->ops->release)
		obj->ops->release(obj);

	/* We need still need a little special casing for shmem */
	if (obj->base.filp)
		fput(fetch_and_zero(&obj->base.filp));
	else if (donor->base.filp) {
		atomic_long_inc(&donor->base.filp->f_count);
		obj->base.filp = donor->base.filp;
	}

	obj->base.size = donor->base.size;
	obj->mm.region = intel_memory_region_get(mem);
	obj->flags = donor->flags;
	obj->ops = donor->ops;
	obj->cache_level = donor->cache_level;
	obj->cache_coherent = donor->cache_coherent;
	obj->cache_dirty = donor->cache_dirty;

	list_replace_init(&donor->mm.blocks, &obj->mm.blocks);

	mutex_lock(&mem->objects.lock);
	list_add(&obj->mm.region_link, &mem->objects.list);
	mutex_unlock(&mem->objects.lock);

	/* set pages after migrated */
	if (pages) {
		mutex_lock(&obj->mm.lock);
		__i915_gem_object_set_pages(obj, pages, page_sizes);
		mutex_unlock(&obj->mm.lock);
	}

	GEM_BUG_ON(i915_gem_object_has_pages(donor));
	GEM_BUG_ON(i915_gem_object_has_pinned_pages(donor));

err_put_donor:
	i915_gem_object_put(donor);
	if (i915_gem_object_has_pinned_pages(obj))
		i915_gem_object_unpin_pages(obj);

	return err;
}

static void __i915_gem_free_object_rcu(struct rcu_head *head)
{
	struct drm_i915_gem_object *obj =
		container_of(head, typeof(*obj), rcu);
	struct drm_i915_private *i915 = to_i915(obj->base.dev);

	dma_resv_fini(&obj->base._resv);
	i915_gem_object_free(obj);

	GEM_BUG_ON(!atomic_read(&i915->mm.free_count));
	atomic_dec(&i915->mm.free_count);
}

static void __i915_gem_free_objects(struct drm_i915_private *i915,
				    struct llist_node *freed)
{
	struct drm_i915_gem_object *obj, *on;
	intel_wakeref_t wakeref;

	wakeref = intel_runtime_pm_get(&i915->runtime_pm);
	llist_for_each_entry_safe(obj, on, freed, freed) {
		struct i915_mmap_offset *mmo, *mn;

		trace_i915_gem_object_destroy(obj);

		if (!list_empty(&obj->vma.list)) {
			struct i915_vma *vma;

			/*
			 * Note that the vma keeps an object reference while
			 * it is active, so it *should* not sleep while we
			 * destroy it. Our debug code errs insits it *might*.
			 * For the moment, play along.
			 */
			spin_lock(&obj->vma.lock);
			while ((vma = list_first_entry_or_null(&obj->vma.list,
							       struct i915_vma,
							       obj_link))) {
				GEM_BUG_ON(vma->obj != obj);
				spin_unlock(&obj->vma.lock);

				i915_vma_destroy(vma);

				spin_lock(&obj->vma.lock);
			}
			spin_unlock(&obj->vma.lock);
		}

		i915_gem_object_release_mmap(obj);

		list_for_each_entry_safe(mmo, mn, &obj->mmo.offsets, offset) {
			drm_vma_offset_remove(obj->base.dev->vma_offset_manager,
					      &mmo->vma_node);
			kfree(mmo);
		}
		INIT_LIST_HEAD(&obj->mmo.offsets);

		GEM_BUG_ON(atomic_read(&obj->bind_count));
		GEM_BUG_ON(obj->userfault_count);
		GEM_BUG_ON(!list_empty(&obj->lut_list));

		atomic_set(&obj->mm.pages_pin_count, 0);
		__i915_gem_object_put_pages(obj);
		GEM_BUG_ON(i915_gem_object_has_pages(obj));
		bitmap_free(obj->bit_17);

		if (obj->base.import_attach)
			drm_prime_gem_destroy(&obj->base, NULL);

		drm_gem_free_mmap_offset(&obj->base);

		if (obj->ops->release)
			obj->ops->release(obj);

		/* But keep the pointer alive for RCU-protected lookups */
		call_rcu(&obj->rcu, __i915_gem_free_object_rcu);
	}
	intel_runtime_pm_put(&i915->runtime_pm, wakeref);
}

void i915_gem_flush_free_objects(struct drm_i915_private *i915)
{
	struct llist_node *freed = llist_del_all(&i915->mm.free_list);

	if (unlikely(freed))
		__i915_gem_free_objects(i915, freed);
}

static void __i915_gem_free_work(struct work_struct *work)
{
	struct drm_i915_private *i915 =
		container_of(work, struct drm_i915_private, mm.free_work);

	i915_gem_flush_free_objects(i915);
}

void i915_gem_free_object(struct drm_gem_object *gem_obj)
{
	struct drm_i915_gem_object *obj = to_intel_bo(gem_obj);
	struct drm_i915_private *i915 = to_i915(obj->base.dev);

	GEM_BUG_ON(i915_gem_object_is_framebuffer(obj));

	/*
	 * Before we free the object, make sure any pure RCU-only
	 * read-side critical sections are complete, e.g.
	 * i915_gem_busy_ioctl(). For the corresponding synchronized
	 * lookup see i915_gem_object_lookup_rcu().
	 */
	atomic_inc(&i915->mm.free_count);

	/*
	 * This serializes freeing with the shrinker. Since the free
	 * is delayed, first by RCU then by the workqueue, we want the
	 * shrinker to be able to free pages of unreferenced objects,
	 * or else we may oom whilst there are plenty of deferred
	 * freed objects.
	 */
	i915_gem_object_make_unshrinkable(obj);

	/*
	 * Since we require blocking on struct_mutex to unbind the freed
	 * object from the GPU before releasing resources back to the
	 * system, we can not do that directly from the RCU callback (which may
	 * be a softirq context), but must instead then defer that work onto a
	 * kthread. We use the RCU callback rather than move the freed object
	 * directly onto the work queue so that we can mix between using the
	 * worker and performing frees directly from subsequent allocations for
	 * crude but effective memory throttling.
	 */
	if (llist_add(&obj->freed, &i915->mm.free_list))
		queue_work(i915->wq, &i915->mm.free_work);
}

static bool gpu_write_needs_clflush(struct drm_i915_gem_object *obj)
{
	return !(obj->cache_level == I915_CACHE_NONE ||
		 obj->cache_level == I915_CACHE_WT);
}

void
i915_gem_object_flush_write_domain(struct drm_i915_gem_object *obj,
				   unsigned int flush_domains)
{
	struct i915_vma *vma;

	assert_object_held(obj);

	if (!(obj->write_domain & flush_domains))
		return;

	switch (obj->write_domain) {
	case I915_GEM_DOMAIN_GTT:
<<<<<<<
		for_each_ggtt_vma(vma, obj)
			intel_gt_flush_ggtt_writes(vma->vm->gt);

		i915_gem_object_flush_frontbuffer(obj, ORIGIN_CPU);

=======
		spin_lock(&obj->vma.lock);
>>>>>>>
		for_each_ggtt_vma(vma, obj) {
			if (i915_vma_unset_ggtt_write(vma))
				intel_gt_flush_ggtt_writes(vma->vm->gt);
		}
		spin_unlock(&obj->vma.lock);

		i915_gem_object_flush_frontbuffer(obj, ORIGIN_CPU);
		break;

	case I915_GEM_DOMAIN_WC:
		wmb();
		break;

	case I915_GEM_DOMAIN_CPU:
		i915_gem_clflush_object(obj, I915_CLFLUSH_SYNC);
		break;

	case I915_GEM_DOMAIN_RENDER:
		if (gpu_write_needs_clflush(obj))
			obj->cache_dirty = true;
		break;
	}

	obj->write_domain = 0;
}

void __i915_gem_object_flush_frontbuffer(struct drm_i915_gem_object *obj,
					 enum fb_op_origin origin)
{
	struct intel_frontbuffer *front;

	front = __intel_frontbuffer_get(obj);
	if (front) {
		intel_frontbuffer_flush(front, origin);
		intel_frontbuffer_put(front);
	}
}

void __i915_gem_object_invalidate_frontbuffer(struct drm_i915_gem_object *obj,
					      enum fb_op_origin origin)
{
	struct intel_frontbuffer *front;

	front = __intel_frontbuffer_get(obj);
	if (front) {
		intel_frontbuffer_invalidate(front, origin);
		intel_frontbuffer_put(front);
	}
}

void i915_gem_init__objects(struct drm_i915_private *i915)
{
	INIT_WORK(&i915->mm.free_work, __i915_gem_free_work);
}

static void i915_global_objects_shrink(void)
{
	kmem_cache_shrink(global.slab_objects);
}

static void i915_global_objects_exit(void)
{
	kmem_cache_destroy(global.slab_objects);
}

static struct i915_global_object global = { {
	.shrink = i915_global_objects_shrink,
	.exit = i915_global_objects_exit,
} };

int __init i915_global_objects_init(void)
{
	global.slab_objects =
		KMEM_CACHE(drm_i915_gem_object, SLAB_HWCACHE_ALIGN);
	if (!global.slab_objects)
		return -ENOMEM;

	i915_global_register(&global.base);
	return 0;
}

bool i915_gem_object_use_llc(struct drm_i915_gem_object *obj)
{
	return (HAS_LLC(to_i915(obj->base.dev)) ||
		(HAS_SNOOP_PCIE(to_i915(obj->base.dev)) &&
		 !i915_gem_object_is_lmem(obj)));
}

enum intel_region_id
intel_lookup_region_id(u32 region)
{
	enum intel_region_id id;

	for (id = 0; id < INTEL_REGION_UNKNOWN; ++id) {
		if (intel_region_map[id] == region)
			return id;
	}

	return INTEL_REGION_UNKNOWN;
}

bool
i915_gem_object_svm_mapped(struct drm_i915_gem_object *obj)
{
	struct i915_vma *vma;

	spin_lock(&obj->vma.lock);
	list_for_each_entry(vma, &obj->vma.list, obj_link)
		if (i915_vm_is_svm_enabled(vma->vm)) {
			spin_unlock(&obj->vma.lock);
			return true;
		}

	spin_unlock(&obj->vma.lock);
	return false;
}

static int i915_gem_object_region_select(struct drm_i915_private *dev_priv,
					 struct drm_i915_gem_object_param *args,
					 struct drm_file *file,
					 struct drm_i915_gem_object *obj)
{
	u32 __user *uregions = u64_to_user_ptr(args->data);
	u32 uregions_copy[INTEL_REGION_UNKNOWN];
	int i, ret;

	if (args->size > ARRAY_SIZE(dev_priv->mm.regions))
		return -EINVAL;

	memset(uregions_copy, 0, sizeof(uregions_copy));
	for (i = 0; i < args->size; i++) {
		u32 region;

		ret = get_user(region, uregions);
		if (ret)
			return ret;

		uregions_copy[i] = region;
		++uregions;
	}

	ret = i915_gem_object_migrate_region(obj, uregions_copy,
					     args->size);

	return ret;
}

int i915_gem_object_migrate_region(struct drm_i915_gem_object *obj,
				   u32 *regions, int size)
{
	struct drm_i915_private *dev_priv = to_i915(obj->base.dev);
	struct intel_context *ce = dev_priv->engine[BCS0]->kernel_context;
	int i, ret;

	mutex_lock(&dev_priv->drm.struct_mutex);
	ret = i915_gem_object_prepare_move(obj);
	if (ret) {
		DRM_ERROR("Cannot set memory region, object in use\n");
		goto err;
	}

	for (i = 0; i < size; i++) {
		enum intel_region_id id = intel_lookup_region_id(regions[i]);

		if (id == INTEL_REGION_UNKNOWN) {
			ret = -EINVAL;
			goto err;
		}

		ret = i915_gem_object_migrate(obj, ce, id);
		if (!ret) {
			if (!i915_gem_object_has_pages(obj) &&
			    MEMORY_TYPE_FROM_REGION(regions[i]) ==
			    INTEL_MEMORY_LOCAL) {
				/*
				 * TODO: this should be part of get_pages(),
				 * when async get_pages arrives
				 */
				ret = i915_gem_object_fill_blt(obj, ce, 0);
				if (ret) {
					DRM_ERROR("Failed clearing the object\n");
					goto err;
				}

				i915_gem_object_lock(obj);
				ret = i915_gem_object_set_to_cpu_domain(obj, false);
				i915_gem_object_unlock(obj);
				if (ret)
					goto err;
			}
			break;
		}
	}
err:
	mutex_unlock(&dev_priv->drm.struct_mutex);
	return ret;
}

int i915_gem_object_setparam_ioctl(struct drm_device *dev, void *data,
				   struct drm_file *file)
{

	struct drm_i915_gem_object_param *args = data;
	struct drm_i915_private *dev_priv = to_i915(dev);
	struct drm_i915_gem_object *obj;
	int ret;

	obj = i915_gem_object_lookup(file, args->handle);
	if (!obj)
		return -ENOENT;

	switch (lower_32_bits(args->param)) {
	case I915_PARAM_MEMORY_REGION:
		ret = i915_gem_object_region_select(dev_priv, args, file, obj);
		if (ret) {
			DRM_ERROR("Cannot set memory region, migration failed\n");
			goto err;
		}

		break;
	default:
		ret = -EINVAL;
		break;
	}

err:
	i915_gem_object_put(obj);
	return ret;
}

#if IS_ENABLED(CONFIG_DRM_I915_SELFTEST)
int selftest_gem_object_fill_blt(struct drm_i915_gem_object *obj,
				 struct intel_context *ce,
				 u32 value)
{
	return i915_gem_object_fill_blt(obj, ce, value);
}

#include "selftests/huge_gem_object.c"
#include "selftests/huge_pages.c"
#include "selftests/i915_gem_object.c"
#include "selftests/i915_gem_coherency.c"
#endif
