#ifndef _WFR_H
#define _WFR_H
/*
 * Copyright (c) 2013 Intel Corporation.  All rights reserved.
 *
 * This software is available to you under a choice of one of two
 * licenses.  You may choose to be licensed under the terms of the GNU
 * General Public License (GPL) Version 2, available from the file
 * COPYING in the main directory of this source tree, or the
 * OpenIB.org BSD license below:
 *
 *     Redistribution and use in source and binary forms, with or
 *     without modification, are permitted provided that the following
 *     conditions are met:
 *
 *      - Redistributions of source code must retain the above
 *        copyright notice, this list of conditions and the following
 *        disclaimer.
 *
 *      - Redistributions in binary form must reproduce the above
 *        copyright notice, this list of conditions and the following
 *        disclaimer in the documentation and/or other materials
 *        provided with the distribution.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/*
 * This file contains all of the defines that is specific to the WFR chip
 */

/* sizes */
#define WFR_CCE_NUM_INT_CSRS 8
#define WFR_CCE_NUM_MSIX_VECTORS 256
#define WFR_CCE_NUM_INT_MAP_CSRS 64
#define WFR_NUM_INTERRUPT_SOURCES 512
#define WFR_TXE_NUM_SDMA_ENGINES 16
#define WFR_RXE_NUM_CONTEXTS 160	/* will change */
#define WFR_RXE_PER_CONTEXT_SIZE 0x1000	/* 4k */
#define WFR_RXE_NUM_TID_FLOWS 32
#define WFR_TXE_NUM_CONTEXTS 160	/* will change */
#define WFR_RXE_NUM_RECEIVE_ARRAY_ENTRIES (64 * 1024)


/*#define USE_GENERATED_WFR_HEADERS 1*/
#ifdef USE_GENERATED_WFR_HEADERS


#include "wfr/wfr_core.h"
#include "wfr/wfr_cce.h"
#include "wfr/wfr_rxe.h"
#include "wfr/wfr_txe.h"
#include "wfr/wfr_dc.h"

/* not defined in wfr_core.h */
#define WFR_RXE_PER_CONTEXT_USER_OFFSET 0x0300000
#define WFR_RXE_PER_CONTEXT_USER   (WFR_RXE + WFR_RXE_PER_CONTEXT_USER_OFFSET)


#else /* USE_GENERATED_WFR_HEADERS */


/* block offsets */
#define WFR_CCE_OFFSET 0x0000000
#define WFR_DC				    0x0600000
#define WFR_RXE_OFFSET			    0x1000000
#define   WFR_RXE_PER_CONTEXT_KERNEL_OFFSET 0x0100000
#define   WFR_RXE_RECEIVE_ARRAY_OFFSET      0x0200000
#define   WFR_RXE_PER_CONTEXT_USER_OFFSET   0x0300000
#define WFR_TXE_OFFSET 0x1800000

/* registers */
#define WFR_CCE_REVISION	(WFR_CCE_OFFSET + 0x000000)
#define WFR_CCE_INT_STATUS	(WFR_CCE_OFFSET + 0x000100)
#define WFR_CCE_INT_MASK	(WFR_CCE_OFFSET + 0x000200)
#define WFR_CCE_INT_CLEAR	(WFR_CCE_OFFSET + 0x000300)
#define WFR_CCE_INT_FORCE	(WFR_CCE_OFFSET + 0x000400)
#define WFR_CCE_INT_MAP		(WFR_CCE_OFFSET + 0x000600)

#define WFR_RCV_CONTEXTS	   (WFR_RXE_OFFSET + 0x000010)
#define WFR_RCV_PARTITION_KEY	   (WFR_RXE_OFFSET + 0x000200)
#define WFR_RXE_PER_CONTEXT_KERNEL (WFR_RXE_OFFSET + WFR_RXE_PER_CONTEXT_KERNEL_OFFSET)
#define   WFR_RCV_CTXT_CTRL	   (WFR_RXE_PER_CONTEXT_KERNEL + 0x0000)
#define   WFR_RCV_CTXT_STATUS	   (WFR_RXE_PER_CONTEXT_KERNEL + 0x0008)
#define   WFR_RCV_EGR_CTRL	   (WFR_RXE_PER_CONTEXT_KERNEL + 0x0010)
#define   WFR_RCV_TID_CTRL	   (WFR_RXE_PER_CONTEXT_KERNEL + 0x0018)
#define   WFR_RCV_KEY_CTRL	   (WFR_RXE_PER_CONTEXT_KERNEL + 0x0020)
#define   WFR_RCV_HDR_ADDR	   (WFR_RXE_PER_CONTEXT_KERNEL + 0x0028)
#define   WFR_RCV_HDR_CNT	   (WFR_RXE_PER_CONTEXT_KERNEL + 0x0030)
#define   WFR_RCV_HDR_ENT_SIZE	   (WFR_RXE_PER_CONTEXT_KERNEL + 0x0038)
#define   WFR_RCV_HDR_SIZE	   (WFR_RXE_PER_CONTEXT_KERNEL + 0x0040)
#define   WFR_RCV_HDR_TAIL_ADDR	   (WFR_RXE_PER_CONTEXT_KERNEL + 0x0048)
#define   WFR_RCV_AVAIL_TIME_OUT   (WFR_RXE_PER_CONTEXT_KERNEL + 0x0050)
#define   WFR_RCV_HDR_OVFL_CNT     (WFR_RXE_PER_CONTEXT_KERNEL + 0x0058)
#define   WFR_RCV_CTXT_ERR_STATUS  (WFR_RXE_PER_CONTEXT_KERNEL + 0x0080)
#define   WFR_RCV_CTXT_ERR_MASK    (WFR_RXE_PER_CONTEXT_KERNEL + 0x0088)
#define   WFR_RCV_CTXT_ERR_CLEAR   (WFR_RXE_PER_CONTEXT_KERNEL + 0x0090)
#define   WFR_RCV_CTXT_ERR_FORCE   (WFR_RXE_PER_CONTEXT_KERNEL + 0x0098)
#define WFR_RCV_ARRAY (WFR_RXE_OFFSET + WFR_RXE_RECEIVE_ARRAY_OFFSET)
#define WFR_RXE_PER_CONTEXT_USER   (WFR_RXE_OFFSET + WFR_RXE_PER_CONTEXT_USER_OFFSET)
#define   WFR_RCV_HDR_TAIL	   (WFR_RXE_PER_CONTEXT_USER + 0x000)
#define   WFR_RCV_HDR_HEAD	   (WFR_RXE_PER_CONTEXT_USER + 0x008)
#define   WFR_RCV_EGR_INDEX_TAIL   (WFR_RXE_PER_CONTEXT_USER + 0x010)
#define   WFR_RCV_EGR_INDEX_HEAD   (WFR_RXE_PER_CONTEXT_USER + 0x018)
#define   WFR_RCV_TID_FLOW_TABLE   (WFR_RXE_PER_CONTEXT_USER + 0x800)

#define WFR_SEND_CONTEXTS	(WFR_TXE_OFFSET + 0x000010)
#define WFR_SEND_DMA_ENGINES	(WFR_TXE_OFFSET + 0x000018)

/* register accessors */
/* CCE Revision field accessors */
#define WFR_CCE_REVISION_CHIP_REV_MINOR_SHIFT	0
#define WFR_CCE_REVISION_CHIP_REV_MINOR_MASK	0xffull
#define WFR_CCE_REVISION_CHIP_REV_MAJOR_SHIFT	8
#define WFR_CCE_REVISION_CHIP_REV_MAJOR_MASK	0xffull
#define WFR_CCE_REVISION_BOARDID_SHIFT	32
#define WFR_CCE_REVISION_BOARDID_MASK	0xffull

/* WFR_RCV_PARTITION_KEY field accessors */
#define WFR_RCV_PARTITION_KEY_PARTITION_KEY_A_SHIFT 0
#define WFR_RCV_PARTITION_KEY_PARTITION_KEY_A_MASK 0xffffull
#define WFR_RCV_PARTITION_KEY_PARTITION_KEY_A_SMASK (WFR_RCV_PARTITION_KEY_PARTITION_KEY_A_MASK << WFR_RCV_PARTITION_KEY_PARTITION_KEY_A_SHIFT)

/* RCV HDR CNT field accessors */
#define WFR_RCV_HDR_CNT_CNT_SHIFT 0
#define WFR_RCV_HDR_CNT_CNT_MASK 0x1ffffull

/* RCV HDR ENT SIZE field accessors */
#define WFR_RCV_HDR_ENT_SIZE_ENT_SIZE_SHIFT 0
#define WFR_RCV_HDR_ENT_SIZE_ENT_SIZE_MASK 0x3ff

/* RCV HDR SIZE field accessors */
#define WFR_RCV_HDR_SIZE_HDR_SIZE_SHIFT 0
#define WFR_RCV_HDR_SIZE_HDR_SIZE_MASK 0xf

/* RCV_CTXT_CTRL field accessors */
#define WFR_RCV_CTXT_CTRL_ENABLE_SHIFT 0
#define WFR_RCV_CTXT_CTRL_ENABLE_MASK 0x1ull
#define WFR_RCV_CTXT_CTRL_ENABLE_SMASK (WFR_RCV_CTXT_CTRL_ENABLE_MASK << WFR_RCV_CTXT_CTRL_ENABLE_SHIFT)

#define WFR_RCV_CTXT_CTRL_ONE_PACKET_PER_EGR_BUFFER_SHIFT 1
#define WFR_RCV_CTXT_CTRL_ONE_PACKET_PER_EGR_BUFFER_MASK 0x1ull
#define WFR_RCV_CTXT_CTRL_ONE_PACKET_PER_EGR_BUFFER_SMASK (WFR_RCV_CTXT_CTRL_ONE_PACKET_PER_EGR_BUFFER_MASK << WFR_RCV_CTXT_CTRL_ONE_PACKET_PER_EGR_BUFFER_SHIFT)

#define WFR_RCV_CTXT_CTRL_DONT_DROP_EGR_FULL_SHIFT 2
#define WFR_RCV_CTXT_CTRL_DONT_DROP_EGR_FULL_MASK 0x1ull
#define WFR_RCV_CTXT_CTRL_DONT_DROP_EGR_FULL_SMASK (WFR_RCV_CTXT_CTRL_DONT_DROP_EGR_FULL_MASK << WFR_RCV_CTXT_CTRL_DONT_DROP_EGR_FULL_SHIFT)

#define WFR_RCV_CTXT_CTRL_DONT_DROP_RHQ_FULL_SHIFT 3
#define WFR_RCV_CTXT_CTRL_DONT_DROP_RHQ_FULL_MASK 0x1ull
#define WFR_RCV_CTXT_CTRL_DONT_DROP_RHQ_FULL_SMASK (WFR_RCV_CTXT_CTRL_DONT_DROP_RHQ_FULL_MASK << WFR_RCV_CTXT_CTRL_DONT_DROP_RHQ_FULL_SHIFT)

#define WFR_RCV_CTXT_CTRL_TID_FLOW_ENABLE_SHIFT 4
#define WFR_RCV_CTXT_CTRL_TID_FLOW_ENABLE_MASK 0x1ull
#define WFR_RCV_CTXT_CTRL_TID_FLOW_ENABLE_SMASK (WFR_RCV_CTXT_CTRL_TID_FLOW_ENABLE_MASK << WFR_RCV_CTXT_CTRL_TID_FLOW_ENABLE_SHIFT)

#define WFR_RCV_CTXT_CTRL_INTR_AVAIL_SHIFT 5
#define WFR_RCV_CTXT_CTRL_INTR_AVAIL_MASK 0x1ull
#define WFR_RCV_CTXT_CTRL_INTR_AVAIL_SMASK (WFR_RCV_CTXT_CTRL_INTR_AVAIL_MASK << WFR_RCV_CTXT_CTRL_INTR_AVAIL_SHIFT)

#define WFR_RCV_CTXT_CTRL_TAIL_UPD_SHIFT 6
#define WFR_RCV_CTXT_CTRL_TAIL_UPD_MASK 0x1ull
#define WFR_RCV_CTXT_CTRL_TAIL_UPD_SMASK (WFR_RCV_CTXT_CTRL_TAIL_UPD_MASK << WFR_RCV_CTXT_CTRL_TAIL_UPD_SHIFT)

#define WFR_RCV_CTXT_CTRL_REDIRECT_SHIFT 7
#define WFR_RCV_CTXT_CTRL_REDIRECT_MASK 0x1ull
#define WFR_RCV_CTXT_CTRL_REDIRECT_SMASK (WFR_RCV_CTXT_CTRL_REDIRECT_MASK << WFR_RCV_CTXT_CTRL_REDIRECT_SHIFT)

#define WFR_RCV_CTXT_CTRL_EGR_BUF_SIZE_SHIFT 8
#define WFR_RCV_CTXT_CTRL_EGR_BUF_SIZE_MASK 0xfull
#define WFR_RCV_CTXT_CTRL_EGR_BUF_SIZE_SMASK (WFR_RCV_CTXT_CTRL_EGR_BUF_SIZE_MASK << WFR_RCV_CTXT_CTRL_EGR_BUF_SIZE_SHIFT)

/* TODO later
#define WFR_RCV_CTXT_CTRL_TH_RCV_HDR_TAIL_WRITE
#define WFR_RCV_CTXT_CTRL_TH_TID_PAYLOAD_WRITES
#define WFR_RCV_CTXT_CTRL_TH_EAGER_PAYLOAD_WRITES
#define WFR_RCV_CTXT_CTRL_TH_HDR_QUEUE_WRITES
*/

/* WFR_RCV_EGR_CTRL fields */
#define WFR_RCV_EGR_CTRL_EGR_BASE_INDEX_SHIFT 0
#define WFR_RCV_EGR_CTRL_EGR_BASE_INDEX_MASK 0xffffull
#define WFR_RCV_EGR_CTRL_EGR_BASE_INDEX_SMASK (WFR_RCV_EGR_CTRL_EGR_BASE_INDEX_MASK << WFR_RCV_EGR_CTRL_EGR_BASE_INDEX_SHIFT)

#define WFR_RCV_EGR_CTRL_EGR_CNT_SHIFT 32
#define WFR_RCV_EGR_CTRL_EGR_CNT_MASK 0xfffull
#define WFR_RCV_EGR_CTRL_EGR_CNT_SMASK (WFR_RCV_EGR_CTRL_EGR_CNT_MASK << WFR_RCV_EGR_CTRL_EGR_CNT_SHIFT)

/* WFR_RCV_TID_CTRL fields */
#define WFR_RCV_TID_CTRL_TID_BASE_INDEX_SHIFT 0
#define WFR_RCV_TID_CTRL_TID_BASE_INDEX_MASK 0xffffull
#define WFR_RCV_TID_CTRL_TID_BASE_INDEX_SMASK (WFR_RCV_TID_CTRL_TID_BASE_INDEX_MASK << WFR_RCV_TID_CTRL_TID_BASE_INDEX_SHIFT)

#define WFR_RCV_TID_CTRL_TID_PAIR_CNT_SHIFT 32
#define WFR_RCV_TID_CTRL_TID_PAIR_CNT_MASK 0xfffull
#define WFR_RCV_TID_CTRL_TID_PAIR_CNT_SMASK (WFR_RCV_TID_CTRL_TID_PAIR_CNT_MASK << WFR_RCV_TID_CTRL_TID_PAIR_CNT_SHIFT)
#endif /* USE_GENERATED_WFR_HEADERS */

/* interrupt source details */
#define WFR_IS_GENERAL_ERR_START	  0
#define WFR_IS_RCVCTXT_ERR_START	  8
#define WFR_IS_SENDCTXT_ERR_START	 28
#define WFR_IS_SDMA_ERR_START		 48
#define WFR_IS_VAROUS_START		 64
#define WFR_IS_RCVAVAILINT_START	128
#define WFR_IS_SENDCREDIT_START		288
#define WFR_IS_SDMAINT_START	 	448
#define WFR_IS_SDMAPROGRESS_START 	464
#define WFR_IS_SDMAIDLE_START 		480
#define WFR_IS_SDMACLEANUP_START 	496
#define WFR_IS_MAX_SOURCES		512

/* derived interrupt sources values */
#define WFR_IS_GENERAL_ERR_END	WFR_IS_RCVCTXT_ERR_START
#define WFR_IS_RCVCTXT_ERR_END	WFR_IS_SENDCTXT_ERR_START
#define WFR_IS_SENDCTXT_ERR_END	WFR_IS_SDMA_ERR_START
#define WFR_IS_SDMA_ERR_END	WFR_IS_VAROUS_START
#define WFR_IS_VAROUS_END	WFR_IS_RCVAVAILINT_START
#define WFR_IS_RCVAVAILINT_END	WFR_IS_SENDCREDIT_START
#define WFR_IS_SENDCREDIT_END	WFR_IS_SDMAINT_START
#define WFR_IS_SDMAINT_END	WFR_IS_SDMAPROGRESS_START
#define WFR_IS_SDMAPROGRESS_END	WFR_IS_SDMAIDLE_START
#define WFR_IS_SDMAIDLE_END	WFR_IS_SDMACLEANUP_START
#define WFR_IS_SDMACLEANUP_END	WFR_IS_MAX_SOURCES

/*
 * Duncan Creek defines
 */
#define DC8051_OFFSET (WFR_DC + 0x2000)

#define DC8051_CFG_RAM_ACCESS_SETUP   (DC8051_OFFSET + 0x00000)
#define DC8051_CFG_RAM_ACCESS_WR_DATA (DC8051_OFFSET + 0x00008)
#define DC8051_CFG_RAM_ACCESS_RD_DATA (DC8051_OFFSET + 0x00010)
#define DC8051_CFG_HOST_CMD_0         (DC8051_OFFSET + 0x00018)
#define DC8051_CFG_HOST_CMD_1         (DC8051_OFFSET + 0x00020)
#define DC8051_CFG_RAM_ACCESS_CTRL    (DC8051_OFFSET + 0x00028)
#define DC8051_CFG_RAM_ACCESS_STATUS  (DC8051_OFFSET + 0x00030)
/* 07 0x00038 */
/* 08 0x00040 */
/* 09 0x00048 */
#define DC8051_CFG_LOCAL_GUID         (DC8051_OFFSET + 0x00050)
#define DC8051_STS_REMOTE_GUID        (DC8051_OFFSET + 0x00058)
#define DC8051_STS_CUR_STATE          (DC8051_OFFSET + 0x00060)
#define DC8051_CFG_RST                (DC8051_OFFSET + 0x00068)
#define DC8051_CFG_MODE               (DC8051_OFFSET + 0x00070)
#define DC8051_STS_NODE_TYPE          (DC8051_OFFSET + 0x00078)
#define DC8051_STS_LOCAL_FM_SECURITY  (DC8051_OFFSET + 0x00080)
#define DC8051_STS_REMOTE_FM_SECURITY (DC8051_OFFSET + 0x00088)
/* 18 0x00090 */
/* 19 0x00098 */
#define DC8051_DBG_SFR_MAP_1          (DC8051_OFFSET + 0x000a0)
#define DC8051_DBG_SFR_MAP_2          (DC8051_OFFSET + 0x000a8)
#define DC8051_DBG_HEART_BEAT         (DC8051_OFFSET + 0x000b0)
#define DC8051_DBG_CODE_TRACING_SETUP (DC8051_OFFSET + 0x000b8)
#define DC8051_DBG_CODE_TRACING_ADDR  (DC8051_OFFSET + 0x000c0)
#define DC8051_DBG_ERRINJ_ECC         (DC8051_OFFSET + 0x000c8)
#define DC8051_DBG_ERR_INFO_CRAM      (DC8051_OFFSET + 0x000d0)
#define DC8051_DBG_ERR_INFO_DRAM      (DC8051_OFFSET + 0x000d8)
#define DC8051_DBG_ERR_INFO_IRAM      (DC8051_OFFSET + 0x000e0)
#define DC8051_DBG_ERR_INFO_CNT_CRAM  (DC8051_OFFSET + 0x000e8)
#define DC8051_DBG_ERR_INFO_CNT_DRAM  (DC8051_OFFSET + 0x000f0)
#define DC8051_DBG_ERR_INFO_CNT_IRAM  (DC8051_OFFSET + 0x000f8)
// 32 0x00100
// 33 0x00108
// 34 0x00110
// 35 0x00118
// 36 0x00120
// 37 0x00128
// 38 0x00130
// 39 0x00138
#define DC8051_ERR_FLG                (DC8051_OFFSET + 0x00140)
#define DC8051_ERR_CLR                (DC8051_OFFSET + 0x00148)
#define DC8051_ERR_EN                 (DC8051_OFFSET + 0x00150)
#define DC8051_ERR_FIRST_FLG          (DC8051_OFFSET + 0x00158)
// 44 0x00160
// 45 0x00168
// 46 0x00170


/* DC Register fields */

/* DC8051_CFG_RAM_ACCESS_SETUP */
#define DC8051_CFG_RAM_ACCESS_SETUP_RAM_SEL_SHIFT 0
#define DC8051_CFG_RAM_ACCESS_SETUP_RAM_SEL_MASK 0x1ull
#define DC8051_CFG_RAM_ACCESS_SETUP_RAM_SEL_SMASK  (DC8051_CFG_RAM_ACCESS_SETUP_RAM_SEL_MASK << DC8051_CFG_RAM_ACCESS_SETUP_RAM_SEL_SHIFT)

#define DC8051_CFG_RAM_ACCESS_SETUP_AUTO_INCR_ADDR_SHIFT 8
#define DC8051_CFG_RAM_ACCESS_SETUP_AUTO_INCR_ADDR_MASK 0x1ull
#define DC8051_CFG_RAM_ACCESS_SETUP_AUTO_INCR_ADDR_SMASK (DC8051_CFG_RAM_ACCESS_SETUP_AUTO_INCR_ADDR_MASK << DC8051_CFG_RAM_ACCESS_SETUP_AUTO_INCR_ADDR_SHIFT)

/* DC8051_CFG_RAM_ACCESS_CTRL */
#define DC8051_CFG_RAM_ACCESS_CTRL_ADDRESS_SHIFT 0
#define DC8051_CFG_RAM_ACCESS_CTRL_ADDRESS_MASK 0x3fffull
#define DC8051_CFG_RAM_ACCESS_CTRL_ADDRESS_SMASK (DC8051_CFG_RAM_ACCESS_CTRL_ADDRESS_MASK << DC8051_CFG_RAM_ACCESS_CTRL_ADDRESS_SHIFT)

#define DC8051_CFG_RAM_ACCESS_CTRL_READ_ENA_SHIFT 16
#define DC8051_CFG_RAM_ACCESS_CTRL_READ_ENA_MASK 0x1ull
#define DC8051_CFG_RAM_ACCESS_CTRL_READ_ENA_SMASK (DC8051_CFG_RAM_ACCESS_CTRL_READ_ENA_MASK << DC8051_CFG_RAM_ACCESS_CTRL_READ_ENA_SHIFT)

#define DC8051_CFG_RAM_ACCESS_CTRL_WRITE_ENA_SHIFT 24
#define DC8051_CFG_RAM_ACCESS_CTRL_WRITE_ENA_MASK 0x1ull
#define DC8051_CFG_RAM_ACCESS_CTRL_WRITE_ENA_SMASK (DC8051_CFG_RAM_ACCESS_CTRL_WRITE_ENA_MASK << DC8051_CFG_RAM_ACCESS_CTRL_WRITE_ENA_SHIFT)


/* DC8051_CFG_RAM_ACCESS_STATUS */
#define DC8051_CFG_RAM_ACCESS_STATUS_AUTO_ADDRESS_SHIFT 0
#define DC8051_CFG_RAM_ACCESS_STATUS_AUTO_ADDRESS_MASK 0x3ffull
#define DC8051_CFG_RAM_ACCESS_STATUS_AUTO_ADDRESS_SMASK (DC8051_CFG_RAM_ACCESS_STATUS_AUTO_ADDRESS_MASK << DC8051_CFG_RAM_ACCESS_STATUS_AUTO_ADDRESS_SHIFT)

#define DC8051_CFG_RAM_ACCESS_STATUS_ACCESS_COMPLETED_SHIFT 16
#define DC8051_CFG_RAM_ACCESS_STATUS_ACCESS_COMPLETED_MASK 0x1ull
#define DC8051_CFG_RAM_ACCESS_STATUS_ACCESS_COMPLETED_SMASK (DC8051_CFG_RAM_ACCESS_STATUS_ACCESS_COMPLETED_MASK << DC8051_CFG_RAM_ACCESS_STATUS_ACCESS_COMPLETED_SHIFT)


/* DC8051_CFG_RST */
#define DC8051_CFG_RST_M8051W 0x01
#define DC8051_CFG_RST_CRAM   0x02
#define DC8051_CFG_RST_DRAM   0x04
#define DC8051_CFG_RST_IRAM   0x08
#define DC8051_CFG_RST_SFR    0x10

/* DC8051_CFG_RAM_ACCESS_SETUP */
#define DC8051_CFG_RAM_ACCESS_SETUP_RAM_SEL 0x1ull
#define DC8051_CFG_RAM_ACCESS_SETUP_AUTO_INCR_ADDR 0x100ull


/* DC8051_CFG_RAM_ACCESS_STATUS */
#define DC8051_CFG_RAM_ACCESS_STATUS_ACCESS_COPLETED 0x10000

/* DC8051_STS_CUR_STATE */
#define DC8051_STS_CUR_STATE_FIRMWARE_SHIFT 16
#define DC8051_STS_CUR_STATE_FIRMWARE_MASK  0xffull


/* Security block */
#define WFR_FW_CTRL	 0x20	/* FIXME: this is a CCE scratch register */
#define WFR_RSA_VAR_DATA 0x28	/* FIXME: this is a CCE scratch register */

/* VALIDATE_DISABLE 0 */
#define WFR_FW_CTRL_SHA_STALL_SHIFT 1
#define WFR_FW_CTRL_SHA_STALL_MASK  0x1ull
#define WFR_FW_CTRL_SHA_STALL_SMASK (WFR_FW_CTRL_SHA_STALL_MASK  << WFR_FW_CTRL_SHA_STALL_SHIFT)
#define WFR_FW_CTRL_8051_LOADED_SHIFT 2
#define WFR_FW_CTRL_8051_LOADED_MASK  0x1ull
#define WFR_FW_CTRL_8051_LOADED_SMASK (WFR_FW_CTRL_8051_LOADED_MASK << WFR_FW_CTRL_8051_LOADED_SHIFT)
#define WFR_FW_CTRL_RSA_VAR_SEL_SHIFT 3
#define WFR_FW_CTRL_RSA_VAR_SEL_MASK 0x3ull
#define WFR_FW_CTRL_RSA_VAR_SEL_SMASK (WFR_FW_CTRL_RSA_VAR_SEL_MASK << WFR_FW_CTRL_RSA_VAR_SEL_SHIFT)
#define WFR_FW_CTRL_RSA_VAR_ADDR_SHIFT 5
#define WFR_FW_CTRL_RSA_VAR_ADDR_MASK 0x1full
#define WFR_FW_CTRL_RSA_VAR_ADDR_SMASK (WFR_FW_CTRL_RSA_VAR_ADDR_MASK << WFR_FW_CTRL_RSA_VAR_ADDR_SHIFT)
#define WFR_FW_CTRL_RSA_GO_SHIFT 10
#define WFR_FW_CTRL_RSA_GO_MASK 0x1ull
#define WFR_FW_CTRL_RSA_GO_SMASK (WFR_FW_CTRL_RSA_GO_MASK << WFR_FW_CTRL_RSA_GO_SHIFT)


/* read and write hardware registers */
u64 read_csr(const struct qib_devdata *dd, u32 offset);
void write_csr(const struct qib_devdata *dd, u32 offset, u64 value);

int load_firmware(struct qib_devdata *dd);

#endif /* _WFR_H */

