#ifndef _WFR_H
#define _WFR_H
/*
 * Copyright (c) 2013 Intel Corporation.  All rights reserved.
 *
 * This software is available to you under a choice of one of two
 * licenses.  You may choose to be licensed under the terms of the GNU
 * General Public License (GPL) Version 2, available from the file
 * COPYING in the main directory of this source tree, or the
 * OpenIB.org BSD license below:
 *
 *     Redistribution and use in source and binary forms, with or
 *     without modification, are permitted provided that the following
 *     conditions are met:
 *
 *      - Redistributions of source code must retain the above
 *        copyright notice, this list of conditions and the following
 *        disclaimer.
 *
 *      - Redistributions in binary form must reproduce the above
 *        copyright notice, this list of conditions and the following
 *        disclaimer in the documentation and/or other materials
 *        provided with the distribution.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/*
 * This file contains all of the defines that is specific to the WFR chip
 */

/* sizes */
#define WFR_CCE_NUM_MSIX_VECTORS 256
#define WFR_CCE_NUM_INT_CSRS 12
#define WFR_CCE_NUM_INT_MAP_CSRS 96
#define WFR_NUM_INTERRUPT_SOURCES 768
#define WFR_RXE_NUM_CONTEXTS 160
#define WFR_RXE_PER_CONTEXT_SIZE 0x1000	/* 4k */
#define WFR_RXE_NUM_RECEIVE_ARRAY_ENTRIES (64 * 1024)
#define WFR_RXE_NUM_TID_FLOWS 32
#define WFR_RXE_NUM_DATA_VL 8
#define WFR_TXE_NUM_CONTEXTS 160
#define WFR_TXE_NUM_SDMA_ENGINES 16
#define WFR_TXE_NUM_CONTEXT_SET (WFR_TXE_NUM_CONTEXTS/8)
#define WFR_TXE_NUM_PRIORITIES 16
#define WFR_TXE_NUM_32_BIT_COUNTER 7
#define WFR_TXE_NUM_64_BIT_COUNTER 30
#define WFR_TXE_NUM_DATA_VL 8
#define WFR_TXE_PIO_SIZE (32 * 0x100000)	/* 32 MB */
#define WFR_PIO_BLOCK_SIZE 64			/* bytes */
#define WFR_PIO_CMASK 0x7ff	/* counter mask for free and fill counters */
#define WFR_MAX_EAGER_ENTRIES    2048	/* max receive eager entries */
#define WFR_MAX_TID_PAIR_ENTRIES 1024	/* max receive expected pairs */

#define USE_GENERATED_WFR_HEADERS 1
#ifdef USE_GENERATED_WFR_HEADERS

#include "include/wfr/wfr_addrmap.h"
#include "include/wfr/wfr_cce_defs.h"
#include "include/wfr/wfr_rxe_defs.h"
#include "include/wfr/wfr_txe_defs.h"
#include "include/wfr/wfr_misc_defs.h"
#include "include/wfr/wfr_asic_defs.h"
#include "include/wfr/dc_top_csrs_defs.h"
#include "include/wfr/dc_8051_csrs_defs.h"
#include "include/wfr/dcc_csrs_defs.h"
#include "include/wfr/dc_lcb_csrs_defs.h"

/* not defined in wfr_core.h */
#define WFR_RXE_PER_CONTEXT_USER_OFFSET 0x0300000
#define WFR_RXE_PER_CONTEXT_USER   (WFR_RXE + WFR_RXE_PER_CONTEXT_USER_OFFSET)

#define WFR_TXE_PIO_SEND_OFFSET 0x0800000
#define WFR_TXE_PIO_SEND (WFR_TXE + WFR_TXE_PIO_SEND_OFFSET)

#else /* USE_GENERATED_WFR_HEADERS */


/* block offsets */
#define WFR_CCE_OFFSET 0x0000000
#define WFR_DC				    0x0600000
#define WFR_RXE_OFFSET			    0x1000000
#define   WFR_RXE_PER_CONTEXT_KERNEL_OFFSET 0x0100000
#define   WFR_RXE_RECEIVE_ARRAY_OFFSET      0x0200000
#define   WFR_RXE_PER_CONTEXT_USER_OFFSET   0x0300000
#define WFR_TXE_OFFSET				0x1800000
#define   WFR_TXE_PER_CONTEXT_KERNEL_OFFSET	0x0100000
#define   WFR_TXE_PER_SDMA_ENGINE_KERNEL_OFFSET	0x0200000
#define   WFR_TXE_PIO_SEND_OFFSET		0x0800000
#define WFR_TXE_PIO_SEND (WFR_TXE_OFFSET + WFR_TXE_PIO_SEND_OFFSET)

/* registers */
#define WFR_CCE_REVISION	(WFR_CCE_OFFSET + 0x000000)
#define WFR_CCE_INT_STATUS	(WFR_CCE_OFFSET + 0x000100)
#define WFR_CCE_INT_MASK	(WFR_CCE_OFFSET + 0x000200)
#define WFR_CCE_INT_CLEAR	(WFR_CCE_OFFSET + 0x000300)
#define WFR_CCE_INT_FORCE	(WFR_CCE_OFFSET + 0x000400)
#define WFR_CCE_INT_MAP		(WFR_CCE_OFFSET + 0x110500)


#define WFR_RCV_CTRL	   	   (WFR_RXE_OFFSET + 0x000000)
#define WFR_RCV_CTRL_RCV_PORT_ENABLE_SHIFT 0
#define WFR_RCV_CTRL_RCV_PORT_ENABLE_MASK 0x1ull
#define WFR_RCV_CTRL_RCV_PORT_ENABLE_SMASK (WFR_RCV_CTRL_RCV_PORT_ENABLE_MASK  << WFR_RCV_CTRL_RCV_PORT_ENABLE_SHIFT)

#define WFR_RCV_CONTEXTS	   (WFR_RXE_OFFSET + 0x000010)
#define WFR_RCV_PARTITION_KEY	   (WFR_RXE_OFFSET + 0x000200)
#define WFR_RXE_PER_CONTEXT_KERNEL (WFR_RXE_OFFSET + WFR_RXE_PER_CONTEXT_KERNEL_OFFSET)
#define   WFR_RCV_CTXT_CTRL	   (WFR_RXE_PER_CONTEXT_KERNEL + 0x0000)
#define   WFR_RCV_CTXT_STATUS	   (WFR_RXE_PER_CONTEXT_KERNEL + 0x0008)
#define   WFR_RCV_EGR_CTRL	   (WFR_RXE_PER_CONTEXT_KERNEL + 0x0010)
#define   WFR_RCV_TID_CTRL	   (WFR_RXE_PER_CONTEXT_KERNEL + 0x0018)
#define   WFR_RCV_KEY_CTRL	   (WFR_RXE_PER_CONTEXT_KERNEL + 0x0020)
#define   WFR_RCV_HDR_ADDR	   (WFR_RXE_PER_CONTEXT_KERNEL + 0x0028)
#define   WFR_RCV_HDR_CNT	   (WFR_RXE_PER_CONTEXT_KERNEL + 0x0030)
#define   WFR_RCV_HDR_ENT_SIZE	   (WFR_RXE_PER_CONTEXT_KERNEL + 0x0038)
#define   WFR_RCV_HDR_SIZE	   (WFR_RXE_PER_CONTEXT_KERNEL + 0x0040)
#define   WFR_RCV_HDR_TAIL_ADDR	   (WFR_RXE_PER_CONTEXT_KERNEL + 0x0048)
#define   WFR_RCV_AVAIL_TIME_OUT   (WFR_RXE_PER_CONTEXT_KERNEL + 0x0050)
#define   WFR_RCV_HDR_OVFL_CNT     (WFR_RXE_PER_CONTEXT_KERNEL + 0x0058)
#define   WFR_RCV_CTXT_ERR_STATUS  (WFR_RXE_PER_CONTEXT_KERNEL + 0x0080)
#define   WFR_RCV_CTXT_ERR_MASK    (WFR_RXE_PER_CONTEXT_KERNEL + 0x0088)
#define   WFR_RCV_CTXT_ERR_CLEAR   (WFR_RXE_PER_CONTEXT_KERNEL + 0x0090)
#define   WFR_RCV_CTXT_ERR_FORCE   (WFR_RXE_PER_CONTEXT_KERNEL + 0x0098)
#define WFR_RCV_ARRAY (WFR_RXE_OFFSET + WFR_RXE_RECEIVE_ARRAY_OFFSET)
#define WFR_RXE_PER_CONTEXT_USER   (WFR_RXE_OFFSET + WFR_RXE_PER_CONTEXT_USER_OFFSET)
#define   WFR_RCV_HDR_TAIL	   (WFR_RXE_PER_CONTEXT_USER + 0x000)
#define   WFR_RCV_HDR_HEAD	   (WFR_RXE_PER_CONTEXT_USER + 0x008)
#define     WFR_RCV_HDR_HEAD_COUNTER_SHIFT 32
#define     WFR_RCV_HDR_HEAD_COUNTER_MASK 0xffffull
#define     WFR_RCV_HDR_HEAD_COUNTER_SMASK (WFR_RCV_HDR_HEAD_COUNTER_MASK << WFR_RCV_HDR_HEAD_COUNTER_SHIFT)
#define     WFR_RCV_HDR_HEAD_HEAD_SHIFT 0
#define     WFR_RCV_HDR_HEAD_HEAD_MASK 0x1ffffffull
#define     WFR_RCV_HDR_HEAD_HEAD_SMASK (WFR_RCV_HDR_HEAD_HEAD_MASK << WFR_RCV_HDR_HEAD_HEAD_SHIFT)

#define   WFR_RCV_EGR_INDEX_TAIL   (WFR_RXE_PER_CONTEXT_USER + 0x010)
#define   WFR_RCV_EGR_INDEX_HEAD   (WFR_RXE_PER_CONTEXT_USER + 0x018)
#define     WFR_RCV_EGR_INDEX_HEAD_HEAD_SHIFT 0
#define     WFR_RCV_EGR_INDEX_HEAD_HEAD_MASK 0x7ffull
#define     WFR_RCV_EGR_INDEX_HEAD_HEAD_SMASK (WFR_RCV_EGR_INDEX_HEAD_HEAD_MASK << WFR_RCV_EGR_INDEX_HEAD_HEAD_SHIFT)
#define   WFR_RCV_EGR_OFFSET_TAIL  (WFR_RXE_PER_CONTEXT_USER + 0x020)
#define   WFR_RCV_TID_FLOW_TABLE   (WFR_RXE_PER_CONTEXT_USER + 0x800)

#define WFR_SEND_CTRL		(WFR_TXE_OFFSET + 0x000000)
#define   WFR_SEND_CTRL_VLARBITER_ENABLE_ENABLE_SMASK	(0x2ull)
#define   WFR_SEND_CTRL_SEND_ENABLE_SMASK		(0x1ull)

#define WFR_SEND_CONTEXTS	(WFR_TXE_OFFSET + 0x000010)
#define WFR_SEND_DMA_ENGINES	(WFR_TXE_OFFSET + 0x000018)
#define WFR_SEND_PIO_MEM_SIZE	(WFR_TXE_OFFSET + 0x000020)

#define WFR_TXE_PER_CONTEXT_KERNEL (WFR_TXE_OFFSET + WFR_TXE_PER_CONTEXT_KERNEL_OFFSET)
#define WFR_SEND_CTXT_CTRL (WFR_TXE_PER_CONTEXT_KERNEL + 0x0000)
#define WFR_SEND_CTXT_CTRL_CTXT_ENABLE_SHIFT 0
#define WFR_SEND_CTXT_CTRL_CTXT_ENABLE_MASK 0x1ull
#define WFR_SEND_CTXT_CTRL_CTXT_ENABLE_SMASK (WFR_SEND_CTXT_CTRL_CTXT_ENABLE_MASK << WFR_SEND_CTXT_CTRL_CTXT_ENABLE_SHIFT)
#define WFR_SEND_CTXT_CTRL_CTXT_BASE_SHIFT 32
#define WFR_SEND_CTXT_CTRL_CTXT_BASE_MASK 0x3fffull
#define WFR_SEND_CTXT_CTRL_CTXT_BASE_SMASK (WFR_SEND_CTXT_CTRL_CTXT_BASE_MASK << WFR_SEND_CTXT_CTRL_CTXT_BASE_SHIFT)
#define WFR_SEND_CTXT_CTRL_CTXT_DEPTH_SHIFT 48
#define WFR_SEND_CTXT_CTRL_CTXT_DEPTH_MASK 0x7ffull
#define WFR_SEND_CTXT_CTRL_CTXT_DEPTH_SMASK (WFR_SEND_CTXT_CTRL_CTXT_DEPTH_MASK << WFR_SEND_CTXT_CTRL_CTXT_DEPTH_SHIFT)

#define WFR_SEND_CTXT_CREDIT_RETURN_ADDR (WFR_TXE_PER_CONTEXT_KERNEL + 0x0020)
#define WFR_SEND_CTXT_CREDIT_RETURN_ADDR_ADDRESS_SHIFT 6
#define WFR_SEND_CTXT_CREDIT_RETURN_ADDR_ADDRESS_MASK 0x3ffffffffffull
#define WFR_SEND_CTXT_CREDIT_RETURN_ADDR_ADDRESS_SMASK (WFR_SEND_CTXT_CREDIT_RETURN_ADDR_ADDRESS_MASK << WFR_SEND_CTXT_CREDIT_RETURN_ADDR_ADDRESS_SHIFT)

#define WFR_SEND_CTXT_CREDIT_FORCE (WFR_TXE_PER_CONTEXT_KERNEL + 0x0028)
#define   WFR_SEND_CTXT_CREDIT_FORCE_FORCE_RETURN_SMASK 0x1ull

/* register accessors */
/* CCE Revision field accessors */
#define WFR_CCE_REVISION_CHIP_REV_MINOR_SHIFT	0
#define WFR_CCE_REVISION_CHIP_REV_MINOR_MASK	0xffull
#define WFR_CCE_REVISION_CHIP_REV_MAJOR_SHIFT	8
#define WFR_CCE_REVISION_CHIP_REV_MAJOR_MASK	0xffull
#define WFR_CCE_REVISION_BOARDID_SHIFT	32
#define WFR_CCE_REVISION_BOARDID_MASK	0xffull

/* WFR_RCV_ARRAY field accessors */
#define WFR_RCV_ARRAY_RT_ADDR_SHIFT 0
#define WFR_RCV_ARRAY_RT_ADDR_MASK 0xfffffffffull
#define WFR_RCV_ARRAY_RT_ADDR_SMASK (WFR_RCV_ARRAY_RT_ADDR_MASK << WFR_RCV_ARRAY_RT_ADDR_SHIFT)
#define WFR_RCV_ARRAY_RT_BUF_SIZE_SHIFT 36
#define WFR_RCV_ARRAY_RT_BUF_SIZE_MASK 0xfull
#define WFR_RCV_ARRAY_RT_BUF_SIZE_SMASK (WFR_RCV_ARRAY_RT_BUF_SIZE_MASK << WFR_RCV_ARRAY_RT_BUF_SIZE_SHIFT)
#define WFR_RCV_ARRAY_RT_WRITE_ENABLE_SHIFT 63
#define WFR_RCV_ARRAY_RT_WRITE_ENABLE_MASK 0x1ull
#define WFR_RCV_ARRAY_RT_WRITE_ENABLE_SMASK (WFR_RCV_ARRAY_RT_WRITE_ENABLE_MASK << WFR_RCV_ARRAY_RT_WRITE_ENABLE_SHIFT)

/* WFR_RCV_PARTITION_KEY field accessors */
#define WFR_RCV_PARTITION_KEY_PARTITION_KEY_A_SHIFT 0
#define WFR_RCV_PARTITION_KEY_PARTITION_KEY_A_MASK 0xffffull
#define WFR_RCV_PARTITION_KEY_PARTITION_KEY_A_SMASK (WFR_RCV_PARTITION_KEY_PARTITION_KEY_A_MASK << WFR_RCV_PARTITION_KEY_PARTITION_KEY_A_SHIFT)

/* RCV HDR CNT field accessors */
#define WFR_RCV_HDR_CNT_CNT_SHIFT 0
#define WFR_RCV_HDR_CNT_CNT_MASK 0x1ffffull

/* RCV HDR ENT SIZE field accessors */
#define WFR_RCV_HDR_ENT_SIZE_ENT_SIZE_SHIFT 0
#define WFR_RCV_HDR_ENT_SIZE_ENT_SIZE_MASK 0x3ff

/* RCV HDR SIZE field accessors */
#define WFR_RCV_HDR_SIZE_HDR_SIZE_SHIFT 0
#define WFR_RCV_HDR_SIZE_HDR_SIZE_MASK 0xf

/* RCV_CTXT_CTRL field accessors */
#define WFR_RCV_CTXT_CTRL_ENABLE_SHIFT 0
#define WFR_RCV_CTXT_CTRL_ENABLE_MASK 0x1ull
#define WFR_RCV_CTXT_CTRL_ENABLE_SMASK (WFR_RCV_CTXT_CTRL_ENABLE_MASK << WFR_RCV_CTXT_CTRL_ENABLE_SHIFT)

#define WFR_RCV_CTXT_CTRL_ONE_PACKET_PER_EGR_BUFFER_SHIFT 1
#define WFR_RCV_CTXT_CTRL_ONE_PACKET_PER_EGR_BUFFER_MASK 0x1ull
#define WFR_RCV_CTXT_CTRL_ONE_PACKET_PER_EGR_BUFFER_SMASK (WFR_RCV_CTXT_CTRL_ONE_PACKET_PER_EGR_BUFFER_MASK << WFR_RCV_CTXT_CTRL_ONE_PACKET_PER_EGR_BUFFER_SHIFT)

#define WFR_RCV_CTXT_CTRL_DONT_DROP_EGR_FULL_SHIFT 2
#define WFR_RCV_CTXT_CTRL_DONT_DROP_EGR_FULL_MASK 0x1ull
#define WFR_RCV_CTXT_CTRL_DONT_DROP_EGR_FULL_SMASK (WFR_RCV_CTXT_CTRL_DONT_DROP_EGR_FULL_MASK << WFR_RCV_CTXT_CTRL_DONT_DROP_EGR_FULL_SHIFT)

#define WFR_RCV_CTXT_CTRL_DONT_DROP_RHQ_FULL_SHIFT 3
#define WFR_RCV_CTXT_CTRL_DONT_DROP_RHQ_FULL_MASK 0x1ull
#define WFR_RCV_CTXT_CTRL_DONT_DROP_RHQ_FULL_SMASK (WFR_RCV_CTXT_CTRL_DONT_DROP_RHQ_FULL_MASK << WFR_RCV_CTXT_CTRL_DONT_DROP_RHQ_FULL_SHIFT)

#define WFR_RCV_CTXT_CTRL_TID_FLOW_ENABLE_SHIFT 4
#define WFR_RCV_CTXT_CTRL_TID_FLOW_ENABLE_MASK 0x1ull
#define WFR_RCV_CTXT_CTRL_TID_FLOW_ENABLE_SMASK (WFR_RCV_CTXT_CTRL_TID_FLOW_ENABLE_MASK << WFR_RCV_CTXT_CTRL_TID_FLOW_ENABLE_SHIFT)

#define WFR_RCV_CTXT_CTRL_INTR_AVAIL_SHIFT 5
#define WFR_RCV_CTXT_CTRL_INTR_AVAIL_MASK 0x1ull
#define WFR_RCV_CTXT_CTRL_INTR_AVAIL_SMASK (WFR_RCV_CTXT_CTRL_INTR_AVAIL_MASK << WFR_RCV_CTXT_CTRL_INTR_AVAIL_SHIFT)

#define WFR_RCV_CTXT_CTRL_TAIL_UPD_SHIFT 6
#define WFR_RCV_CTXT_CTRL_TAIL_UPD_MASK 0x1ull
#define WFR_RCV_CTXT_CTRL_TAIL_UPD_SMASK (WFR_RCV_CTXT_CTRL_TAIL_UPD_MASK << WFR_RCV_CTXT_CTRL_TAIL_UPD_SHIFT)

#define WFR_RCV_CTXT_CTRL_REDIRECT_SHIFT 7
#define WFR_RCV_CTXT_CTRL_REDIRECT_MASK 0x1ull
#define WFR_RCV_CTXT_CTRL_REDIRECT_SMASK (WFR_RCV_CTXT_CTRL_REDIRECT_MASK << WFR_RCV_CTXT_CTRL_REDIRECT_SHIFT)

#define WFR_RCV_CTXT_CTRL_EGR_BUF_SIZE_SHIFT 8
#define WFR_RCV_CTXT_CTRL_EGR_BUF_SIZE_MASK 0xfull
#define WFR_RCV_CTXT_CTRL_EGR_BUF_SIZE_SMASK (WFR_RCV_CTXT_CTRL_EGR_BUF_SIZE_MASK << WFR_RCV_CTXT_CTRL_EGR_BUF_SIZE_SHIFT)

/* TODO later
#define WFR_RCV_CTXT_CTRL_TH_RCV_HDR_TAIL_WRITE
#define WFR_RCV_CTXT_CTRL_TH_TID_PAYLOAD_WRITES
#define WFR_RCV_CTXT_CTRL_TH_EAGER_PAYLOAD_WRITES
#define WFR_RCV_CTXT_CTRL_TH_HDR_QUEUE_WRITES
*/

/* WFR_RCV_EGR_CTRL fields */
#define WFR_RCV_EGR_CTRL_EGR_BASE_INDEX_SHIFT 0
#define WFR_RCV_EGR_CTRL_EGR_BASE_INDEX_MASK 0xffffull
#define WFR_RCV_EGR_CTRL_EGR_BASE_INDEX_SMASK (WFR_RCV_EGR_CTRL_EGR_BASE_INDEX_MASK << WFR_RCV_EGR_CTRL_EGR_BASE_INDEX_SHIFT)

#define WFR_RCV_EGR_CTRL_EGR_CNT_SHIFT 32
#define WFR_RCV_EGR_CTRL_EGR_CNT_MASK 0xfffull
#define WFR_RCV_EGR_CTRL_EGR_CNT_SMASK (WFR_RCV_EGR_CTRL_EGR_CNT_MASK << WFR_RCV_EGR_CTRL_EGR_CNT_SHIFT)

/* WFR_RCV_TID_CTRL fields */
#define WFR_RCV_TID_CTRL_TID_BASE_INDEX_SHIFT 0
#define WFR_RCV_TID_CTRL_TID_BASE_INDEX_MASK 0xffffull
#define WFR_RCV_TID_CTRL_TID_BASE_INDEX_SMASK (WFR_RCV_TID_CTRL_TID_BASE_INDEX_MASK << WFR_RCV_TID_CTRL_TID_BASE_INDEX_SHIFT)

#define WFR_RCV_TID_CTRL_TID_PAIR_CNT_SHIFT 32
#define WFR_RCV_TID_CTRL_TID_PAIR_CNT_MASK 0xfffull
#define WFR_RCV_TID_CTRL_TID_PAIR_CNT_SMASK (WFR_RCV_TID_CTRL_TID_PAIR_CNT_MASK << WFR_RCV_TID_CTRL_TID_PAIR_CNT_SHIFT)


/*
 * Duncan Creek defines
 */
#define DC_DC8051_OFFSET (WFR_DC + 0x2000)

#define DC_DC8051_CFG_RAM_ACCESS_SETUP   (DC_DC8051_OFFSET + 0x00000)
#define DC_DC8051_CFG_RAM_ACCESS_WR_DATA (DC_DC8051_OFFSET + 0x00008)
#define DC_DC8051_CFG_RAM_ACCESS_RD_DATA (DC_DC8051_OFFSET + 0x00010)
#define DC_DC8051_CFG_HOST_CMD_0         (DC_DC8051_OFFSET + 0x00018)
#define DC_DC8051_CFG_HOST_CMD_1         (DC_DC8051_OFFSET + 0x00020)
#define DC_DC8051_CFG_RAM_ACCESS_CTRL    (DC_DC8051_OFFSET + 0x00028)
#define DC_DC8051_CFG_RAM_ACCESS_STATUS  (DC_DC8051_OFFSET + 0x00030)
/* 07 0x00038 */
/* 08 0x00040 */
/* 09 0x00048 */
#define DC_DC8051_CFG_LOCAL_GUID         (DC_DC8051_OFFSET + 0x00050)
#define DC_DC8051_STS_REMOTE_GUID        (DC_DC8051_OFFSET + 0x00058)
#define DC_DC8051_STS_CUR_STATE          (DC_DC8051_OFFSET + 0x00060)
#define DC_DC8051_CFG_RST                (DC_DC8051_OFFSET + 0x00068)
#define DC_DC8051_CFG_MODE               (DC_DC8051_OFFSET + 0x00070)
#define DC_DC8051_STS_NODE_TYPE          (DC_DC8051_OFFSET + 0x00078)
#define DC_DC8051_STS_LOCAL_FM_SECURITY  (DC_DC8051_OFFSET + 0x00080)
#define DC_DC8051_STS_REMOTE_FM_SECURITY (DC_DC8051_OFFSET + 0x00088)
/* 18 0x00090 */
/* 19 0x00098 */
#define DC_DC8051_DBG_SFR_MAP_1          (DC_DC8051_OFFSET + 0x000a0)
#define DC_DC8051_DBG_SFR_MAP_2          (DC_DC8051_OFFSET + 0x000a8)
#define DC_DC8051_DBG_HEART_BEAT         (DC_DC8051_OFFSET + 0x000b0)
#define DC_DC8051_DBG_CODE_TRACING_SETUP (DC_DC8051_OFFSET + 0x000b8)
#define DC_DC8051_DBG_CODE_TRACING_ADDR  (DC_DC8051_OFFSET + 0x000c0)
#define DC_DC8051_DBG_ERRINJ_ECC         (DC_DC8051_OFFSET + 0x000c8)
#define DC_DC8051_DBG_ERR_INFO_CRAM      (DC_DC8051_OFFSET + 0x000d0)
#define DC_DC8051_DBG_ERR_INFO_DRAM      (DC_DC8051_OFFSET + 0x000d8)
#define DC_DC8051_DBG_ERR_INFO_IRAM      (DC_DC8051_OFFSET + 0x000e0)
#define DC_DC8051_DBG_ERR_INFO_CNT_CRAM  (DC_DC8051_OFFSET + 0x000e8)
#define DC_DC8051_DBG_ERR_INFO_CNT_DRAM  (DC_DC8051_OFFSET + 0x000f0)
#define DC_DC8051_DBG_ERR_INFO_CNT_IRAM  (DC_DC8051_OFFSET + 0x000f8)
// 32 0x00100
// 33 0x00108
// 34 0x00110
// 35 0x00118
// 36 0x00120
// 37 0x00128
// 38 0x00130
// 39 0x00138
#define DC_DC8051_ERR_FLG                (DC_DC8051_OFFSET + 0x00140)
#define DC_DC8051_ERR_CLR                (DC_DC8051_OFFSET + 0x00148)
#define DC_DC8051_ERR_EN                 (DC_DC8051_OFFSET + 0x00150)
#define DC_DC8051_ERR_FIRST_FLG          (DC_DC8051_OFFSET + 0x00158)
// 44 0x00160
// 45 0x00168
// 46 0x00170


/* DC Register fields */

/* DC_DC8051_CFG_RAM_ACCESS_SETUP */
#define DC_DC8051_CFG_RAM_ACCESS_SETUP_RAM_SEL_SHIFT 0
#define DC_DC8051_CFG_RAM_ACCESS_SETUP_RAM_SEL_MASK 0x1ull
#define DC_DC8051_CFG_RAM_ACCESS_SETUP_RAM_SEL_SMASK  (DC_DC8051_CFG_RAM_ACCESS_SETUP_RAM_SEL_MASK << DC_DC8051_CFG_RAM_ACCESS_SETUP_RAM_SEL_SHIFT)

#define DC_DC8051_CFG_RAM_ACCESS_SETUP_AUTO_INCR_ADDR_SHIFT 8
#define DC_DC8051_CFG_RAM_ACCESS_SETUP_AUTO_INCR_ADDR_MASK 0x1ull
#define DC_DC8051_CFG_RAM_ACCESS_SETUP_AUTO_INCR_ADDR_SMASK (DC_DC8051_CFG_RAM_ACCESS_SETUP_AUTO_INCR_ADDR_MASK << DC_DC8051_CFG_RAM_ACCESS_SETUP_AUTO_INCR_ADDR_SHIFT)

/* DC_DC8051_CFG_RAM_ACCESS_CTRL */
#define DC_DC8051_CFG_RAM_ACCESS_CTRL_ADDRESS_SHIFT 0
#define DC_DC8051_CFG_RAM_ACCESS_CTRL_ADDRESS_MASK 0x3fffull
#define DC_DC8051_CFG_RAM_ACCESS_CTRL_ADDRESS_SMASK (DC_DC8051_CFG_RAM_ACCESS_CTRL_ADDRESS_MASK << DC_DC8051_CFG_RAM_ACCESS_CTRL_ADDRESS_SHIFT)

#define DC_DC8051_CFG_RAM_ACCESS_CTRL_READ_ENA_SHIFT 16
#define DC_DC8051_CFG_RAM_ACCESS_CTRL_READ_ENA_MASK 0x1ull
#define DC_DC8051_CFG_RAM_ACCESS_CTRL_READ_ENA_SMASK (DC_DC8051_CFG_RAM_ACCESS_CTRL_READ_ENA_MASK << DC_DC8051_CFG_RAM_ACCESS_CTRL_READ_ENA_SHIFT)

#define DC_DC8051_CFG_RAM_ACCESS_CTRL_WRITE_ENA_SHIFT 24
#define DC_DC8051_CFG_RAM_ACCESS_CTRL_WRITE_ENA_MASK 0x1ull
#define DC_DC8051_CFG_RAM_ACCESS_CTRL_WRITE_ENA_SMASK (DC_DC8051_CFG_RAM_ACCESS_CTRL_WRITE_ENA_MASK << DC_DC8051_CFG_RAM_ACCESS_CTRL_WRITE_ENA_SHIFT)


/* DC_DC8051_CFG_RAM_ACCESS_STATUS */
#define DC_DC8051_CFG_RAM_ACCESS_STATUS_AUTO_ADDRESS_SHIFT 0
#define DC_DC8051_CFG_RAM_ACCESS_STATUS_AUTO_ADDRESS_MASK 0x3ffull
#define DC_DC8051_CFG_RAM_ACCESS_STATUS_AUTO_ADDRESS_SMASK (DC_DC8051_CFG_RAM_ACCESS_STATUS_AUTO_ADDRESS_MASK << DC_DC8051_CFG_RAM_ACCESS_STATUS_AUTO_ADDRESS_SHIFT)

#define DC_DC8051_CFG_RAM_ACCESS_STATUS_ACCESS_COMPLETED_SHIFT 16
#define DC_DC8051_CFG_RAM_ACCESS_STATUS_ACCESS_COMPLETED_MASK 0x1ull
#define DC_DC8051_CFG_RAM_ACCESS_STATUS_ACCESS_COMPLETED_SMASK (DC_DC8051_CFG_RAM_ACCESS_STATUS_ACCESS_COMPLETED_MASK << DC_DC8051_CFG_RAM_ACCESS_STATUS_ACCESS_COMPLETED_SHIFT)


/* DC_DC8051_CFG_RST */
#define DC_DC8051_CFG_RST_M8051W_SMASK 0x01
#define DC_DC8051_CFG_RST_CRAM_SMASK   0x02
#define DC_DC8051_CFG_RST_DRAM_SMASK   0x04
#define DC_DC8051_CFG_RST_IRAM_SMASK   0x08
#define DC_DC8051_CFG_RST_SFR_SMASK    0x10

/* DC_DC8051_CFG_RAM_ACCESS_SETUP */
#define DC_DC8051_CFG_RAM_ACCESS_SETUP_RAM_SEL 0x1ull
#define DC_DC8051_CFG_RAM_ACCESS_SETUP_AUTO_INCR_ADDR 0x100ull


/* DC_DC8051_CFG_RAM_ACCESS_STATUS */
#define DC_DC8051_CFG_RAM_ACCESS_STATUS_ACCESS_COPLETED 0x10000

/* DC_DC8051_STS_CUR_STATE */
#define DC_DC8051_STS_CUR_STATE_FIRMWARE_SHIFT 16
#define DC_DC8051_STS_CUR_STATE_FIRMWARE_MASK  0xffull

#endif /* USE_GENERATED_WFR_HEADERS */

/* PBC flags */
#define WFR_PBC_INTR		(1ull << 31)
#define WFR_PBC_DC_INFO		(1ull << 30)
#define WFR_PBC_TEST_EBP	(1ull << 29)
#define WFR_PBC_PACKET_BYPASS	(1ull << 28)
#define WFR_PBC_CREDIT_RETURN	(1ull << 25)
#define WFR_PBC_INSERT_BYPASS_ICRC (1ull << 24)
#define WFR_PBC_TEST_BAD_ICRC	(1ull << 23)
#define WFR_PBC_FECN		(1ull << 22)

/* PBC fields */
#define WFR_PBC_STATIC_RATE_CONTROL_COUNT_SHIFT 32
#define WFR_PBC_STATIC_RATE_CONTROL_COUNT_MASK 0xffffull
#define WFR_PBC_STATIC_RATE_CONTROL_COUNT_SMASK (WFR_PBC_STATIC_RATE_CONTROL_COUNT_MASK << WFR_PBC_STATIC_RATE_CONTROL_COUNT_SHIFT)

#define WFR_PBC_INSERT_HCRC_SHIFT 26
#define WFR_PBC_INSERT_HCRC_MASK 0x3ull
#define WFR_PBC_INSERT_HCRC_SMASK (WFR_PBC_INSERT_HCRC_MASK << WFR_PBC_INSERT_HCRC_SHIFT)

#define WFR_PBC_VL_SHIFT 12
#define WFR_PBC_VL_MASK 0xfull
#define WFR_PBC_VL_SMASK (WFR_PBC_VL_MASK << WFR_PBC_VL_SHIFT)

#define WFR_PBC_LENGTH_DWS_SHIFT 0
#define WFR_PBC_LENGTH_DWS_MASK 0xfffull
#define WFR_PBC_LENGTH_DWS_SMASK (WFR_PBC_LENGTH_DWS_MASK << WFR_PBC_LENGTH_DWS_SHIFT)

/* Credit Return Fields */
#define WFR_CR_COUNTER_SHIFT 0
#define WFR_CR_COUNTER_MASK 0x7ffull
#define WFR_CR_COUNTER_SMASK (WFR_CR_COUNTER_MASK << WFR_CR_COUNTER_SHIFT)

#define WFR_CR_STATUS_SHIFT 11
#define WFR_CR_STATUS_MASK 0x1ull
#define WFR_CR_STATUS_SMASK (WFR_CR_STATUS_MASK << WFR_CR_STATUS_SHIFT)

#define WFR_CR_CREDIT_RETURN_DUE_TO_PBC_SHIFT 12
#define WFR_CR_CREDIT_RETURN_DUE_TO_PBC_MASK 0x1ull
#define WFR_CR_CREDIT_RETURN_DUE_TO_PBC_SMASK (WFR_CR_CREDIT_RETURN_DUE_TO_PBC_MASK << WFR_CR_CREDIT_RETURN_DUE_TO_PBC_SHIFT)

#define WFR_CR_CREDIT_RETURN_DUE_TO_THRESHOLD_SHIFT 13
#define WFR_CR_CREDIT_RETURN_DUE_TO_THRESHOLD_MASK 0x1ull
#define WFR_CR_CREDIT_RETURN_DUE_TO_THRESHOLD_SMASK (WFR_CR_CREDIT_RETURN_DUE_TO_THRESHOLD_MASK << WFR_CR_CREDIT_RETURN_DUE_TO_THRESHOLD_SHIFT)

#define WFR_CR_CREDIT_RETURN_DUE_TO_ERR_SHIFT 14
#define WFR_CR_CREDIT_RETURN_DUE_TO_ERR_MASK 0x1ull
#define WFR_CR_CREDIT_RETURN_DUE_TO_ERR_SMASK (WFR_CR_CREDIT_RETURN_DUE_TO_ERR_MASK << WFR_CR_CREDIT_RETURN_DUE_TO_ERR_SHIFT)

#define WFR_CR_CREDIT_RETURN_DUE_TO_FORCE_SHIFT 15
#define WFR_CR_CREDIT_RETURN_DUE_TO_FORCE_MASK 0x1ull
#define WFR_CR_CREDIT_RETURN_DUE_TO_FORCE_SMASK (WFR_CR_CREDIT_RETURN_DUE_TO_FORCE_MASK << WFR_CR_CREDIT_RETURN_DUE_TO_FORCE_SHIFT)

/* interrupt source numbers */
#define WFR_IS_GENERAL_ERR_START	  0
#define WFR_IS_SDMAENG_ERR_START	 16
#define WFR_IS_SENDCTXT_ERR_START	 32
#define WFR_IS_SDMA_START	 	192 /* includes SDmaProgress,SDmaIdle */
#define WFR_IS_VARIOUS_START		240
#define WFR_IS_DC_START			248
#define WFR_IS_RCVAVAIL_START		256
#define WFR_IS_RCVURGENT_START		416
#define WFR_IS_SENDCREDIT_START		576
#define WFR_IS_RESERVED_START		736
#define WFR_IS_MAX_SOURCES		768

/* derived interrupt source values */
#define WFR_IS_GENERAL_ERR_END		WFR_IS_SDMAENG_ERR_START
#define WFR_IS_SDMAENG_ERR_END		WFR_IS_SENDCTXT_ERR_START
#define WFR_IS_SENDCTXT_ERR_END		WFR_IS_SDMA_START
#define WFR_IS_SDMA_END			WFR_IS_VARIOUS_START
#define WFR_IS_VARIOUS_END		WFR_IS_DC_START
#define WFR_IS_DC_END			WFR_IS_RCVAVAIL_START
#define WFR_IS_RCVAVAIL_END		WFR_IS_RCVURGENT_START
#define WFR_IS_RCVURGENT_END		WFR_IS_SENDCREDIT_START
#define WFR_IS_SENDCREDIT_END		WFR_IS_RESERVED_START
#define WFR_IS_RESERVED_END		WFR_IS_MAX_SOURCES

/* DCC_CFG_PORT_CONFIG logical link states */
#define WFR_LSTATE_DOWN    0x1
#define WFR_LSTATE_INIT    0x2
#define WFR_LSTATE_ARMED   0x3
#define WFR_LSTATE_ACTIVE  0x4

/* DC8051_STS_CUR_STATE port values (physical link states) */
#define WFR_PLS_DISABLED			   0x30
#define WFR_PLS_OFFLINE				   0x90
#define WFR_PLS_OFFLINE_QUIET			   0x90
#define WFR_PLS_OFFLINE_PLANNED_DOWN_INFORM	   0x91
#define WFR_PLS_OFFLINE_READY_TO_QUIET_LT	   0x92
#define WFR_PLS_OFFLINE_REPORT_FAILURE		   0x93
#define WFR_PLS_OFFLINE_READY_TO_QUIET_BCC	   0x94
#define WFR_PLS_POLLING				   0x20
#define WFR_PLS_POLLING_QUIET			   0x20
#define WFR_PLS_POLLING_ACTIVE			   0x21
#define WFR_PLS_CONFIGPHY			   0x40
#define WFR_PLS_CONFIGPHY_DEBOUCE		   0x40
#define WFR_PLS_CONFIGPHY_ESTCOMM		   0x41
#define WFR_PLS_CONFIGPHY_ESTCOMM_TXRX_HUNT	   0x42
#define WFR_PLS_CONFIGPHY_ESTcOMM_LOCAL_COMPLETE   0x43
#define WFR_PLS_CONFIGPHY_OPTEQ			   0x44
#define WFR_PLS_CONFIGPHY_OPTEQ_OPTIMIZING	   0x44
#define WFR_PLS_CONFIGPHY_OPTEQ_LOCAL_COMPLETE	   0x45
#define WFR_PLS_CONFIGPHY_VERIFYCAP		   0x46
#define WFR_PLS_CONFIGPHY_VERIFYCAP_EXCHANGE	   0x46
#define WFR_PLS_CONFIGPHY_VERIFYCAP_LOCAL_COMPLETE 0x47
#define WFR_PLS_CONFIGLT			   0x48
#define WFR_PLS_CONFIGLT_CONFIGURE		   0x48
#define WFR_PLS_CONFIGLT_LINK_TRANSFER_ACTIVE	   0x49
#define WFR_PLS_LINKUP				   0x50
#define WFR_PLS_PHYTEST				   0xB0

/* DC_DC8051_CFG_HOST_CMD_0.REQ_TYPE - 8051 host commands */
#define WFR_HCMD_LOAD_CONFIG_DATA 0x01
#define WFR_HCMD_READ_CONFIG_DATA 0x02
#define WFR_HCMD_CHANGE_PHY_STATE 0x03
#define WFR_HCMD_SEND_BCC_MSG	  0x04
#define WFR_HCMD_MISC		  0x05
#define WFR_HCMD_INTERFACE_TEST	  0xff

/* DC_DC8051_CFG_HOST_CMD_1.RETURN_CODE - 8051 host command return */
#define WFR_HCMD_SUCCESS 2

/* DC_DC8051_DBG_ERR_INFO_SET_BY_8051.ERROR - error flags */
#define WFR_SPICO_ROM_FAIL 0x01
#define WFR_UNKOWN_FRAME   0x02
#define WFR_BER_NOT_MET	   0x04
#define WFR_LOOPBACK_FAIL  0x08

/* DC_DC8051_DBG_ERR_INFO_SET_BY_8051.HOST_MSG - host message flags */
#define WFR_HOST_REQ_DONE	   0x01
#define WFR_BC_LCB_IDLE_FRAME_MSG  0x02
#define WFR_BC_BCC_FRAME_MSG	   0x04
#define WFR_BC_LCB_IDLE_UNKOWN_MSG 0x08
#define WFR_BC_BCC_UNKNOWN_MSG	   0x10
#define WFR_EXT_DEVICE_CFG_REQ	   0x20
#define WFR_VERIFY_CAP_FRAME	   0x40
#define WFR_LINKUP_ACHIEVED	   0x80

/* read and write hardware registers */
u64 read_csr(const struct hfi_devdata *dd, u32 offset);
void write_csr(const struct hfi_devdata *dd, u32 offset, u64 value);

static inline u64 read_kctxt_csr(const struct hfi_devdata *dd, int ctxt,
					u32 offset0)
{
	/* kernel per-context CSRs are separated by 0x100 */
	return read_csr(dd, offset0 + (0x100* ctxt));
}

static inline void write_kctxt_csr(struct hfi_devdata *dd, int ctxt,
					u32 offset0, u64 value)
{
	/* kernel per-context CSRs are separated by 0x100 */
	write_csr(dd, offset0 + (0x100 * ctxt), value);
} 

int load_firmware(struct hfi_devdata *dd);
void dispose_firmware(void);
void read_guid(struct hfi_devdata *dd);

#endif /* _WFR_H */

