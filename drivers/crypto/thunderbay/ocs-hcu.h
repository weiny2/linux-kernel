/* SPDX-License-Identifier: GPL-2.0-only */
/*
 * KeemBay OCS HCU Crypto Driver.
 *
 * Copyright (C) 2018-2019 Intel Corporation
 */

#ifndef _CRYPTO_OCS_HCU_H
#define _CRYPTO_OCS_HCU_H

#define OCS_LL_DMA_FLAG_TERMINATE BIT(31)
#define OCS_LL_DMA_FLAG_FREEZE BIT(30)
#define OCS_LL_DMA_FLAG_RESERVED (BIT(30) - 1)

#define OCS_HCU_ALGO_SHA256 2
#define OCS_HCU_ALGO_SHA224 3
#define OCS_HCU_ALGO_SHA384 4
#define OCS_HCU_ALGO_SHA512 5
#define OCS_HCU_ALGO_SM3 6
#define OCS_HCU_ALGO_MASK (BIT(3) - 1)
#define OCS_HCU_ALGO_HMAC_SHIFT 4
#define OCS_HCU_ALGO_HMAC_MASK BIT(OCS_HCU_ALGO_HMAC_SHIFT)

#define OCS_HCU_DMA_NO_SNOOP 1
#define OCS_HCU_DMA_SNOOP 0
#define OCS_HCU_DMA_BTF_SWAP 1
#define OCS_HCU_DMA_BTF_NO_SWAP 0
#define OCS_HCU_DMA_ADDR_MODE_FIXED 1
#define OCS_HCU_DMA_ADDR_MODE_LINEAR 0
#define OCS_HCU_DMA_MAX_ADDR_MASK (BIT(64) - 1)

#define OCS_HCU_MAX_CHAIN_NUM 16

/* Device flags */
#define HCU_FLAGS_HCU_INIT BIT(0)
#define HCU_FLAGS_HCU_ACTIVE BIT(1)
#define HCU_FLAGS_HCU_DONE BIT(16)
#define HCU_FLAGS_HCU_ERR BIT(17)
#define HCU_FLAGS_HCU_DMA_ERR BIT(18)
#define HCU_FLAGS_HCU_OP_ERR BIT(19)
#define HCU_FLAGS_HCU_ERROR_MASK (HCU_FLAGS_HCU_DMA_ERR | \
				  HCU_FLAGS_HCU_ERR | \
				  HCU_FLAGS_HCU_OP_ERR)
#define HCU_FLAGS_FINISH_REQ_MASK (HCU_FLAGS_HCU_ACTIVE | \
				   HCU_FLAGS_HCU_DONE)

#define KMB_HCU_ENDIANNESS_MASK (0x2A)

/**
 * HCU device context.
 * @list: List of device contexts.
 * @dev: OCS HCU device.
 * @irq: IRQ number.
 * @io_base: IO Base of HCU.
 * @flags: HW flags indicating state.
 * @req: Request being operated on.
 * @engine: Crypto engine for the device.
 * @clk: Clock for OCS HCU.
 */
struct ocs_hcu_dev {
	struct list_head list;
	struct device *dev;
	int irq;
	/* Base address of OCS HCU */
	void __iomem *io_base;
	/* Status of the OCS HCU device */
	u32 flags;
	/* Active request. */
	struct ahash_request *req;
	struct crypto_engine *engine;
	struct clk *clk;
};

/**
 * Structure of HW required linked list descriptor.
 * @src_addr: Source address of the data.
 * @src_len: Length of data to be fetched.
 * @nxt_desc: Next descriptor to fetch.
 * @ll_flags: Flags (Freeze @ terminate) for the DMA engine.
 */
struct ocs_hcu_dma_desc {
	u32 src_adr;
	u32 src_len;
	u32 nxt_desc;
	u32 ll_flags;
};

/**
 * Structure to contain the intermediate data generated by the HCU.
 * @msg_len_lo: Length of data the HCU has operated on in bits, low 32b.
 * @msg_len_hi: Length of data the HCU has operated on in bits, high 32b.
 * @digest: The digest read from the HCU. If the HCU is terminated, it will
 *	    contain the actual hash digest. Otherwise it is the intermediate
 *	    state.
 */
struct ocs_hcu_idata_desc {
	u32 msg_len_lo;
	u32 msg_len_hi;
	u8 digest[SHA512_DIGEST_SIZE];
};

irqreturn_t ocs_hcu_irq_handler(int irq, void* dev_id);
void ocs_hcu_get_intermediate_data(struct ocs_hcu_dev *hcu_dev,
				    struct ocs_hcu_idata_desc *data, u32 algo);
void ocs_hcu_set_intermediate_data(struct ocs_hcu_dev *hcu_dev,
				   struct ocs_hcu_idata_desc *data, u32 algo);
void ocs_hcu_hw_init(struct ocs_hcu_dev *hcu_dev);
void ocs_hcu_hw_disable(struct ocs_hcu_dev *hcu_dev);
int ocs_hcu_hw_cfg(struct ocs_hcu_dev *hcu_dev, u32 algo);
void ocs_hcu_ll_dma_start(struct ocs_hcu_dev *hcu_dev, dma_addr_t head,
			  bool terminate);
void ocs_hcu_tx_data_done(struct ocs_hcu_dev *hcu_dev);
void ocs_hcu_finish_req(struct ocs_hcu_dev *hcu_dev, u32 algo,
			struct ocs_hcu_idata_desc *data, int error);
void ocs_hcu_irq_en(struct ocs_hcu_dev *hcu_dev);
void ocs_hcu_irq_dis(struct ocs_hcu_dev *hcu_dev);

#endif /* _CRYPTO_OCS_HCU_H */
