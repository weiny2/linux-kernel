/*
*------------------------------------------------------------------------------
*                                                                              
*  INTEL CONFIDENTIAL                                                          
*                                                                              
*  Copyright 2016 Intel Corporation All Rights Reserved.                 
*                                                                              
*  The source code contained or described herein and all documents related     
*  to the source code ("Material") are owned by Intel Corporation or its    
*  suppliers or licensors. Title to the Material remains with Intel            
*  Corporation or its suppliers and licensors. The Material contains trade     
*  secrets and proprietary and confidential information of Intel or its        
*  suppliers and licensors. The Material is protected by worldwide copyright   
*  and trade secret laws and treaty provisions. No part of the Material may    
*  be used, copied, reproduced, modified, published, uploaded, posted,         
*  transmitted, distributed, or disclosed in any way without Intel's prior     
*  express written permission.                                                 
*                                                                              
*  No license under any patent, copyright, trade secret or other intellectual  
*  property right is granted to or conferred upon you by disclosure or         
*  delivery of the Materials, either expressly, by implication, inducement,    
*  estoppel or otherwise. Any license under such intellectual property rights  
*  must be express and approved by Intel in writing.                           
*                                                                              
*------------------------------------------------------------------------------
*  Auto-generated by /nfs/sc/disks/slx_0108/pvesv/fxr_autogen/i_csrs.pl
*  i_csrs.pl Version 1.5 last modified on Monday 12/19/16 11:42:34
*  /nfs/sc/disks/slx_0108/pvesv/fxr_autogen/i_csrs.pl -C -RVREGS -ST mnh_misc -o /nfs/sc/disks/slx_0108/pvesv/fxr_autogen/fxr Manor_Hill/Product_HAS/Manor Hill/xml/144_Misc_Partition_Registers.xml
*------------------------------------------------------------------------------
*/

#ifndef DEF_MNH_MISC_SW_DEF
#define DEF_MNH_MISC_SW_DEF

#ifndef MNH_MISC_CSRS
#define MNH_MISC_CSRS						0x000000000000ULL
#endif
#define MISC_OFFSET						0
/*
* Table #4 of 144_Misc_Partition_Registers.xml - MISC_MSC_RSA_R2
* RSA helper variable, R squared, derived from modulus - 2048 bits in 32 
* entries.
*/
#define MNH_MISC_MSC_RSA_R2					(MNH_MISC_CSRS + 0x000000000000)
#define MNH_MISC_MSC_RSA_R2_RESETCSR				0x0000000000000000ull
#define MNH_MISC_MSC_RSA_R2_DATA_SHIFT				0
#define MNH_MISC_MSC_RSA_R2_DATA_MASK				0xFFFFFFFFFFFFFFFFull
#define MNH_MISC_MSC_RSA_R2_DATA_SMASK				0xFFFFFFFFFFFFFFFFull
/*
* Table #5 of 144_Misc_Partition_Registers.xml - MISC_MSC_RSA_SIGNATURE
* RSA signature - 2048 bits in 32 entries.
*/
#define MNH_MISC_MSC_RSA_SIGNATURE				(MNH_MISC_CSRS + 0x000000000200)
#define MNH_MISC_MSC_RSA_SIGNATURE_RESETCSR			0x0000000000000000ull
#define MNH_MISC_MSC_RSA_SIGNATURE_DATA_SHIFT			0
#define MNH_MISC_MSC_RSA_SIGNATURE_DATA_MASK			0xFFFFFFFFFFFFFFFFull
#define MNH_MISC_MSC_RSA_SIGNATURE_DATA_SMASK			0xFFFFFFFFFFFFFFFFull
/*
* Table #6 of 144_Misc_Partition_Registers.xml - MISC_MSC_RSA_MODULUS
* RSA modulus - 2048 bits in 32 entries.
*/
#define MNH_MISC_MSC_RSA_MODULUS				(MNH_MISC_CSRS + 0x000000000400)
#define MNH_MISC_MSC_RSA_MODULUS_RESETCSR			0x0000000000000000ull
#define MNH_MISC_MSC_RSA_MODULUS_DATA_SHIFT			0
#define MNH_MISC_MSC_RSA_MODULUS_DATA_MASK			0xFFFFFFFFFFFFFFFFull
#define MNH_MISC_MSC_RSA_MODULUS_DATA_SMASK			0xFFFFFFFFFFFFFFFFull
/*
* Table #7 of 144_Misc_Partition_Registers.xml - MISC_MSC_SHA_PRELOAD
* This register provides an interface to preload data directly to the SHA engine 
* prior to loading firmware. This register can be written multiple times to 
* preload data one QW at a time. Notably, the Code Signing System (CSS) flow 
* requires a CSS-formatted header to be processed in addition to the actual 
* firmware.
*/
#define MNH_MISC_MSC_SHA_PRELOAD				(MNH_MISC_CSRS + 0x000000000A00)
#define MNH_MISC_MSC_SHA_PRELOAD_RESETCSR			0x0000000000000000ull
#define MNH_MISC_MSC_SHA_PRELOAD_DATA_SHIFT			0
#define MNH_MISC_MSC_SHA_PRELOAD_DATA_MASK			0xFFFFFFFFFFFFFFFFull
#define MNH_MISC_MSC_SHA_PRELOAD_DATA_SMASK			0xFFFFFFFFFFFFFFFFull
/*
* Table #8 of 144_Misc_Partition_Registers.xml - MISC_MSC_RSA_CMD
* RSA engine command interface.
*/
#define MNH_MISC_MSC_RSA_CMD					(MNH_MISC_CSRS + 0x000000000A08)
#define MNH_MISC_MSC_RSA_CMD_RESETCSR				0x0000000000000000ull
#define MNH_MISC_MSC_RSA_CMD_RESERVED_63_2_SHIFT		2
#define MNH_MISC_MSC_RSA_CMD_RESERVED_63_2_MASK			0x3FFFFFFFFFFFFFFFull
#define MNH_MISC_MSC_RSA_CMD_RESERVED_63_2_SMASK		0xFFFFFFFFFFFFFFFCull
#define MNH_MISC_MSC_RSA_CMD_CMD_SHIFT				0
#define MNH_MISC_MSC_RSA_CMD_CMD_MASK				0x3ull
#define MNH_MISC_MSC_RSA_CMD_CMD_SMASK				0x3ull
/*
* Table #9 of 144_Misc_Partition_Registers.xml - MISC_MSC_RSA_MU
* RSA helper variable, mu, derived from modulus - 64 bits.
*/
#define MNH_MISC_MSC_RSA_MU					(MNH_MISC_CSRS + 0x000000000A10)
#define MNH_MISC_MSC_RSA_MU_RESETCSR				0x0000000000000000ull
#define MNH_MISC_MSC_RSA_MU_DATA_SHIFT				0
#define MNH_MISC_MSC_RSA_MU_DATA_MASK				0xFFFFFFFFFFFFFFFFull
#define MNH_MISC_MSC_RSA_MU_DATA_SMASK				0xFFFFFFFFFFFFFFFFull
/*
* Table #10 of 144_Misc_Partition_Registers.xml - MISC_CFG_FW_CTRL
* Firmware-related control bits.
*/
#define MNH_MISC_CFG_FW_CTRL					(MNH_MISC_CSRS + 0x000000001000)
#define MNH_MISC_CFG_FW_CTRL_RESETCSR				0x0000000000000001ull
#define MNH_MISC_CFG_FW_CTRL_RESERVED_63_2_SHIFT		2
#define MNH_MISC_CFG_FW_CTRL_RESERVED_63_2_MASK			0x3FFFFFFFFFFFFFFFull
#define MNH_MISC_CFG_FW_CTRL_RESERVED_63_2_SMASK		0xFFFFFFFFFFFFFFFCull
#define MNH_MISC_CFG_FW_CTRL_FW_8051_LOADED_SHIFT		1
#define MNH_MISC_CFG_FW_CTRL_FW_8051_LOADED_MASK		0x1ull
#define MNH_MISC_CFG_FW_CTRL_FW_8051_LOADED_SMASK		0x2ull
#define MNH_MISC_CFG_FW_CTRL_FW_VALIDATION_ENABLE_SHIFT		0
#define MNH_MISC_CFG_FW_CTRL_FW_VALIDATION_ENABLE_MASK		0x1ull
#define MNH_MISC_CFG_FW_CTRL_FW_VALIDATION_ENABLE_SMASK		0x1ull
/*
* Table #11 of 144_Misc_Partition_Registers.xml - MISC_STS_FW
* Firmware-related status bits.
*/
#define MNH_MISC_STS_FW						(MNH_MISC_CSRS + 0x000000001008)
#define MNH_MISC_STS_FW_RESETCSR				0x0000000000000000ull
#define MNH_MISC_STS_FW_RESERVED_63_4_SHIFT			4
#define MNH_MISC_STS_FW_RESERVED_63_4_MASK			0xFFFFFFFFFFFFFFFull
#define MNH_MISC_STS_FW_RESERVED_63_4_SMASK			0xFFFFFFFFFFFFFFF0ull
#define MNH_MISC_STS_FW_FW_AUTH_FAILED_SHIFT			3
#define MNH_MISC_STS_FW_FW_AUTH_FAILED_MASK			0x1ull
#define MNH_MISC_STS_FW_FW_AUTH_FAILED_SMASK			0x8ull
#define MNH_MISC_STS_FW_KEY_MISMATCH_SHIFT			2
#define MNH_MISC_STS_FW_KEY_MISMATCH_MASK			0x1ull
#define MNH_MISC_STS_FW_KEY_MISMATCH_SMASK			0x4ull
#define MNH_MISC_STS_FW_RSA_STATUS_SHIFT			0
#define MNH_MISC_STS_FW_RSA_STATUS_MASK				0x3ull
#define MNH_MISC_STS_FW_RSA_STATUS_SMASK			0x3ull
/*
* Table #12 of 144_Misc_Partition_Registers.xml - MISC_STS_8051_DIGEST
* 8051 firmware digest - 256 bits in 4 entries.
*/
#define MNH_MISC_STS_8051_DIGEST				(MNH_MISC_CSRS + 0x000000001010)
#define MNH_MISC_STS_8051_DIGEST_RESETCSR			0x0000000000000000ull
#define MNH_MISC_STS_8051_DIGEST_DATA_SHIFT			0
#define MNH_MISC_STS_8051_DIGEST_DATA_MASK			0xFFFFFFFFFFFFFFFFull
#define MNH_MISC_STS_8051_DIGEST_DATA_SMASK			0xFFFFFFFFFFFFFFFFull
/*
* Table #13 of 144_Misc_Partition_Registers.xml - MISC_STS_SBM_DIGEST
* SBus Master Spico firmware digest - 256 bits in 4 entries.
*/
#define MNH_MISC_STS_SBM_DIGEST					(MNH_MISC_CSRS + 0x000000001030)
#define MNH_MISC_STS_SBM_DIGEST_RESETCSR			0x0000000000000000ull
#define MNH_MISC_STS_SBM_DIGEST_DATA_SHIFT			0
#define MNH_MISC_STS_SBM_DIGEST_DATA_MASK			0xFFFFFFFFFFFFFFFFull
#define MNH_MISC_STS_SBM_DIGEST_DATA_SMASK			0xFFFFFFFFFFFFFFFFull
/*
* Table #14 of 144_Misc_Partition_Registers.xml - MISC_STS_SRDS_DIGEST
* SerDes Spico firmware digest - 256 bits in 4 entries.
*/
#define MNH_MISC_STS_SRDS_DIGEST				(MNH_MISC_CSRS + 0x000000001050)
#define MNH_MISC_STS_SRDS_DIGEST_RESETCSR			0x0000000000000000ull
#define MNH_MISC_STS_SRDS_DIGEST_DATA_SHIFT			0
#define MNH_MISC_STS_SRDS_DIGEST_DATA_MASK			0xFFFFFFFFFFFFFFFFull
#define MNH_MISC_STS_SRDS_DIGEST_DATA_SMASK			0xFFFFFFFFFFFFFFFFull
/*
* Table #15 of 144_Misc_Partition_Registers.xml - MISC_CFG_RESET
* CSR-driven resets.
*/
#define MNH_MISC_CFG_RESET					(MNH_MISC_CSRS + 0x000000001070)
#define MNH_MISC_CFG_RESET_RESETCSR				0x0000000000000000ull
#define MNH_MISC_CFG_RESET_RESERVED_63_2_SHIFT			2
#define MNH_MISC_CFG_RESET_RESERVED_63_2_MASK			0x3FFFFFFFFFFFFFFFull
#define MNH_MISC_CFG_RESET_RESERVED_63_2_SMASK			0xFFFFFFFFFFFFFFFCull
#define MNH_MISC_CFG_RESET_HRESET_SHIFT				1
#define MNH_MISC_CFG_RESET_HRESET_MASK				0x1ull
#define MNH_MISC_CFG_RESET_HRESET_SMASK				0x2ull
#define MNH_MISC_CFG_RESET_SRESET_SHIFT				0
#define MNH_MISC_CFG_RESET_SRESET_MASK				0x1ull
#define MNH_MISC_CFG_RESET_SRESET_SMASK				0x1ull
/*
* Table #16 of 144_Misc_Partition_Registers.xml - MISC_STS_MNH_INTS
* All of the interrupt sources in MNH are aggregated into a single interrupt pin 
* delivered to the HFI. This pin is implemented as a simple logical OR of all 
* inputs. This register indicates which sources are currently asserting 
* interrupts. This register is cleared down indirectly by clearing down the 
* status registers of the individual interrupt sources.
*/
#define MNH_MISC_STS_MNH_INTS					(MNH_MISC_CSRS + 0x000000001078)
#define MNH_MISC_STS_MNH_INTS_RESETCSR				0x0000000000000000ull
#define MNH_MISC_STS_MNH_INTS_RESERVED_63_7_SHIFT		7
#define MNH_MISC_STS_MNH_INTS_RESERVED_63_7_MASK		0x1FFFFFFFFFFFFFFull
#define MNH_MISC_STS_MNH_INTS_RESERVED_63_7_SMASK		0xFFFFFFFFFFFFFF80ull
#define MNH_MISC_STS_MNH_INTS_READY_INT_SHIFT			6
#define MNH_MISC_STS_MNH_INTS_READY_INT_MASK			0x1ull
#define MNH_MISC_STS_MNH_INTS_READY_INT_SMASK			0x40ull
#define MNH_MISC_STS_MNH_INTS_QSFP_INT_SHIFT			5
#define MNH_MISC_STS_MNH_INTS_QSFP_INT_MASK			0x1ull
#define MNH_MISC_STS_MNH_INTS_QSFP_INT_SMASK			0x20ull
#define MNH_MISC_STS_MNH_INTS_SERDES_SNP_DWNSTRM_ERR_SHIFT	4
#define MNH_MISC_STS_MNH_INTS_SERDES_SNP_DWNSTRM_ERR_MASK	0x1ull
#define MNH_MISC_STS_MNH_INTS_SERDES_SNP_DWNSTRM_ERR_SMASK	0x10ull
#define MNH_MISC_STS_MNH_INTS_SERDES_SNP_UPSTRM_ERR_SHIFT	3
#define MNH_MISC_STS_MNH_INTS_SERDES_SNP_UPSTRM_ERR_MASK	0x1ull
#define MNH_MISC_STS_MNH_INTS_SERDES_SNP_UPSTRM_ERR_SMASK	0x8ull
#define MNH_MISC_STS_MNH_INTS_SERDES_CRK8051_ERR_SHIFT		2
#define MNH_MISC_STS_MNH_INTS_SERDES_CRK8051_ERR_MASK		0x1ull
#define MNH_MISC_STS_MNH_INTS_SERDES_CRK8051_ERR_SMASK		0x4ull
#define MNH_MISC_STS_MNH_INTS_OPIO_PHY_ERR_SHIFT		1
#define MNH_MISC_STS_MNH_INTS_OPIO_PHY_ERR_MASK			0x1ull
#define MNH_MISC_STS_MNH_INTS_OPIO_PHY_ERR_SMASK		0x2ull
#define MNH_MISC_STS_MNH_INTS_MISC_ERR_SHIFT			0
#define MNH_MISC_STS_MNH_INTS_MISC_ERR_MASK			0x1ull
#define MNH_MISC_STS_MNH_INTS_MISC_ERR_SMASK			0x1ull
/*
* Table #17 of 144_Misc_Partition_Registers.xml - MISC_CFG_SBUS_REQUEST
* SBus request interface (see SBus Master Specification). This register directly 
* controls the corresponding inputs of the SBus Master Core Interface.
*/
#define MNH_MISC_CFG_SBUS_REQUEST				(MNH_MISC_CSRS + 0x000000001080)
#define MNH_MISC_CFG_SBUS_REQUEST_RESETCSR			0x0000000000000000ull
#define MNH_MISC_CFG_SBUS_REQUEST_DATA_IN_SHIFT			32
#define MNH_MISC_CFG_SBUS_REQUEST_DATA_IN_MASK			0xFFFFFFFFull
#define MNH_MISC_CFG_SBUS_REQUEST_DATA_IN_SMASK			0xFFFFFFFF00000000ull
#define MNH_MISC_CFG_SBUS_REQUEST_RESERVED_31_24_SHIFT		24
#define MNH_MISC_CFG_SBUS_REQUEST_RESERVED_31_24_MASK		0xFFull
#define MNH_MISC_CFG_SBUS_REQUEST_RESERVED_31_24_SMASK		0xFF000000ull
#define MNH_MISC_CFG_SBUS_REQUEST_COMMAND_SHIFT			16
#define MNH_MISC_CFG_SBUS_REQUEST_COMMAND_MASK			0xFFull
#define MNH_MISC_CFG_SBUS_REQUEST_COMMAND_SMASK			0xFF0000ull
#define MNH_MISC_CFG_SBUS_REQUEST_DATA_ADDR_SHIFT		8
#define MNH_MISC_CFG_SBUS_REQUEST_DATA_ADDR_MASK		0xFFull
#define MNH_MISC_CFG_SBUS_REQUEST_DATA_ADDR_SMASK		0xFF00ull
#define MNH_MISC_CFG_SBUS_REQUEST_RECEIVER_ADDR_SHIFT		0
#define MNH_MISC_CFG_SBUS_REQUEST_RECEIVER_ADDR_MASK		0xFFull
#define MNH_MISC_CFG_SBUS_REQUEST_RECEIVER_ADDR_SMASK		0xFFull
/*
* Table #18 of 144_Misc_Partition_Registers.xml - MISC_CFG_SBUS_EXECUTE
* SBus request interface execution bit (see SBus Master Specification). This 
* register directly controls the EXECUTE input of the SBus Master Core 
* Interface.
*/
#define MNH_MISC_CFG_SBUS_EXECUTE				(MNH_MISC_CSRS + 0x000000001088)
#define MNH_MISC_CFG_SBUS_EXECUTE_RESETCSR			0x0000000000000000ull
#define MNH_MISC_CFG_SBUS_EXECUTE_RESERVED_63_1_SHIFT		1
#define MNH_MISC_CFG_SBUS_EXECUTE_RESERVED_63_1_MASK		0x7FFFFFFFFFFFFFFFull
#define MNH_MISC_CFG_SBUS_EXECUTE_RESERVED_63_1_SMASK		0xFFFFFFFFFFFFFFFEull
#define MNH_MISC_CFG_SBUS_EXECUTE_EXECUTE_SHIFT			0
#define MNH_MISC_CFG_SBUS_EXECUTE_EXECUTE_MASK			0x1ull
#define MNH_MISC_CFG_SBUS_EXECUTE_EXECUTE_SMASK			0x1ull
/*
* Table #19 of 144_Misc_Partition_Registers.xml - MISC_STS_SBUS_RESULT
* SBus request interface result data (see SBus Master Specification).
*/
#define MNH_MISC_STS_SBUS_RESULT				(MNH_MISC_CSRS + 0x000000001090)
#define MNH_MISC_STS_SBUS_RESULT_RESETCSR			0x0000000000000000ull
#define MNH_MISC_STS_SBUS_RESULT_DATA_OUT_SHIFT			32
#define MNH_MISC_STS_SBUS_RESULT_DATA_OUT_MASK			0xFFFFFFFFull
#define MNH_MISC_STS_SBUS_RESULT_DATA_OUT_SMASK			0xFFFFFFFF00000000ull
#define MNH_MISC_STS_SBUS_RESULT_RESERVED_31_5_SHIFT		5
#define MNH_MISC_STS_SBUS_RESULT_RESERVED_31_5_MASK		0x7FFFFFFull
#define MNH_MISC_STS_SBUS_RESULT_RESERVED_31_5_SMASK		0xFFFFFFE0ull
#define MNH_MISC_STS_SBUS_RESULT_RESULT_CODE_SHIFT		2
#define MNH_MISC_STS_SBUS_RESULT_RESULT_CODE_MASK		0x7ull
#define MNH_MISC_STS_SBUS_RESULT_RESULT_CODE_SMASK		0x1Cull
#define MNH_MISC_STS_SBUS_RESULT_RCV_DATA_VALID_SHIFT		1
#define MNH_MISC_STS_SBUS_RESULT_RCV_DATA_VALID_MASK		0x1ull
#define MNH_MISC_STS_SBUS_RESULT_RCV_DATA_VALID_SMASK		0x2ull
#define MNH_MISC_STS_SBUS_RESULT_DONE_SHIFT			0
#define MNH_MISC_STS_SBUS_RESULT_DONE_MASK			0x1ull
#define MNH_MISC_STS_SBUS_RESULT_DONE_SMASK			0x1ull
/*
* Table #20 of 144_Misc_Partition_Registers.xml - MISC_CFG_DRV_STR
* The fields in this CSR correspond to the DrvStr[5:0] fuse bits. The fields are 
* broken out here to show how the 2-bit fields control the drive strength of 
* different MNH ASIC miscellaneous output pins.
*/
#define MNH_MISC_CFG_DRV_STR					(MNH_MISC_CSRS + 0x000000001098)
#define MNH_MISC_CFG_DRV_STR_RESETCSR				0x000000000000002Aull
#define MNH_MISC_CFG_DRV_STR_RESERVED_63_6_SHIFT		6
#define MNH_MISC_CFG_DRV_STR_RESERVED_63_6_MASK			0x3FFFFFFFFFFFFFFull
#define MNH_MISC_CFG_DRV_STR_RESERVED_63_6_SMASK		0xFFFFFFFFFFFFFFC0ull
#define MNH_MISC_CFG_DRV_STR_DRV_THERMTRIP_N_SHIFT		4
#define MNH_MISC_CFG_DRV_STR_DRV_THERMTRIP_N_MASK		0x3ull
#define MNH_MISC_CFG_DRV_STR_DRV_THERMTRIP_N_SMASK		0x30ull
#define MNH_MISC_CFG_DRV_STR_DRV_FXR_INT_N_SHIFT		2
#define MNH_MISC_CFG_DRV_STR_DRV_FXR_INT_N_MASK			0x3ull
#define MNH_MISC_CFG_DRV_STR_DRV_FXR_INT_N_SMASK		0xCull
#define MNH_MISC_CFG_DRV_STR_DRV_QSFP_SHIFT			0
#define MNH_MISC_CFG_DRV_STR_DRV_QSFP_MASK			0x3ull
#define MNH_MISC_CFG_DRV_STR_DRV_QSFP_SMASK			0x3ull
/*
* Table #21 of 144_Misc_Partition_Registers.xml - MISC_CFG_THERM
* Configuration parameters for thermal polling logic. See #%%#Section 6.4, 
* 'Thermal Monitoring,' on page 113#%%#.
*/
#define MNH_MISC_CFG_THERM					(MNH_MISC_CSRS + 0x0000000010A0)
#define MNH_MISC_CFG_THERM_RESETCSR				0x0000000A003D0173ull
#define MNH_MISC_CFG_THERM_RESERVED_63_38_SHIFT			38
#define MNH_MISC_CFG_THERM_RESERVED_63_38_MASK			0x3FFFFFFull
#define MNH_MISC_CFG_THERM_RESERVED_63_38_SMASK			0xFFFFFFC000000000ull
#define MNH_MISC_CFG_THERM_HYSTERESIS_SHIFT			32
#define MNH_MISC_CFG_THERM_HYSTERESIS_MASK			0x3Full
#define MNH_MISC_CFG_THERM_HYSTERESIS_SMASK			0x3F00000000ull
#define MNH_MISC_CFG_THERM_RESERVED_31_26_SHIFT			26
#define MNH_MISC_CFG_THERM_RESERVED_31_26_MASK			0x3Full
#define MNH_MISC_CFG_THERM_RESERVED_31_26_SMASK			0xFC000000ull
#define MNH_MISC_CFG_THERM_REMOTE_POLL_PERIOD_SHIFT		16
#define MNH_MISC_CFG_THERM_REMOTE_POLL_PERIOD_MASK		0x3FFull
#define MNH_MISC_CFG_THERM_REMOTE_POLL_PERIOD_SMASK		0x3FF0000ull
#define MNH_MISC_CFG_THERM_RESERVED_15_14_SHIFT			14
#define MNH_MISC_CFG_THERM_RESERVED_15_14_MASK			0x3ull
#define MNH_MISC_CFG_THERM_RESERVED_15_14_SMASK			0xC000ull
#define MNH_MISC_CFG_THERM_MAIN_POLL_PERIOD_SHIFT		4
#define MNH_MISC_CFG_THERM_MAIN_POLL_PERIOD_MASK		0x3FFull
#define MNH_MISC_CFG_THERM_MAIN_POLL_PERIOD_SMASK		0x3FF0ull
#define MNH_MISC_CFG_THERM_RESERVED_3_2_SHIFT			2
#define MNH_MISC_CFG_THERM_RESERVED_3_2_MASK			0x3ull
#define MNH_MISC_CFG_THERM_RESERVED_3_2_SMASK			0xCull
#define MNH_MISC_CFG_THERM_SENSOR_ENABLE_SHIFT			0
#define MNH_MISC_CFG_THERM_SENSOR_ENABLE_MASK			0x3ull
#define MNH_MISC_CFG_THERM_SENSOR_ENABLE_SMASK			0x3ull
/*
* Table #22 of 144_Misc_Partition_Registers.xml - MISC_STS_THERM
* Miscellaneous status for thermal polling logic. See #%%#Section 6.4, 'Thermal 
* Monitoring,' on page 113#%%#.
*/
#define MNH_MISC_STS_THERM					(MNH_MISC_CSRS + 0x0000000010A8)
#define MNH_MISC_STS_THERM_RESETCSR				0x0000000000000000ull
#define MNH_MISC_STS_THERM_RESERVED_63_62_SHIFT			62
#define MNH_MISC_STS_THERM_RESERVED_63_62_MASK			0x3ull
#define MNH_MISC_STS_THERM_RESERVED_63_62_SMASK			0xC000000000000000ull
#define MNH_MISC_STS_THERM_SBUS_RESULT_CODE_SHIFT		59
#define MNH_MISC_STS_THERM_SBUS_RESULT_CODE_MASK		0x7ull
#define MNH_MISC_STS_THERM_SBUS_RESULT_CODE_SMASK		0x3800000000000000ull
#define MNH_MISC_STS_THERM_SBUS_RCV_DATA_VALID_SHIFT		58
#define MNH_MISC_STS_THERM_SBUS_RCV_DATA_VALID_MASK		0x1ull
#define MNH_MISC_STS_THERM_SBUS_RCV_DATA_VALID_SMASK		0x400000000000000ull
#define MNH_MISC_STS_THERM_SBUS_DONE_SHIFT			57
#define MNH_MISC_STS_THERM_SBUS_DONE_MASK			0x1ull
#define MNH_MISC_STS_THERM_SBUS_DONE_SMASK			0x200000000000000ull
#define MNH_MISC_STS_THERM_SBUS_EXECUTE_SHIFT			56
#define MNH_MISC_STS_THERM_SBUS_EXECUTE_MASK			0x1ull
#define MNH_MISC_STS_THERM_SBUS_EXECUTE_SMASK			0x100000000000000ull
#define MNH_MISC_STS_THERM_SBUS_DATA_SHIFT			24
#define MNH_MISC_STS_THERM_SBUS_DATA_MASK			0xFFFFFFFFull
#define MNH_MISC_STS_THERM_SBUS_DATA_SMASK			0xFFFFFFFF000000ull
#define MNH_MISC_STS_THERM_SBUS_DATA_ADDRESS_SHIFT		16
#define MNH_MISC_STS_THERM_SBUS_DATA_ADDRESS_MASK		0xFFull
#define MNH_MISC_STS_THERM_SBUS_DATA_ADDRESS_SMASK		0xFF0000ull
#define MNH_MISC_STS_THERM_SBUS_COMMAND_SHIFT			8
#define MNH_MISC_STS_THERM_SBUS_COMMAND_MASK			0xFFull
#define MNH_MISC_STS_THERM_SBUS_COMMAND_SMASK			0xFF00ull
#define MNH_MISC_STS_THERM_SENSOR_SELECTED_SHIFT		7
#define MNH_MISC_STS_THERM_SENSOR_SELECTED_MASK			0x1ull
#define MNH_MISC_STS_THERM_SENSOR_SELECTED_SMASK		0x80ull
#define MNH_MISC_STS_THERM_STATE_SHIFT				4
#define MNH_MISC_STS_THERM_STATE_MASK				0x7ull
#define MNH_MISC_STS_THERM_STATE_SMASK				0x70ull
#define MNH_MISC_STS_THERM_RESERVED_3_2_SHIFT			2
#define MNH_MISC_STS_THERM_RESERVED_3_2_MASK			0x3ull
#define MNH_MISC_STS_THERM_RESERVED_3_2_SMASK			0xCull
#define MNH_MISC_STS_THERM_LOW_ALERT_SHIFT			1
#define MNH_MISC_STS_THERM_LOW_ALERT_MASK			0x1ull
#define MNH_MISC_STS_THERM_LOW_ALERT_SMASK			0x2ull
#define MNH_MISC_STS_THERM_HIGH_ALERT_SHIFT			0
#define MNH_MISC_STS_THERM_HIGH_ALERT_MASK			0x1ull
#define MNH_MISC_STS_THERM_HIGH_ALERT_SMASK			0x1ull
/*
* Table #23 of 144_Misc_Partition_Registers.xml - MISC_STS_TEMPERATURE
* Temperature readings from main and remote sensors. See #%%#Section 6.4, 
* 'Thermal Monitoring,' on page 113#%%#.
*/
#define MNH_MISC_STS_TEMPERATURE				(MNH_MISC_CSRS + 0x0000000010B0)
#define MNH_MISC_STS_TEMPERATURE_RESETCSR			0x0000000000000000ull
#define MNH_MISC_STS_TEMPERATURE_RESERVED_63_32_SHIFT		32
#define MNH_MISC_STS_TEMPERATURE_RESERVED_63_32_MASK		0xFFFFFFFFull
#define MNH_MISC_STS_TEMPERATURE_RESERVED_63_32_SMASK		0xFFFFFFFF00000000ull
#define MNH_MISC_STS_TEMPERATURE_VALID0_SHIFT			31
#define MNH_MISC_STS_TEMPERATURE_VALID0_MASK			0x1ull
#define MNH_MISC_STS_TEMPERATURE_VALID0_SMASK			0x80000000ull
#define MNH_MISC_STS_TEMPERATURE_VALID1_SHIFT			30
#define MNH_MISC_STS_TEMPERATURE_VALID1_MASK			0x1ull
#define MNH_MISC_STS_TEMPERATURE_VALID1_SMASK			0x40000000ull
#define MNH_MISC_STS_TEMPERATURE_RESERVED_29_18_SHIFT		18
#define MNH_MISC_STS_TEMPERATURE_RESERVED_29_18_MASK		0xFFFull
#define MNH_MISC_STS_TEMPERATURE_RESERVED_29_18_SMASK		0x3FFC0000ull
#define MNH_MISC_STS_TEMPERATURE_TEMPERATURE1_SHIFT		9
#define MNH_MISC_STS_TEMPERATURE_TEMPERATURE1_MASK		0x1FFull
#define MNH_MISC_STS_TEMPERATURE_TEMPERATURE1_SMASK		0x3FE00ull
#define MNH_MISC_STS_TEMPERATURE_TEMPERATURE0_SHIFT		0
#define MNH_MISC_STS_TEMPERATURE_TEMPERATURE0_MASK		0x1FFull
#define MNH_MISC_STS_TEMPERATURE_TEMPERATURE0_SMASK		0x1FFull
/*
* Table #24 of 144_Misc_Partition_Registers.xml - MISC_CFG_HFI_READY
* Indication from the HFI that it is ready.
*/
#define MNH_MISC_CFG_HFI_READY					(MNH_MISC_CSRS + 0x0000000010B8)
#define MNH_MISC_CFG_HFI_READY_RESETCSR				0x0000000000000000ull
#define MNH_MISC_CFG_HFI_READY_RESERVED_63_2_SHIFT		2
#define MNH_MISC_CFG_HFI_READY_RESERVED_63_2_MASK		0x3FFFFFFFFFFFFFFFull
#define MNH_MISC_CFG_HFI_READY_RESERVED_63_2_SMASK		0xFFFFFFFFFFFFFFFCull
#define MNH_MISC_CFG_HFI_READY_OPIO_RESET_SHIFT			1
#define MNH_MISC_CFG_HFI_READY_OPIO_RESET_MASK			0x1ull
#define MNH_MISC_CFG_HFI_READY_OPIO_RESET_SMASK			0x2ull
#define MNH_MISC_CFG_HFI_READY_HFI_READY_SHIFT			0
#define MNH_MISC_CFG_HFI_READY_HFI_READY_MASK			0x1ull
#define MNH_MISC_CFG_HFI_READY_HFI_READY_SMASK			0x1ull
/*
* Table #25 of 144_Misc_Partition_Registers.xml - MISC_STS_FUSE_MANINFO
* Manufacturer EFuse information on MANINFO.
*/
#define MNH_MISC_STS_FUSE_MANINFO				(MNH_MISC_CSRS + 0x0000000010C0)
#define MNH_MISC_STS_FUSE_MANINFO_RESETCSR			0x0000000000000000ull
#define MNH_MISC_STS_FUSE_MANINFO_RESERVED_63_SHIFT		63
#define MNH_MISC_STS_FUSE_MANINFO_RESERVED_63_MASK		0x1ull
#define MNH_MISC_STS_FUSE_MANINFO_RESERVED_63_SMASK		0x8000000000000000ull
#define MNH_MISC_STS_FUSE_MANINFO_MANINFO_SHIFT			0
#define MNH_MISC_STS_FUSE_MANINFO_MANINFO_MASK			0x7FFFFFFFFFFFFFFFull
#define MNH_MISC_STS_FUSE_MANINFO_MANINFO_SMASK			0x7FFFFFFFFFFFFFFFull
/*
* Table #26 of 144_Misc_Partition_Registers.xml - MISC_STS_FUSE_MANDATE
* Manufacturer Efuse information on MANDATE
*/
#define MNH_MISC_STS_FUSE_MANDATE				(MNH_MISC_CSRS + 0x0000000010C8)
#define MNH_MISC_STS_FUSE_MANDATE_RESETCSR			0x0000000000000000ull
#define MNH_MISC_STS_FUSE_MANDATE_RESERVED_63_16_SHIFT		16
#define MNH_MISC_STS_FUSE_MANDATE_RESERVED_63_16_MASK		0xFFFFFFFFFFFFull
#define MNH_MISC_STS_FUSE_MANDATE_RESERVED_63_16_SMASK		0xFFFFFFFFFFFF0000ull
#define MNH_MISC_STS_FUSE_MANDATE_MANDATE_SHIFT			0
#define MNH_MISC_STS_FUSE_MANDATE_MANDATE_MASK			0xFFFFull
#define MNH_MISC_STS_FUSE_MANDATE_MANDATE_SMASK			0xFFFFull
/*
* Table #27 of 144_Misc_Partition_Registers.xml - MISC_STS_FUSE_VERSION
* Contains read-only copies of the #%%#FuseVersion#%%# and #%%#ASICRevisionInfo#%%# 
* fuses listed in #%%#Table 18-2, #%%#'EFUSE List For SOC_EFUSE' 
* #%%#.
*/
#define MNH_MISC_STS_FUSE_VERSION				(MNH_MISC_CSRS + 0x0000000010D0)
#define MNH_MISC_STS_FUSE_VERSION_RESETCSR			0x0001010000000000ull
#define MNH_MISC_STS_FUSE_VERSION_ASICREVISIONINFO_SHIFT	32
#define MNH_MISC_STS_FUSE_VERSION_ASICREVISIONINFO_MASK		0xFFFFFFFFull
#define MNH_MISC_STS_FUSE_VERSION_ASICREVISIONINFO_SMASK	0xFFFFFFFF00000000ull
#define MNH_MISC_STS_FUSE_VERSION_RESERVED_31_16_SHIFT		16
#define MNH_MISC_STS_FUSE_VERSION_RESERVED_31_16_MASK		0xFFFFull
#define MNH_MISC_STS_FUSE_VERSION_RESERVED_31_16_SMASK		0xFFFF0000ull
#define MNH_MISC_STS_FUSE_VERSION_FUSEVERSION_SHIFT		0
#define MNH_MISC_STS_FUSE_VERSION_FUSEVERSION_MASK		0xFFFFull
#define MNH_MISC_STS_FUSE_VERSION_FUSEVERSION_SMASK		0xFFFFull
/*
* Table #28 of 144_Misc_Partition_Registers.xml - MISC_ERR_STS
* This is the Misc Error Status CSR. Bits are set by hardware or by writing to 
* the MISC_ERR_FRC CSR. Bits are cleared by writing to the MISC_ERR_CLR CSR. 
* Before clearing the error status, it is required that reason of error is 
* cleared. If that is not done, the error will set again and interrupt will be 
* fired again.
*/
#define MNH_MISC_ERR_STS					(MNH_MISC_CSRS + 0x000000001100)
#define MNH_MISC_ERR_STS_RESETCSR				0x0000000000000000ull
#define MNH_MISC_ERR_STS_RESERVED_63_8_SHIFT			8
#define MNH_MISC_ERR_STS_RESERVED_63_8_MASK			0xFFFFFFFFFFFFFFull
#define MNH_MISC_ERR_STS_RESERVED_63_8_SMASK			0xFFFFFFFFFFFFFF00ull
#define MNH_MISC_ERR_STS_MBIST_FAIL_SHIFT			7
#define MNH_MISC_ERR_STS_MBIST_FAIL_MASK			0x1ull
#define MNH_MISC_ERR_STS_MBIST_FAIL_SMASK			0x80ull
#define MNH_MISC_ERR_STS_REI_FAIL_SHIFT				6
#define MNH_MISC_ERR_STS_REI_FAIL_MASK				0x1ull
#define MNH_MISC_ERR_STS_REI_FAIL_SMASK				0x40ull
#define MNH_MISC_ERR_STS_MBIST_TIMEOUT_SHIFT			5
#define MNH_MISC_ERR_STS_MBIST_TIMEOUT_MASK			0x1ull
#define MNH_MISC_ERR_STS_MBIST_TIMEOUT_SMASK			0x20ull
#define MNH_MISC_ERR_STS_REI_TIMEOUT_SHIFT			4
#define MNH_MISC_ERR_STS_REI_TIMEOUT_MASK			0x1ull
#define MNH_MISC_ERR_STS_REI_TIMEOUT_SMASK			0x10ull
#define MNH_MISC_ERR_STS_PLL_LOCK_TIMEOUT_SHIFT			3
#define MNH_MISC_ERR_STS_PLL_LOCK_TIMEOUT_MASK			0x1ull
#define MNH_MISC_ERR_STS_PLL_LOCK_TIMEOUT_SMASK			0x8ull
#define MNH_MISC_ERR_STS_FUSE_LATE_TIMEOUT_SHIFT		2
#define MNH_MISC_ERR_STS_FUSE_LATE_TIMEOUT_MASK			0x1ull
#define MNH_MISC_ERR_STS_FUSE_LATE_TIMEOUT_SMASK		0x4ull
#define MNH_MISC_ERR_STS_FUSE_EARLY_TIMEOUT_SHIFT		1
#define MNH_MISC_ERR_STS_FUSE_EARLY_TIMEOUT_MASK		0x1ull
#define MNH_MISC_ERR_STS_FUSE_EARLY_TIMEOUT_SMASK		0x2ull
#define MNH_MISC_ERR_STS_FUSE_SENSE_TIMEOUT_SHIFT		0
#define MNH_MISC_ERR_STS_FUSE_SENSE_TIMEOUT_MASK		0x1ull
#define MNH_MISC_ERR_STS_FUSE_SENSE_TIMEOUT_SMASK		0x1ull
/*
* Table #29 of 144_Misc_Partition_Registers.xml - MISC_ERR_CLR
* This is the Misc Error Clear CSR. Writing a 1 to a valid bit will clear the 
* corresponding bit in the MISC_ERR_STS CSR.
*/
#define MNH_MISC_ERR_CLR					(MNH_MISC_CSRS + 0x000000001108)
#define MNH_MISC_ERR_CLR_RESETCSR				0x0000000000000000ull
#define MNH_MISC_ERR_CLR_RESERVED_63_8_SHIFT			8
#define MNH_MISC_ERR_CLR_RESERVED_63_8_MASK			0xFFFFFFFFFFFFFFull
#define MNH_MISC_ERR_CLR_RESERVED_63_8_SMASK			0xFFFFFFFFFFFFFF00ull
#define MNH_MISC_ERR_CLR_MBIST_FAIL_SHIFT			7
#define MNH_MISC_ERR_CLR_MBIST_FAIL_MASK			0x1ull
#define MNH_MISC_ERR_CLR_MBIST_FAIL_SMASK			0x80ull
#define MNH_MISC_ERR_CLR_REI_FAIL_SHIFT				6
#define MNH_MISC_ERR_CLR_REI_FAIL_MASK				0x1ull
#define MNH_MISC_ERR_CLR_REI_FAIL_SMASK				0x40ull
#define MNH_MISC_ERR_CLR_MBIST_TIMEOUT_SHIFT			5
#define MNH_MISC_ERR_CLR_MBIST_TIMEOUT_MASK			0x1ull
#define MNH_MISC_ERR_CLR_MBIST_TIMEOUT_SMASK			0x20ull
#define MNH_MISC_ERR_CLR_REI_TIMEOUT_SHIFT			4
#define MNH_MISC_ERR_CLR_REI_TIMEOUT_MASK			0x1ull
#define MNH_MISC_ERR_CLR_REI_TIMEOUT_SMASK			0x10ull
#define MNH_MISC_ERR_CLR_PLL_LOCK_TIMEOUT_SHIFT			3
#define MNH_MISC_ERR_CLR_PLL_LOCK_TIMEOUT_MASK			0x1ull
#define MNH_MISC_ERR_CLR_PLL_LOCK_TIMEOUT_SMASK			0x8ull
#define MNH_MISC_ERR_CLR_FUSE_LATE_TIMEOUT_SHIFT		2
#define MNH_MISC_ERR_CLR_FUSE_LATE_TIMEOUT_MASK			0x1ull
#define MNH_MISC_ERR_CLR_FUSE_LATE_TIMEOUT_SMASK		0x4ull
#define MNH_MISC_ERR_CLR_FUSE_EARLY_TIMEOUT_SHIFT		1
#define MNH_MISC_ERR_CLR_FUSE_EARLY_TIMEOUT_MASK		0x1ull
#define MNH_MISC_ERR_CLR_FUSE_EARLY_TIMEOUT_SMASK		0x2ull
#define MNH_MISC_ERR_CLR_FUSE_SENSE_TIMEOUT_SHIFT		0
#define MNH_MISC_ERR_CLR_FUSE_SENSE_TIMEOUT_MASK		0x1ull
#define MNH_MISC_ERR_CLR_FUSE_SENSE_TIMEOUT_SMASK		0x1ull
/*
* Table #30 of 144_Misc_Partition_Registers.xml - MISC_ERR_FRC
* This is the Misc Error Force CSR. Writing a 1 to a valid bit will set the 
* corresponding bit in the MISC_ERR_STS CSR.
*/
#define MNH_MISC_ERR_FRC					(MNH_MISC_CSRS + 0x000000001110)
#define MNH_MISC_ERR_FRC_RESETCSR				0x0000000000000000ull
#define MNH_MISC_ERR_FRC_RESERVED_63_8_SHIFT			8
#define MNH_MISC_ERR_FRC_RESERVED_63_8_MASK			0xFFFFFFFFFFFFFFull
#define MNH_MISC_ERR_FRC_RESERVED_63_8_SMASK			0xFFFFFFFFFFFFFF00ull
#define MNH_MISC_ERR_FRC_MBIST_FAIL_SHIFT			7
#define MNH_MISC_ERR_FRC_MBIST_FAIL_MASK			0x1ull
#define MNH_MISC_ERR_FRC_MBIST_FAIL_SMASK			0x80ull
#define MNH_MISC_ERR_FRC_REI_FAIL_SHIFT				6
#define MNH_MISC_ERR_FRC_REI_FAIL_MASK				0x1ull
#define MNH_MISC_ERR_FRC_REI_FAIL_SMASK				0x40ull
#define MNH_MISC_ERR_FRC_MBIST_TIMEOUT_SHIFT			5
#define MNH_MISC_ERR_FRC_MBIST_TIMEOUT_MASK			0x1ull
#define MNH_MISC_ERR_FRC_MBIST_TIMEOUT_SMASK			0x20ull
#define MNH_MISC_ERR_FRC_REI_TIMEOUT_SHIFT			4
#define MNH_MISC_ERR_FRC_REI_TIMEOUT_MASK			0x1ull
#define MNH_MISC_ERR_FRC_REI_TIMEOUT_SMASK			0x10ull
#define MNH_MISC_ERR_FRC_PLL_LOCK_TIMEOUT_SHIFT			3
#define MNH_MISC_ERR_FRC_PLL_LOCK_TIMEOUT_MASK			0x1ull
#define MNH_MISC_ERR_FRC_PLL_LOCK_TIMEOUT_SMASK			0x8ull
#define MNH_MISC_ERR_FRC_FUSE_LATE_TIMEOUT_SHIFT		2
#define MNH_MISC_ERR_FRC_FUSE_LATE_TIMEOUT_MASK			0x1ull
#define MNH_MISC_ERR_FRC_FUSE_LATE_TIMEOUT_SMASK		0x4ull
#define MNH_MISC_ERR_FRC_FUSE_EARLY_TIMEOUT_SHIFT		1
#define MNH_MISC_ERR_FRC_FUSE_EARLY_TIMEOUT_MASK		0x1ull
#define MNH_MISC_ERR_FRC_FUSE_EARLY_TIMEOUT_SMASK		0x2ull
#define MNH_MISC_ERR_FRC_FUSE_SENSE_TIMEOUT_SHIFT		0
#define MNH_MISC_ERR_FRC_FUSE_SENSE_TIMEOUT_MASK		0x1ull
#define MNH_MISC_ERR_FRC_FUSE_SENSE_TIMEOUT_SMASK		0x1ull
/*
* Table #31 of 144_Misc_Partition_Registers.xml - MISC_ERR_EN_HOST
* This is the Misc Error Enable for the HFI Interrupt. If a bit is set, the 
* corresponding error bit in MISC_ERR_STS will cause an interrupt on the HFI 
* interrupt signal.
*/
#define MNH_MISC_ERR_EN_HOST					(MNH_MISC_CSRS + 0x000000001118)
#define MNH_MISC_ERR_EN_HOST_RESETCSR				0x0000000000000000ull
#define MNH_MISC_ERR_EN_HOST_RESERVED_63_8_SHIFT		8
#define MNH_MISC_ERR_EN_HOST_RESERVED_63_8_MASK			0xFFFFFFFFFFFFFFull
#define MNH_MISC_ERR_EN_HOST_RESERVED_63_8_SMASK		0xFFFFFFFFFFFFFF00ull
#define MNH_MISC_ERR_EN_HOST_MBIST_FAIL_SHIFT			7
#define MNH_MISC_ERR_EN_HOST_MBIST_FAIL_MASK			0x1ull
#define MNH_MISC_ERR_EN_HOST_MBIST_FAIL_SMASK			0x80ull
#define MNH_MISC_ERR_EN_HOST_REI_FAIL_SHIFT			6
#define MNH_MISC_ERR_EN_HOST_REI_FAIL_MASK			0x1ull
#define MNH_MISC_ERR_EN_HOST_REI_FAIL_SMASK			0x40ull
#define MNH_MISC_ERR_EN_HOST_MBIST_TIMEOUT_SHIFT		5
#define MNH_MISC_ERR_EN_HOST_MBIST_TIMEOUT_MASK			0x1ull
#define MNH_MISC_ERR_EN_HOST_MBIST_TIMEOUT_SMASK		0x20ull
#define MNH_MISC_ERR_EN_HOST_REI_TIMEOUT_SHIFT			4
#define MNH_MISC_ERR_EN_HOST_REI_TIMEOUT_MASK			0x1ull
#define MNH_MISC_ERR_EN_HOST_REI_TIMEOUT_SMASK			0x10ull
#define MNH_MISC_ERR_EN_HOST_PLL_LOCK_TIMEOUT_SHIFT		3
#define MNH_MISC_ERR_EN_HOST_PLL_LOCK_TIMEOUT_MASK		0x1ull
#define MNH_MISC_ERR_EN_HOST_PLL_LOCK_TIMEOUT_SMASK		0x8ull
#define MNH_MISC_ERR_EN_HOST_FUSE_LATE_TIMEOUT_SHIFT		2
#define MNH_MISC_ERR_EN_HOST_FUSE_LATE_TIMEOUT_MASK		0x1ull
#define MNH_MISC_ERR_EN_HOST_FUSE_LATE_TIMEOUT_SMASK		0x4ull
#define MNH_MISC_ERR_EN_HOST_FUSE_EARLY_TIMEOUT_SHIFT		1
#define MNH_MISC_ERR_EN_HOST_FUSE_EARLY_TIMEOUT_MASK		0x1ull
#define MNH_MISC_ERR_EN_HOST_FUSE_EARLY_TIMEOUT_SMASK		0x2ull
#define MNH_MISC_ERR_EN_HOST_FUSE_SENSE_TIMEOUT_SHIFT		0
#define MNH_MISC_ERR_EN_HOST_FUSE_SENSE_TIMEOUT_MASK		0x1ull
#define MNH_MISC_ERR_EN_HOST_FUSE_SENSE_TIMEOUT_SMASK		0x1ull
/*
* Table #32 of 144_Misc_Partition_Registers.xml - MISC_ERR_FIRST_HOST
* This is the Misc First Error CSR for the HFI interrupt. This register records 
* the state of MISC_ERR_STS register when the HFI interrupt signal, FXR_INT_N, 
* transitions from 1 to 0. It is intended to help identify the first error in a 
* series.
*/
#define MNH_MISC_ERR_FIRST_HOST					(MNH_MISC_CSRS + 0x000000001120)
#define MNH_MISC_ERR_FIRST_HOST_RESETCSR			0x0000000000000000ull
#define MNH_MISC_ERR_FIRST_HOST_RESERVED_63_8_SHIFT		8
#define MNH_MISC_ERR_FIRST_HOST_RESERVED_63_8_MASK		0xFFFFFFFFFFFFFFull
#define MNH_MISC_ERR_FIRST_HOST_RESERVED_63_8_SMASK		0xFFFFFFFFFFFFFF00ull
#define MNH_MISC_ERR_FIRST_HOST_MBIST_FAIL_SHIFT		7
#define MNH_MISC_ERR_FIRST_HOST_MBIST_FAIL_MASK			0x1ull
#define MNH_MISC_ERR_FIRST_HOST_MBIST_FAIL_SMASK		0x80ull
#define MNH_MISC_ERR_FIRST_HOST_REI_FAIL_SHIFT			6
#define MNH_MISC_ERR_FIRST_HOST_REI_FAIL_MASK			0x1ull
#define MNH_MISC_ERR_FIRST_HOST_REI_FAIL_SMASK			0x40ull
#define MNH_MISC_ERR_FIRST_HOST_MBIST_TIMEOUT_SHIFT		5
#define MNH_MISC_ERR_FIRST_HOST_MBIST_TIMEOUT_MASK		0x1ull
#define MNH_MISC_ERR_FIRST_HOST_MBIST_TIMEOUT_SMASK		0x20ull
#define MNH_MISC_ERR_FIRST_HOST_REI_TIMEOUT_SHIFT		4
#define MNH_MISC_ERR_FIRST_HOST_REI_TIMEOUT_MASK		0x1ull
#define MNH_MISC_ERR_FIRST_HOST_REI_TIMEOUT_SMASK		0x10ull
#define MNH_MISC_ERR_FIRST_HOST_PLL_LOCK_TIMEOUT_SHIFT		3
#define MNH_MISC_ERR_FIRST_HOST_PLL_LOCK_TIMEOUT_MASK		0x1ull
#define MNH_MISC_ERR_FIRST_HOST_PLL_LOCK_TIMEOUT_SMASK		0x8ull
#define MNH_MISC_ERR_FIRST_HOST_FUSE_LATE_TIMEOUT_SHIFT		2
#define MNH_MISC_ERR_FIRST_HOST_FUSE_LATE_TIMEOUT_MASK		0x1ull
#define MNH_MISC_ERR_FIRST_HOST_FUSE_LATE_TIMEOUT_SMASK		0x4ull
#define MNH_MISC_ERR_FIRST_HOST_FUSE_EARLY_TIMEOUT_SHIFT	1
#define MNH_MISC_ERR_FIRST_HOST_FUSE_EARLY_TIMEOUT_MASK		0x1ull
#define MNH_MISC_ERR_FIRST_HOST_FUSE_EARLY_TIMEOUT_SMASK	0x2ull
#define MNH_MISC_ERR_FIRST_HOST_FUSE_SENSE_TIMEOUT_SHIFT	0
#define MNH_MISC_ERR_FIRST_HOST_FUSE_SENSE_TIMEOUT_MASK		0x1ull
#define MNH_MISC_ERR_FIRST_HOST_FUSE_SENSE_TIMEOUT_SMASK	0x1ull
/*
* Table #33 of 144_Misc_Partition_Registers.xml - MISC_QSFP_IN
* This CSR is used to read the current value of the QSFP pins (prior to any 
* inversion).
*/
#define MNH_MISC_QSFP_IN					(MNH_MISC_CSRS + 0x000000003000)
#define MNH_MISC_QSFP_IN_RESETCSR				0x000000000000001Bull
#define MNH_MISC_QSFP_IN_RESERVED_63_5_SHIFT			5
#define MNH_MISC_QSFP_IN_RESERVED_63_5_MASK			0x7FFFFFFFFFFFFFFull
#define MNH_MISC_QSFP_IN_RESERVED_63_5_SMASK			0xFFFFFFFFFFFFFFE0ull
#define MNH_MISC_QSFP_IN_QSFP_IN_SHIFT				0
#define MNH_MISC_QSFP_IN_QSFP_IN_MASK				0x1Full
#define MNH_MISC_QSFP_IN_QSFP_IN_SMASK				0x1Full
/*
* Table #34 of 144_Misc_Partition_Registers.xml - MISC_QSFP_OE
* This CSR specifies the output enable for the QSFP pins.
*/
#define MNH_MISC_QSFP_OE					(MNH_MISC_CSRS + 0x000000003008)
#define MNH_MISC_QSFP_OE_RESETCSR				0x0000000000000000ull
#define MNH_MISC_QSFP_OE_RESERVED_63_5_SHIFT			5
#define MNH_MISC_QSFP_OE_RESERVED_63_5_MASK			0x7FFFFFFFFFFFFFFull
#define MNH_MISC_QSFP_OE_RESERVED_63_5_SMASK			0xFFFFFFFFFFFFFFE0ull
#define MNH_MISC_QSFP_OE_QSFP_OE_SHIFT				0
#define MNH_MISC_QSFP_OE_QSFP_OE_MASK				0x1Full
#define MNH_MISC_QSFP_OE_QSFP_OE_SMASK				0x1Full
/*
* Table #35 of 144_Misc_Partition_Registers.xml - MISC_QSFP_INVERT
* This CSR specifies whether the read value of the QSFP pins should be inverted 
* or not.
*/
#define MNH_MISC_QSFP_INVERT					(MNH_MISC_CSRS + 0x000000003010)
#define MNH_MISC_QSFP_INVERT_RESETCSR				0x0000000000000000ull
#define MNH_MISC_QSFP_INVERT_RESERVED_63_5_SHIFT		5
#define MNH_MISC_QSFP_INVERT_RESERVED_63_5_MASK			0x7FFFFFFFFFFFFFFull
#define MNH_MISC_QSFP_INVERT_RESERVED_63_5_SMASK		0xFFFFFFFFFFFFFFE0ull
#define MNH_MISC_QSFP_INVERT_QSFP_INVERT_SHIFT			0
#define MNH_MISC_QSFP_INVERT_QSFP_INVERT_MASK			0x1Full
#define MNH_MISC_QSFP_INVERT_QSFP_INVERT_SMASK			0x1Full
/*
* Table #36 of 144_Misc_Partition_Registers.xml - MISC_QSFP_OUT
* This CSR specifies the output value of the QSFP pins.
*/
#define MNH_MISC_QSFP_OUT					(MNH_MISC_CSRS + 0x000000003018)
#define MNH_MISC_QSFP_OUT_RESETCSR				0x0000000000000004ull
#define MNH_MISC_QSFP_OUT_RESERVED_63_5_SHIFT			5
#define MNH_MISC_QSFP_OUT_RESERVED_63_5_MASK			0x7FFFFFFFFFFFFFFull
#define MNH_MISC_QSFP_OUT_RESERVED_63_5_SMASK			0xFFFFFFFFFFFFFFE0ull
#define MNH_MISC_QSFP_OUT_QSFP_OUT_SHIFT			0
#define MNH_MISC_QSFP_OUT_QSFP_OUT_MASK				0x1Full
#define MNH_MISC_QSFP_OUT_QSFP_OUT_SMASK			0x1Full
/*
* Table #37 of 144_Misc_Partition_Registers.xml - MISC_QSFP_MASK
* This CSR specifies the mask value for the QSFP pins and is used to mask the 
* QSFP status value to indicate whether the QSFP interrupt is to be 
* delivered.
*/
#define MNH_MISC_QSFP_MASK					(MNH_MISC_CSRS + 0x000000003020)
#define MNH_MISC_QSFP_MASK_RESETCSR				0x0000000000000000ull
#define MNH_MISC_QSFP_MASK_RESERVED_63_5_SHIFT			5
#define MNH_MISC_QSFP_MASK_RESERVED_63_5_MASK			0x7FFFFFFFFFFFFFFull
#define MNH_MISC_QSFP_MASK_RESERVED_63_5_SMASK			0xFFFFFFFFFFFFFFE0ull
#define MNH_MISC_QSFP_MASK_QSFP_MASK_SHIFT			0
#define MNH_MISC_QSFP_MASK_QSFP_MASK_MASK			0x1Full
#define MNH_MISC_QSFP_MASK_QSFP_MASK_SMASK			0x1Full
/*
* Table #38 of 144_Misc_Partition_Registers.xml - MISC_QSFP_STATUS
* This CSR can be used to read the QSFP status.
*/
#define MNH_MISC_QSFP_STATUS					(MNH_MISC_CSRS + 0x000000003028)
#define MNH_MISC_QSFP_STATUS_RESETCSR				0x000000000000001Bull
#define MNH_MISC_QSFP_STATUS_RESERVED_63_5_SHIFT		5
#define MNH_MISC_QSFP_STATUS_RESERVED_63_5_MASK			0x7FFFFFFFFFFFFFFull
#define MNH_MISC_QSFP_STATUS_RESERVED_63_5_SMASK		0xFFFFFFFFFFFFFFE0ull
#define MNH_MISC_QSFP_STATUS_QSFP_STATUS_SHIFT			0
#define MNH_MISC_QSFP_STATUS_QSFP_STATUS_MASK			0x1Full
#define MNH_MISC_QSFP_STATUS_QSFP_STATUS_SMASK			0x1Full
/*
* Table #39 of 144_Misc_Partition_Registers.xml - MISC_QSFP_CLEAR
* This CSR can be used to clear the QSFP status.
*/
#define MNH_MISC_QSFP_CLEAR					(MNH_MISC_CSRS + 0x000000003030)
#define MNH_MISC_QSFP_CLEAR_RESETCSR				0x0000000000000000ull
#define MNH_MISC_QSFP_CLEAR_RESERVED_63_5_SHIFT			5
#define MNH_MISC_QSFP_CLEAR_RESERVED_63_5_MASK			0x7FFFFFFFFFFFFFFull
#define MNH_MISC_QSFP_CLEAR_RESERVED_63_5_SMASK			0xFFFFFFFFFFFFFFE0ull
#define MNH_MISC_QSFP_CLEAR_QSFP_CLEAR_SHIFT			0
#define MNH_MISC_QSFP_CLEAR_QSFP_CLEAR_MASK			0x1Full
#define MNH_MISC_QSFP_CLEAR_QSFP_CLEAR_SMASK			0x1Full
/*
* Table #40 of 144_Misc_Partition_Registers.xml - MISC_QSFP_FORCE
* This CSR can be used to force the QSFP status.
*/
#define MNH_MISC_QSFP_FORCE					(MNH_MISC_CSRS + 0x000000003038)
#define MNH_MISC_QSFP_FORCE_RESETCSR				0x0000000000000000ull
#define MNH_MISC_QSFP_FORCE_RESERVED_63_5_SHIFT			5
#define MNH_MISC_QSFP_FORCE_RESERVED_63_5_MASK			0x7FFFFFFFFFFFFFFull
#define MNH_MISC_QSFP_FORCE_RESERVED_63_5_SMASK			0xFFFFFFFFFFFFFFE0ull
#define MNH_MISC_QSFP_FORCE_QSFP_FORCE_SHIFT			0
#define MNH_MISC_QSFP_FORCE_QSFP_FORCE_MASK			0x1Full
#define MNH_MISC_QSFP_FORCE_QSFP_FORCE_SMASK			0x1Full
/*
* Table #41 of 144_Misc_Partition_Registers.xml - MISC_VISA_CMD
* This CSR provides VISA controller command interface. Address, command and 
* security mode details are provided in this register.
*/
#define MNH_MISC_VISA_CMD					(MNH_MISC_CSRS + 0x000000005000)
#define MNH_MISC_VISA_CMD_RESETCSR				0x0000000001000000ull
#define MNH_MISC_VISA_CMD_RESERVED_63_32_SHIFT			32
#define MNH_MISC_VISA_CMD_RESERVED_63_32_MASK			0xFFFFFFFFull
#define MNH_MISC_VISA_CMD_RESERVED_63_32_SMASK			0xFFFFFFFF00000000ull
#define MNH_MISC_VISA_CMD_UNUSED_31_26_SHIFT			26
#define MNH_MISC_VISA_CMD_UNUSED_31_26_MASK			0x3Full
#define MNH_MISC_VISA_CMD_UNUSED_31_26_SMASK			0xFC000000ull
#define MNH_MISC_VISA_CMD_VISA_SECURE_SHIFT			25
#define MNH_MISC_VISA_CMD_VISA_SECURE_MASK			0x1ull
#define MNH_MISC_VISA_CMD_VISA_SECURE_SMASK			0x2000000ull
#define MNH_MISC_VISA_CMD_VISA_WR_GET_SHIFT			24
#define MNH_MISC_VISA_CMD_VISA_WR_GET_MASK			0x1ull
#define MNH_MISC_VISA_CMD_VISA_WR_GET_SMASK			0x1000000ull
#define MNH_MISC_VISA_CMD_VISA_TRIGGER_IN_SHIFT			16
#define MNH_MISC_VISA_CMD_VISA_TRIGGER_IN_MASK			0xFFull
#define MNH_MISC_VISA_CMD_VISA_TRIGGER_IN_SMASK			0xFF0000ull
#define MNH_MISC_VISA_CMD_VISA_RD_EN_SHIFT			15
#define MNH_MISC_VISA_CMD_VISA_RD_EN_MASK			0x1ull
#define MNH_MISC_VISA_CMD_VISA_RD_EN_SMASK			0x8000ull
#define MNH_MISC_VISA_CMD_VISA_WR_AVAIL_SHIFT			14
#define MNH_MISC_VISA_CMD_VISA_WR_AVAIL_MASK			0x1ull
#define MNH_MISC_VISA_CMD_VISA_WR_AVAIL_SMASK			0x4000ull
#define MNH_MISC_VISA_CMD_VISA_ADDR_SHIFT			0
#define MNH_MISC_VISA_CMD_VISA_ADDR_MASK			0x3FFFull
#define MNH_MISC_VISA_CMD_VISA_ADDR_SMASK			0x3FFFull
/*
* Table #42 of 144_Misc_Partition_Registers.xml - MISC_VISA_DATA
* This CSR is visa controller data interface.
*/
#define MNH_MISC_VISA_DATA					(MNH_MISC_CSRS + 0x000000005008)
#define MNH_MISC_VISA_DATA_RESETCSR				0x0000000000000000ull
#define MNH_MISC_VISA_DATA_RESERVED_63_32_SHIFT			32
#define MNH_MISC_VISA_DATA_RESERVED_63_32_MASK			0xFFFFFFFFull
#define MNH_MISC_VISA_DATA_RESERVED_63_32_SMASK			0xFFFFFFFF00000000ull
#define MNH_MISC_VISA_DATA_VISA_DATA_SHIFT			0
#define MNH_MISC_VISA_DATA_VISA_DATA_MASK			0xFFFFFFFFull
#define MNH_MISC_VISA_DATA_VISA_DATA_SMASK			0xFFFFFFFFull

#endif 		/* DEF_MNH_MISC_SW_DEF */
