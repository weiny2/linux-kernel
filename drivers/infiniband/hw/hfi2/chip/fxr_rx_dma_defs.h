/*
*------------------------------------------------------------------------------
*                                                                              
*  INTEL CONFIDENTIAL                                                          
*                                                                              
*  Copyright 2016 Intel Corporation All Rights Reserved.                 
*                                                                              
*  The source code contained or described herein and all documents related     
*  to the source code ("Material") are owned by Intel Corporation or its    
*  suppliers or licensors. Title to the Material remains with Intel            
*  Corporation or its suppliers and licensors. The Material contains trade     
*  secrets and proprietary and confidential information of Intel or its        
*  suppliers and licensors. The Material is protected by worldwide copyright   
*  and trade secret laws and treaty provisions. No part of the Material may    
*  be used, copied, reproduced, modified, published, uploaded, posted,         
*  transmitted, distributed, or disclosed in any way without Intel's prior     
*  express written permission.                                                 
*                                                                              
*  No license under any patent, copyright, trade secret or other intellectual  
*  property right is granted to or conferred upon you by disclosure or         
*  delivery of the Materials, either expressly, by implication, inducement,    
*  estoppel or otherwise. Any license under such intellectual property rights  
*  must be express and approved by Intel in writing.                           
*                                                                              
*------------------------------------------------------------------------------
*  Auto-generated by /nfs/sc/disks/slx_0108/pvesv/fxr_autogen/i_csrs.pl
*  i_csrs.pl Version 1.5 last modified on Monday 12/19/16 11:42:34
*  /nfs/sc/disks/slx_0108/pvesv/fxr_autogen/i_csrs.pl -C -RVREGS -ST fxr_rx_dma -o /nfs/sc/disks/slx_0108/pvesv/fxr_autogen/fxr /nfs/sc/disks/slx_0108/pvesv/fxr_autogen/repo_xml/300_Memory_Map.xml /nfs/sc/disks/slx_0108/pvesv/fxr_autogen/repo_xml/333_Memory_Map_RX_DMA.xml
*------------------------------------------------------------------------------
*/

#ifndef DEF_FXR_RX_DMA_SW_DEF
#define DEF_FXR_RX_DMA_SW_DEF

#ifndef FXR_RX_DMA_CSRS
#define FXR_RX_DMA_CSRS						0x000000000000ULL
#endif
#define FXR_NUM_CONTEXTS					192
#define FXR_NUM_PIDS						4096
#define FXR_MAX_CONTEXT						191
#define FXR_TX_CONTEXT_ENTRIES					128
#define FXR_TX_CONTEXT_MAX					127
#define FXR_RX_CONTEXT_ENTRIES					16
#define FXR_RX_CONTEXT_MAX					15
#define FXR_NUM_SL						32
#define FXR_MAX_SL						31
#define RXDMA_BASE						0
#define RXDMA_NUM_BUFFERS					8
#define RXDMA_NUM_BUF_MSB					7
#define RXDMA_LINKED_LIST_DEPTH					256
#define RXDMA_LL_MSB						255
#define RXDMA_BUFFER_DEPTH					512
#define RXDMA_BUF_MSB						511
#define RXDMA_WAR_BUFFER_DEPTH					2048
#define RXDMA_WAR_MSB						2047
/*
* Table #4 of fxr_top - RXDMA_CFG_BUFFER
* This is an RX DMA configuration CSR. It allows adjusting the depth and 
* initialization method of the DMA buffers.
*/
#define FXR_RXDMA_CFG_BUFFER					(FXR_RX_DMA_CSRS + 0x000000000000)
#define FXR_RXDMA_CFG_BUFFER_RESETCSR				0x00000000000700FFull
#define FXR_RXDMA_CFG_BUFFER_RESERVED_63_21_SHIFT		21
#define FXR_RXDMA_CFG_BUFFER_RESERVED_63_21_MASK		0x7FFFFFFFFFFull
#define FXR_RXDMA_CFG_BUFFER_RESERVED_63_21_SMASK		0xFFFFFFFFFFE00000ull
#define FXR_RXDMA_CFG_BUFFER_ALMOST_BUFFER_SHIFT		16
#define FXR_RXDMA_CFG_BUFFER_ALMOST_BUFFER_MASK			0x1Full
#define FXR_RXDMA_CFG_BUFFER_ALMOST_BUFFER_SMASK		0x1F0000ull
#define FXR_RXDMA_CFG_BUFFER_RESERVED_15_8_SHIFT		8
#define FXR_RXDMA_CFG_BUFFER_RESERVED_15_8_MASK			0xFFull
#define FXR_RXDMA_CFG_BUFFER_RESERVED_15_8_SMASK		0xFF00ull
#define FXR_RXDMA_CFG_BUFFER_DEPTH_LIMIT_SHIFT			0
#define FXR_RXDMA_CFG_BUFFER_DEPTH_LIMIT_MASK			0xFFull
#define FXR_RXDMA_CFG_BUFFER_DEPTH_LIMIT_SMASK			0xFFull
/*
* Table #5 of fxr_top - RXDMA_CFG_CONTROL
* This is an RX DMA configuration CSR. It controls general settings for the 
* RxDMA.
*/
#define FXR_RXDMA_CFG_CONTROL					(FXR_RX_DMA_CSRS + 0x000000000040)
#define FXR_RXDMA_CFG_CONTROL_RESETCSR				0x0000000000000000ull
#define FXR_RXDMA_CFG_CONTROL_GEN1_DO_SHIFT			56
#define FXR_RXDMA_CFG_CONTROL_GEN1_DO_MASK			0xFFull
#define FXR_RXDMA_CFG_CONTROL_GEN1_DO_SMASK			0xFF00000000000000ull
#define FXR_RXDMA_CFG_CONTROL_LBS_SHIFT				48
#define FXR_RXDMA_CFG_CONTROL_LBS_MASK				0xFFull
#define FXR_RXDMA_CFG_CONTROL_LBS_SMASK				0xFF000000000000ull
#define FXR_RXDMA_CFG_CONTROL_RCRO_SHIFT			40
#define FXR_RXDMA_CFG_CONTROL_RCRO_MASK				0xFFull
#define FXR_RXDMA_CFG_CONTROL_RCRO_SMASK			0xFF0000000000ull
#define FXR_RXDMA_CFG_CONTROL_RCWO_SHIFT			32
#define FXR_RXDMA_CFG_CONTROL_RCWO_MASK				0xFFull
#define FXR_RXDMA_CFG_CONTROL_RCWO_SMASK			0xFF00000000ull
#define FXR_RXDMA_CFG_CONTROL_RO_SHIFT				24
#define FXR_RXDMA_CFG_CONTROL_RO_MASK				0xFFull
#define FXR_RXDMA_CFG_CONTROL_RO_SMASK				0xFF000000ull
#define FXR_RXDMA_CFG_CONTROL_WO_SHIFT				16
#define FXR_RXDMA_CFG_CONTROL_WO_MASK				0xFFull
#define FXR_RXDMA_CFG_CONTROL_WO_SMASK				0xFF0000ull
#define FXR_RXDMA_CFG_CONTROL_SEO_SHIFT				15
#define FXR_RXDMA_CFG_CONTROL_SEO_MASK				0x1ull
#define FXR_RXDMA_CFG_CONTROL_SEO_SMASK				0x8000ull
#define FXR_RXDMA_CFG_CONTROL_RESERVED_14_11_SHIFT		11
#define FXR_RXDMA_CFG_CONTROL_RESERVED_14_11_MASK		0xFull
#define FXR_RXDMA_CFG_CONTROL_RESERVED_14_11_SMASK		0x7800ull
#define FXR_RXDMA_CFG_CONTROL_CT_BLOCK_ALL_TO_SHIFT		10
#define FXR_RXDMA_CFG_CONTROL_CT_BLOCK_ALL_TO_MASK		0x1ull
#define FXR_RXDMA_CFG_CONTROL_CT_BLOCK_ALL_TO_SMASK		0x400ull
#define FXR_RXDMA_CFG_CONTROL_CT_INT_BLOCK_TO_SHIFT		9
#define FXR_RXDMA_CFG_CONTROL_CT_INT_BLOCK_TO_MASK		0x1ull
#define FXR_RXDMA_CFG_CONTROL_CT_INT_BLOCK_TO_SMASK		0x200ull
#define FXR_RXDMA_CFG_CONTROL_CT_EVENT_CHECK_SHIFT		8
#define FXR_RXDMA_CFG_CONTROL_CT_EVENT_CHECK_MASK		0x1ull
#define FXR_RXDMA_CFG_CONTROL_CT_EVENT_CHECK_SMASK		0x100ull
#define FXR_RXDMA_CFG_CONTROL_RESERVED_7_1_SHIFT		1
#define FXR_RXDMA_CFG_CONTROL_RESERVED_7_1_MASK			0x7Full
#define FXR_RXDMA_CFG_CONTROL_RESERVED_7_1_SMASK		0xFEull
#define FXR_RXDMA_CFG_CONTROL_EXT_ACK_SHIFT			0
#define FXR_RXDMA_CFG_CONTROL_EXT_ACK_MASK			0x1ull
#define FXR_RXDMA_CFG_CONTROL_EXT_ACK_SMASK			0x1ull
/*
* Table #6 of fxr_top - RXDMA_CFG_CMD_CREDITS
* This is an RX DMA configuration CSR. It controls general settings for the 
* RxDMA.
*/
#define FXR_RXDMA_CFG_CMD_CREDITS				(FXR_RX_DMA_CSRS + 0x000000000048)
#define FXR_RXDMA_CFG_CMD_CREDITS_RESETCSR			0x000000000000102Aull
#define FXR_RXDMA_CFG_CMD_CREDITS_RESERVED_63_13_SHIFT		13
#define FXR_RXDMA_CFG_CMD_CREDITS_RESERVED_63_13_MASK		0x7FFFFFFFFFFFFull
#define FXR_RXDMA_CFG_CMD_CREDITS_RESERVED_63_13_SMASK		0xFFFFFFFFFFFFE000ull
#define FXR_RXDMA_CFG_CMD_CREDITS_MC1_CREDITS_SHIFT		8
#define FXR_RXDMA_CFG_CMD_CREDITS_MC1_CREDITS_MASK		0x1Full
#define FXR_RXDMA_CFG_CMD_CREDITS_MC1_CREDITS_SMASK		0x1F00ull
#define FXR_RXDMA_CFG_CMD_CREDITS_RESERVED_7_SHIFT		7
#define FXR_RXDMA_CFG_CMD_CREDITS_RESERVED_7_MASK		0x1ull
#define FXR_RXDMA_CFG_CMD_CREDITS_RESERVED_7_SMASK		0x80ull
#define FXR_RXDMA_CFG_CMD_CREDITS_MC0_CREDITS_SHIFT		0
#define FXR_RXDMA_CFG_CMD_CREDITS_MC0_CREDITS_MASK		0x7Full
#define FXR_RXDMA_CFG_CMD_CREDITS_MC0_CREDITS_SMASK		0x7Full
/*
* Table #7 of fxr_top - RXDMA_CFG_CH_CTRL
* This RX DMA configuration CSR holds the Cache Hints to be used for the various 
* HI commands. These are muxed to the HI for the specified command. Hints are 
* 00=Non-Allocating, Non-Temporal, 01=Non-Allocating, Temporal LLC, 
* 10=Allocating L1, Non-Temporal L1, 11=Allocating L1, Temporal 
* L1.
*/
#define FXR_RXDMA_CFG_CH_CTRL					(FXR_RX_DMA_CSRS + 0x000000000050)
#define FXR_RXDMA_CFG_CH_CTRL_RESETCSR				0x0000000000020F09ull
#define FXR_RXDMA_CFG_CH_CTRL_RESERVED_63_18_SHIFT		18
#define FXR_RXDMA_CFG_CH_CTRL_RESERVED_63_18_MASK		0x3FFFFFFFFFFFull
#define FXR_RXDMA_CFG_CH_CTRL_RESERVED_63_18_SMASK		0xFFFFFFFFFFFC0000ull
#define FXR_RXDMA_CFG_CH_CTRL_CH_EQ_SHIFT			16
#define FXR_RXDMA_CFG_CH_CTRL_CH_EQ_MASK			0x3ull
#define FXR_RXDMA_CFG_CH_CTRL_CH_EQ_SMASK			0x30000ull
#define FXR_RXDMA_CFG_CH_CTRL_CH_TRIG_QUEUE_SHIFT		14
#define FXR_RXDMA_CFG_CH_CTRL_CH_TRIG_QUEUE_MASK		0x3ull
#define FXR_RXDMA_CFG_CH_CTRL_CH_TRIG_QUEUE_SMASK		0xC000ull
#define FXR_RXDMA_CFG_CH_CTRL_RESERVED_13_12_SHIFT		12
#define FXR_RXDMA_CFG_CH_CTRL_RESERVED_13_12_MASK		0x3ull
#define FXR_RXDMA_CFG_CH_CTRL_RESERVED_13_12_SMASK		0x3000ull
#define FXR_RXDMA_CFG_CH_CTRL_CH_CT_SET_SHIFT			10
#define FXR_RXDMA_CFG_CH_CTRL_CH_CT_SET_MASK			0x3ull
#define FXR_RXDMA_CFG_CH_CTRL_CH_CT_SET_SMASK			0xC00ull
#define FXR_RXDMA_CFG_CH_CTRL_CH_CT_SHIFT			8
#define FXR_RXDMA_CFG_CH_CTRL_CH_CT_MASK			0x3ull
#define FXR_RXDMA_CFG_CH_CTRL_CH_CT_SMASK			0x300ull
#define FXR_RXDMA_CFG_CH_CTRL_CH_GET_SMALL_SHIFT		6
#define FXR_RXDMA_CFG_CH_CTRL_CH_GET_SMALL_MASK			0x3ull
#define FXR_RXDMA_CFG_CH_CTRL_CH_GET_SMALL_SMASK		0xC0ull
#define FXR_RXDMA_CFG_CH_CTRL_CH_GET_SHIFT			4
#define FXR_RXDMA_CFG_CH_CTRL_CH_GET_MASK			0x3ull
#define FXR_RXDMA_CFG_CH_CTRL_CH_GET_SMASK			0x30ull
#define FXR_RXDMA_CFG_CH_CTRL_CH_PUT_SMALL_SHIFT		2
#define FXR_RXDMA_CFG_CH_CTRL_CH_PUT_SMALL_MASK			0x3ull
#define FXR_RXDMA_CFG_CH_CTRL_CH_PUT_SMALL_SMASK		0xCull
#define FXR_RXDMA_CFG_CH_CTRL_CH_PUT_SHIFT			0
#define FXR_RXDMA_CFG_CH_CTRL_CH_PUT_MASK			0x3ull
#define FXR_RXDMA_CFG_CH_CTRL_CH_PUT_SMASK			0x3ull
/*
* Table #8 of fxr_top - RXDMA_CFG_BW_SHAPE_B0
* This is an RX DMA configuration CSR for a bucket used in the bandwidth 
* shaping. Software can control the LeakAmount which control the percentage of 
* bandwidth allowed through this bucket and BW_LIMIT which controls how many 
* flits are allowed before blocking is possible. 
*/
#define FXR_RXDMA_CFG_BW_SHAPE_B0				(FXR_RX_DMA_CSRS + 0x000000000060)
#define FXR_RXDMA_CFG_BW_SHAPE_B0_RESETCSR			0x000000010700FFFFull
#define FXR_RXDMA_CFG_BW_SHAPE_B0_UNUSED_63_40_SHIFT		40
#define FXR_RXDMA_CFG_BW_SHAPE_B0_UNUSED_63_40_MASK		0xFFFFFFull
#define FXR_RXDMA_CFG_BW_SHAPE_B0_UNUSED_63_40_SMASK		0xFFFFFF0000000000ull
#define FXR_RXDMA_CFG_BW_SHAPE_B0_METER_CONFIG_SHIFT		32
#define FXR_RXDMA_CFG_BW_SHAPE_B0_METER_CONFIG_MASK		0xFFull
#define FXR_RXDMA_CFG_BW_SHAPE_B0_METER_CONFIG_SMASK		0xFF00000000ull
#define FXR_RXDMA_CFG_BW_SHAPE_B0_UNUSED_31_27_SHIFT		27
#define FXR_RXDMA_CFG_BW_SHAPE_B0_UNUSED_31_27_MASK		0x1Full
#define FXR_RXDMA_CFG_BW_SHAPE_B0_UNUSED_31_27_SMASK		0xF8000000ull
#define FXR_RXDMA_CFG_BW_SHAPE_B0_LEAK_INTEGER_SHIFT		24
#define FXR_RXDMA_CFG_BW_SHAPE_B0_LEAK_INTEGER_MASK		0x7ull
#define FXR_RXDMA_CFG_BW_SHAPE_B0_LEAK_INTEGER_SMASK		0x7000000ull
#define FXR_RXDMA_CFG_BW_SHAPE_B0_LEAK_FRACTION_SHIFT		16
#define FXR_RXDMA_CFG_BW_SHAPE_B0_LEAK_FRACTION_MASK		0xFFull
#define FXR_RXDMA_CFG_BW_SHAPE_B0_LEAK_FRACTION_SMASK		0xFF0000ull
#define FXR_RXDMA_CFG_BW_SHAPE_B0_BW_LIMIT_SHIFT		0
#define FXR_RXDMA_CFG_BW_SHAPE_B0_BW_LIMIT_MASK			0xFFFFull
#define FXR_RXDMA_CFG_BW_SHAPE_B0_BW_LIMIT_SMASK		0xFFFFull
/*
* Table #9 of fxr_top - RXDMA_CFG_BW_SHAPE_B1
* This is an RX DMA configuration CSR for a bucket used in the bandwidth 
* shaping. Software can control the LeakAmount which control the percentage of 
* bandwidth allowed through this bucket and BW_LIMIT which controls how many 
* flits are allowed before blocking is possible. 
*/
#define FXR_RXDMA_CFG_BW_SHAPE_B1				(FXR_RX_DMA_CSRS + 0x000000000068)
#define FXR_RXDMA_CFG_BW_SHAPE_B1_RESETCSR			0x000000020700FFFFull
#define FXR_RXDMA_CFG_BW_SHAPE_B1_UNUSED_63_40_SHIFT		40
#define FXR_RXDMA_CFG_BW_SHAPE_B1_UNUSED_63_40_MASK		0xFFFFFFull
#define FXR_RXDMA_CFG_BW_SHAPE_B1_UNUSED_63_40_SMASK		0xFFFFFF0000000000ull
#define FXR_RXDMA_CFG_BW_SHAPE_B1_METER_CONFIG_SHIFT		32
#define FXR_RXDMA_CFG_BW_SHAPE_B1_METER_CONFIG_MASK		0xFFull
#define FXR_RXDMA_CFG_BW_SHAPE_B1_METER_CONFIG_SMASK		0xFF00000000ull
#define FXR_RXDMA_CFG_BW_SHAPE_B1_UNUSED_31_27_SHIFT		27
#define FXR_RXDMA_CFG_BW_SHAPE_B1_UNUSED_31_27_MASK		0x1Full
#define FXR_RXDMA_CFG_BW_SHAPE_B1_UNUSED_31_27_SMASK		0xF8000000ull
#define FXR_RXDMA_CFG_BW_SHAPE_B1_LEAK_INTEGER_SHIFT		24
#define FXR_RXDMA_CFG_BW_SHAPE_B1_LEAK_INTEGER_MASK		0x7ull
#define FXR_RXDMA_CFG_BW_SHAPE_B1_LEAK_INTEGER_SMASK		0x7000000ull
#define FXR_RXDMA_CFG_BW_SHAPE_B1_LEAK_FRACTION_SHIFT		16
#define FXR_RXDMA_CFG_BW_SHAPE_B1_LEAK_FRACTION_MASK		0xFFull
#define FXR_RXDMA_CFG_BW_SHAPE_B1_LEAK_FRACTION_SMASK		0xFF0000ull
#define FXR_RXDMA_CFG_BW_SHAPE_B1_BW_LIMIT_SHIFT		0
#define FXR_RXDMA_CFG_BW_SHAPE_B1_BW_LIMIT_MASK			0xFFFFull
#define FXR_RXDMA_CFG_BW_SHAPE_B1_BW_LIMIT_SMASK		0xFFFFull
/*
* Table #10 of fxr_top - RXDMA_CFG_BW_SHAPE_B2
* This is an RX DMA configuration CSR for a bucket used in the bandwidth 
* shaping. Software can control the LeakAmount which control the percentage of 
* bandwidth allowed through this bucket and BW_LIMIT which controls how many 
* flits are allowed before blocking is possible. 
*/
#define FXR_RXDMA_CFG_BW_SHAPE_B2				(FXR_RX_DMA_CSRS + 0x000000000070)
#define FXR_RXDMA_CFG_BW_SHAPE_B2_RESETCSR			0x000000040700FFFFull
#define FXR_RXDMA_CFG_BW_SHAPE_B2_UNUSED_63_40_SHIFT		40
#define FXR_RXDMA_CFG_BW_SHAPE_B2_UNUSED_63_40_MASK		0xFFFFFFull
#define FXR_RXDMA_CFG_BW_SHAPE_B2_UNUSED_63_40_SMASK		0xFFFFFF0000000000ull
#define FXR_RXDMA_CFG_BW_SHAPE_B2_METER_CONFIG_SHIFT		32
#define FXR_RXDMA_CFG_BW_SHAPE_B2_METER_CONFIG_MASK		0xFFull
#define FXR_RXDMA_CFG_BW_SHAPE_B2_METER_CONFIG_SMASK		0xFF00000000ull
#define FXR_RXDMA_CFG_BW_SHAPE_B2_UNUSED_31_27_SHIFT		27
#define FXR_RXDMA_CFG_BW_SHAPE_B2_UNUSED_31_27_MASK		0x1Full
#define FXR_RXDMA_CFG_BW_SHAPE_B2_UNUSED_31_27_SMASK		0xF8000000ull
#define FXR_RXDMA_CFG_BW_SHAPE_B2_LEAK_INTEGER_SHIFT		24
#define FXR_RXDMA_CFG_BW_SHAPE_B2_LEAK_INTEGER_MASK		0x7ull
#define FXR_RXDMA_CFG_BW_SHAPE_B2_LEAK_INTEGER_SMASK		0x7000000ull
#define FXR_RXDMA_CFG_BW_SHAPE_B2_LEAK_FRACTION_SHIFT		16
#define FXR_RXDMA_CFG_BW_SHAPE_B2_LEAK_FRACTION_MASK		0xFFull
#define FXR_RXDMA_CFG_BW_SHAPE_B2_LEAK_FRACTION_SMASK		0xFF0000ull
#define FXR_RXDMA_CFG_BW_SHAPE_B2_BW_LIMIT_SHIFT		0
#define FXR_RXDMA_CFG_BW_SHAPE_B2_BW_LIMIT_MASK			0xFFFFull
#define FXR_RXDMA_CFG_BW_SHAPE_B2_BW_LIMIT_SMASK		0xFFFFull
/*
* Table #11 of fxr_top - RXDMA_CFG_BW_SHAPE_B3
* This is an RX DMA configuration CSR for a bucket used in the bandwidth 
* shaping. Software can control the LeakAmount which control the percentage of 
* bandwidth allowed through this bucket and BW_LIMIT which controls how many 
* flits are allowed before blocking is possible. 
*/
#define FXR_RXDMA_CFG_BW_SHAPE_B3				(FXR_RX_DMA_CSRS + 0x000000000078)
#define FXR_RXDMA_CFG_BW_SHAPE_B3_RESETCSR			0x000000080700FFFFull
#define FXR_RXDMA_CFG_BW_SHAPE_B3_UNUSED_63_40_SHIFT		40
#define FXR_RXDMA_CFG_BW_SHAPE_B3_UNUSED_63_40_MASK		0xFFFFFFull
#define FXR_RXDMA_CFG_BW_SHAPE_B3_UNUSED_63_40_SMASK		0xFFFFFF0000000000ull
#define FXR_RXDMA_CFG_BW_SHAPE_B3_METER_CONFIG_SHIFT		32
#define FXR_RXDMA_CFG_BW_SHAPE_B3_METER_CONFIG_MASK		0xFFull
#define FXR_RXDMA_CFG_BW_SHAPE_B3_METER_CONFIG_SMASK		0xFF00000000ull
#define FXR_RXDMA_CFG_BW_SHAPE_B3_UNUSED_31_27_SHIFT		27
#define FXR_RXDMA_CFG_BW_SHAPE_B3_UNUSED_31_27_MASK		0x1Full
#define FXR_RXDMA_CFG_BW_SHAPE_B3_UNUSED_31_27_SMASK		0xF8000000ull
#define FXR_RXDMA_CFG_BW_SHAPE_B3_LEAK_INTEGER_SHIFT		24
#define FXR_RXDMA_CFG_BW_SHAPE_B3_LEAK_INTEGER_MASK		0x7ull
#define FXR_RXDMA_CFG_BW_SHAPE_B3_LEAK_INTEGER_SMASK		0x7000000ull
#define FXR_RXDMA_CFG_BW_SHAPE_B3_LEAK_FRACTION_SHIFT		16
#define FXR_RXDMA_CFG_BW_SHAPE_B3_LEAK_FRACTION_MASK		0xFFull
#define FXR_RXDMA_CFG_BW_SHAPE_B3_LEAK_FRACTION_SMASK		0xFF0000ull
#define FXR_RXDMA_CFG_BW_SHAPE_B3_BW_LIMIT_SHIFT		0
#define FXR_RXDMA_CFG_BW_SHAPE_B3_BW_LIMIT_MASK			0xFFFFull
#define FXR_RXDMA_CFG_BW_SHAPE_B3_BW_LIMIT_SMASK		0xFFFFull
/*
* Table #12 of fxr_top - RXDMA_CFG_BW_SHAPE_B4
* This is an RX DMA configuration CSR for a bucket used in the bandwidth 
* shaping. Software can control the LeakAmount which control the percentage of 
* bandwidth allowed through this bucket and BW_LIMIT which controls how many 
* flits are allowed before blocking is possible. 
*/
#define FXR_RXDMA_CFG_BW_SHAPE_B4				(FXR_RX_DMA_CSRS + 0x000000000080)
#define FXR_RXDMA_CFG_BW_SHAPE_B4_RESETCSR			0x000000100700FFFFull
#define FXR_RXDMA_CFG_BW_SHAPE_B4_UNUSED_63_40_SHIFT		40
#define FXR_RXDMA_CFG_BW_SHAPE_B4_UNUSED_63_40_MASK		0xFFFFFFull
#define FXR_RXDMA_CFG_BW_SHAPE_B4_UNUSED_63_40_SMASK		0xFFFFFF0000000000ull
#define FXR_RXDMA_CFG_BW_SHAPE_B4_METER_CONFIG_SHIFT		32
#define FXR_RXDMA_CFG_BW_SHAPE_B4_METER_CONFIG_MASK		0xFFull
#define FXR_RXDMA_CFG_BW_SHAPE_B4_METER_CONFIG_SMASK		0xFF00000000ull
#define FXR_RXDMA_CFG_BW_SHAPE_B4_UNUSED_31_27_SHIFT		27
#define FXR_RXDMA_CFG_BW_SHAPE_B4_UNUSED_31_27_MASK		0x1Full
#define FXR_RXDMA_CFG_BW_SHAPE_B4_UNUSED_31_27_SMASK		0xF8000000ull
#define FXR_RXDMA_CFG_BW_SHAPE_B4_LEAK_INTEGER_SHIFT		24
#define FXR_RXDMA_CFG_BW_SHAPE_B4_LEAK_INTEGER_MASK		0x7ull
#define FXR_RXDMA_CFG_BW_SHAPE_B4_LEAK_INTEGER_SMASK		0x7000000ull
#define FXR_RXDMA_CFG_BW_SHAPE_B4_LEAK_FRACTION_SHIFT		16
#define FXR_RXDMA_CFG_BW_SHAPE_B4_LEAK_FRACTION_MASK		0xFFull
#define FXR_RXDMA_CFG_BW_SHAPE_B4_LEAK_FRACTION_SMASK		0xFF0000ull
#define FXR_RXDMA_CFG_BW_SHAPE_B4_BW_LIMIT_SHIFT		0
#define FXR_RXDMA_CFG_BW_SHAPE_B4_BW_LIMIT_MASK			0xFFFFull
#define FXR_RXDMA_CFG_BW_SHAPE_B4_BW_LIMIT_SMASK		0xFFFFull
/*
* Table #13 of fxr_top - RXDMA_CFG_BW_SHAPE_B5
* This is an RX DMA configuration CSR for a bucket used in the bandwidth 
* shaping. Software can control the LeakAmount which control the percentage of 
* bandwidth allowed through this bucket and BW_LIMIT which controls how many 
* flits are allowed before blocking is possible. 
*/
#define FXR_RXDMA_CFG_BW_SHAPE_B5				(FXR_RX_DMA_CSRS + 0x000000000088)
#define FXR_RXDMA_CFG_BW_SHAPE_B5_RESETCSR			0x000000200700FFFFull
#define FXR_RXDMA_CFG_BW_SHAPE_B5_UNUSED_63_40_SHIFT		40
#define FXR_RXDMA_CFG_BW_SHAPE_B5_UNUSED_63_40_MASK		0xFFFFFFull
#define FXR_RXDMA_CFG_BW_SHAPE_B5_UNUSED_63_40_SMASK		0xFFFFFF0000000000ull
#define FXR_RXDMA_CFG_BW_SHAPE_B5_METER_CONFIG_SHIFT		32
#define FXR_RXDMA_CFG_BW_SHAPE_B5_METER_CONFIG_MASK		0xFFull
#define FXR_RXDMA_CFG_BW_SHAPE_B5_METER_CONFIG_SMASK		0xFF00000000ull
#define FXR_RXDMA_CFG_BW_SHAPE_B5_UNUSED_31_27_SHIFT		27
#define FXR_RXDMA_CFG_BW_SHAPE_B5_UNUSED_31_27_MASK		0x1Full
#define FXR_RXDMA_CFG_BW_SHAPE_B5_UNUSED_31_27_SMASK		0xF8000000ull
#define FXR_RXDMA_CFG_BW_SHAPE_B5_LEAK_INTEGER_SHIFT		24
#define FXR_RXDMA_CFG_BW_SHAPE_B5_LEAK_INTEGER_MASK		0x7ull
#define FXR_RXDMA_CFG_BW_SHAPE_B5_LEAK_INTEGER_SMASK		0x7000000ull
#define FXR_RXDMA_CFG_BW_SHAPE_B5_LEAK_FRACTION_SHIFT		16
#define FXR_RXDMA_CFG_BW_SHAPE_B5_LEAK_FRACTION_MASK		0xFFull
#define FXR_RXDMA_CFG_BW_SHAPE_B5_LEAK_FRACTION_SMASK		0xFF0000ull
#define FXR_RXDMA_CFG_BW_SHAPE_B5_BW_LIMIT_SHIFT		0
#define FXR_RXDMA_CFG_BW_SHAPE_B5_BW_LIMIT_MASK			0xFFFFull
#define FXR_RXDMA_CFG_BW_SHAPE_B5_BW_LIMIT_SMASK		0xFFFFull
/*
* Table #14 of fxr_top - RXDMA_CFG_BW_SHAPE_B6
* This is an RX DMA configuration CSR for a bucket used in the bandwidth 
* shaping. Software can control the LeakAmount which control the percentage of 
* bandwidth allowed through this bucket and BW_LIMIT which controls how many 
* flits are allowed before blocking is possible. 
*/
#define FXR_RXDMA_CFG_BW_SHAPE_B6				(FXR_RX_DMA_CSRS + 0x000000000090)
#define FXR_RXDMA_CFG_BW_SHAPE_B6_RESETCSR			0x000000400700FFFFull
#define FXR_RXDMA_CFG_BW_SHAPE_B6_UNUSED_63_40_SHIFT		40
#define FXR_RXDMA_CFG_BW_SHAPE_B6_UNUSED_63_40_MASK		0xFFFFFFull
#define FXR_RXDMA_CFG_BW_SHAPE_B6_UNUSED_63_40_SMASK		0xFFFFFF0000000000ull
#define FXR_RXDMA_CFG_BW_SHAPE_B6_METER_CONFIG_SHIFT		32
#define FXR_RXDMA_CFG_BW_SHAPE_B6_METER_CONFIG_MASK		0xFFull
#define FXR_RXDMA_CFG_BW_SHAPE_B6_METER_CONFIG_SMASK		0xFF00000000ull
#define FXR_RXDMA_CFG_BW_SHAPE_B6_UNUSED_31_27_SHIFT		27
#define FXR_RXDMA_CFG_BW_SHAPE_B6_UNUSED_31_27_MASK		0x1Full
#define FXR_RXDMA_CFG_BW_SHAPE_B6_UNUSED_31_27_SMASK		0xF8000000ull
#define FXR_RXDMA_CFG_BW_SHAPE_B6_LEAK_INTEGER_SHIFT		24
#define FXR_RXDMA_CFG_BW_SHAPE_B6_LEAK_INTEGER_MASK		0x7ull
#define FXR_RXDMA_CFG_BW_SHAPE_B6_LEAK_INTEGER_SMASK		0x7000000ull
#define FXR_RXDMA_CFG_BW_SHAPE_B6_LEAK_FRACTION_SHIFT		16
#define FXR_RXDMA_CFG_BW_SHAPE_B6_LEAK_FRACTION_MASK		0xFFull
#define FXR_RXDMA_CFG_BW_SHAPE_B6_LEAK_FRACTION_SMASK		0xFF0000ull
#define FXR_RXDMA_CFG_BW_SHAPE_B6_BW_LIMIT_SHIFT		0
#define FXR_RXDMA_CFG_BW_SHAPE_B6_BW_LIMIT_MASK			0xFFFFull
#define FXR_RXDMA_CFG_BW_SHAPE_B6_BW_LIMIT_SMASK		0xFFFFull
/*
* Table #15 of fxr_top - RXDMA_CFG_BW_SHAPE_B7
* This is an RX DMA configuration CSR for a bucket used in the bandwidth 
* shaping. Software can control the LeakAmount which control the percentage of 
* bandwidth allowed through this bucket and BW_LIMIT which controls how many 
* flits are allowed before blocking is possible. 
*/
#define FXR_RXDMA_CFG_BW_SHAPE_B7				(FXR_RX_DMA_CSRS + 0x000000000098)
#define FXR_RXDMA_CFG_BW_SHAPE_B7_RESETCSR			0x000000800700FFFFull
#define FXR_RXDMA_CFG_BW_SHAPE_B7_UNUSED_63_40_SHIFT		40
#define FXR_RXDMA_CFG_BW_SHAPE_B7_UNUSED_63_40_MASK		0xFFFFFFull
#define FXR_RXDMA_CFG_BW_SHAPE_B7_UNUSED_63_40_SMASK		0xFFFFFF0000000000ull
#define FXR_RXDMA_CFG_BW_SHAPE_B7_METER_CONFIG_SHIFT		32
#define FXR_RXDMA_CFG_BW_SHAPE_B7_METER_CONFIG_MASK		0xFFull
#define FXR_RXDMA_CFG_BW_SHAPE_B7_METER_CONFIG_SMASK		0xFF00000000ull
#define FXR_RXDMA_CFG_BW_SHAPE_B7_UNUSED_31_27_SHIFT		27
#define FXR_RXDMA_CFG_BW_SHAPE_B7_UNUSED_31_27_MASK		0x1Full
#define FXR_RXDMA_CFG_BW_SHAPE_B7_UNUSED_31_27_SMASK		0xF8000000ull
#define FXR_RXDMA_CFG_BW_SHAPE_B7_LEAK_INTEGER_SHIFT		24
#define FXR_RXDMA_CFG_BW_SHAPE_B7_LEAK_INTEGER_MASK		0x7ull
#define FXR_RXDMA_CFG_BW_SHAPE_B7_LEAK_INTEGER_SMASK		0x7000000ull
#define FXR_RXDMA_CFG_BW_SHAPE_B7_LEAK_FRACTION_SHIFT		16
#define FXR_RXDMA_CFG_BW_SHAPE_B7_LEAK_FRACTION_MASK		0xFFull
#define FXR_RXDMA_CFG_BW_SHAPE_B7_LEAK_FRACTION_SMASK		0xFF0000ull
#define FXR_RXDMA_CFG_BW_SHAPE_B7_BW_LIMIT_SHIFT		0
#define FXR_RXDMA_CFG_BW_SHAPE_B7_BW_LIMIT_MASK			0xFFFFull
#define FXR_RXDMA_CFG_BW_SHAPE_B7_BW_LIMIT_SMASK		0xFFFFull
/*
* Table #16 of fxr_top - RXDMA_CFG_TO_BASE_TC0
* Pointer to the Base of the user memory space used by the Trigger Op logic to 
* hold pointers to triggered operations that couldn't be executed due to back 
* pressure from the TX interface. Pointers are stored here until the back 
* pressure is removed, and then the operations are delivered in the order they 
* were requested. This CSR holds the Virtual Address of the base of the TC0 
* list.
*/
#define FXR_RXDMA_CFG_TO_BASE_TC0				(FXR_RX_DMA_CSRS + 0x0000000000A0)
#define FXR_RXDMA_CFG_TO_BASE_TC0_RESETCSR			0x0000000000000000ull
#define FXR_RXDMA_CFG_TO_BASE_TC0_RESERVED_63_57_SHIFT		57
#define FXR_RXDMA_CFG_TO_BASE_TC0_RESERVED_63_57_MASK		0x7Full
#define FXR_RXDMA_CFG_TO_BASE_TC0_RESERVED_63_57_SMASK		0xFE00000000000000ull
#define FXR_RXDMA_CFG_TO_BASE_TC0_ADDR_SHIFT			6
#define FXR_RXDMA_CFG_TO_BASE_TC0_ADDR_MASK			0x7FFFFFFFFFFFFull
#define FXR_RXDMA_CFG_TO_BASE_TC0_ADDR_SMASK			0x1FFFFFFFFFFFFC0ull
#define FXR_RXDMA_CFG_TO_BASE_TC0_CL_BYTES_SHIFT		0
#define FXR_RXDMA_CFG_TO_BASE_TC0_CL_BYTES_MASK			0x3Full
#define FXR_RXDMA_CFG_TO_BASE_TC0_CL_BYTES_SMASK		0x3Full
/*
* Table #17 of fxr_top - RXDMA_CFG_TO_BOUNDS_TC0
* Pointer to the end of the user memory space used by the Trigger Op logic to 
* hold pointers to triggered operations that couldn't be executed due to back 
* pressure from the TX interface. This CSR holds the Virtual Address of the end 
* of the TC0 list.
*/
#define FXR_RXDMA_CFG_TO_BOUNDS_TC0				(FXR_RX_DMA_CSRS + 0x0000000000A8)
#define FXR_RXDMA_CFG_TO_BOUNDS_TC0_RESETCSR			0x0000000000000000ull
#define FXR_RXDMA_CFG_TO_BOUNDS_TC0_RESERVED_63_57_SHIFT	57
#define FXR_RXDMA_CFG_TO_BOUNDS_TC0_RESERVED_63_57_MASK		0x7Full
#define FXR_RXDMA_CFG_TO_BOUNDS_TC0_RESERVED_63_57_SMASK	0xFE00000000000000ull
#define FXR_RXDMA_CFG_TO_BOUNDS_TC0_ADDR_SHIFT			6
#define FXR_RXDMA_CFG_TO_BOUNDS_TC0_ADDR_MASK			0x7FFFFFFFFFFFFull
#define FXR_RXDMA_CFG_TO_BOUNDS_TC0_ADDR_SMASK			0x1FFFFFFFFFFFFC0ull
#define FXR_RXDMA_CFG_TO_BOUNDS_TC0_CL_BYTES_SHIFT		0
#define FXR_RXDMA_CFG_TO_BOUNDS_TC0_CL_BYTES_MASK		0x3Full
#define FXR_RXDMA_CFG_TO_BOUNDS_TC0_CL_BYTES_SMASK		0x3Full
/*
* Table #18 of fxr_top - RXDMA_CFG_TO_BASE_TC1
* Pointer to the Base of the user memory space used by the Trigger Op logic to 
* hold pointers to triggered operations that couldn't be executed due to back 
* pressure from the TX interface. Pointers are stored here until the back 
* pressure is removed, and then the operations are delivered in the order they 
* were requested. This CSR holds the Virtual Address of the base of the TC1 
* list.
*/
#define FXR_RXDMA_CFG_TO_BASE_TC1				(FXR_RX_DMA_CSRS + 0x0000000000B0)
#define FXR_RXDMA_CFG_TO_BASE_TC1_RESETCSR			0x0000000000000000ull
#define FXR_RXDMA_CFG_TO_BASE_TC1_RESERVED_63_57_SHIFT		57
#define FXR_RXDMA_CFG_TO_BASE_TC1_RESERVED_63_57_MASK		0x7Full
#define FXR_RXDMA_CFG_TO_BASE_TC1_RESERVED_63_57_SMASK		0xFE00000000000000ull
#define FXR_RXDMA_CFG_TO_BASE_TC1_ADDR_SHIFT			6
#define FXR_RXDMA_CFG_TO_BASE_TC1_ADDR_MASK			0x7FFFFFFFFFFFFull
#define FXR_RXDMA_CFG_TO_BASE_TC1_ADDR_SMASK			0x1FFFFFFFFFFFFC0ull
#define FXR_RXDMA_CFG_TO_BASE_TC1_CL_BYTES_SHIFT		0
#define FXR_RXDMA_CFG_TO_BASE_TC1_CL_BYTES_MASK			0x3Full
#define FXR_RXDMA_CFG_TO_BASE_TC1_CL_BYTES_SMASK		0x3Full
/*
* Table #19 of fxr_top - RXDMA_CFG_TO_BOUNDS_TC1
* Pointer to the end of the user memory space used by the Trigger Op logic to 
* hold pointers to triggered operations that couldn't be executed due to back 
* pressure from the TX interface. This CSR holds the Virtual Address of the end 
* of the TC1 list.
*/
#define FXR_RXDMA_CFG_TO_BOUNDS_TC1				(FXR_RX_DMA_CSRS + 0x0000000000B8)
#define FXR_RXDMA_CFG_TO_BOUNDS_TC1_RESETCSR			0x0000000000000000ull
#define FXR_RXDMA_CFG_TO_BOUNDS_TC1_RESERVED_63_57_SHIFT	57
#define FXR_RXDMA_CFG_TO_BOUNDS_TC1_RESERVED_63_57_MASK		0x7Full
#define FXR_RXDMA_CFG_TO_BOUNDS_TC1_RESERVED_63_57_SMASK	0xFE00000000000000ull
#define FXR_RXDMA_CFG_TO_BOUNDS_TC1_ADDR_SHIFT			6
#define FXR_RXDMA_CFG_TO_BOUNDS_TC1_ADDR_MASK			0x7FFFFFFFFFFFFull
#define FXR_RXDMA_CFG_TO_BOUNDS_TC1_ADDR_SMASK			0x1FFFFFFFFFFFFC0ull
#define FXR_RXDMA_CFG_TO_BOUNDS_TC1_CL_BYTES_SHIFT		0
#define FXR_RXDMA_CFG_TO_BOUNDS_TC1_CL_BYTES_MASK		0x3Full
#define FXR_RXDMA_CFG_TO_BOUNDS_TC1_CL_BYTES_SMASK		0x3Full
/*
* Table #20 of fxr_top - RXDMA_CFG_TO_BASE_TC2
* Pointer to the Base of the user memory space used by the Trigger Op logic to 
* hold pointers to triggered operations that couldn't be executed due to back 
* pressure from the TX interface. Pointers are stored here until the back 
* pressure is removed, and then the operations are delivered in the order they 
* were requested. This CSR holds the Virtual Address of the base of the TC2 
* list.
*/
#define FXR_RXDMA_CFG_TO_BASE_TC2				(FXR_RX_DMA_CSRS + 0x0000000000C0)
#define FXR_RXDMA_CFG_TO_BASE_TC2_RESETCSR			0x0000000000000000ull
#define FXR_RXDMA_CFG_TO_BASE_TC2_RESERVED_63_57_SHIFT		57
#define FXR_RXDMA_CFG_TO_BASE_TC2_RESERVED_63_57_MASK		0x7Full
#define FXR_RXDMA_CFG_TO_BASE_TC2_RESERVED_63_57_SMASK		0xFE00000000000000ull
#define FXR_RXDMA_CFG_TO_BASE_TC2_ADDR_SHIFT			6
#define FXR_RXDMA_CFG_TO_BASE_TC2_ADDR_MASK			0x7FFFFFFFFFFFFull
#define FXR_RXDMA_CFG_TO_BASE_TC2_ADDR_SMASK			0x1FFFFFFFFFFFFC0ull
#define FXR_RXDMA_CFG_TO_BASE_TC2_CL_BYTES_SHIFT		0
#define FXR_RXDMA_CFG_TO_BASE_TC2_CL_BYTES_MASK			0x3Full
#define FXR_RXDMA_CFG_TO_BASE_TC2_CL_BYTES_SMASK		0x3Full
/*
* Table #21 of fxr_top - RXDMA_CFG_TO_BOUNDS_TC2
* Pointer to the end of the user memory space used by the Trigger Op logic to 
* hold pointers to triggered operations that couldn't be executed due to back 
* pressure from the TX interface. This CSR holds the Virtual Address of the end 
* of the TC2 list.
*/
#define FXR_RXDMA_CFG_TO_BOUNDS_TC2				(FXR_RX_DMA_CSRS + 0x0000000000C8)
#define FXR_RXDMA_CFG_TO_BOUNDS_TC2_RESETCSR			0x0000000000000000ull
#define FXR_RXDMA_CFG_TO_BOUNDS_TC2_RESERVED_63_57_SHIFT	57
#define FXR_RXDMA_CFG_TO_BOUNDS_TC2_RESERVED_63_57_MASK		0x7Full
#define FXR_RXDMA_CFG_TO_BOUNDS_TC2_RESERVED_63_57_SMASK	0xFE00000000000000ull
#define FXR_RXDMA_CFG_TO_BOUNDS_TC2_ADDR_SHIFT			6
#define FXR_RXDMA_CFG_TO_BOUNDS_TC2_ADDR_MASK			0x7FFFFFFFFFFFFull
#define FXR_RXDMA_CFG_TO_BOUNDS_TC2_ADDR_SMASK			0x1FFFFFFFFFFFFC0ull
#define FXR_RXDMA_CFG_TO_BOUNDS_TC2_CL_BYTES_SHIFT		0
#define FXR_RXDMA_CFG_TO_BOUNDS_TC2_CL_BYTES_MASK		0x3Full
#define FXR_RXDMA_CFG_TO_BOUNDS_TC2_CL_BYTES_SMASK		0x3Full
/*
* Table #22 of fxr_top - RXDMA_CFG_TO_BASE_TC3
* Pointer to the Base of the user memory space used by the Trigger Op logic to 
* hold pointers to triggered operations that couldn't be executed due to back 
* pressure from the TX interface. Pointers are stored here until the back 
* pressure is removed, and then the operations are delivered in the order they 
* were requested. This CSR holds the Virtual Address of the base of the TC3 
* list.
*/
#define FXR_RXDMA_CFG_TO_BASE_TC3				(FXR_RX_DMA_CSRS + 0x0000000000D0)
#define FXR_RXDMA_CFG_TO_BASE_TC3_RESETCSR			0x0000000000000000ull
#define FXR_RXDMA_CFG_TO_BASE_TC3_RESERVED_63_57_SHIFT		57
#define FXR_RXDMA_CFG_TO_BASE_TC3_RESERVED_63_57_MASK		0x7Full
#define FXR_RXDMA_CFG_TO_BASE_TC3_RESERVED_63_57_SMASK		0xFE00000000000000ull
#define FXR_RXDMA_CFG_TO_BASE_TC3_ADDR_SHIFT			6
#define FXR_RXDMA_CFG_TO_BASE_TC3_ADDR_MASK			0x7FFFFFFFFFFFFull
#define FXR_RXDMA_CFG_TO_BASE_TC3_ADDR_SMASK			0x1FFFFFFFFFFFFC0ull
#define FXR_RXDMA_CFG_TO_BASE_TC3_CL_BYTES_SHIFT		0
#define FXR_RXDMA_CFG_TO_BASE_TC3_CL_BYTES_MASK			0x3Full
#define FXR_RXDMA_CFG_TO_BASE_TC3_CL_BYTES_SMASK		0x3Full
/*
* Table #23 of fxr_top - RXDMA_CFG_TO_BOUNDS_TC3
* Pointer to the end of the user memory space used by the Trigger Op logic to 
* hold pointers to triggered operations that couldn't be executed due to back 
* pressure from the TX interface. This CSR holds the Virtual Address of the end 
* of the TC3 list.
*/
#define FXR_RXDMA_CFG_TO_BOUNDS_TC3				(FXR_RX_DMA_CSRS + 0x0000000000D8)
#define FXR_RXDMA_CFG_TO_BOUNDS_TC3_RESETCSR			0x0000000000000000ull
#define FXR_RXDMA_CFG_TO_BOUNDS_TC3_RESERVED_63_57_SHIFT	57
#define FXR_RXDMA_CFG_TO_BOUNDS_TC3_RESERVED_63_57_MASK		0x7Full
#define FXR_RXDMA_CFG_TO_BOUNDS_TC3_RESERVED_63_57_SMASK	0xFE00000000000000ull
#define FXR_RXDMA_CFG_TO_BOUNDS_TC3_ADDR_SHIFT			6
#define FXR_RXDMA_CFG_TO_BOUNDS_TC3_ADDR_MASK			0x7FFFFFFFFFFFFull
#define FXR_RXDMA_CFG_TO_BOUNDS_TC3_ADDR_SMASK			0x1FFFFFFFFFFFFC0ull
#define FXR_RXDMA_CFG_TO_BOUNDS_TC3_CL_BYTES_SHIFT		0
#define FXR_RXDMA_CFG_TO_BOUNDS_TC3_CL_BYTES_MASK		0x3Full
#define FXR_RXDMA_CFG_TO_BOUNDS_TC3_CL_BYTES_SMASK		0x3Full
/*
* Table #24 of fxr_top - RXDMA_CFG_TO_BASE_HP
* Pointer to the Base of the user memory space used by the Trigger Op logic to 
* hold pointers to triggered operations that couldn't be executed due to back 
* pressure from the RxHP interface. Pointers are stored here until the back 
* pressure is removed, and then the operations are delivered in the order they 
* were requested. This CSR holds the Virtual Address of the base of the list of 
* pointers for triggered op aimed at the RxHP based on the TQ bit in the 
* triggered op.
*/
#define FXR_RXDMA_CFG_TO_BASE_HP				(FXR_RX_DMA_CSRS + 0x0000000000E0)
#define FXR_RXDMA_CFG_TO_BASE_HP_RESETCSR			0x0000000000000000ull
#define FXR_RXDMA_CFG_TO_BASE_HP_RESERVED_63_57_SHIFT		57
#define FXR_RXDMA_CFG_TO_BASE_HP_RESERVED_63_57_MASK		0x7Full
#define FXR_RXDMA_CFG_TO_BASE_HP_RESERVED_63_57_SMASK		0xFE00000000000000ull
#define FXR_RXDMA_CFG_TO_BASE_HP_ADDR_SHIFT			6
#define FXR_RXDMA_CFG_TO_BASE_HP_ADDR_MASK			0x7FFFFFFFFFFFFull
#define FXR_RXDMA_CFG_TO_BASE_HP_ADDR_SMASK			0x1FFFFFFFFFFFFC0ull
#define FXR_RXDMA_CFG_TO_BASE_HP_CL_BYTES_SHIFT			0
#define FXR_RXDMA_CFG_TO_BASE_HP_CL_BYTES_MASK			0x3Full
#define FXR_RXDMA_CFG_TO_BASE_HP_CL_BYTES_SMASK			0x3Full
/*
* Table #25 of fxr_top - RXDMA_CFG_TO_BOUNDS_HP
* Pointer to the end of the user memory space used by the Trigger Op logic to 
* hold pointers to triggered operations that couldn't be executed due to back 
* pressure from the RxHP interface. This CSR holds the Virtual Address of the 
* end of the list of pointers for triggered op aimed at the RxHP based on the TQ 
* bit in the triggered op.
*/
#define FXR_RXDMA_CFG_TO_BOUNDS_HP				(FXR_RX_DMA_CSRS + 0x0000000000E8)
#define FXR_RXDMA_CFG_TO_BOUNDS_HP_RESETCSR			0x0000000000000000ull
#define FXR_RXDMA_CFG_TO_BOUNDS_HP_RESERVED_63_57_SHIFT		57
#define FXR_RXDMA_CFG_TO_BOUNDS_HP_RESERVED_63_57_MASK		0x7Full
#define FXR_RXDMA_CFG_TO_BOUNDS_HP_RESERVED_63_57_SMASK		0xFE00000000000000ull
#define FXR_RXDMA_CFG_TO_BOUNDS_HP_ADDR_SHIFT			6
#define FXR_RXDMA_CFG_TO_BOUNDS_HP_ADDR_MASK			0x7FFFFFFFFFFFFull
#define FXR_RXDMA_CFG_TO_BOUNDS_HP_ADDR_SMASK			0x1FFFFFFFFFFFFC0ull
#define FXR_RXDMA_CFG_TO_BOUNDS_HP_CL_BYTES_SHIFT		0
#define FXR_RXDMA_CFG_TO_BOUNDS_HP_CL_BYTES_MASK		0x3Full
#define FXR_RXDMA_CFG_TO_BOUNDS_HP_CL_BYTES_SMASK		0x3Full
/*
* Table #26 of fxr_top - RXDMA_CFG_PORT_MIRROR
* Valid Bit and Time Stamp for Port Mirroring. Turn on this bit when this node 
* is in Port Mirroring Mode. Timestamp can be cleared by software. Otherwise it 
* is a free running timestamp active when the valid bit is active. It is used in 
* the Mirrored Data Headers.
*/
#define FXR_RXDMA_CFG_PORT_MIRROR				(FXR_RX_DMA_CSRS + 0x0000000000F0)
#define FXR_RXDMA_CFG_PORT_MIRROR_RESETCSR			0x0000000000000000ull
#define FXR_RXDMA_CFG_PORT_MIRROR_RESERVED_63_33_SHIFT		33
#define FXR_RXDMA_CFG_PORT_MIRROR_RESERVED_63_33_MASK		0x7FFFFFFFull
#define FXR_RXDMA_CFG_PORT_MIRROR_RESERVED_63_33_SMASK		0xFFFFFFFE00000000ull
#define FXR_RXDMA_CFG_PORT_MIRROR_PORT_MIRROR_ON_SHIFT		32
#define FXR_RXDMA_CFG_PORT_MIRROR_PORT_MIRROR_ON_MASK		0x1ull
#define FXR_RXDMA_CFG_PORT_MIRROR_PORT_MIRROR_ON_SMASK		0x100000000ull
#define FXR_RXDMA_CFG_PORT_MIRROR_TIME_STAMP_SHIFT		0
#define FXR_RXDMA_CFG_PORT_MIRROR_TIME_STAMP_MASK		0xFFFFFFFFull
#define FXR_RXDMA_CFG_PORT_MIRROR_TIME_STAMP_SMASK		0xFFFFFFFFull
/*
* Table #27 of fxr_top - RXDMA_CFG_PERFMON_CTRL0
* Select the MCTC used for the various Performance Monitor Events and 
* Counts.
*/
#define FXR_RXDMA_CFG_PERFMON_CTRL0				(FXR_RX_DMA_CSRS + 0x000000000100)
#define FXR_RXDMA_CFG_PERFMON_CTRL0_RESETCSR			0x0000000000000000ull
#define FXR_RXDMA_CFG_PERFMON_CTRL0_RESERVED_63_56_SHIFT	56
#define FXR_RXDMA_CFG_PERFMON_CTRL0_RESERVED_63_56_MASK		0xFFull
#define FXR_RXDMA_CFG_PERFMON_CTRL0_RESERVED_63_56_SMASK	0xFF00000000000000ull
#define FXR_RXDMA_CFG_PERFMON_CTRL0_NO_CMD_MCTC_X_SHIFT		52
#define FXR_RXDMA_CFG_PERFMON_CTRL0_NO_CMD_MCTC_X_MASK		0xFull
#define FXR_RXDMA_CFG_PERFMON_CTRL0_NO_CMD_MCTC_X_SMASK		0xF0000000000000ull
#define FXR_RXDMA_CFG_PERFMON_CTRL0_NO_CMD_MCTC_Y_SHIFT		48
#define FXR_RXDMA_CFG_PERFMON_CTRL0_NO_CMD_MCTC_Y_MASK		0xFull
#define FXR_RXDMA_CFG_PERFMON_CTRL0_NO_CMD_MCTC_Y_SMASK		0xF000000000000ull
#define FXR_RXDMA_CFG_PERFMON_CTRL0_TX_CI_MCTC_X_SHIFT		44
#define FXR_RXDMA_CFG_PERFMON_CTRL0_TX_CI_MCTC_X_MASK		0xFull
#define FXR_RXDMA_CFG_PERFMON_CTRL0_TX_CI_MCTC_X_SMASK		0xF00000000000ull
#define FXR_RXDMA_CFG_PERFMON_CTRL0_TX_CI_MCTC_Y_SHIFT		40
#define FXR_RXDMA_CFG_PERFMON_CTRL0_TX_CI_MCTC_Y_MASK		0xFull
#define FXR_RXDMA_CFG_PERFMON_CTRL0_TX_CI_MCTC_Y_SMASK		0xF0000000000ull
#define FXR_RXDMA_CFG_PERFMON_CTRL0_TX_DMA_MCTC_X_SHIFT		36
#define FXR_RXDMA_CFG_PERFMON_CTRL0_TX_DMA_MCTC_X_MASK		0xFull
#define FXR_RXDMA_CFG_PERFMON_CTRL0_TX_DMA_MCTC_X_SMASK		0xF000000000ull
#define FXR_RXDMA_CFG_PERFMON_CTRL0_TX_DMA_MCTC_Y_SHIFT		32
#define FXR_RXDMA_CFG_PERFMON_CTRL0_TX_DMA_MCTC_Y_MASK		0xFull
#define FXR_RXDMA_CFG_PERFMON_CTRL0_TX_DMA_MCTC_Y_SMASK		0xF00000000ull
#define FXR_RXDMA_CFG_PERFMON_CTRL0_TO_MCTC_X_SHIFT		28
#define FXR_RXDMA_CFG_PERFMON_CTRL0_TO_MCTC_X_MASK		0xFull
#define FXR_RXDMA_CFG_PERFMON_CTRL0_TO_MCTC_X_SMASK		0xF0000000ull
#define FXR_RXDMA_CFG_PERFMON_CTRL0_TO_MCTC_Y_SHIFT		24
#define FXR_RXDMA_CFG_PERFMON_CTRL0_TO_MCTC_Y_MASK		0xFull
#define FXR_RXDMA_CFG_PERFMON_CTRL0_TO_MCTC_Y_SMASK		0xF000000ull
#define FXR_RXDMA_CFG_PERFMON_CTRL0_TID_MCTC_X_SHIFT		20
#define FXR_RXDMA_CFG_PERFMON_CTRL0_TID_MCTC_X_MASK		0xFull
#define FXR_RXDMA_CFG_PERFMON_CTRL0_TID_MCTC_X_SMASK		0xF00000ull
#define FXR_RXDMA_CFG_PERFMON_CTRL0_TID_MCTC_Y_SHIFT		16
#define FXR_RXDMA_CFG_PERFMON_CTRL0_TID_MCTC_Y_MASK		0xFull
#define FXR_RXDMA_CFG_PERFMON_CTRL0_TID_MCTC_Y_SMASK		0xF0000ull
#define FXR_RXDMA_CFG_PERFMON_CTRL0_ACK_MCTC_X_SHIFT		12
#define FXR_RXDMA_CFG_PERFMON_CTRL0_ACK_MCTC_X_MASK		0xFull
#define FXR_RXDMA_CFG_PERFMON_CTRL0_ACK_MCTC_X_SMASK		0xF000ull
#define FXR_RXDMA_CFG_PERFMON_CTRL0_ACK_MCTC_Y_SHIFT		8
#define FXR_RXDMA_CFG_PERFMON_CTRL0_ACK_MCTC_Y_MASK		0xFull
#define FXR_RXDMA_CFG_PERFMON_CTRL0_ACK_MCTC_Y_SMASK		0xF00ull
#define FXR_RXDMA_CFG_PERFMON_CTRL0_WAR_MCTC_X_SHIFT		4
#define FXR_RXDMA_CFG_PERFMON_CTRL0_WAR_MCTC_X_MASK		0xFull
#define FXR_RXDMA_CFG_PERFMON_CTRL0_WAR_MCTC_X_SMASK		0xF0ull
#define FXR_RXDMA_CFG_PERFMON_CTRL0_WAR_MCTC_Y_SHIFT		0
#define FXR_RXDMA_CFG_PERFMON_CTRL0_WAR_MCTC_Y_MASK		0xFull
#define FXR_RXDMA_CFG_PERFMON_CTRL0_WAR_MCTC_Y_SMASK		0xFull
/*
* Table #28 of fxr_top - RXDMA_CFG_PERFMON_CTRL1
* Select the MCTC used for the various Performance Monitor Events and 
* Counts.
*/
#define FXR_RXDMA_CFG_PERFMON_CTRL1				(FXR_RX_DMA_CSRS + 0x000000000108)
#define FXR_RXDMA_CFG_PERFMON_CTRL1_RESETCSR			0x0000000000000000ull
#define FXR_RXDMA_CFG_PERFMON_CTRL1_RESERVED_63_32_SHIFT	32
#define FXR_RXDMA_CFG_PERFMON_CTRL1_RESERVED_63_32_MASK		0xFFFFFFFFull
#define FXR_RXDMA_CFG_PERFMON_CTRL1_RESERVED_63_32_SMASK	0xFFFFFFFF00000000ull
#define FXR_RXDMA_CFG_PERFMON_CTRL1_TO_QUEUE_MCTC_X_SHIFT	28
#define FXR_RXDMA_CFG_PERFMON_CTRL1_TO_QUEUE_MCTC_X_MASK	0xFull
#define FXR_RXDMA_CFG_PERFMON_CTRL1_TO_QUEUE_MCTC_X_SMASK	0xF0000000ull
#define FXR_RXDMA_CFG_PERFMON_CTRL1_TO_QUEUE_MCTC_Y_SHIFT	24
#define FXR_RXDMA_CFG_PERFMON_CTRL1_TO_QUEUE_MCTC_Y_MASK	0xFull
#define FXR_RXDMA_CFG_PERFMON_CTRL1_TO_QUEUE_MCTC_Y_SMASK	0xF000000ull
#define FXR_RXDMA_CFG_PERFMON_CTRL1_TO_ISSUE_MCTC_X_SHIFT	20
#define FXR_RXDMA_CFG_PERFMON_CTRL1_TO_ISSUE_MCTC_X_MASK	0xFull
#define FXR_RXDMA_CFG_PERFMON_CTRL1_TO_ISSUE_MCTC_X_SMASK	0xF00000ull
#define FXR_RXDMA_CFG_PERFMON_CTRL1_TO_ISSUE_MCTC_Y_SHIFT	16
#define FXR_RXDMA_CFG_PERFMON_CTRL1_TO_ISSUE_MCTC_Y_MASK	0xFull
#define FXR_RXDMA_CFG_PERFMON_CTRL1_TO_ISSUE_MCTC_Y_SMASK	0xF0000ull
#define FXR_RXDMA_CFG_PERFMON_CTRL1_RX_FLITS_MCTC_X_SHIFT	12
#define FXR_RXDMA_CFG_PERFMON_CTRL1_RX_FLITS_MCTC_X_MASK	0xFull
#define FXR_RXDMA_CFG_PERFMON_CTRL1_RX_FLITS_MCTC_X_SMASK	0xF000ull
#define FXR_RXDMA_CFG_PERFMON_CTRL1_RX_FLITS_MCTC_Y_SHIFT	8
#define FXR_RXDMA_CFG_PERFMON_CTRL1_RX_FLITS_MCTC_Y_MASK	0xFull
#define FXR_RXDMA_CFG_PERFMON_CTRL1_RX_FLITS_MCTC_Y_SMASK	0xF00ull
#define FXR_RXDMA_CFG_PERFMON_CTRL1_NO_CREDITS_MCTC_X_SHIFT	4
#define FXR_RXDMA_CFG_PERFMON_CTRL1_NO_CREDITS_MCTC_X_MASK	0xFull
#define FXR_RXDMA_CFG_PERFMON_CTRL1_NO_CREDITS_MCTC_X_SMASK	0xF0ull
#define FXR_RXDMA_CFG_PERFMON_CTRL1_NO_CREDITS_MCTC_Y_SHIFT	0
#define FXR_RXDMA_CFG_PERFMON_CTRL1_NO_CREDITS_MCTC_Y_MASK	0xFull
#define FXR_RXDMA_CFG_PERFMON_CTRL1_NO_CREDITS_MCTC_Y_SMASK	0xFull
/*
* Table #29 of fxr_top - RXDMA_STS_HOST_CREDITS
* This CSR contains the existing credit count to the HIArb. There is a credit 
* counter for each of the nine MCTC's. The ninth MCTC is for commands from the 
* RxCI to the Host Interface.
*/
#define FXR_RXDMA_STS_HOST_CREDITS				(FXR_RX_DMA_CSRS + 0x000000000400)
#define FXR_RXDMA_STS_HOST_CREDITS_RESETCSR			0x0000000000000000ull
#define FXR_RXDMA_STS_HOST_CREDITS_RESERVED_63_SHIFT		63
#define FXR_RXDMA_STS_HOST_CREDITS_RESERVED_63_MASK		0x1ull
#define FXR_RXDMA_STS_HOST_CREDITS_RESERVED_63_SMASK		0x8000000000000000ull
#define FXR_RXDMA_STS_HOST_CREDITS_RXCI_CRED_SHIFT		56
#define FXR_RXDMA_STS_HOST_CREDITS_RXCI_CRED_MASK		0x7Full
#define FXR_RXDMA_STS_HOST_CREDITS_RXCI_CRED_SMASK		0x7F00000000000000ull
#define FXR_RXDMA_STS_HOST_CREDITS_MC1_TC3_CRED_SHIFT		49
#define FXR_RXDMA_STS_HOST_CREDITS_MC1_TC3_CRED_MASK		0x7Full
#define FXR_RXDMA_STS_HOST_CREDITS_MC1_TC3_CRED_SMASK		0xFE000000000000ull
#define FXR_RXDMA_STS_HOST_CREDITS_MC1_TC2_CRED_SHIFT		42
#define FXR_RXDMA_STS_HOST_CREDITS_MC1_TC2_CRED_MASK		0x7Full
#define FXR_RXDMA_STS_HOST_CREDITS_MC1_TC2_CRED_SMASK		0x1FC0000000000ull
#define FXR_RXDMA_STS_HOST_CREDITS_MC1_TC1_CRED_SHIFT		35
#define FXR_RXDMA_STS_HOST_CREDITS_MC1_TC1_CRED_MASK		0x7Full
#define FXR_RXDMA_STS_HOST_CREDITS_MC1_TC1_CRED_SMASK		0x3F800000000ull
#define FXR_RXDMA_STS_HOST_CREDITS_MC1_TC0_CRED_SHIFT		28
#define FXR_RXDMA_STS_HOST_CREDITS_MC1_TC0_CRED_MASK		0x7Full
#define FXR_RXDMA_STS_HOST_CREDITS_MC1_TC0_CRED_SMASK		0x7F0000000ull
#define FXR_RXDMA_STS_HOST_CREDITS_MC0_TC3_CRED_SHIFT		21
#define FXR_RXDMA_STS_HOST_CREDITS_MC0_TC3_CRED_MASK		0x7Full
#define FXR_RXDMA_STS_HOST_CREDITS_MC0_TC3_CRED_SMASK		0xFE00000ull
#define FXR_RXDMA_STS_HOST_CREDITS_MC0_TC2_CRED_SHIFT		14
#define FXR_RXDMA_STS_HOST_CREDITS_MC0_TC2_CRED_MASK		0x7Full
#define FXR_RXDMA_STS_HOST_CREDITS_MC0_TC2_CRED_SMASK		0x1FC000ull
#define FXR_RXDMA_STS_HOST_CREDITS_MC0_TC1_CRED_SHIFT		7
#define FXR_RXDMA_STS_HOST_CREDITS_MC0_TC1_CRED_MASK		0x7Full
#define FXR_RXDMA_STS_HOST_CREDITS_MC0_TC1_CRED_SMASK		0x3F80ull
#define FXR_RXDMA_STS_HOST_CREDITS_MC0_TC0_CRED_SHIFT		0
#define FXR_RXDMA_STS_HOST_CREDITS_MC0_TC0_CRED_MASK		0x7Full
#define FXR_RXDMA_STS_HOST_CREDITS_MC0_TC0_CRED_SMASK		0x7Full
/*
* Table #30 of fxr_top - RXDMA_STS_CI_ACK_CREDITS
* This CSR contains the existing credit count for the TxCI Interface. There is a 
* credit counter for each MCTC's. The TxCI has four counts for each of MC0, MC1 
* and MC1'. All are five bits.
*/
#define FXR_RXDMA_STS_CI_ACK_CREDITS				(FXR_RX_DMA_CSRS + 0x000000000408)
#define FXR_RXDMA_STS_CI_ACK_CREDITS_RESETCSR			0x0000000000000000ull
#define FXR_RXDMA_STS_CI_ACK_CREDITS_RESERVED_63_60_SHIFT	60
#define FXR_RXDMA_STS_CI_ACK_CREDITS_RESERVED_63_60_MASK	0xFull
#define FXR_RXDMA_STS_CI_ACK_CREDITS_RESERVED_63_60_SMASK	0xF000000000000000ull
#define FXR_RXDMA_STS_CI_ACK_CREDITS_CI_MC1P_TC3_CRED_SHIFT	55
#define FXR_RXDMA_STS_CI_ACK_CREDITS_CI_MC1P_TC3_CRED_MASK	0x1Full
#define FXR_RXDMA_STS_CI_ACK_CREDITS_CI_MC1P_TC3_CRED_SMASK	0xF80000000000000ull
#define FXR_RXDMA_STS_CI_ACK_CREDITS_CI_MC1P_TC2_CRED_SHIFT	50
#define FXR_RXDMA_STS_CI_ACK_CREDITS_CI_MC1P_TC2_CRED_MASK	0x1Full
#define FXR_RXDMA_STS_CI_ACK_CREDITS_CI_MC1P_TC2_CRED_SMASK	0x7C000000000000ull
#define FXR_RXDMA_STS_CI_ACK_CREDITS_CI_MC1P_TC1_CRED_SHIFT	45
#define FXR_RXDMA_STS_CI_ACK_CREDITS_CI_MC1P_TC1_CRED_MASK	0x1Full
#define FXR_RXDMA_STS_CI_ACK_CREDITS_CI_MC1P_TC1_CRED_SMASK	0x3E00000000000ull
#define FXR_RXDMA_STS_CI_ACK_CREDITS_CI_MC1P_TC0_CRED_SHIFT	40
#define FXR_RXDMA_STS_CI_ACK_CREDITS_CI_MC1P_TC0_CRED_MASK	0x1Full
#define FXR_RXDMA_STS_CI_ACK_CREDITS_CI_MC1P_TC0_CRED_SMASK	0x1F0000000000ull
#define FXR_RXDMA_STS_CI_ACK_CREDITS_CI_MC1_TC3_CRED_SHIFT	35
#define FXR_RXDMA_STS_CI_ACK_CREDITS_CI_MC1_TC3_CRED_MASK	0x1Full
#define FXR_RXDMA_STS_CI_ACK_CREDITS_CI_MC1_TC3_CRED_SMASK	0xF800000000ull
#define FXR_RXDMA_STS_CI_ACK_CREDITS_CI_MC1_TC2_CRED_SHIFT	30
#define FXR_RXDMA_STS_CI_ACK_CREDITS_CI_MC1_TC2_CRED_MASK	0x1Full
#define FXR_RXDMA_STS_CI_ACK_CREDITS_CI_MC1_TC2_CRED_SMASK	0x7C0000000ull
#define FXR_RXDMA_STS_CI_ACK_CREDITS_CI_MC1_TC1_CRED_SHIFT	25
#define FXR_RXDMA_STS_CI_ACK_CREDITS_CI_MC1_TC1_CRED_MASK	0x1Full
#define FXR_RXDMA_STS_CI_ACK_CREDITS_CI_MC1_TC1_CRED_SMASK	0x3E000000ull
#define FXR_RXDMA_STS_CI_ACK_CREDITS_CI_MC1_TC0_CRED_SHIFT	20
#define FXR_RXDMA_STS_CI_ACK_CREDITS_CI_MC1_TC0_CRED_MASK	0x1Full
#define FXR_RXDMA_STS_CI_ACK_CREDITS_CI_MC1_TC0_CRED_SMASK	0x1F00000ull
#define FXR_RXDMA_STS_CI_ACK_CREDITS_CI_MC0_TC3_CRED_SHIFT	15
#define FXR_RXDMA_STS_CI_ACK_CREDITS_CI_MC0_TC3_CRED_MASK	0x1Full
#define FXR_RXDMA_STS_CI_ACK_CREDITS_CI_MC0_TC3_CRED_SMASK	0xF8000ull
#define FXR_RXDMA_STS_CI_ACK_CREDITS_CI_MC0_TC2_CRED_SHIFT	10
#define FXR_RXDMA_STS_CI_ACK_CREDITS_CI_MC0_TC2_CRED_MASK	0x1Full
#define FXR_RXDMA_STS_CI_ACK_CREDITS_CI_MC0_TC2_CRED_SMASK	0x7C00ull
#define FXR_RXDMA_STS_CI_ACK_CREDITS_CI_MC0_TC1_CRED_SHIFT	5
#define FXR_RXDMA_STS_CI_ACK_CREDITS_CI_MC0_TC1_CRED_MASK	0x1Full
#define FXR_RXDMA_STS_CI_ACK_CREDITS_CI_MC0_TC1_CRED_SMASK	0x3E0ull
#define FXR_RXDMA_STS_CI_ACK_CREDITS_CI_MC0_TC0_CRED_SHIFT	0
#define FXR_RXDMA_STS_CI_ACK_CREDITS_CI_MC0_TC0_CRED_MASK	0x1Full
#define FXR_RXDMA_STS_CI_ACK_CREDITS_CI_MC0_TC0_CRED_SMASK	0x1Full
/*
* Table #31 of fxr_top - RXDMA_STS_DMA_ACK_CREDITS
* This CSR contains the existing credit count for the TxDMA Interface. There is 
* a credit counter for each MCTC's. The RxDMA has four counts for MC1 
* only.
*/
#define FXR_RXDMA_STS_DMA_ACK_CREDITS				(FXR_RX_DMA_CSRS + 0x000000000410)
#define FXR_RXDMA_STS_DMA_ACK_CREDITS_RESETCSR			0x0000000000000000ull
#define FXR_RXDMA_STS_DMA_ACK_CREDITS_RESERVED_63_20_SHIFT	20
#define FXR_RXDMA_STS_DMA_ACK_CREDITS_RESERVED_63_20_MASK	0xFFFFFFFFFFFull
#define FXR_RXDMA_STS_DMA_ACK_CREDITS_RESERVED_63_20_SMASK	0xFFFFFFFFFFF00000ull
#define FXR_RXDMA_STS_DMA_ACK_CREDITS_DMA_TC3_CRED_SHIFT	15
#define FXR_RXDMA_STS_DMA_ACK_CREDITS_DMA_TC3_CRED_MASK		0x1Full
#define FXR_RXDMA_STS_DMA_ACK_CREDITS_DMA_TC3_CRED_SMASK	0xF8000ull
#define FXR_RXDMA_STS_DMA_ACK_CREDITS_DMA_TC2_CRED_SHIFT	10
#define FXR_RXDMA_STS_DMA_ACK_CREDITS_DMA_TC2_CRED_MASK		0x1Full
#define FXR_RXDMA_STS_DMA_ACK_CREDITS_DMA_TC2_CRED_SMASK	0x7C00ull
#define FXR_RXDMA_STS_DMA_ACK_CREDITS_DMA_TC1_CRED_SHIFT	5
#define FXR_RXDMA_STS_DMA_ACK_CREDITS_DMA_TC1_CRED_MASK		0x1Full
#define FXR_RXDMA_STS_DMA_ACK_CREDITS_DMA_TC1_CRED_SMASK	0x3E0ull
#define FXR_RXDMA_STS_DMA_ACK_CREDITS_DMA_TC0_CRED_SHIFT	0
#define FXR_RXDMA_STS_DMA_ACK_CREDITS_DMA_TC0_CRED_MASK		0x1Full
#define FXR_RXDMA_STS_DMA_ACK_CREDITS_DMA_TC0_CRED_SMASK	0x1Full
/*
* Table #32 of fxr_top - RXDMA_DBG_LINKED_LIST
* This is an RX DMA debug CSR. It allows access to all of the linked list DMA 
* queue arrays. These arrays can not be written to during normal operation. This 
* register is for debug use, and for initialization of the linked list if 
* needed. There is an automatic initialization function built in that can be 
* disabled.
*/
#define FXR_RXDMA_DBG_LINKED_LIST				(FXR_RX_DMA_CSRS + 0x000000004000)
#define FXR_RXDMA_DBG_LINKED_LIST_RESETCSR			0x0000000000000000ull
#define FXR_RXDMA_DBG_LINKED_LIST_RESERVED_63_10_SHIFT		10
#define FXR_RXDMA_DBG_LINKED_LIST_RESERVED_63_10_MASK		0x3FFFFFFFFFFFFFull
#define FXR_RXDMA_DBG_LINKED_LIST_RESERVED_63_10_SMASK		0xFFFFFFFFFFFFFC00ull
#define FXR_RXDMA_DBG_LINKED_LIST_HPARITY_SHIFT			9
#define FXR_RXDMA_DBG_LINKED_LIST_HPARITY_MASK			0x1ull
#define FXR_RXDMA_DBG_LINKED_LIST_HPARITY_SMASK			0x200ull
#define FXR_RXDMA_DBG_LINKED_LIST_LPARITY_SHIFT			8
#define FXR_RXDMA_DBG_LINKED_LIST_LPARITY_MASK			0x1ull
#define FXR_RXDMA_DBG_LINKED_LIST_LPARITY_SMASK			0x100ull
#define FXR_RXDMA_DBG_LINKED_LIST_DATA_SHIFT			0
#define FXR_RXDMA_DBG_LINKED_LIST_DATA_MASK			0xFFull
#define FXR_RXDMA_DBG_LINKED_LIST_DATA_SMASK			0xFFull
/*
* Table #33 of fxr_top - RXDMA_DBG_TAIL_LIST
* 
*/
#define FXR_RXDMA_DBG_TAIL_LIST					(FXR_RX_DMA_CSRS + 0x000000008000)
#define FXR_RXDMA_DBG_TAIL_LIST_RESETCSR			0x0000000000000000ull
#define FXR_RXDMA_DBG_TAIL_LIST_RESERVED_63_13_SHIFT		13
#define FXR_RXDMA_DBG_TAIL_LIST_RESERVED_63_13_MASK		0x7FFFFFFFFFFFFull
#define FXR_RXDMA_DBG_TAIL_LIST_RESERVED_63_13_SMASK		0xFFFFFFFFFFFFE000ull
#define FXR_RXDMA_DBG_TAIL_LIST_ECC_SHIFT			8
#define FXR_RXDMA_DBG_TAIL_LIST_ECC_MASK			0x1Full
#define FXR_RXDMA_DBG_TAIL_LIST_ECC_SMASK			0x1F00ull
#define FXR_RXDMA_DBG_TAIL_LIST_TAIL_SHIFT			0
#define FXR_RXDMA_DBG_TAIL_LIST_TAIL_MASK			0xFFull
#define FXR_RXDMA_DBG_TAIL_LIST_TAIL_SMASK			0xFFull
/*
* Table #34 of fxr_top - RXDMA_DBG_BUFFER_ADDR
* This is an RX DMA debug CSR. It allows indirect access to all of the DMA 
* buffer arrays. These arrays can not be written to during normal operation. 
* This register is for debug use only. Note that this register is 288 bits wide. 
* The data for the read or write to this register is contained in the next five 
* CSR's
*/
#define FXR_RXDMA_DBG_BUFFER_ADDR				(FXR_RX_DMA_CSRS + 0x000000010000)
#define FXR_RXDMA_DBG_BUFFER_ADDR_RESETCSR			0x0050000000000000ull
#define FXR_RXDMA_DBG_BUFFER_ADDR_VALID_SHIFT			63
#define FXR_RXDMA_DBG_BUFFER_ADDR_VALID_MASK			0x1ull
#define FXR_RXDMA_DBG_BUFFER_ADDR_VALID_SMASK			0x8000000000000000ull
#define FXR_RXDMA_DBG_BUFFER_ADDR_WRITE_SHIFT			62
#define FXR_RXDMA_DBG_BUFFER_ADDR_WRITE_MASK			0x1ull
#define FXR_RXDMA_DBG_BUFFER_ADDR_WRITE_SMASK			0x4000000000000000ull
#define FXR_RXDMA_DBG_BUFFER_ADDR_RESERVED_61_60_SHIFT		60
#define FXR_RXDMA_DBG_BUFFER_ADDR_RESERVED_61_60_MASK		0x3ull
#define FXR_RXDMA_DBG_BUFFER_ADDR_RESERVED_61_60_SMASK		0x3000000000000000ull
#define FXR_RXDMA_DBG_BUFFER_ADDR_PAYLOAD_REGS_SHIFT		52
#define FXR_RXDMA_DBG_BUFFER_ADDR_PAYLOAD_REGS_MASK		0xFFull
#define FXR_RXDMA_DBG_BUFFER_ADDR_PAYLOAD_REGS_SMASK		0xFF0000000000000ull
#define FXR_RXDMA_DBG_BUFFER_ADDR_MCTC_SHIFT			49
#define FXR_RXDMA_DBG_BUFFER_ADDR_MCTC_MASK			0x7ull
#define FXR_RXDMA_DBG_BUFFER_ADDR_MCTC_SMASK			0xE000000000000ull
#define FXR_RXDMA_DBG_BUFFER_ADDR_ADDRESS_SHIFT			0
#define FXR_RXDMA_DBG_BUFFER_ADDR_ADDRESS_MASK			0x1FFFFFFFFFFFFull
#define FXR_RXDMA_DBG_BUFFER_ADDR_ADDRESS_SMASK			0x1FFFFFFFFFFFFull
/*
* Table #35 of fxr_top - RXDMA_DBG_BUFFER_DATA0
* This is an RX DMA debug CSR. This is the data for bits [63:0] of the RX DMA 
* buffer being accessed with the RXDMA_DBG_BUFFER_ADDR register. The data from 
* this CSR is written to the DMA buffer if the write bit is active in that CSR, 
* or this data will contain the read data if the write bit is not 
* active.
*/
#define FXR_RXDMA_DBG_BUFFER_DATA0				(FXR_RX_DMA_CSRS + 0x000000010008)
#define FXR_RXDMA_DBG_BUFFER_DATA0_RESETCSR			0x0000000000000000ull
#define FXR_RXDMA_DBG_BUFFER_DATA0_DATA_SHIFT			0
#define FXR_RXDMA_DBG_BUFFER_DATA0_DATA_MASK			0xFFFFFFFFFFFFFFFFull
#define FXR_RXDMA_DBG_BUFFER_DATA0_DATA_SMASK			0xFFFFFFFFFFFFFFFFull
/*
* Table #36 of fxr_top - RXDMA_DBG_BUFFER_DATA1
* This is an RX DMA debug CSR. This is the data for bits [127:64] of the RX DMA 
* buffer being accessed with the RXDMA_DBG_BUFFER_ADDR register. The data from 
* this CSR is written to the DMA buffer if the write bit is active in that CSR, 
* or this data will contain the read data if the write bit is not 
* active.
*/
#define FXR_RXDMA_DBG_BUFFER_DATA1				(FXR_RX_DMA_CSRS + 0x000000010010)
#define FXR_RXDMA_DBG_BUFFER_DATA1_RESETCSR			0x0000000000000000ull
#define FXR_RXDMA_DBG_BUFFER_DATA1_DATA_SHIFT			0
#define FXR_RXDMA_DBG_BUFFER_DATA1_DATA_MASK			0xFFFFFFFFFFFFFFFFull
#define FXR_RXDMA_DBG_BUFFER_DATA1_DATA_SMASK			0xFFFFFFFFFFFFFFFFull
/*
* Table #37 of fxr_top - RXDMA_DBG_BUFFER_DATA2
* This is an RX DMA debug CSR. This is the data for bits [191:128] of the RX DMA 
* buffer being accessed with the RXDMA_DBG_BUFFER_ADDR register. The data from 
* this CSR is written to the DMA buffer if the write bit is active in that CSR, 
* or this data will contain the read data if the write bit is not 
* active.
*/
#define FXR_RXDMA_DBG_BUFFER_DATA2				(FXR_RX_DMA_CSRS + 0x000000010018)
#define FXR_RXDMA_DBG_BUFFER_DATA2_RESETCSR			0x0000000000000000ull
#define FXR_RXDMA_DBG_BUFFER_DATA2_DATA_SHIFT			0
#define FXR_RXDMA_DBG_BUFFER_DATA2_DATA_MASK			0xFFFFFFFFFFFFFFFFull
#define FXR_RXDMA_DBG_BUFFER_DATA2_DATA_SMASK			0xFFFFFFFFFFFFFFFFull
/*
* Table #38 of fxr_top - RXDMA_DBG_BUFFER_DATA3
* This is an RX DMA debug CSR. This is the data for bits [255:192] of the RX DMA 
* buffer being accessed with the RXDMA_DBG_BUFFER_ADDR register. The data from 
* this CSR is written to the DMA buffer if the write bit is active in that CSR, 
* or this data will contain the read data if the write bit is not 
* active.
*/
#define FXR_RXDMA_DBG_BUFFER_DATA3				(FXR_RX_DMA_CSRS + 0x000000010020)
#define FXR_RXDMA_DBG_BUFFER_DATA3_RESETCSR			0x0000000000000000ull
#define FXR_RXDMA_DBG_BUFFER_DATA3_DATA_SHIFT			0
#define FXR_RXDMA_DBG_BUFFER_DATA3_DATA_MASK			0xFFFFFFFFFFFFFFFFull
#define FXR_RXDMA_DBG_BUFFER_DATA3_DATA_SMASK			0xFFFFFFFFFFFFFFFFull
/*
* Table #39 of fxr_top - RXDMA_DBG_BUFFER_DATA4
* This is an RX DMA debug CSR. This is the data for bits [287:256] of the RX DMA 
* buffer being accessed with the RXDMA_DBG_BUFFER_ADDR register. The data from 
* this CSR is written to the DMA buffer if the write bit is active in that CSR, 
* or this data will contain the read data if the write bit is not active. This 
* data is the ECC codes for the stored data in the buffer.
*/
#define FXR_RXDMA_DBG_BUFFER_DATA4				(FXR_RX_DMA_CSRS + 0x000000010028)
#define FXR_RXDMA_DBG_BUFFER_DATA4_RESETCSR			0x0000000000000000ull
#define FXR_RXDMA_DBG_BUFFER_DATA4_RESERVED_63_32_SHIFT		32
#define FXR_RXDMA_DBG_BUFFER_DATA4_RESERVED_63_32_MASK		0xFFFFFFFFull
#define FXR_RXDMA_DBG_BUFFER_DATA4_RESERVED_63_32_SMASK		0xFFFFFFFF00000000ull
#define FXR_RXDMA_DBG_BUFFER_DATA4_DATA_SHIFT			0
#define FXR_RXDMA_DBG_BUFFER_DATA4_DATA_MASK			0xFFFFFFFFull
#define FXR_RXDMA_DBG_BUFFER_DATA4_DATA_SMASK			0xFFFFFFFFull
/*
* Table #40 of fxr_top - RXDMA_DBG_TID_ACK_CNT
* Number of TIDs allocated and the number of Acks allocated along with the Max 
* number of each seen since reset. Max TIDs should be 220 or less. Max Acks 
* should be 160 or less.
*/
#define FXR_RXDMA_DBG_TID_ACK_CNT				(FXR_RX_DMA_CSRS + 0x000000011000)
#define FXR_RXDMA_DBG_TID_ACK_CNT_RESETCSR			0x0000000000000000ull
#define FXR_RXDMA_DBG_TID_ACK_CNT_RESERVED_63_32_SHIFT		32
#define FXR_RXDMA_DBG_TID_ACK_CNT_RESERVED_63_32_MASK		0xFFFFFFFFull
#define FXR_RXDMA_DBG_TID_ACK_CNT_RESERVED_63_32_SMASK		0xFFFFFFFF00000000ull
#define FXR_RXDMA_DBG_TID_ACK_CNT_TID_MAX_SHIFT			24
#define FXR_RXDMA_DBG_TID_ACK_CNT_TID_MAX_MASK			0xFFull
#define FXR_RXDMA_DBG_TID_ACK_CNT_TID_MAX_SMASK			0xFF000000ull
#define FXR_RXDMA_DBG_TID_ACK_CNT_ACK_MAX_SHIFT			16
#define FXR_RXDMA_DBG_TID_ACK_CNT_ACK_MAX_MASK			0xFFull
#define FXR_RXDMA_DBG_TID_ACK_CNT_ACK_MAX_SMASK			0xFF0000ull
#define FXR_RXDMA_DBG_TID_ACK_CNT_TIDS_ALLOCED_SHIFT		8
#define FXR_RXDMA_DBG_TID_ACK_CNT_TIDS_ALLOCED_MASK		0xFFull
#define FXR_RXDMA_DBG_TID_ACK_CNT_TIDS_ALLOCED_SMASK		0xFF00ull
#define FXR_RXDMA_DBG_TID_ACK_CNT_ACKS_ALLOCED_SHIFT		0
#define FXR_RXDMA_DBG_TID_ACK_CNT_ACKS_ALLOCED_MASK		0xFFull
#define FXR_RXDMA_DBG_TID_ACK_CNT_ACKS_ALLOCED_SMASK		0xFFull
/*
* Table #41 of fxr_top - RXDMA_DBG_MUX_SELECT
* Select TID and ACK to display in the next CSRs for debug purposes.
*/
#define FXR_RXDMA_DBG_MUX_SELECT				(FXR_RX_DMA_CSRS + 0x000000011008)
#define FXR_RXDMA_DBG_MUX_SELECT_RESETCSR			0x0000000000000000ull
#define FXR_RXDMA_DBG_MUX_SELECT_RESERVED_63_25_SHIFT		25
#define FXR_RXDMA_DBG_MUX_SELECT_RESERVED_63_25_MASK		0x7FFFFFFFFFull
#define FXR_RXDMA_DBG_MUX_SELECT_RESERVED_63_25_SMASK		0xFFFFFFFFFE000000ull
#define FXR_RXDMA_DBG_MUX_SELECT_CNTX_SEL_VALID_SHIFT		24
#define FXR_RXDMA_DBG_MUX_SELECT_CNTX_SEL_VALID_MASK		0x1ull
#define FXR_RXDMA_DBG_MUX_SELECT_CNTX_SEL_VALID_SMASK		0x1000000ull
#define FXR_RXDMA_DBG_MUX_SELECT_CNTX_SELECT_SHIFT		20
#define FXR_RXDMA_DBG_MUX_SELECT_CNTX_SELECT_MASK		0xFull
#define FXR_RXDMA_DBG_MUX_SELECT_CNTX_SELECT_SMASK		0xF00000ull
#define FXR_RXDMA_DBG_MUX_SELECT_RESERVED_19_18_SHIFT		18
#define FXR_RXDMA_DBG_MUX_SELECT_RESERVED_19_18_MASK		0x3ull
#define FXR_RXDMA_DBG_MUX_SELECT_RESERVED_19_18_SMASK		0xC0000ull
#define FXR_RXDMA_DBG_MUX_SELECT_ACK_SEL_VALID_SHIFT		17
#define FXR_RXDMA_DBG_MUX_SELECT_ACK_SEL_VALID_MASK		0x1ull
#define FXR_RXDMA_DBG_MUX_SELECT_ACK_SEL_VALID_SMASK		0x20000ull
#define FXR_RXDMA_DBG_MUX_SELECT_TID_SEL_VALID_SHIFT		16
#define FXR_RXDMA_DBG_MUX_SELECT_TID_SEL_VALID_MASK		0x1ull
#define FXR_RXDMA_DBG_MUX_SELECT_TID_SEL_VALID_SMASK		0x10000ull
#define FXR_RXDMA_DBG_MUX_SELECT_ACK_SELECT_SHIFT		8
#define FXR_RXDMA_DBG_MUX_SELECT_ACK_SELECT_MASK		0xFFull
#define FXR_RXDMA_DBG_MUX_SELECT_ACK_SELECT_SMASK		0xFF00ull
#define FXR_RXDMA_DBG_MUX_SELECT_TID_SELECT_SHIFT		0
#define FXR_RXDMA_DBG_MUX_SELECT_TID_SELECT_MASK		0xFFull
#define FXR_RXDMA_DBG_MUX_SELECT_TID_SELECT_SMASK		0xFFull
/*
* Table #42 of fxr_top - RXDMA_DBG_TID_DATA
* Display the information for the TID selected in the TID_ACK_SELECT 
* CSR.
*/
#define FXR_RXDMA_DBG_TID_DATA					(FXR_RX_DMA_CSRS + 0x000000011010)
#define FXR_RXDMA_DBG_TID_DATA_RESETCSR				0x0000000000000000ull
#define FXR_RXDMA_DBG_TID_DATA_RESERVED_63_24_SHIFT		24
#define FXR_RXDMA_DBG_TID_DATA_RESERVED_63_24_MASK		0xFFFFFFFFFFull
#define FXR_RXDMA_DBG_TID_DATA_RESERVED_63_24_SMASK		0xFFFFFFFFFF000000ull
#define FXR_RXDMA_DBG_TID_DATA_TID_COUNT_SHIFT			16
#define FXR_RXDMA_DBG_TID_DATA_TID_COUNT_MASK			0xFFull
#define FXR_RXDMA_DBG_TID_DATA_TID_COUNT_SMASK			0xFF0000ull
#define FXR_RXDMA_DBG_TID_DATA_TID_ACK_SHIFT			8
#define FXR_RXDMA_DBG_TID_DATA_TID_ACK_MASK			0xFFull
#define FXR_RXDMA_DBG_TID_DATA_TID_ACK_SMASK			0xFF00ull
#define FXR_RXDMA_DBG_TID_DATA_TID_ERROR_SHIFT			4
#define FXR_RXDMA_DBG_TID_DATA_TID_ERROR_MASK			0xFull
#define FXR_RXDMA_DBG_TID_DATA_TID_ERROR_SMASK			0xF0ull
#define FXR_RXDMA_DBG_TID_DATA_RESERVED_3_2_SHIFT		2
#define FXR_RXDMA_DBG_TID_DATA_RESERVED_3_2_MASK		0x3ull
#define FXR_RXDMA_DBG_TID_DATA_RESERVED_3_2_SMASK		0xCull
#define FXR_RXDMA_DBG_TID_DATA_TID_ALL_SENT_SHIFT		1
#define FXR_RXDMA_DBG_TID_DATA_TID_ALL_SENT_MASK		0x1ull
#define FXR_RXDMA_DBG_TID_DATA_TID_ALL_SENT_SMASK		0x2ull
#define FXR_RXDMA_DBG_TID_DATA_TID_VALID_SHIFT			0
#define FXR_RXDMA_DBG_TID_DATA_TID_VALID_MASK			0x1ull
#define FXR_RXDMA_DBG_TID_DATA_TID_VALID_SMASK			0x1ull
/*
* Table #43 of fxr_top - RXDMA_DBG_ACK_DATA
* Display the information for the Ack selected in the TID_ACK_SELECT CSR. Also 
* display information on the Ack we are trying to send to the TxDMA or TxCI 
* interfaces.
*/
#define FXR_RXDMA_DBG_ACK_DATA					(FXR_RX_DMA_CSRS + 0x000000011018)
#define FXR_RXDMA_DBG_ACK_DATA_RESETCSR				0x0000000000000000ull
#define FXR_RXDMA_DBG_ACK_DATA_RESERVED_63_40_SHIFT		40
#define FXR_RXDMA_DBG_ACK_DATA_RESERVED_63_40_MASK		0xFFFFFFull
#define FXR_RXDMA_DBG_ACK_DATA_RESERVED_63_40_SMASK		0xFFFFFF0000000000ull
#define FXR_RXDMA_DBG_ACK_DATA_ACK_HANDLE_SHIFT			32
#define FXR_RXDMA_DBG_ACK_DATA_ACK_HANDLE_MASK			0xFFull
#define FXR_RXDMA_DBG_ACK_DATA_ACK_HANDLE_SMASK			0xFF00000000ull
#define FXR_RXDMA_DBG_ACK_DATA_ACK_TID_SHIFT			24
#define FXR_RXDMA_DBG_ACK_DATA_ACK_TID_MASK			0xFFull
#define FXR_RXDMA_DBG_ACK_DATA_ACK_TID_SMASK			0xFF000000ull
#define FXR_RXDMA_DBG_ACK_DATA_RESERVED_23_20_SHIFT		20
#define FXR_RXDMA_DBG_ACK_DATA_RESERVED_23_20_MASK		0xFull
#define FXR_RXDMA_DBG_ACK_DATA_RESERVED_23_20_SMASK		0xF00000ull
#define FXR_RXDMA_DBG_ACK_DATA_ACK_TO_TXCI_SHIFT		19
#define FXR_RXDMA_DBG_ACK_DATA_ACK_TO_TXCI_MASK			0x1ull
#define FXR_RXDMA_DBG_ACK_DATA_ACK_TO_TXCI_SMASK		0x80000ull
#define FXR_RXDMA_DBG_ACK_DATA_ACK_GOOD_CREDIT_SHIFT		18
#define FXR_RXDMA_DBG_ACK_DATA_ACK_GOOD_CREDIT_MASK		0x1ull
#define FXR_RXDMA_DBG_ACK_DATA_ACK_GOOD_CREDIT_SMASK		0x40000ull
#define FXR_RXDMA_DBG_ACK_DATA_DOING_FAST_ACK_SHIFT		17
#define FXR_RXDMA_DBG_ACK_DATA_DOING_FAST_ACK_MASK		0x1ull
#define FXR_RXDMA_DBG_ACK_DATA_DOING_FAST_ACK_SMASK		0x20000ull
#define FXR_RXDMA_DBG_ACK_DATA_DOING_ACK_SHIFT			16
#define FXR_RXDMA_DBG_ACK_DATA_DOING_ACK_MASK			0x1ull
#define FXR_RXDMA_DBG_ACK_DATA_DOING_ACK_SMASK			0x10000ull
#define FXR_RXDMA_DBG_ACK_DATA_RESERVED_15_9_SHIFT		9
#define FXR_RXDMA_DBG_ACK_DATA_RESERVED_15_9_MASK		0x7Full
#define FXR_RXDMA_DBG_ACK_DATA_RESERVED_15_9_SMASK		0xFE00ull
#define FXR_RXDMA_DBG_ACK_DATA_ACK_BIG_SHIFT			8
#define FXR_RXDMA_DBG_ACK_DATA_ACK_BIG_MASK			0x1ull
#define FXR_RXDMA_DBG_ACK_DATA_ACK_BIG_SMASK			0x100ull
#define FXR_RXDMA_DBG_ACK_DATA_ACK_MCTC_SHIFT			4
#define FXR_RXDMA_DBG_ACK_DATA_ACK_MCTC_MASK			0xFull
#define FXR_RXDMA_DBG_ACK_DATA_ACK_MCTC_SMASK			0xF0ull
#define FXR_RXDMA_DBG_ACK_DATA_ACK_TAIL_TYPE_SHIFT		3
#define FXR_RXDMA_DBG_ACK_DATA_ACK_TAIL_TYPE_MASK		0x1ull
#define FXR_RXDMA_DBG_ACK_DATA_ACK_TAIL_TYPE_SMASK		0x8ull
#define FXR_RXDMA_DBG_ACK_DATA_ACK_HEAD_TYPE_SHIFT		2
#define FXR_RXDMA_DBG_ACK_DATA_ACK_HEAD_TYPE_MASK		0x1ull
#define FXR_RXDMA_DBG_ACK_DATA_ACK_HEAD_TYPE_SMASK		0x4ull
#define FXR_RXDMA_DBG_ACK_DATA_ACK_RCVD_SHIFT			1
#define FXR_RXDMA_DBG_ACK_DATA_ACK_RCVD_MASK			0x1ull
#define FXR_RXDMA_DBG_ACK_DATA_ACK_RCVD_SMASK			0x2ull
#define FXR_RXDMA_DBG_ACK_DATA_ACK_VALID_SHIFT			0
#define FXR_RXDMA_DBG_ACK_DATA_ACK_VALID_MASK			0x1ull
#define FXR_RXDMA_DBG_ACK_DATA_ACK_VALID_SMASK			0x1ull
/*
* Table #44 of fxr_top - RXDMA_DBG_HIARB_DATA0
* Debug data from the HIArb module.
*/
#define FXR_RXDMA_DBG_HIARB_DATA0				(FXR_RX_DMA_CSRS + 0x000000011020)
#define FXR_RXDMA_DBG_HIARB_DATA0_RESETCSR			0x0000000000000000ull
#define FXR_RXDMA_DBG_HIARB_DATA0_ADDR_LOW_SHIFT		32
#define FXR_RXDMA_DBG_HIARB_DATA0_ADDR_LOW_MASK			0xFFFFFFFFull
#define FXR_RXDMA_DBG_HIARB_DATA0_ADDR_LOW_SMASK		0xFFFFFFFF00000000ull
#define FXR_RXDMA_DBG_HIARB_DATA0_REQ_TC_SHIFT			28
#define FXR_RXDMA_DBG_HIARB_DATA0_REQ_TC_MASK			0xFull
#define FXR_RXDMA_DBG_HIARB_DATA0_REQ_TC_SMASK			0xF0000000ull
#define FXR_RXDMA_DBG_HIARB_DATA0_ACK_HANDLE_SHIFT		20
#define FXR_RXDMA_DBG_HIARB_DATA0_ACK_HANDLE_MASK		0xFFull
#define FXR_RXDMA_DBG_HIARB_DATA0_ACK_HANDLE_SMASK		0xFF00000ull
#define FXR_RXDMA_DBG_HIARB_DATA0_CMD_SEL_SHIFT			10
#define FXR_RXDMA_DBG_HIARB_DATA0_CMD_SEL_MASK			0x3FFull
#define FXR_RXDMA_DBG_HIARB_DATA0_CMD_SEL_SMASK			0xFFC00ull
#define FXR_RXDMA_DBG_HIARB_DATA0_RESERVED_9_SHIFT		9
#define FXR_RXDMA_DBG_HIARB_DATA0_RESERVED_9_MASK		0x1ull
#define FXR_RXDMA_DBG_HIARB_DATA0_RESERVED_9_SMASK		0x200ull
#define FXR_RXDMA_DBG_HIARB_DATA0_CMD_REQ_SHIFT			0
#define FXR_RXDMA_DBG_HIARB_DATA0_CMD_REQ_MASK			0x1FFull
#define FXR_RXDMA_DBG_HIARB_DATA0_CMD_REQ_SMASK			0x1FFull
/*
* Table #45 of fxr_top - RXDMA_DBG_HIARB_DATA1
* Additional debug data from the HIArb.
*/
#define FXR_RXDMA_DBG_HIARB_DATA1				(FXR_RX_DMA_CSRS + 0x000000011028)
#define FXR_RXDMA_DBG_HIARB_DATA1_RESETCSR			0x0000000000000000ull
#define FXR_RXDMA_DBG_HIARB_DATA1_RESERVED_63_56_SHIFT		56
#define FXR_RXDMA_DBG_HIARB_DATA1_RESERVED_63_56_MASK		0xFFull
#define FXR_RXDMA_DBG_HIARB_DATA1_RESERVED_63_56_SMASK		0xFF00000000000000ull
#define FXR_RXDMA_DBG_HIARB_DATA1_REQ_TMOD_SHIFT		48
#define FXR_RXDMA_DBG_HIARB_DATA1_REQ_TMOD_MASK			0xFFull
#define FXR_RXDMA_DBG_HIARB_DATA1_REQ_TMOD_SMASK		0xFF000000000000ull
#define FXR_RXDMA_DBG_HIARB_DATA1_REQ_CHINT_SHIFT		46
#define FXR_RXDMA_DBG_HIARB_DATA1_REQ_CHINT_MASK		0x3ull
#define FXR_RXDMA_DBG_HIARB_DATA1_REQ_CHINT_SMASK		0xC00000000000ull
#define FXR_RXDMA_DBG_HIARB_DATA1_REQ_LEN_SHIFT			32
#define FXR_RXDMA_DBG_HIARB_DATA1_REQ_LEN_MASK			0x3FFFull
#define FXR_RXDMA_DBG_HIARB_DATA1_REQ_LEN_SMASK			0x3FFF00000000ull
#define FXR_RXDMA_DBG_HIARB_DATA1_RESERVED_31_SHIFT		31
#define FXR_RXDMA_DBG_HIARB_DATA1_RESERVED_31_MASK		0x1ull
#define FXR_RXDMA_DBG_HIARB_DATA1_RESERVED_31_SMASK		0x80000000ull
#define FXR_RXDMA_DBG_HIARB_DATA1_REQ_FETCH_SHIFT		30
#define FXR_RXDMA_DBG_HIARB_DATA1_REQ_FETCH_MASK		0x1ull
#define FXR_RXDMA_DBG_HIARB_DATA1_REQ_FETCH_SMASK		0x40000000ull
#define FXR_RXDMA_DBG_HIARB_DATA1_REQ_ADT_SHIFT			25
#define FXR_RXDMA_DBG_HIARB_DATA1_REQ_ADT_MASK			0x1Full
#define FXR_RXDMA_DBG_HIARB_DATA1_REQ_ADT_SMASK			0x3E000000ull
#define FXR_RXDMA_DBG_HIARB_DATA1_REQ_ASOP_SHIFT		20
#define FXR_RXDMA_DBG_HIARB_DATA1_REQ_ASOP_MASK			0x1Full
#define FXR_RXDMA_DBG_HIARB_DATA1_REQ_ASOP_SMASK		0x1F00000ull
#define FXR_RXDMA_DBG_HIARB_DATA1_REQ_SOP_SHIFT			19
#define FXR_RXDMA_DBG_HIARB_DATA1_REQ_SOP_MASK			0x1ull
#define FXR_RXDMA_DBG_HIARB_DATA1_REQ_SOP_SMASK			0x80000ull
#define FXR_RXDMA_DBG_HIARB_DATA1_REQ_EOP_SHIFT			18
#define FXR_RXDMA_DBG_HIARB_DATA1_REQ_EOP_MASK			0x1ull
#define FXR_RXDMA_DBG_HIARB_DATA1_REQ_EOP_SMASK			0x40000ull
#define FXR_RXDMA_DBG_HIARB_DATA1_REQ_ART_SHIFT			17
#define FXR_RXDMA_DBG_HIARB_DATA1_REQ_ART_MASK			0x1ull
#define FXR_RXDMA_DBG_HIARB_DATA1_REQ_ART_SMASK			0x20000ull
#define FXR_RXDMA_DBG_HIARB_DATA1_REQ_CT_SHIFT			16
#define FXR_RXDMA_DBG_HIARB_DATA1_REQ_CT_MASK			0x1ull
#define FXR_RXDMA_DBG_HIARB_DATA1_REQ_CT_SMASK			0x10000ull
#define FXR_RXDMA_DBG_HIARB_DATA1_REQ_SPEC_SHIFT		15
#define FXR_RXDMA_DBG_HIARB_DATA1_REQ_SPEC_MASK			0x1ull
#define FXR_RXDMA_DBG_HIARB_DATA1_REQ_SPEC_SMASK		0x8000ull
#define FXR_RXDMA_DBG_HIARB_DATA1_REQ_OPCODE_SHIFT		12
#define FXR_RXDMA_DBG_HIARB_DATA1_REQ_OPCODE_MASK		0x7ull
#define FXR_RXDMA_DBG_HIARB_DATA1_REQ_OPCODE_SMASK		0x7000ull
#define FXR_RXDMA_DBG_HIARB_DATA1_REQ_PID_SHIFT			0
#define FXR_RXDMA_DBG_HIARB_DATA1_REQ_PID_MASK			0xFFFull
#define FXR_RXDMA_DBG_HIARB_DATA1_REQ_PID_SMASK			0xFFFull
/*
* Table #46 of fxr_top - RXDMA_DBG_CNTX_CMD_DATA
* Select TID and ACK to display in the next CSRs for debug purposes.
*/
#define FXR_RXDMA_DBG_CNTX_CMD_DATA				(FXR_RX_DMA_CSRS + 0x000000011030)
#define FXR_RXDMA_DBG_CNTX_CMD_DATA_RESETCSR			0x0000000000000000ull
#define FXR_RXDMA_DBG_CNTX_CMD_DATA_ADDR_SHIFT			32
#define FXR_RXDMA_DBG_CNTX_CMD_DATA_ADDR_MASK			0xFFFFFFFFull
#define FXR_RXDMA_DBG_CNTX_CMD_DATA_ADDR_SMASK			0xFFFFFFFF00000000ull
#define FXR_RXDMA_DBG_CNTX_CMD_DATA_CMD_HOLD_SHIFT		31
#define FXR_RXDMA_DBG_CNTX_CMD_DATA_CMD_HOLD_MASK		0x1ull
#define FXR_RXDMA_DBG_CNTX_CMD_DATA_CMD_HOLD_SMASK		0x80000000ull
#define FXR_RXDMA_DBG_CNTX_CMD_DATA_RESERVED_30_SHIFT		30
#define FXR_RXDMA_DBG_CNTX_CMD_DATA_RESERVED_30_MASK		0x1ull
#define FXR_RXDMA_DBG_CNTX_CMD_DATA_RESERVED_30_SMASK		0x40000000ull
#define FXR_RXDMA_DBG_CNTX_CMD_DATA_DATA_TAIL_SHIFT		29
#define FXR_RXDMA_DBG_CNTX_CMD_DATA_DATA_TAIL_MASK		0x1ull
#define FXR_RXDMA_DBG_CNTX_CMD_DATA_DATA_TAIL_SMASK		0x20000000ull
#define FXR_RXDMA_DBG_CNTX_CMD_DATA_DATA_VALID_SHIFT		28
#define FXR_RXDMA_DBG_CNTX_CMD_DATA_DATA_VALID_MASK		0x1ull
#define FXR_RXDMA_DBG_CNTX_CMD_DATA_DATA_VALID_SMASK		0x10000000ull
#define FXR_RXDMA_DBG_CNTX_CMD_DATA_RESERVED_27_26_SHIFT	26
#define FXR_RXDMA_DBG_CNTX_CMD_DATA_RESERVED_27_26_MASK		0x3ull
#define FXR_RXDMA_DBG_CNTX_CMD_DATA_RESERVED_27_26_SMASK	0xC000000ull
#define FXR_RXDMA_DBG_CNTX_CMD_DATA_LEN_SHIFT			12
#define FXR_RXDMA_DBG_CNTX_CMD_DATA_LEN_MASK			0x3FFFull
#define FXR_RXDMA_DBG_CNTX_CMD_DATA_LEN_SMASK			0x3FFF000ull
#define FXR_RXDMA_DBG_CNTX_CMD_DATA_RESERVED_11_SHIFT		11
#define FXR_RXDMA_DBG_CNTX_CMD_DATA_RESERVED_11_MASK		0x1ull
#define FXR_RXDMA_DBG_CNTX_CMD_DATA_RESERVED_11_SMASK		0x800ull
#define FXR_RXDMA_DBG_CNTX_CMD_DATA_OPCODE_SHIFT		8
#define FXR_RXDMA_DBG_CNTX_CMD_DATA_OPCODE_MASK			0x7ull
#define FXR_RXDMA_DBG_CNTX_CMD_DATA_OPCODE_SMASK		0x700ull
#define FXR_RXDMA_DBG_CNTX_CMD_DATA_RESERVED_7_SHIFT		7
#define FXR_RXDMA_DBG_CNTX_CMD_DATA_RESERVED_7_MASK		0x1ull
#define FXR_RXDMA_DBG_CNTX_CMD_DATA_RESERVED_7_SMASK		0x80ull
#define FXR_RXDMA_DBG_CNTX_CMD_DATA_NEEDS_DATA_SHIFT		6
#define FXR_RXDMA_DBG_CNTX_CMD_DATA_NEEDS_DATA_MASK		0x1ull
#define FXR_RXDMA_DBG_CNTX_CMD_DATA_NEEDS_DATA_SMASK		0x40ull
#define FXR_RXDMA_DBG_CNTX_CMD_DATA_CMD_VALID_SHIFT		5
#define FXR_RXDMA_DBG_CNTX_CMD_DATA_CMD_VALID_MASK		0x1ull
#define FXR_RXDMA_DBG_CNTX_CMD_DATA_CMD_VALID_SMASK		0x20ull
#define FXR_RXDMA_DBG_CNTX_CMD_DATA_ACK_DONE_SHIFT		4
#define FXR_RXDMA_DBG_CNTX_CMD_DATA_ACK_DONE_MASK		0x1ull
#define FXR_RXDMA_DBG_CNTX_CMD_DATA_ACK_DONE_SMASK		0x10ull
#define FXR_RXDMA_DBG_CNTX_CMD_DATA_EQ_DONE_SHIFT		3
#define FXR_RXDMA_DBG_CNTX_CMD_DATA_EQ_DONE_MASK		0x1ull
#define FXR_RXDMA_DBG_CNTX_CMD_DATA_EQ_DONE_SMASK		0x8ull
#define FXR_RXDMA_DBG_CNTX_CMD_DATA_CT_DONE_SHIFT		2
#define FXR_RXDMA_DBG_CNTX_CMD_DATA_CT_DONE_MASK		0x1ull
#define FXR_RXDMA_DBG_CNTX_CMD_DATA_CT_DONE_SMASK		0x4ull
#define FXR_RXDMA_DBG_CNTX_CMD_DATA_XFER_DONE_SHIFT		1
#define FXR_RXDMA_DBG_CNTX_CMD_DATA_XFER_DONE_MASK		0x1ull
#define FXR_RXDMA_DBG_CNTX_CMD_DATA_XFER_DONE_SMASK		0x2ull
#define FXR_RXDMA_DBG_CNTX_CMD_DATA_CMD_EMPTY_SHIFT		0
#define FXR_RXDMA_DBG_CNTX_CMD_DATA_CMD_EMPTY_MASK		0x1ull
#define FXR_RXDMA_DBG_CNTX_CMD_DATA_CMD_EMPTY_SMASK		0x1ull
/*
* Table #47 of fxr_top - RXDMA_DBG_CNTX_FIFO_PKT
* FIFO command from muxed context. This is the command being executed now, or 
* next.
*/
#define FXR_RXDMA_DBG_CNTX_FIFO_PKT				(FXR_RX_DMA_CSRS + 0x000000011038)
#define FXR_RXDMA_DBG_CNTX_FIFO_PKT_RESETCSR			0x0000000000000000ull
#define FXR_RXDMA_DBG_CNTX_FIFO_PKT_RESERVED_63_48_SHIFT	48
#define FXR_RXDMA_DBG_CNTX_FIFO_PKT_RESERVED_63_48_MASK		0xFFFFull
#define FXR_RXDMA_DBG_CNTX_FIFO_PKT_RESERVED_63_48_SMASK	0xFFFF000000000000ull
#define FXR_RXDMA_DBG_CNTX_FIFO_PKT_VALID_SHIFT			47
#define FXR_RXDMA_DBG_CNTX_FIFO_PKT_VALID_MASK			0x1ull
#define FXR_RXDMA_DBG_CNTX_FIFO_PKT_VALID_SMASK			0x800000000000ull
#define FXR_RXDMA_DBG_CNTX_FIFO_PKT_HEAD_SHIFT			46
#define FXR_RXDMA_DBG_CNTX_FIFO_PKT_HEAD_MASK			0x1ull
#define FXR_RXDMA_DBG_CNTX_FIFO_PKT_HEAD_SMASK			0x400000000000ull
#define FXR_RXDMA_DBG_CNTX_FIFO_PKT_TAIL_SHIFT			45
#define FXR_RXDMA_DBG_CNTX_FIFO_PKT_TAIL_MASK			0x1ull
#define FXR_RXDMA_DBG_CNTX_FIFO_PKT_TAIL_SMASK			0x200000000000ull
#define FXR_RXDMA_DBG_CNTX_FIFO_PKT_ATYPE_SHIFT			44
#define FXR_RXDMA_DBG_CNTX_FIFO_PKT_ATYPE_MASK			0x1ull
#define FXR_RXDMA_DBG_CNTX_FIFO_PKT_ATYPE_SMASK			0x100000000000ull
#define FXR_RXDMA_DBG_CNTX_FIFO_PKT_RESERVED_43_38_SHIFT	38
#define FXR_RXDMA_DBG_CNTX_FIFO_PKT_RESERVED_43_38_MASK		0x3Full
#define FXR_RXDMA_DBG_CNTX_FIFO_PKT_RESERVED_43_38_SMASK	0xFC000000000ull
#define FXR_RXDMA_DBG_CNTX_FIFO_PKT_ACK_INFO_SHIFT		32
#define FXR_RXDMA_DBG_CNTX_FIFO_PKT_ACK_INFO_MASK		0x3Full
#define FXR_RXDMA_DBG_CNTX_FIFO_PKT_ACK_INFO_SMASK		0x3F00000000ull
#define FXR_RXDMA_DBG_CNTX_FIFO_PKT_EOP_SHIFT			31
#define FXR_RXDMA_DBG_CNTX_FIFO_PKT_EOP_MASK			0x1ull
#define FXR_RXDMA_DBG_CNTX_FIFO_PKT_EOP_SMASK			0x80000000ull
#define FXR_RXDMA_DBG_CNTX_FIFO_PKT_RESERVED_30_SHIFT		30
#define FXR_RXDMA_DBG_CNTX_FIFO_PKT_RESERVED_30_MASK		0x1ull
#define FXR_RXDMA_DBG_CNTX_FIFO_PKT_RESERVED_30_SMASK		0x40000000ull
#define FXR_RXDMA_DBG_CNTX_FIFO_PKT_NI_SHIFT			28
#define FXR_RXDMA_DBG_CNTX_FIFO_PKT_NI_MASK			0x3ull
#define FXR_RXDMA_DBG_CNTX_FIFO_PKT_NI_SMASK			0x30000000ull
#define FXR_RXDMA_DBG_CNTX_FIFO_PKT_PID_SHIFT			16
#define FXR_RXDMA_DBG_CNTX_FIFO_PKT_PID_MASK			0xFFFull
#define FXR_RXDMA_DBG_CNTX_FIFO_PKT_PID_SMASK			0xFFF0000ull
#define FXR_RXDMA_DBG_CNTX_FIFO_PKT_RESERVED_15_SHIFT		15
#define FXR_RXDMA_DBG_CNTX_FIFO_PKT_RESERVED_15_MASK		0x1ull
#define FXR_RXDMA_DBG_CNTX_FIFO_PKT_RESERVED_15_SMASK		0x8000ull
#define FXR_RXDMA_DBG_CNTX_FIFO_PKT_MCTC_SHIFT			12
#define FXR_RXDMA_DBG_CNTX_FIFO_PKT_MCTC_MASK			0x7ull
#define FXR_RXDMA_DBG_CNTX_FIFO_PKT_MCTC_SMASK			0x7000ull
#define FXR_RXDMA_DBG_CNTX_FIFO_PKT_RESERVED_11_10_SHIFT	10
#define FXR_RXDMA_DBG_CNTX_FIFO_PKT_RESERVED_11_10_MASK		0x3ull
#define FXR_RXDMA_DBG_CNTX_FIFO_PKT_RESERVED_11_10_SMASK	0xC00ull
#define FXR_RXDMA_DBG_CNTX_FIFO_PKT_PKT_HANDLE_SHIFT		0
#define FXR_RXDMA_DBG_CNTX_FIFO_PKT_PKT_HANDLE_MASK		0x3FFull
#define FXR_RXDMA_DBG_CNTX_FIFO_PKT_PKT_HANDLE_SMASK		0x3FFull
/*
* Table #48 of fxr_top - RXDMA_DBG_CNTX_FIFO_OP0
* Debug data from the Context. FIFO Cmd OP Info.
*/
#define FXR_RXDMA_DBG_CNTX_FIFO_OP0				(FXR_RX_DMA_CSRS + 0x000000011040)
#define FXR_RXDMA_DBG_CNTX_FIFO_OP0_RESETCSR			0x0000000000000000ull
#define FXR_RXDMA_DBG_CNTX_FIFO_OP0_RESERVED_63_62_SHIFT	62
#define FXR_RXDMA_DBG_CNTX_FIFO_OP0_RESERVED_63_62_MASK		0x3ull
#define FXR_RXDMA_DBG_CNTX_FIFO_OP0_RESERVED_63_62_SMASK	0xC000000000000000ull
#define FXR_RXDMA_DBG_CNTX_FIFO_OP0_COUNT_SHIFT			48
#define FXR_RXDMA_DBG_CNTX_FIFO_OP0_COUNT_MASK			0x3FFFull
#define FXR_RXDMA_DBG_CNTX_FIFO_OP0_COUNT_SMASK			0x3FFF000000000000ull
#define FXR_RXDMA_DBG_CNTX_FIFO_OP0_RESERVED_47_46_SHIFT	46
#define FXR_RXDMA_DBG_CNTX_FIFO_OP0_RESERVED_47_46_MASK		0x3ull
#define FXR_RXDMA_DBG_CNTX_FIFO_OP0_RESERVED_47_46_SMASK	0xC00000000000ull
#define FXR_RXDMA_DBG_CNTX_FIFO_OP0_START_SHIFT			32
#define FXR_RXDMA_DBG_CNTX_FIFO_OP0_START_MASK			0x3FFFull
#define FXR_RXDMA_DBG_CNTX_FIFO_OP0_START_SMASK			0x3FFF00000000ull
#define FXR_RXDMA_DBG_CNTX_FIFO_OP0_RESERVED_31_17_SHIFT	17
#define FXR_RXDMA_DBG_CNTX_FIFO_OP0_RESERVED_31_17_MASK		0x7FFFull
#define FXR_RXDMA_DBG_CNTX_FIFO_OP0_RESERVED_31_17_SMASK	0xFFFE0000ull
#define FXR_RXDMA_DBG_CNTX_FIFO_OP0_IOVEC_SHIFT			16
#define FXR_RXDMA_DBG_CNTX_FIFO_OP0_IOVEC_MASK			0x1ull
#define FXR_RXDMA_DBG_CNTX_FIFO_OP0_IOVEC_SMASK			0x10000ull
#define FXR_RXDMA_DBG_CNTX_FIFO_OP0_FETCH_SHIFT			15
#define FXR_RXDMA_DBG_CNTX_FIFO_OP0_FETCH_MASK			0x1ull
#define FXR_RXDMA_DBG_CNTX_FIFO_OP0_FETCH_SMASK			0x8000ull
#define FXR_RXDMA_DBG_CNTX_FIFO_OP0_ART_SHIFT			14
#define FXR_RXDMA_DBG_CNTX_FIFO_OP0_ART_MASK			0x1ull
#define FXR_RXDMA_DBG_CNTX_FIFO_OP0_ART_SMASK			0x4000ull
#define FXR_RXDMA_DBG_CNTX_FIFO_OP0_ADT_SHIFT			9
#define FXR_RXDMA_DBG_CNTX_FIFO_OP0_ADT_MASK			0x1Full
#define FXR_RXDMA_DBG_CNTX_FIFO_OP0_ADT_SMASK			0x3E00ull
#define FXR_RXDMA_DBG_CNTX_FIFO_OP0_ASO_SHIFT			4
#define FXR_RXDMA_DBG_CNTX_FIFO_OP0_ASO_MASK			0x1Full
#define FXR_RXDMA_DBG_CNTX_FIFO_OP0_ASO_SMASK			0x1F0ull
#define FXR_RXDMA_DBG_CNTX_FIFO_OP0_TOP_SHIFT			1
#define FXR_RXDMA_DBG_CNTX_FIFO_OP0_TOP_MASK			0x7ull
#define FXR_RXDMA_DBG_CNTX_FIFO_OP0_TOP_SMASK			0xEull
#define FXR_RXDMA_DBG_CNTX_FIFO_OP0_VALID_SHIFT			0
#define FXR_RXDMA_DBG_CNTX_FIFO_OP0_VALID_MASK			0x1ull
#define FXR_RXDMA_DBG_CNTX_FIFO_OP0_VALID_SMASK			0x1ull
/*
* Table #49 of fxr_top - RXDMA_DBG_CNTX_FIFO_OP1
* Debug data from the Context. FIFO Cmd OP Info.
*/
#define FXR_RXDMA_DBG_CNTX_FIFO_OP1				(FXR_RX_DMA_CSRS + 0x000000011048)
#define FXR_RXDMA_DBG_CNTX_FIFO_OP1_RESETCSR			0x0000000000000000ull
#define FXR_RXDMA_DBG_CNTX_FIFO_OP1_RESERVED_63_57_SHIFT	57
#define FXR_RXDMA_DBG_CNTX_FIFO_OP1_RESERVED_63_57_MASK		0x7Full
#define FXR_RXDMA_DBG_CNTX_FIFO_OP1_RESERVED_63_57_SMASK	0xFE00000000000000ull
#define FXR_RXDMA_DBG_CNTX_FIFO_OP1_VADDR_SHIFT			0
#define FXR_RXDMA_DBG_CNTX_FIFO_OP1_VADDR_MASK			0x1FFFFFFFFFFFFFFull
#define FXR_RXDMA_DBG_CNTX_FIFO_OP1_VADDR_SMASK			0x1FFFFFFFFFFFFFFull
/*
* Table #50 of fxr_top - RXDMA_DBG_CNTX_FIFO_CTEQ
* Debug data from the Context. FIFO Cmd CTEQ data.
*/
#define FXR_RXDMA_DBG_CNTX_FIFO_CTEQ				(FXR_RX_DMA_CSRS + 0x000000011050)
#define FXR_RXDMA_DBG_CNTX_FIFO_CTEQ_RESETCSR			0x0000000000000000ull
#define FXR_RXDMA_DBG_CNTX_FIFO_CTEQ_CT_COUNT_SHIFT		32
#define FXR_RXDMA_DBG_CNTX_FIFO_CTEQ_CT_COUNT_MASK		0xFFFFFFFFull
#define FXR_RXDMA_DBG_CNTX_FIFO_CTEQ_CT_COUNT_SMASK		0xFFFFFFFF00000000ull
#define FXR_RXDMA_DBG_CNTX_FIFO_CTEQ_RESERVED_31_SHIFT		31
#define FXR_RXDMA_DBG_CNTX_FIFO_CTEQ_RESERVED_31_MASK		0x1ull
#define FXR_RXDMA_DBG_CNTX_FIFO_CTEQ_RESERVED_31_SMASK		0x80000000ull
#define FXR_RXDMA_DBG_CNTX_FIFO_CTEQ_EQ_HANDLE_SHIFT		20
#define FXR_RXDMA_DBG_CNTX_FIFO_CTEQ_EQ_HANDLE_MASK		0x7FFull
#define FXR_RXDMA_DBG_CNTX_FIFO_CTEQ_EQ_HANDLE_SMASK		0x7FF00000ull
#define FXR_RXDMA_DBG_CNTX_FIFO_CTEQ_RESERVED_19_18_SHIFT	18
#define FXR_RXDMA_DBG_CNTX_FIFO_CTEQ_RESERVED_19_18_MASK	0x3ull
#define FXR_RXDMA_DBG_CNTX_FIFO_CTEQ_RESERVED_19_18_SMASK	0xC0000ull
#define FXR_RXDMA_DBG_CNTX_FIFO_CTEQ_HANDLE_VALID_SHIFT		17
#define FXR_RXDMA_DBG_CNTX_FIFO_CTEQ_HANDLE_VALID_MASK		0x1ull
#define FXR_RXDMA_DBG_CNTX_FIFO_CTEQ_HANDLE_VALID_SMASK		0x20000ull
#define FXR_RXDMA_DBG_CNTX_FIFO_CTEQ_CT_FAILURE_SHIFT		16
#define FXR_RXDMA_DBG_CNTX_FIFO_CTEQ_CT_FAILURE_MASK		0x1ull
#define FXR_RXDMA_DBG_CNTX_FIFO_CTEQ_CT_FAILURE_SMASK		0x10000ull
#define FXR_RXDMA_DBG_CNTX_FIFO_CTEQ_RESERVED_15_SHIFT		15
#define FXR_RXDMA_DBG_CNTX_FIFO_CTEQ_RESERVED_15_MASK		0x1ull
#define FXR_RXDMA_DBG_CNTX_FIFO_CTEQ_RESERVED_15_SMASK		0x8000ull
#define FXR_RXDMA_DBG_CNTX_FIFO_CTEQ_HANDLE_SHIFT		4
#define FXR_RXDMA_DBG_CNTX_FIFO_CTEQ_HANDLE_MASK		0x7FFull
#define FXR_RXDMA_DBG_CNTX_FIFO_CTEQ_HANDLE_SMASK		0x7FF0ull
#define FXR_RXDMA_DBG_CNTX_FIFO_CTEQ_RESERVED_3_2_SHIFT		2
#define FXR_RXDMA_DBG_CNTX_FIFO_CTEQ_RESERVED_3_2_MASK		0x3ull
#define FXR_RXDMA_DBG_CNTX_FIFO_CTEQ_RESERVED_3_2_SMASK		0xCull
#define FXR_RXDMA_DBG_CNTX_FIFO_CTEQ_CT_SHIFT			1
#define FXR_RXDMA_DBG_CNTX_FIFO_CTEQ_CT_MASK			0x1ull
#define FXR_RXDMA_DBG_CNTX_FIFO_CTEQ_CT_SMASK			0x2ull
#define FXR_RXDMA_DBG_CNTX_FIFO_CTEQ_VALID_SHIFT		0
#define FXR_RXDMA_DBG_CNTX_FIFO_CTEQ_VALID_MASK			0x1ull
#define FXR_RXDMA_DBG_CNTX_FIFO_CTEQ_VALID_SMASK		0x1ull
/*
* Table #51 of fxr_top - RXDMA_DBG_CNTX_FIFO_ACK0
* Debug data from the Context. FIFO Cmd Ack Info[63:0].
*/
#define FXR_RXDMA_DBG_CNTX_FIFO_ACK0				(FXR_RX_DMA_CSRS + 0x000000011058)
#define FXR_RXDMA_DBG_CNTX_FIFO_ACK0_RESETCSR			0x0000000000000000ull
#define FXR_RXDMA_DBG_CNTX_FIFO_ACK0_ACK_INFO_SHIFT		0
#define FXR_RXDMA_DBG_CNTX_FIFO_ACK0_ACK_INFO_MASK		0xFFFFFFFFFFFFFFFFull
#define FXR_RXDMA_DBG_CNTX_FIFO_ACK0_ACK_INFO_SMASK		0xFFFFFFFFFFFFFFFFull
/*
* Table #52 of fxr_top - RXDMA_DBG_CNTX_FIFO_ACK1
* Debug data from the Context. FIFO Cmd Ack Info[127:64].
*/
#define FXR_RXDMA_DBG_CNTX_FIFO_ACK1				(FXR_RX_DMA_CSRS + 0x000000011060)
#define FXR_RXDMA_DBG_CNTX_FIFO_ACK1_RESETCSR			0x0000000000000000ull
#define FXR_RXDMA_DBG_CNTX_FIFO_ACK1_ACK_INFO_SHIFT		0
#define FXR_RXDMA_DBG_CNTX_FIFO_ACK1_ACK_INFO_MASK		0xFFFFFFFFFFFFFFFFull
#define FXR_RXDMA_DBG_CNTX_FIFO_ACK1_ACK_INFO_SMASK		0xFFFFFFFFFFFFFFFFull
/*
* Table #53 of fxr_top - RXDMA_DBG_CNTX_FIFO_ACK2
* Debug data from the Context. FIFO Cmd Ack Info[191:128].
*/
#define FXR_RXDMA_DBG_CNTX_FIFO_ACK2				(FXR_RX_DMA_CSRS + 0x000000011068)
#define FXR_RXDMA_DBG_CNTX_FIFO_ACK2_RESETCSR			0x0000000000000000ull
#define FXR_RXDMA_DBG_CNTX_FIFO_ACK2_ACK_INFO_SHIFT		0
#define FXR_RXDMA_DBG_CNTX_FIFO_ACK2_ACK_INFO_MASK		0xFFFFFFFFFFFFFFFFull
#define FXR_RXDMA_DBG_CNTX_FIFO_ACK2_ACK_INFO_SMASK		0xFFFFFFFFFFFFFFFFull
/*
* Table #54 of fxr_top - RXDMA_DBG_WAR_VALID
* Mask showing the valid WAR Buffer entries. Bit 0 corresponds to WAR buffer 
* address 0.
*/
#define FXR_RXDMA_DBG_WAR_VALID					(FXR_RX_DMA_CSRS + 0x000000011100)
#define FXR_RXDMA_DBG_WAR_VALID_RESETCSR			0x0000000000000000ull
#define FXR_RXDMA_DBG_WAR_VALID_VALIDS_SHIFT			0
#define FXR_RXDMA_DBG_WAR_VALID_VALIDS_MASK			0xFFFFFFFFFFFFFFFFull
#define FXR_RXDMA_DBG_WAR_VALID_VALIDS_SMASK			0xFFFFFFFFFFFFFFFFull
/*
* Table #55 of fxr_top - RXDMA_DBG_DQ_FREE_PTR
* The Head of the Free List for each DQ. FREE_LIST_PTR in the logic.
*/
#define FXR_RXDMA_DBG_DQ_FREE_PTR				(FXR_RX_DMA_CSRS + 0x000000011110)
#define FXR_RXDMA_DBG_DQ_FREE_PTR_RESETCSR			0x0000000000000000ull
#define FXR_RXDMA_DBG_DQ_FREE_PTR_DQ7_SHIFT			56
#define FXR_RXDMA_DBG_DQ_FREE_PTR_DQ7_MASK			0xFFull
#define FXR_RXDMA_DBG_DQ_FREE_PTR_DQ7_SMASK			0xFF00000000000000ull
#define FXR_RXDMA_DBG_DQ_FREE_PTR_DQ6_SHIFT			48
#define FXR_RXDMA_DBG_DQ_FREE_PTR_DQ6_MASK			0xFFull
#define FXR_RXDMA_DBG_DQ_FREE_PTR_DQ6_SMASK			0xFF000000000000ull
#define FXR_RXDMA_DBG_DQ_FREE_PTR_DQ5_SHIFT			40
#define FXR_RXDMA_DBG_DQ_FREE_PTR_DQ5_MASK			0xFFull
#define FXR_RXDMA_DBG_DQ_FREE_PTR_DQ5_SMASK			0xFF0000000000ull
#define FXR_RXDMA_DBG_DQ_FREE_PTR_DQ4_SHIFT			32
#define FXR_RXDMA_DBG_DQ_FREE_PTR_DQ4_MASK			0xFFull
#define FXR_RXDMA_DBG_DQ_FREE_PTR_DQ4_SMASK			0xFF00000000ull
#define FXR_RXDMA_DBG_DQ_FREE_PTR_DQ3_SHIFT			24
#define FXR_RXDMA_DBG_DQ_FREE_PTR_DQ3_MASK			0xFFull
#define FXR_RXDMA_DBG_DQ_FREE_PTR_DQ3_SMASK			0xFF000000ull
#define FXR_RXDMA_DBG_DQ_FREE_PTR_DQ2_SHIFT			16
#define FXR_RXDMA_DBG_DQ_FREE_PTR_DQ2_MASK			0xFFull
#define FXR_RXDMA_DBG_DQ_FREE_PTR_DQ2_SMASK			0xFF0000ull
#define FXR_RXDMA_DBG_DQ_FREE_PTR_DQ1_SHIFT			8
#define FXR_RXDMA_DBG_DQ_FREE_PTR_DQ1_MASK			0xFFull
#define FXR_RXDMA_DBG_DQ_FREE_PTR_DQ1_SMASK			0xFF00ull
#define FXR_RXDMA_DBG_DQ_FREE_PTR_DQ0_SHIFT			0
#define FXR_RXDMA_DBG_DQ_FREE_PTR_DQ0_MASK			0xFFull
#define FXR_RXDMA_DBG_DQ_FREE_PTR_DQ0_SMASK			0xFFull
/*
* Table #56 of fxr_top - RXDMA_DBG_DQ_END_PTR
* End of the Free List for each DQ. FREE_LIST_END in the logic.
*/
#define FXR_RXDMA_DBG_DQ_END_PTR				(FXR_RX_DMA_CSRS + 0x000000011118)
#define FXR_RXDMA_DBG_DQ_END_PTR_RESETCSR			0x0000000000000000ull
#define FXR_RXDMA_DBG_DQ_END_PTR_DQ7_SHIFT			56
#define FXR_RXDMA_DBG_DQ_END_PTR_DQ7_MASK			0xFFull
#define FXR_RXDMA_DBG_DQ_END_PTR_DQ7_SMASK			0xFF00000000000000ull
#define FXR_RXDMA_DBG_DQ_END_PTR_DQ6_SHIFT			48
#define FXR_RXDMA_DBG_DQ_END_PTR_DQ6_MASK			0xFFull
#define FXR_RXDMA_DBG_DQ_END_PTR_DQ6_SMASK			0xFF000000000000ull
#define FXR_RXDMA_DBG_DQ_END_PTR_DQ5_SHIFT			40
#define FXR_RXDMA_DBG_DQ_END_PTR_DQ5_MASK			0xFFull
#define FXR_RXDMA_DBG_DQ_END_PTR_DQ5_SMASK			0xFF0000000000ull
#define FXR_RXDMA_DBG_DQ_END_PTR_DQ4_SHIFT			32
#define FXR_RXDMA_DBG_DQ_END_PTR_DQ4_MASK			0xFFull
#define FXR_RXDMA_DBG_DQ_END_PTR_DQ4_SMASK			0xFF00000000ull
#define FXR_RXDMA_DBG_DQ_END_PTR_DQ3_SHIFT			24
#define FXR_RXDMA_DBG_DQ_END_PTR_DQ3_MASK			0xFFull
#define FXR_RXDMA_DBG_DQ_END_PTR_DQ3_SMASK			0xFF000000ull
#define FXR_RXDMA_DBG_DQ_END_PTR_DQ2_SHIFT			16
#define FXR_RXDMA_DBG_DQ_END_PTR_DQ2_MASK			0xFFull
#define FXR_RXDMA_DBG_DQ_END_PTR_DQ2_SMASK			0xFF0000ull
#define FXR_RXDMA_DBG_DQ_END_PTR_DQ1_SHIFT			8
#define FXR_RXDMA_DBG_DQ_END_PTR_DQ1_MASK			0xFFull
#define FXR_RXDMA_DBG_DQ_END_PTR_DQ1_SMASK			0xFF00ull
#define FXR_RXDMA_DBG_DQ_END_PTR_DQ0_SHIFT			0
#define FXR_RXDMA_DBG_DQ_END_PTR_DQ0_MASK			0xFFull
#define FXR_RXDMA_DBG_DQ_END_PTR_DQ0_SMASK			0xFFull
/*
* Table #57 of fxr_top - RXDMA_DBG_DQ_LAST_PKT
* Last Packet Handle received from a command to this DQ. HP_PKT_HANDLE in the 
* logic.
*/
#define FXR_RXDMA_DBG_DQ_LAST_PKT				(FXR_RX_DMA_CSRS + 0x000000011120)
#define FXR_RXDMA_DBG_DQ_LAST_PKT_RESETCSR			0x0000000000000000ull
#define FXR_RXDMA_DBG_DQ_LAST_PKT_DQ7_SHIFT			56
#define FXR_RXDMA_DBG_DQ_LAST_PKT_DQ7_MASK			0xFFull
#define FXR_RXDMA_DBG_DQ_LAST_PKT_DQ7_SMASK			0xFF00000000000000ull
#define FXR_RXDMA_DBG_DQ_LAST_PKT_DQ6_SHIFT			48
#define FXR_RXDMA_DBG_DQ_LAST_PKT_DQ6_MASK			0xFFull
#define FXR_RXDMA_DBG_DQ_LAST_PKT_DQ6_SMASK			0xFF000000000000ull
#define FXR_RXDMA_DBG_DQ_LAST_PKT_DQ5_SHIFT			40
#define FXR_RXDMA_DBG_DQ_LAST_PKT_DQ5_MASK			0xFFull
#define FXR_RXDMA_DBG_DQ_LAST_PKT_DQ5_SMASK			0xFF0000000000ull
#define FXR_RXDMA_DBG_DQ_LAST_PKT_DQ4_SHIFT			32
#define FXR_RXDMA_DBG_DQ_LAST_PKT_DQ4_MASK			0xFFull
#define FXR_RXDMA_DBG_DQ_LAST_PKT_DQ4_SMASK			0xFF00000000ull
#define FXR_RXDMA_DBG_DQ_LAST_PKT_DQ3_SHIFT			24
#define FXR_RXDMA_DBG_DQ_LAST_PKT_DQ3_MASK			0xFFull
#define FXR_RXDMA_DBG_DQ_LAST_PKT_DQ3_SMASK			0xFF000000ull
#define FXR_RXDMA_DBG_DQ_LAST_PKT_DQ2_SHIFT			16
#define FXR_RXDMA_DBG_DQ_LAST_PKT_DQ2_MASK			0xFFull
#define FXR_RXDMA_DBG_DQ_LAST_PKT_DQ2_SMASK			0xFF0000ull
#define FXR_RXDMA_DBG_DQ_LAST_PKT_DQ1_SHIFT			8
#define FXR_RXDMA_DBG_DQ_LAST_PKT_DQ1_MASK			0xFFull
#define FXR_RXDMA_DBG_DQ_LAST_PKT_DQ1_SMASK			0xFF00ull
#define FXR_RXDMA_DBG_DQ_LAST_PKT_DQ0_SHIFT			0
#define FXR_RXDMA_DBG_DQ_LAST_PKT_DQ0_MASK			0xFFull
#define FXR_RXDMA_DBG_DQ_LAST_PKT_DQ0_SMASK			0xFFull
/*
* Table #58 of fxr_top - RXDMA_DBG_NEXT_HANDLE
* Next Handles to be used by each DQ. NXT_HANDLE in the logic.
*/
#define FXR_RXDMA_DBG_NEXT_HANDLE				(FXR_RX_DMA_CSRS + 0x000000011128)
#define FXR_RXDMA_DBG_NEXT_HANDLE_RESETCSR			0x0000000000000000ull
#define FXR_RXDMA_DBG_NEXT_HANDLE_DQ7_SHIFT			56
#define FXR_RXDMA_DBG_NEXT_HANDLE_DQ7_MASK			0xFFull
#define FXR_RXDMA_DBG_NEXT_HANDLE_DQ7_SMASK			0xFF00000000000000ull
#define FXR_RXDMA_DBG_NEXT_HANDLE_DQ6_SHIFT			48
#define FXR_RXDMA_DBG_NEXT_HANDLE_DQ6_MASK			0xFFull
#define FXR_RXDMA_DBG_NEXT_HANDLE_DQ6_SMASK			0xFF000000000000ull
#define FXR_RXDMA_DBG_NEXT_HANDLE_DQ5_SHIFT			40
#define FXR_RXDMA_DBG_NEXT_HANDLE_DQ5_MASK			0xFFull
#define FXR_RXDMA_DBG_NEXT_HANDLE_DQ5_SMASK			0xFF0000000000ull
#define FXR_RXDMA_DBG_NEXT_HANDLE_DQ4_SHIFT			32
#define FXR_RXDMA_DBG_NEXT_HANDLE_DQ4_MASK			0xFFull
#define FXR_RXDMA_DBG_NEXT_HANDLE_DQ4_SMASK			0xFF00000000ull
#define FXR_RXDMA_DBG_NEXT_HANDLE_DQ3_SHIFT			24
#define FXR_RXDMA_DBG_NEXT_HANDLE_DQ3_MASK			0xFFull
#define FXR_RXDMA_DBG_NEXT_HANDLE_DQ3_SMASK			0xFF000000ull
#define FXR_RXDMA_DBG_NEXT_HANDLE_DQ2_SHIFT			16
#define FXR_RXDMA_DBG_NEXT_HANDLE_DQ2_MASK			0xFFull
#define FXR_RXDMA_DBG_NEXT_HANDLE_DQ2_SMASK			0xFF0000ull
#define FXR_RXDMA_DBG_NEXT_HANDLE_DQ1_SHIFT			8
#define FXR_RXDMA_DBG_NEXT_HANDLE_DQ1_MASK			0xFFull
#define FXR_RXDMA_DBG_NEXT_HANDLE_DQ1_SMASK			0xFF00ull
#define FXR_RXDMA_DBG_NEXT_HANDLE_DQ0_SHIFT			0
#define FXR_RXDMA_DBG_NEXT_HANDLE_DQ0_MASK			0xFFull
#define FXR_RXDMA_DBG_NEXT_HANDLE_DQ0_SMASK			0xFFull
/*
* Table #59 of fxr_top - RXDMA_DBG_PKT_CNT
* Number of Valid Packets in each DQ.
*/
#define FXR_RXDMA_DBG_PKT_CNT					(FXR_RX_DMA_CSRS + 0x000000011130)
#define FXR_RXDMA_DBG_PKT_CNT_RESETCSR				0x0000000000000000ull
#define FXR_RXDMA_DBG_PKT_CNT_DQ7_SHIFT				56
#define FXR_RXDMA_DBG_PKT_CNT_DQ7_MASK				0xFFull
#define FXR_RXDMA_DBG_PKT_CNT_DQ7_SMASK				0xFF00000000000000ull
#define FXR_RXDMA_DBG_PKT_CNT_DQ6_SHIFT				48
#define FXR_RXDMA_DBG_PKT_CNT_DQ6_MASK				0xFFull
#define FXR_RXDMA_DBG_PKT_CNT_DQ6_SMASK				0xFF000000000000ull
#define FXR_RXDMA_DBG_PKT_CNT_DQ5_SHIFT				40
#define FXR_RXDMA_DBG_PKT_CNT_DQ5_MASK				0xFFull
#define FXR_RXDMA_DBG_PKT_CNT_DQ5_SMASK				0xFF0000000000ull
#define FXR_RXDMA_DBG_PKT_CNT_DQ4_SHIFT				32
#define FXR_RXDMA_DBG_PKT_CNT_DQ4_MASK				0xFFull
#define FXR_RXDMA_DBG_PKT_CNT_DQ4_SMASK				0xFF00000000ull
#define FXR_RXDMA_DBG_PKT_CNT_DQ3_SHIFT				24
#define FXR_RXDMA_DBG_PKT_CNT_DQ3_MASK				0xFFull
#define FXR_RXDMA_DBG_PKT_CNT_DQ3_SMASK				0xFF000000ull
#define FXR_RXDMA_DBG_PKT_CNT_DQ2_SHIFT				16
#define FXR_RXDMA_DBG_PKT_CNT_DQ2_MASK				0xFFull
#define FXR_RXDMA_DBG_PKT_CNT_DQ2_SMASK				0xFF0000ull
#define FXR_RXDMA_DBG_PKT_CNT_DQ1_SHIFT				8
#define FXR_RXDMA_DBG_PKT_CNT_DQ1_MASK				0xFFull
#define FXR_RXDMA_DBG_PKT_CNT_DQ1_SMASK				0xFF00ull
#define FXR_RXDMA_DBG_PKT_CNT_DQ0_SHIFT				0
#define FXR_RXDMA_DBG_PKT_CNT_DQ0_MASK				0xFFull
#define FXR_RXDMA_DBG_PKT_CNT_DQ0_SMASK				0xFFull
/*
* Table #60 of fxr_top - RXDMA_DBG_ERR_INJ
* Inject .
*/
#define FXR_RXDMA_DBG_ERR_INJ					(FXR_RX_DMA_CSRS + 0x000000011138)
#define FXR_RXDMA_DBG_ERR_INJ_RESETCSR				0x0000000000000000ull
#define FXR_RXDMA_DBG_ERR_INJ_RESERVED_63_36_SHIFT		36
#define FXR_RXDMA_DBG_ERR_INJ_RESERVED_63_36_MASK		0xFFFFFFFull
#define FXR_RXDMA_DBG_ERR_INJ_RESERVED_63_36_SMASK		0xFFFFFFF000000000ull
#define FXR_RXDMA_DBG_ERR_INJ_INJ_OTR_OP_CMD_SHIFT		35
#define FXR_RXDMA_DBG_ERR_INJ_INJ_OTR_OP_CMD_MASK		0x1ull
#define FXR_RXDMA_DBG_ERR_INJ_INJ_OTR_OP_CMD_SMASK		0x800000000ull
#define FXR_RXDMA_DBG_ERR_INJ_INJ_HP_OP_CMD_SHIFT		34
#define FXR_RXDMA_DBG_ERR_INJ_INJ_HP_OP_CMD_MASK		0x1ull
#define FXR_RXDMA_DBG_ERR_INJ_INJ_HP_OP_CMD_SMASK		0x400000000ull
#define FXR_RXDMA_DBG_ERR_INJ_INJ_OTR_PKT_CMD_SHIFT		33
#define FXR_RXDMA_DBG_ERR_INJ_INJ_OTR_PKT_CMD_MASK		0x1ull
#define FXR_RXDMA_DBG_ERR_INJ_INJ_OTR_PKT_CMD_SMASK		0x200000000ull
#define FXR_RXDMA_DBG_ERR_INJ_INJ_HP_PKT_CMD_SHIFT		32
#define FXR_RXDMA_DBG_ERR_INJ_INJ_HP_PKT_CMD_MASK		0x1ull
#define FXR_RXDMA_DBG_ERR_INJ_INJ_HP_PKT_CMD_SMASK		0x100000000ull
#define FXR_RXDMA_DBG_ERR_INJ_INJ_ACK_CMD_SHIFT			28
#define FXR_RXDMA_DBG_ERR_INJ_INJ_ACK_CMD_MASK			0xFull
#define FXR_RXDMA_DBG_ERR_INJ_INJ_ACK_CMD_SMASK			0xF0000000ull
#define FXR_RXDMA_DBG_ERR_INJ_INJ_TO_PKT_SHIFT			24
#define FXR_RXDMA_DBG_ERR_INJ_INJ_TO_PKT_MASK			0xFull
#define FXR_RXDMA_DBG_ERR_INJ_INJ_TO_PKT_SMASK			0xF000000ull
#define FXR_RXDMA_DBG_ERR_INJ_INJ_HOST_DATA_SHIFT		20
#define FXR_RXDMA_DBG_ERR_INJ_INJ_HOST_DATA_MASK		0xFull
#define FXR_RXDMA_DBG_ERR_INJ_INJ_HOST_DATA_SMASK		0xF00000ull
#define FXR_RXDMA_DBG_ERR_INJ_INJ_HI_DATA_SHIFT			16
#define FXR_RXDMA_DBG_ERR_INJ_INJ_HI_DATA_MASK			0xFull
#define FXR_RXDMA_DBG_ERR_INJ_INJ_HI_DATA_SMASK			0xF0000ull
#define FXR_RXDMA_DBG_ERR_INJ_INJ_DQ_TAIL_SHIFT			8
#define FXR_RXDMA_DBG_ERR_INJ_INJ_DQ_TAIL_MASK			0xFFull
#define FXR_RXDMA_DBG_ERR_INJ_INJ_DQ_TAIL_SMASK			0xFF00ull
#define FXR_RXDMA_DBG_ERR_INJ_INJ_MASK_SHIFT			0
#define FXR_RXDMA_DBG_ERR_INJ_INJ_MASK_MASK			0xFFull
#define FXR_RXDMA_DBG_ERR_INJ_INJ_MASK_SMASK			0xFFull
/*
* Table #61 of fxr_top - RXDMA_ERR_STS_1
* MBE error counts from the DMA buffers in each Message Class. All errors from a 
* single message class are accumulated into one register.
*/
#define FXR_RXDMA_ERR_STS_1					(FXR_RX_DMA_CSRS + 0x000000018000)
#define FXR_RXDMA_ERR_STS_1_RESETCSR				0x0000000000000000ull
#define FXR_RXDMA_ERR_STS_1_RESERVED_63_48_SHIFT		48
#define FXR_RXDMA_ERR_STS_1_RESERVED_63_48_MASK			0xFFFFull
#define FXR_RXDMA_ERR_STS_1_RESERVED_63_48_SMASK		0xFFFF000000000000ull
#define FXR_RXDMA_ERR_STS_1_HA_ECC_MBE_SHIFT			44
#define FXR_RXDMA_ERR_STS_1_HA_ECC_MBE_MASK			0xFull
#define FXR_RXDMA_ERR_STS_1_HA_ECC_MBE_SMASK			0xF00000000000ull
#define FXR_RXDMA_ERR_STS_1_HA_ECC_SBE_SHIFT			40
#define FXR_RXDMA_ERR_STS_1_HA_ECC_SBE_MASK			0xFull
#define FXR_RXDMA_ERR_STS_1_HA_ECC_SBE_SMASK			0xF0000000000ull
#define FXR_RXDMA_ERR_STS_1_DQ_TAIL_MBE_SHIFT			32
#define FXR_RXDMA_ERR_STS_1_DQ_TAIL_MBE_MASK			0xFFull
#define FXR_RXDMA_ERR_STS_1_DQ_TAIL_MBE_SMASK			0xFF00000000ull
#define FXR_RXDMA_ERR_STS_1_DQ_TAIL_SBE_SHIFT			24
#define FXR_RXDMA_ERR_STS_1_DQ_TAIL_SBE_MASK			0xFFull
#define FXR_RXDMA_ERR_STS_1_DQ_TAIL_SBE_SMASK			0xFF000000ull
#define FXR_RXDMA_ERR_STS_1_DQ_LL_PARITY_ERR_SHIFT		17
#define FXR_RXDMA_ERR_STS_1_DQ_LL_PARITY_ERR_MASK		0x7Full
#define FXR_RXDMA_ERR_STS_1_DQ_LL_PARITY_ERR_SMASK		0xFE0000ull
#define FXR_RXDMA_ERR_STS_1_DQ_READ_ERR_SHIFT			8
#define FXR_RXDMA_ERR_STS_1_DQ_READ_ERR_MASK			0x1FFull
#define FXR_RXDMA_ERR_STS_1_DQ_READ_ERR_SMASK			0x1FF00ull
#define FXR_RXDMA_ERR_STS_1_DQ_WRITE_ERR_SHIFT			0
#define FXR_RXDMA_ERR_STS_1_DQ_WRITE_ERR_MASK			0xFFull
#define FXR_RXDMA_ERR_STS_1_DQ_WRITE_ERR_SMASK			0xFFull
/*
* Table #62 of fxr_top - RXDMA_ERR_CLR_1
* Clear the error by writing a one to the appropriate bit.
*/
#define FXR_RXDMA_ERR_CLR_1					(FXR_RX_DMA_CSRS + 0x000000018008)
#define FXR_RXDMA_ERR_CLR_1_RESETCSR				0x0000000000000000ull
#define FXR_RXDMA_ERR_CLR_1_RESERVED_63_48_SHIFT		48
#define FXR_RXDMA_ERR_CLR_1_RESERVED_63_48_MASK			0xFFFFull
#define FXR_RXDMA_ERR_CLR_1_RESERVED_63_48_SMASK		0xFFFF000000000000ull
#define FXR_RXDMA_ERR_CLR_1_ERROR_CLR_SHIFT			0
#define FXR_RXDMA_ERR_CLR_1_ERROR_CLR_MASK			0xFFFFFFFFFFFFull
#define FXR_RXDMA_ERR_CLR_1_ERROR_CLR_SMASK			0xFFFFFFFFFFFFull
/*
* Table #63 of fxr_top - RXDMA_ERR_FRC_1
* Force the error by writing a one to the appropriate bit.
*/
#define FXR_RXDMA_ERR_FRC_1					(FXR_RX_DMA_CSRS + 0x000000018010)
#define FXR_RXDMA_ERR_FRC_1_RESETCSR				0x0000000000000000ull
#define FXR_RXDMA_ERR_FRC_1_RESERVED_63_48_SHIFT		48
#define FXR_RXDMA_ERR_FRC_1_RESERVED_63_48_MASK			0xFFFFull
#define FXR_RXDMA_ERR_FRC_1_RESERVED_63_48_SMASK		0xFFFF000000000000ull
#define FXR_RXDMA_ERR_FRC_1_FORCE_ERR_SHIFT			0
#define FXR_RXDMA_ERR_FRC_1_FORCE_ERR_MASK			0xFFFFFFFFFFFFull
#define FXR_RXDMA_ERR_FRC_1_FORCE_ERR_SMASK			0xFFFFFFFFFFFFull
/*
* Table #64 of fxr_top - RXDMA_ERR_EN_HOST_1
* Enable interrupt by writing a one to the appropriate bit.
*/
#define FXR_RXDMA_ERR_EN_HOST_1					(FXR_RX_DMA_CSRS + 0x000000018018)
#define FXR_RXDMA_ERR_EN_HOST_1_RESETCSR			0x0000000000000000ull
#define FXR_RXDMA_ERR_EN_HOST_1_RESERVED_63_48_SHIFT		48
#define FXR_RXDMA_ERR_EN_HOST_1_RESERVED_63_48_MASK		0xFFFFull
#define FXR_RXDMA_ERR_EN_HOST_1_RESERVED_63_48_SMASK		0xFFFF000000000000ull
#define FXR_RXDMA_ERR_EN_HOST_1_HOST_EN_SHIFT			0
#define FXR_RXDMA_ERR_EN_HOST_1_HOST_EN_MASK			0xFFFFFFFFFFFFull
#define FXR_RXDMA_ERR_EN_HOST_1_HOST_EN_SMASK			0xFFFFFFFFFFFFull
/*
* Table #65 of fxr_top - RXDMA_ERR_FIRST_HOST_1
* Fist error seen by Host interrupt.
*/
#define FXR_RXDMA_ERR_FIRST_HOST_1				(FXR_RX_DMA_CSRS + 0x000000018020)
#define FXR_RXDMA_ERR_FIRST_HOST_1_RESETCSR			0x0000000000000000ull
#define FXR_RXDMA_ERR_FIRST_HOST_1_RESERVED_63_48_SHIFT		48
#define FXR_RXDMA_ERR_FIRST_HOST_1_RESERVED_63_48_MASK		0xFFFFull
#define FXR_RXDMA_ERR_FIRST_HOST_1_RESERVED_63_48_SMASK		0xFFFF000000000000ull
#define FXR_RXDMA_ERR_FIRST_HOST_1_FIRST_HOST_SHIFT		0
#define FXR_RXDMA_ERR_FIRST_HOST_1_FIRST_HOST_MASK		0xFFFFFFFFFFFFull
#define FXR_RXDMA_ERR_FIRST_HOST_1_FIRST_HOST_SMASK		0xFFFFFFFFFFFFull
/*
* Table #66 of fxr_top - RXDMA_ERR_EN_BMC_1
* Enable interrupt by writing a one to the appropriate bit.
*/
#define FXR_RXDMA_ERR_EN_BMC_1					(FXR_RX_DMA_CSRS + 0x000000018028)
#define FXR_RXDMA_ERR_EN_BMC_1_RESETCSR				0x0000000000000000ull
#define FXR_RXDMA_ERR_EN_BMC_1_RESERVED_63_48_SHIFT		48
#define FXR_RXDMA_ERR_EN_BMC_1_RESERVED_63_48_MASK		0xFFFFull
#define FXR_RXDMA_ERR_EN_BMC_1_RESERVED_63_48_SMASK		0xFFFF000000000000ull
#define FXR_RXDMA_ERR_EN_BMC_1_BMC_EN_SHIFT			0
#define FXR_RXDMA_ERR_EN_BMC_1_BMC_EN_MASK			0xFFFFFFFFFFFFull
#define FXR_RXDMA_ERR_EN_BMC_1_BMC_EN_SMASK			0xFFFFFFFFFFFFull
/*
* Table #67 of fxr_top - RXDMA_ERR_FIRST_BMC_1
* Fist error seen by BMC interrupt.
*/
#define FXR_RXDMA_ERR_FIRST_BMC_1				(FXR_RX_DMA_CSRS + 0x000000018030)
#define FXR_RXDMA_ERR_FIRST_BMC_1_RESETCSR			0x0000000000000000ull
#define FXR_RXDMA_ERR_FIRST_BMC_1_RESERVED_63_48_SHIFT		48
#define FXR_RXDMA_ERR_FIRST_BMC_1_RESERVED_63_48_MASK		0xFFFFull
#define FXR_RXDMA_ERR_FIRST_BMC_1_RESERVED_63_48_SMASK		0xFFFF000000000000ull
#define FXR_RXDMA_ERR_FIRST_BMC_1_FIRST_BMC_SHIFT		0
#define FXR_RXDMA_ERR_FIRST_BMC_1_FIRST_BMC_MASK		0xFFFFFFFFFFFFull
#define FXR_RXDMA_ERR_FIRST_BMC_1_FIRST_BMC_SMASK		0xFFFFFFFFFFFFull
/*
* Table #68 of fxr_top - RXDMA_ERR_EN_QUAR_1
* Enable interrupt by writing a one to the appropriate bit.
*/
#define FXR_RXDMA_ERR_EN_QUAR_1					(FXR_RX_DMA_CSRS + 0x000000018038)
#define FXR_RXDMA_ERR_EN_QUAR_1_RESETCSR			0x0000000000000000ull
#define FXR_RXDMA_ERR_EN_QUAR_1_RESERVED_63_48_SHIFT		48
#define FXR_RXDMA_ERR_EN_QUAR_1_RESERVED_63_48_MASK		0xFFFFull
#define FXR_RXDMA_ERR_EN_QUAR_1_RESERVED_63_48_SMASK		0xFFFF000000000000ull
#define FXR_RXDMA_ERR_EN_QUAR_1_QUAR_EN_SHIFT			0
#define FXR_RXDMA_ERR_EN_QUAR_1_QUAR_EN_MASK			0xFFFFFFFFFFFFull
#define FXR_RXDMA_ERR_EN_QUAR_1_QUAR_EN_SMASK			0xFFFFFFFFFFFFull
/*
* Table #69 of fxr_top - RXDMA_ERR_FIRST_QUAR_1
* Force the error by writing a one to the appropriate bit.
*/
#define FXR_RXDMA_ERR_FIRST_QUAR_1				(FXR_RX_DMA_CSRS + 0x000000018040)
#define FXR_RXDMA_ERR_FIRST_QUAR_1_RESETCSR			0x0000000000000000ull
#define FXR_RXDMA_ERR_FIRST_QUAR_1_RESERVED_63_48_SHIFT		48
#define FXR_RXDMA_ERR_FIRST_QUAR_1_RESERVED_63_48_MASK		0xFFFFull
#define FXR_RXDMA_ERR_FIRST_QUAR_1_RESERVED_63_48_SMASK		0xFFFF000000000000ull
#define FXR_RXDMA_ERR_FIRST_QUAR_1_FIRST_QUAR_SHIFT		0
#define FXR_RXDMA_ERR_FIRST_QUAR_1_FIRST_QUAR_MASK		0xFFFFFFFFFFFFull
#define FXR_RXDMA_ERR_FIRST_QUAR_1_FIRST_QUAR_SMASK		0xFFFFFFFFFFFFull
/*
* Table #70 of fxr_top - RXDMA_ERR_STS_2
* Additional Errors from the RxDMA. Non Data Queue Related Errors.
*/
#define FXR_RXDMA_ERR_STS_2					(FXR_RX_DMA_CSRS + 0x000000018100)
#define FXR_RXDMA_ERR_STS_2_RESETCSR				0x0000000000000000ull
#define FXR_RXDMA_ERR_STS_2_RESERVED_63_40_SHIFT		40
#define FXR_RXDMA_ERR_STS_2_RESERVED_63_40_MASK			0xFFFFFFull
#define FXR_RXDMA_ERR_STS_2_RESERVED_63_40_SMASK		0xFFFFFF0000000000ull
#define FXR_RXDMA_ERR_STS_2_CT_DATA_ERROR_SHIFT			39
#define FXR_RXDMA_ERR_STS_2_CT_DATA_ERROR_MASK			0x1ull
#define FXR_RXDMA_ERR_STS_2_CT_DATA_ERROR_SMASK			0x8000000000ull
#define FXR_RXDMA_ERR_STS_2_IOVEC_RD_ERR_SHIFT			38
#define FXR_RXDMA_ERR_STS_2_IOVEC_RD_ERR_MASK			0x1ull
#define FXR_RXDMA_ERR_STS_2_IOVEC_RD_ERR_SMASK			0x4000000000ull
#define FXR_RXDMA_ERR_STS_2_TO_SIZE_ERROR_SHIFT			37
#define FXR_RXDMA_ERR_STS_2_TO_SIZE_ERROR_MASK			0x1ull
#define FXR_RXDMA_ERR_STS_2_TO_SIZE_ERROR_SMASK			0x2000000000ull
#define FXR_RXDMA_ERR_STS_2_TO_QUEUE_RD_ERR_SHIFT		32
#define FXR_RXDMA_ERR_STS_2_TO_QUEUE_RD_ERR_MASK		0x1Full
#define FXR_RXDMA_ERR_STS_2_TO_QUEUE_RD_ERR_SMASK		0x1F00000000ull
#define FXR_RXDMA_ERR_STS_2_TO_QUEUE_WR_ERR_SHIFT		27
#define FXR_RXDMA_ERR_STS_2_TO_QUEUE_WR_ERR_MASK		0x1Full
#define FXR_RXDMA_ERR_STS_2_TO_QUEUE_WR_ERR_SMASK		0xF8000000ull
#define FXR_RXDMA_ERR_STS_2_TO_ERROR_SHIFT			26
#define FXR_RXDMA_ERR_STS_2_TO_ERROR_MASK			0x1ull
#define FXR_RXDMA_ERR_STS_2_TO_ERROR_SMASK			0x4000000ull
#define FXR_RXDMA_ERR_STS_2_GEN1_WRITE_ERR_SHIFT		25
#define FXR_RXDMA_ERR_STS_2_GEN1_WRITE_ERR_MASK			0x1ull
#define FXR_RXDMA_ERR_STS_2_GEN1_WRITE_ERR_SMASK		0x2000000ull
#define FXR_RXDMA_ERR_STS_2_EQ_HDR_MBE_SHIFT			24
#define FXR_RXDMA_ERR_STS_2_EQ_HDR_MBE_MASK			0x1ull
#define FXR_RXDMA_ERR_STS_2_EQ_HDR_MBE_SMASK			0x1000000ull
#define FXR_RXDMA_ERR_STS_2_MC1_DROPPED_CMD_SHIFT		23
#define FXR_RXDMA_ERR_STS_2_MC1_DROPPED_CMD_MASK		0x1ull
#define FXR_RXDMA_ERR_STS_2_MC1_DROPPED_CMD_SMASK		0x800000ull
#define FXR_RXDMA_ERR_STS_2_MC0_DROPPED_CMD_SHIFT		22
#define FXR_RXDMA_ERR_STS_2_MC0_DROPPED_CMD_MASK		0x1ull
#define FXR_RXDMA_ERR_STS_2_MC0_DROPPED_CMD_SMASK		0x400000ull
#define FXR_RXDMA_ERR_STS_2_TO_PKT_MBE_SHIFT			21
#define FXR_RXDMA_ERR_STS_2_TO_PKT_MBE_MASK			0x1ull
#define FXR_RXDMA_ERR_STS_2_TO_PKT_MBE_SMASK			0x200000ull
#define FXR_RXDMA_ERR_STS_2_TO_PKT_SBE_SHIFT			20
#define FXR_RXDMA_ERR_STS_2_TO_PKT_SBE_MASK			0x1ull
#define FXR_RXDMA_ERR_STS_2_TO_PKT_SBE_SMASK			0x100000ull
#define FXR_RXDMA_ERR_STS_2_OTR_POOL_CTEQ_MBE_SHIFT		19
#define FXR_RXDMA_ERR_STS_2_OTR_POOL_CTEQ_MBE_MASK		0x1ull
#define FXR_RXDMA_ERR_STS_2_OTR_POOL_CTEQ_MBE_SMASK		0x80000ull
#define FXR_RXDMA_ERR_STS_2_OTR_POOL_CTEQ_SBE_SHIFT		18
#define FXR_RXDMA_ERR_STS_2_OTR_POOL_CTEQ_SBE_MASK		0x1ull
#define FXR_RXDMA_ERR_STS_2_OTR_POOL_CTEQ_SBE_SMASK		0x40000ull
#define FXR_RXDMA_ERR_STS_2_OTR_POOL_OP_MBE_SHIFT		17
#define FXR_RXDMA_ERR_STS_2_OTR_POOL_OP_MBE_MASK		0x1ull
#define FXR_RXDMA_ERR_STS_2_OTR_POOL_OP_MBE_SMASK		0x20000ull
#define FXR_RXDMA_ERR_STS_2_OTR_POOL_OP_SBE_SHIFT		16
#define FXR_RXDMA_ERR_STS_2_OTR_POOL_OP_SBE_MASK		0x1ull
#define FXR_RXDMA_ERR_STS_2_OTR_POOL_OP_SBE_SMASK		0x10000ull
#define FXR_RXDMA_ERR_STS_2_HP_POOL_CTEQ_MBE_SHIFT		15
#define FXR_RXDMA_ERR_STS_2_HP_POOL_CTEQ_MBE_MASK		0x1ull
#define FXR_RXDMA_ERR_STS_2_HP_POOL_CTEQ_MBE_SMASK		0x8000ull
#define FXR_RXDMA_ERR_STS_2_HP_POOL_CTEQ_SBE_SHIFT		14
#define FXR_RXDMA_ERR_STS_2_HP_POOL_CTEQ_SBE_MASK		0x1ull
#define FXR_RXDMA_ERR_STS_2_HP_POOL_CTEQ_SBE_SMASK		0x4000ull
#define FXR_RXDMA_ERR_STS_2_HP_POOL_OP_MBE_SHIFT		13
#define FXR_RXDMA_ERR_STS_2_HP_POOL_OP_MBE_MASK			0x1ull
#define FXR_RXDMA_ERR_STS_2_HP_POOL_OP_MBE_SMASK		0x2000ull
#define FXR_RXDMA_ERR_STS_2_HP_POOL_OP_SBE_SHIFT		12
#define FXR_RXDMA_ERR_STS_2_HP_POOL_OP_SBE_MASK			0x1ull
#define FXR_RXDMA_ERR_STS_2_HP_POOL_OP_SBE_SMASK		0x1000ull
#define FXR_RXDMA_ERR_STS_2_ACK_HEAD_MBE_SHIFT			11
#define FXR_RXDMA_ERR_STS_2_ACK_HEAD_MBE_MASK			0x1ull
#define FXR_RXDMA_ERR_STS_2_ACK_HEAD_MBE_SMASK			0x800ull
#define FXR_RXDMA_ERR_STS_2_ACK_HEAD_SBE_SHIFT			10
#define FXR_RXDMA_ERR_STS_2_ACK_HEAD_SBE_MASK			0x1ull
#define FXR_RXDMA_ERR_STS_2_ACK_HEAD_SBE_SMASK			0x400ull
#define FXR_RXDMA_ERR_STS_2_ACK_TAIL_MBE_SHIFT			9
#define FXR_RXDMA_ERR_STS_2_ACK_TAIL_MBE_MASK			0x1ull
#define FXR_RXDMA_ERR_STS_2_ACK_TAIL_MBE_SMASK			0x200ull
#define FXR_RXDMA_ERR_STS_2_ACK_TAIL_SBE_SHIFT			8
#define FXR_RXDMA_ERR_STS_2_ACK_TAIL_SBE_MASK			0x1ull
#define FXR_RXDMA_ERR_STS_2_ACK_TAIL_SBE_SMASK			0x100ull
#define FXR_RXDMA_ERR_STS_2_HOST_ECC_MBE_SHIFT			4
#define FXR_RXDMA_ERR_STS_2_HOST_ECC_MBE_MASK			0xFull
#define FXR_RXDMA_ERR_STS_2_HOST_ECC_MBE_SMASK			0xF0ull
#define FXR_RXDMA_ERR_STS_2_HOST_ECC_SBE_SHIFT			0
#define FXR_RXDMA_ERR_STS_2_HOST_ECC_SBE_MASK			0xFull
#define FXR_RXDMA_ERR_STS_2_HOST_ECC_SBE_SMASK			0xFull
/*
* Table #71 of fxr_top - RXDMA_ERR_CLR_2
* Clear the error by writing a one to the appropriate bit.
*/
#define FXR_RXDMA_ERR_CLR_2					(FXR_RX_DMA_CSRS + 0x000000018108)
#define FXR_RXDMA_ERR_CLR_2_RESETCSR				0x0000000000000000ull
#define FXR_RXDMA_ERR_CLR_2_RESERVED_63_39_SHIFT		39
#define FXR_RXDMA_ERR_CLR_2_RESERVED_63_39_MASK			0x1FFFFFFull
#define FXR_RXDMA_ERR_CLR_2_RESERVED_63_39_SMASK		0xFFFFFF8000000000ull
#define FXR_RXDMA_ERR_CLR_2_ERROR_CLR_SHIFT			0
#define FXR_RXDMA_ERR_CLR_2_ERROR_CLR_MASK			0x7FFFFFFFFFull
#define FXR_RXDMA_ERR_CLR_2_ERROR_CLR_SMASK			0x7FFFFFFFFFull
/*
* Table #72 of fxr_top - RXDMA_ERR_FRC_2
* Force the error by writing a one to the appropriate bit.
*/
#define FXR_RXDMA_ERR_FRC_2					(FXR_RX_DMA_CSRS + 0x000000018110)
#define FXR_RXDMA_ERR_FRC_2_RESETCSR				0x0000000000000000ull
#define FXR_RXDMA_ERR_FRC_2_RESERVED_63_40_SHIFT		40
#define FXR_RXDMA_ERR_FRC_2_RESERVED_63_40_MASK			0xFFFFFFull
#define FXR_RXDMA_ERR_FRC_2_RESERVED_63_40_SMASK		0xFFFFFF0000000000ull
#define FXR_RXDMA_ERR_FRC_2_FORCE_ERR_SHIFT			0
#define FXR_RXDMA_ERR_FRC_2_FORCE_ERR_MASK			0xFFFFFFFFFFull
#define FXR_RXDMA_ERR_FRC_2_FORCE_ERR_SMASK			0xFFFFFFFFFFull
/*
* Table #73 of fxr_top - RXDMA_ERR_EN_HOST_2
* Enable interrupt by writing a one to the appropriate bit.
*/
#define FXR_RXDMA_ERR_EN_HOST_2					(FXR_RX_DMA_CSRS + 0x000000018118)
#define FXR_RXDMA_ERR_EN_HOST_2_RESETCSR			0x0000000000000000ull
#define FXR_RXDMA_ERR_EN_HOST_2_RESERVED_63_40_SHIFT		40
#define FXR_RXDMA_ERR_EN_HOST_2_RESERVED_63_40_MASK		0xFFFFFFull
#define FXR_RXDMA_ERR_EN_HOST_2_RESERVED_63_40_SMASK		0xFFFFFF0000000000ull
#define FXR_RXDMA_ERR_EN_HOST_2_HOST_EN_SHIFT			0
#define FXR_RXDMA_ERR_EN_HOST_2_HOST_EN_MASK			0xFFFFFFFFFFull
#define FXR_RXDMA_ERR_EN_HOST_2_HOST_EN_SMASK			0xFFFFFFFFFFull
/*
* Table #74 of fxr_top - RXDMA_ERR_FIRST_HOST_2
* Fist error seen by Host interrupt.
*/
#define FXR_RXDMA_ERR_FIRST_HOST_2				(FXR_RX_DMA_CSRS + 0x000000018120)
#define FXR_RXDMA_ERR_FIRST_HOST_2_RESETCSR			0x0000000000000000ull
#define FXR_RXDMA_ERR_FIRST_HOST_2_RESERVED_63_40_SHIFT		40
#define FXR_RXDMA_ERR_FIRST_HOST_2_RESERVED_63_40_MASK		0xFFFFFFull
#define FXR_RXDMA_ERR_FIRST_HOST_2_RESERVED_63_40_SMASK		0xFFFFFF0000000000ull
#define FXR_RXDMA_ERR_FIRST_HOST_2_FIRST_HOST_SHIFT		0
#define FXR_RXDMA_ERR_FIRST_HOST_2_FIRST_HOST_MASK		0xFFFFFFFFFFull
#define FXR_RXDMA_ERR_FIRST_HOST_2_FIRST_HOST_SMASK		0xFFFFFFFFFFull
/*
* Table #75 of fxr_top - RXDMA_ERR_EN_BMC_2
* Enable interrupt by writing a one to the appropriate bit.
*/
#define FXR_RXDMA_ERR_EN_BMC_2					(FXR_RX_DMA_CSRS + 0x000000018128)
#define FXR_RXDMA_ERR_EN_BMC_2_RESETCSR				0x0000000000000000ull
#define FXR_RXDMA_ERR_EN_BMC_2_RESERVED_63_40_SHIFT		40
#define FXR_RXDMA_ERR_EN_BMC_2_RESERVED_63_40_MASK		0xFFFFFFull
#define FXR_RXDMA_ERR_EN_BMC_2_RESERVED_63_40_SMASK		0xFFFFFF0000000000ull
#define FXR_RXDMA_ERR_EN_BMC_2_BMC_EN_SHIFT			0
#define FXR_RXDMA_ERR_EN_BMC_2_BMC_EN_MASK			0xFFFFFFFFFFull
#define FXR_RXDMA_ERR_EN_BMC_2_BMC_EN_SMASK			0xFFFFFFFFFFull
/*
* Table #76 of fxr_top - RXDMA_ERR_FIRST_BMC_2
* Fist error seen by BMC interrupt.
*/
#define FXR_RXDMA_ERR_FIRST_BMC_2				(FXR_RX_DMA_CSRS + 0x000000018130)
#define FXR_RXDMA_ERR_FIRST_BMC_2_RESETCSR			0x0000000000000000ull
#define FXR_RXDMA_ERR_FIRST_BMC_2_RESERVED_63_40_SHIFT		40
#define FXR_RXDMA_ERR_FIRST_BMC_2_RESERVED_63_40_MASK		0xFFFFFFull
#define FXR_RXDMA_ERR_FIRST_BMC_2_RESERVED_63_40_SMASK		0xFFFFFF0000000000ull
#define FXR_RXDMA_ERR_FIRST_BMC_2_FIRST_BMC_SHIFT		0
#define FXR_RXDMA_ERR_FIRST_BMC_2_FIRST_BMC_MASK		0xFFFFFFFFFFull
#define FXR_RXDMA_ERR_FIRST_BMC_2_FIRST_BMC_SMASK		0xFFFFFFFFFFull
/*
* Table #77 of fxr_top - RXDMA_ERR_EN_QUAR_2
* Enable interrupt by writing a one to the appropriate bit.
*/
#define FXR_RXDMA_ERR_EN_QUAR_2					(FXR_RX_DMA_CSRS + 0x000000018138)
#define FXR_RXDMA_ERR_EN_QUAR_2_RESETCSR			0x0000000000000000ull
#define FXR_RXDMA_ERR_EN_QUAR_2_RESERVED_63_40_SHIFT		40
#define FXR_RXDMA_ERR_EN_QUAR_2_RESERVED_63_40_MASK		0xFFFFFFull
#define FXR_RXDMA_ERR_EN_QUAR_2_RESERVED_63_40_SMASK		0xFFFFFF0000000000ull
#define FXR_RXDMA_ERR_EN_QUAR_2_QUAR_EN_SHIFT			0
#define FXR_RXDMA_ERR_EN_QUAR_2_QUAR_EN_MASK			0xFFFFFFFFFFull
#define FXR_RXDMA_ERR_EN_QUAR_2_QUAR_EN_SMASK			0xFFFFFFFFFFull
/*
* Table #78 of fxr_top - RXDMA_ERR_FIRST_QUAR_2
* Force the error by writing a one to the appropriate bit.
*/
#define FXR_RXDMA_ERR_FIRST_QUAR_2				(FXR_RX_DMA_CSRS + 0x000000018140)
#define FXR_RXDMA_ERR_FIRST_QUAR_2_RESETCSR			0x0000000000000000ull
#define FXR_RXDMA_ERR_FIRST_QUAR_2_RESERVED_63_40_SHIFT		40
#define FXR_RXDMA_ERR_FIRST_QUAR_2_RESERVED_63_40_MASK		0xFFFFFFull
#define FXR_RXDMA_ERR_FIRST_QUAR_2_RESERVED_63_40_SMASK		0xFFFFFF0000000000ull
#define FXR_RXDMA_ERR_FIRST_QUAR_2_FIRST_QUAR_SHIFT		0
#define FXR_RXDMA_ERR_FIRST_QUAR_2_FIRST_QUAR_MASK		0xFFFFFFFFFFull
#define FXR_RXDMA_ERR_FIRST_QUAR_2_FIRST_QUAR_SMASK		0xFFFFFFFFFFull
/*
* Table #79 of fxr_top - RXDMA_ERR_INFO_1
* Other errors not related to the above parity and error correction code 
* errors.
*/
#define FXR_RXDMA_ERR_INFO_1					(FXR_RX_DMA_CSRS + 0x000000018200)
#define FXR_RXDMA_ERR_INFO_1_RESETCSR				0x0000000000000000ull
#define FXR_RXDMA_ERR_INFO_1_OTR_CTEQ_SYND_SHIFT		56
#define FXR_RXDMA_ERR_INFO_1_OTR_CTEQ_SYND_MASK			0xFFull
#define FXR_RXDMA_ERR_INFO_1_OTR_CTEQ_SYND_SMASK		0xFF00000000000000ull
#define FXR_RXDMA_ERR_INFO_1_OTR_OP_SYND_SHIFT			48
#define FXR_RXDMA_ERR_INFO_1_OTR_OP_SYND_MASK			0xFFull
#define FXR_RXDMA_ERR_INFO_1_OTR_OP_SYND_SMASK			0xFF000000000000ull
#define FXR_RXDMA_ERR_INFO_1_HP_CTEQ_SYND_SHIFT			40
#define FXR_RXDMA_ERR_INFO_1_HP_CTEQ_SYND_MASK			0xFFull
#define FXR_RXDMA_ERR_INFO_1_HP_CTEQ_SYND_SMASK			0xFF0000000000ull
#define FXR_RXDMA_ERR_INFO_1_HP_OP_SYND_SHIFT			32
#define FXR_RXDMA_ERR_INFO_1_HP_OP_SYND_MASK			0xFFull
#define FXR_RXDMA_ERR_INFO_1_HP_OP_SYND_SMASK			0xFF00000000ull
#define FXR_RXDMA_ERR_INFO_1_RESERVED_31_27_SHIFT		27
#define FXR_RXDMA_ERR_INFO_1_RESERVED_31_27_MASK		0x1Full
#define FXR_RXDMA_ERR_INFO_1_RESERVED_31_27_SMASK		0xF8000000ull
#define FXR_RXDMA_ERR_INFO_1_ADDR_DQ_SHIFT			24
#define FXR_RXDMA_ERR_INFO_1_ADDR_DQ_MASK			0x7ull
#define FXR_RXDMA_ERR_INFO_1_ADDR_DQ_SMASK			0x7000000ull
#define FXR_RXDMA_ERR_INFO_1_DQ_ERR_ADDR_SHIFT			16
#define FXR_RXDMA_ERR_INFO_1_DQ_ERR_ADDR_MASK			0xFFull
#define FXR_RXDMA_ERR_INFO_1_DQ_ERR_ADDR_SMASK			0xFF0000ull
#define FXR_RXDMA_ERR_INFO_1_READ_ERROR_PKT_ID_SHIFT		8
#define FXR_RXDMA_ERR_INFO_1_READ_ERROR_PKT_ID_MASK		0xFFull
#define FXR_RXDMA_ERR_INFO_1_READ_ERROR_PKT_ID_SMASK		0xFF00ull
#define FXR_RXDMA_ERR_INFO_1_RESERVED_7_5_SHIFT			5
#define FXR_RXDMA_ERR_INFO_1_RESERVED_7_5_MASK			0x7ull
#define FXR_RXDMA_ERR_INFO_1_RESERVED_7_5_SMASK			0xE0ull
#define FXR_RXDMA_ERR_INFO_1_DQ_TAIL_SYND_SHIFT			0
#define FXR_RXDMA_ERR_INFO_1_DQ_TAIL_SYND_MASK			0x1Full
#define FXR_RXDMA_ERR_INFO_1_DQ_TAIL_SYND_SMASK			0x1Full
/*
* Table #80 of fxr_top - RXDMA_ERR_INFO_2
* Other errors not related to the above parity and error correction code 
* errors.
*/
#define FXR_RXDMA_ERR_INFO_2					(FXR_RX_DMA_CSRS + 0x000000018208)
#define FXR_RXDMA_ERR_INFO_2_RESETCSR				0x0000000000000000ull
#define FXR_RXDMA_ERR_INFO_2_RESERVED_63_59_SHIFT		59
#define FXR_RXDMA_ERR_INFO_2_RESERVED_63_59_MASK		0x1Full
#define FXR_RXDMA_ERR_INFO_2_RESERVED_63_59_SMASK		0xF800000000000000ull
#define FXR_RXDMA_ERR_INFO_2_TO_SYND_SHIFT			51
#define FXR_RXDMA_ERR_INFO_2_TO_SYND_MASK			0xFFull
#define FXR_RXDMA_ERR_INFO_2_TO_SYND_SMASK			0x7F8000000000000ull
#define FXR_RXDMA_ERR_INFO_2_HA_ECC_DQ_SHIFT			48
#define FXR_RXDMA_ERR_INFO_2_HA_ECC_DQ_MASK			0x7ull
#define FXR_RXDMA_ERR_INFO_2_HA_ECC_DQ_SMASK			0x7000000000000ull
#define FXR_RXDMA_ERR_INFO_2_ACK_HEAD_SYND_SHIFT		40
#define FXR_RXDMA_ERR_INFO_2_ACK_HEAD_SYND_MASK			0xFFull
#define FXR_RXDMA_ERR_INFO_2_ACK_HEAD_SYND_SMASK		0xFF0000000000ull
#define FXR_RXDMA_ERR_INFO_2_ACK_TAIL_SYND_SHIFT		32
#define FXR_RXDMA_ERR_INFO_2_ACK_TAIL_SYND_MASK			0xFFull
#define FXR_RXDMA_ERR_INFO_2_ACK_TAIL_SYND_SMASK		0xFF00000000ull
#define FXR_RXDMA_ERR_INFO_2_HI_ECC_SYND_MBE_SHIFT		24
#define FXR_RXDMA_ERR_INFO_2_HI_ECC_SYND_MBE_MASK		0xFFull
#define FXR_RXDMA_ERR_INFO_2_HI_ECC_SYND_MBE_SMASK		0xFF000000ull
#define FXR_RXDMA_ERR_INFO_2_HI_ECC_SYND_SBE_SHIFT		16
#define FXR_RXDMA_ERR_INFO_2_HI_ECC_SYND_SBE_MASK		0xFFull
#define FXR_RXDMA_ERR_INFO_2_HI_ECC_SYND_SBE_SMASK		0xFF0000ull
#define FXR_RXDMA_ERR_INFO_2_HA_ECC_SYND_MBE_SHIFT		8
#define FXR_RXDMA_ERR_INFO_2_HA_ECC_SYND_MBE_MASK		0xFFull
#define FXR_RXDMA_ERR_INFO_2_HA_ECC_SYND_MBE_SMASK		0xFF00ull
#define FXR_RXDMA_ERR_INFO_2_HA_ECC_SYND_SBE_SHIFT		0
#define FXR_RXDMA_ERR_INFO_2_HA_ECC_SYND_SBE_MASK		0xFFull
#define FXR_RXDMA_ERR_INFO_2_HA_ECC_SYND_SBE_SMASK		0xFFull
/*
* Table #81 of fxr_top - RXDMA_ERR_INFO_3
* SBE and MBE counts for Data to and from the HIArb. All counts are saturating 
* counts.
*/
#define FXR_RXDMA_ERR_INFO_3					(FXR_RX_DMA_CSRS + 0x000000018210)
#define FXR_RXDMA_ERR_INFO_3_RESETCSR				0x0000000000000000ull
#define FXR_RXDMA_ERR_INFO_3_HOST_MBE_CNT_SHIFT			48
#define FXR_RXDMA_ERR_INFO_3_HOST_MBE_CNT_MASK			0xFFFFull
#define FXR_RXDMA_ERR_INFO_3_HOST_MBE_CNT_SMASK			0xFFFF000000000000ull
#define FXR_RXDMA_ERR_INFO_3_HOST_SBE_CNT_SHIFT			32
#define FXR_RXDMA_ERR_INFO_3_HOST_SBE_CNT_MASK			0xFFFFull
#define FXR_RXDMA_ERR_INFO_3_HOST_SBE_CNT_SMASK			0xFFFF00000000ull
#define FXR_RXDMA_ERR_INFO_3_HI_MBE_CNT_SHIFT			16
#define FXR_RXDMA_ERR_INFO_3_HI_MBE_CNT_MASK			0xFFFFull
#define FXR_RXDMA_ERR_INFO_3_HI_MBE_CNT_SMASK			0xFFFF0000ull
#define FXR_RXDMA_ERR_INFO_3_HI_SBE_CNT_SHIFT			0
#define FXR_RXDMA_ERR_INFO_3_HI_SBE_CNT_MASK			0xFFFFull
#define FXR_RXDMA_ERR_INFO_3_HI_SBE_CNT_SMASK			0xFFFFull
/*
* Table #82 of fxr_top - RXDMA_ERR_INFO_4
* SBE and MBE counts for Commands from the HP. All counts are saturating 
* counts.
*/
#define FXR_RXDMA_ERR_INFO_4					(FXR_RX_DMA_CSRS + 0x000000018218)
#define FXR_RXDMA_ERR_INFO_4_RESETCSR				0x0000000000000000ull
#define FXR_RXDMA_ERR_INFO_4_HP_ACK_MBE_CNT_SHIFT		48
#define FXR_RXDMA_ERR_INFO_4_HP_ACK_MBE_CNT_MASK		0xFFFFull
#define FXR_RXDMA_ERR_INFO_4_HP_ACK_MBE_CNT_SMASK		0xFFFF000000000000ull
#define FXR_RXDMA_ERR_INFO_4_HP_ACK_SBE_CNT_SHIFT		32
#define FXR_RXDMA_ERR_INFO_4_HP_ACK_SBE_CNT_MASK		0xFFFFull
#define FXR_RXDMA_ERR_INFO_4_HP_ACK_SBE_CNT_SMASK		0xFFFF00000000ull
#define FXR_RXDMA_ERR_INFO_4_HP_PKT_OP_MBE_CNT_SHIFT		16
#define FXR_RXDMA_ERR_INFO_4_HP_PKT_OP_MBE_CNT_MASK		0xFFFFull
#define FXR_RXDMA_ERR_INFO_4_HP_PKT_OP_MBE_CNT_SMASK		0xFFFF0000ull
#define FXR_RXDMA_ERR_INFO_4_HP_PKT_OP_SBE_CNT_SHIFT		0
#define FXR_RXDMA_ERR_INFO_4_HP_PKT_OP_SBE_CNT_MASK		0xFFFFull
#define FXR_RXDMA_ERR_INFO_4_HP_PKT_OP_SBE_CNT_SMASK		0xFFFFull
/*
* Table #83 of fxr_top - RXDMA_ERR_INFO_5
* SBE and MBE counts for Commands from the OTR. All counts are saturating 
* counts.
*/
#define FXR_RXDMA_ERR_INFO_5					(FXR_RX_DMA_CSRS + 0x000000018220)
#define FXR_RXDMA_ERR_INFO_5_RESETCSR				0x0000000000000000ull
#define FXR_RXDMA_ERR_INFO_5_RESERVED_63_32_SHIFT		32
#define FXR_RXDMA_ERR_INFO_5_RESERVED_63_32_MASK		0xFFFFFFFFull
#define FXR_RXDMA_ERR_INFO_5_RESERVED_63_32_SMASK		0xFFFFFFFF00000000ull
#define FXR_RXDMA_ERR_INFO_5_OTR_PKT_OP_MBE_CNT_SHIFT		16
#define FXR_RXDMA_ERR_INFO_5_OTR_PKT_OP_MBE_CNT_MASK		0xFFFFull
#define FXR_RXDMA_ERR_INFO_5_OTR_PKT_OP_MBE_CNT_SMASK		0xFFFF0000ull
#define FXR_RXDMA_ERR_INFO_5_OTR_PKT_OP_SBE_CNT_SHIFT		0
#define FXR_RXDMA_ERR_INFO_5_OTR_PKT_OP_SBE_CNT_MASK		0xFFFFull
#define FXR_RXDMA_ERR_INFO_5_OTR_PKT_OP_SBE_CNT_SMASK		0xFFFFull
/*
* Table #84 of fxr_top - RXDMA_ERR_INFO_6
* SBE and MBE counts for Data Queue Tail and Triggered Ops. All counts are 
* saturating counts.
*/
#define FXR_RXDMA_ERR_INFO_6					(FXR_RX_DMA_CSRS + 0x000000018228)
#define FXR_RXDMA_ERR_INFO_6_RESETCSR				0x0000000000000000ull
#define FXR_RXDMA_ERR_INFO_6_TO_MBE_CNT_SHIFT			48
#define FXR_RXDMA_ERR_INFO_6_TO_MBE_CNT_MASK			0xFFFFull
#define FXR_RXDMA_ERR_INFO_6_TO_MBE_CNT_SMASK			0xFFFF000000000000ull
#define FXR_RXDMA_ERR_INFO_6_TO_SBE_CNT_SHIFT			32
#define FXR_RXDMA_ERR_INFO_6_TO_SBE_CNT_MASK			0xFFFFull
#define FXR_RXDMA_ERR_INFO_6_TO_SBE_CNT_SMASK			0xFFFF00000000ull
#define FXR_RXDMA_ERR_INFO_6_DQ_TAIL_MBE_CNT_SHIFT		16
#define FXR_RXDMA_ERR_INFO_6_DQ_TAIL_MBE_CNT_MASK		0xFFFFull
#define FXR_RXDMA_ERR_INFO_6_DQ_TAIL_MBE_CNT_SMASK		0xFFFF0000ull
#define FXR_RXDMA_ERR_INFO_6_DQ_TAIL_SBE_CNT_SHIFT		0
#define FXR_RXDMA_ERR_INFO_6_DQ_TAIL_SBE_CNT_MASK		0xFFFFull
#define FXR_RXDMA_ERR_INFO_6_DQ_TAIL_SBE_CNT_SMASK		0xFFFFull

#endif 		/* DEF_FXR_RX_DMA_SW_DEF */
