/*
*------------------------------------------------------------------------------
*                                                                              
*  INTEL CONFIDENTIAL                                                          
*                                                                              
*  Copyright 2018 Intel Corporation All Rights Reserved.                 
*                                                                              
*  The source code contained or described herein and all documents related     
*  to the source code ("Material") are owned by Intel Corporation or its    
*  suppliers or licensors. Title to the Material remains with Intel            
*  Corporation or its suppliers and licensors. The Material contains trade     
*  secrets and proprietary and confidential information of Intel or its        
*  suppliers and licensors. The Material is protected by worldwide copyright   
*  and trade secret laws and treaty provisions. No part of the Material may    
*  be used, copied, reproduced, modified, published, uploaded, posted,         
*  transmitted, distributed, or disclosed in any way without Intel's prior     
*  express written permission.                                                 
*                                                                              
*  No license under any patent, copyright, trade secret or other intellectual  
*  property right is granted to or conferred upon you by disclosure or         
*  delivery of the Materials, either expressly, by implication, inducement,    
*  estoppel or otherwise. Any license under such intellectual property rights  
*  must be express and approved by Intel in writing.                           
*                                                                              
*------------------------------------------------------------------------------
*  Auto-generated by /p/hdk/rtl/proj_tools/sl2_tools/sl2_tools-srvr10nm-18ww26b/scripts/i_csrs/i_csrs.pl
*  i_csrs.pl Version 1.5 last modified on Thursday 6/28/18 12:45:58
*  /p/hdk/rtl/proj_tools/sl2_tools/sl2_tools-srvr10nm-18ww26b/scripts/i_csrs/i_csrs.pl -C -RVREGS -ST fxr_rx_e2e -o /nfs/sc/disks/slx_0108/pvesv/fxr_autogen/fxr /nfs/sc/disks/slx_0108/pvesv/fxr_autogen/repo_xml/300_Memory_Map.xml /nfs/sc/disks/slx_0108/pvesv/fxr_autogen/repo_xml/332_Memory_Map_RX_E2E.xml
*------------------------------------------------------------------------------
*/

#ifndef DEF_FXR_RX_E2E_SW_DEF
#define DEF_FXR_RX_E2E_SW_DEF

#ifndef FXR_RX_E2E_CSRS
#define FXR_RX_E2E_CSRS									0x000000000000
#endif
#define FXR_NUM_CONTEXTS								256
#define FXR_NUM_PIDS									4096
#define FXR_MAX_CONTEXT									255
#define FXR_TX_CONTEXT_ENTRIES								128
#define FXR_TX_CONTEXT_MAX								127
#define FXR_RX_CONTEXT_ENTRIES								32
#define FXR_RX_CONTEXT_MAX								31
#define FXR_NUM_SL									32
#define FXR_MAX_SL									31
#define RX_E2E_BASE									0
/*
* Table #4 of fxr_top - RXE2E_CFG_PSN_BASE_ADDR_P0_TC
* Host memory base addresses of psn state (both RX and TX) per tc/ptl_pkey_idx. 
* For a given tc/ptl_pkey_idx pair, the corresponding register address is 8 * (4 
* * ptl_pkey_idx + tc).
*/
#define FXR_RXE2E_CFG_PSN_BASE_ADDR_P0_TC						(FXR_RX_E2E_CSRS + 0x000000000000)
#define FXR_RXE2E_CFG_PSN_BASE_ADDR_P0_TC_RESETCSR					0x0000000000000000ull
#define FXR_RXE2E_CFG_PSN_BASE_ADDR_P0_TC_RESERVED_63_57_SHIFT				57
#define FXR_RXE2E_CFG_PSN_BASE_ADDR_P0_TC_RESERVED_63_57_MASK				0x7Full
#define FXR_RXE2E_CFG_PSN_BASE_ADDR_P0_TC_RESERVED_63_57_SMASK				0xFE00000000000000ull
#define FXR_RXE2E_CFG_PSN_BASE_ADDR_P0_TC_ADDRESS_SHIFT					12
#define FXR_RXE2E_CFG_PSN_BASE_ADDR_P0_TC_ADDRESS_MASK					0x1FFFFFFFFFFFull
#define FXR_RXE2E_CFG_PSN_BASE_ADDR_P0_TC_ADDRESS_SMASK					0x1FFFFFFFFFFF000ull
#define FXR_RXE2E_CFG_PSN_BASE_ADDR_P0_TC_RESERVED_11_0_SHIFT				0
#define FXR_RXE2E_CFG_PSN_BASE_ADDR_P0_TC_RESERVED_11_0_MASK				0xFFFull
#define FXR_RXE2E_CFG_PSN_BASE_ADDR_P0_TC_RESERVED_11_0_SMASK				0xFFFull
/*
* Table #5 of fxr_top - RXE2E_CFG_VALID_TC_SLID
* Describes max slid per port, valid TC's per port. Packets with invalid TC or 
* slid > max will not do a PSN Cache lookup and will get packet status 
* PKT_STATUS_NOT_CONNECTED. These values also limit the amount of host memory 
* PSN cache table backing needed for evicts and fills.
*/
#define FXR_RXE2E_CFG_VALID_TC_SLID							(FXR_RX_E2E_CSRS + 0x000000000840)
#define FXR_RXE2E_CFG_VALID_TC_SLID_RESETCSR						0x000000000FFFFFFFull
#define FXR_RXE2E_CFG_VALID_TC_SLID_RESERVED_63_28_SHIFT				28
#define FXR_RXE2E_CFG_VALID_TC_SLID_RESERVED_63_28_MASK					0xFFFFFFFFFull
#define FXR_RXE2E_CFG_VALID_TC_SLID_RESERVED_63_28_SMASK				0xFFFFFFFFF0000000ull
#define FXR_RXE2E_CFG_VALID_TC_SLID_TC_VALID_P0_SHIFT					24
#define FXR_RXE2E_CFG_VALID_TC_SLID_TC_VALID_P0_MASK					0xFull
#define FXR_RXE2E_CFG_VALID_TC_SLID_TC_VALID_P0_SMASK					0xF000000ull
#define FXR_RXE2E_CFG_VALID_TC_SLID_MAX_SLID_P0_SHIFT					0
#define FXR_RXE2E_CFG_VALID_TC_SLID_MAX_SLID_P0_MASK					0xFFFFFFull
#define FXR_RXE2E_CFG_VALID_TC_SLID_MAX_SLID_P0_SMASK					0xFFFFFFull
/*
* Table #6 of fxr_top - RXE2E_CFG_SPECIAL_ACK_RATE
* Periodically, a special ack is sent carrying the current expected unordered 
* psn and max_psn_distance for source OTR to use in flow control. This is used 
* by OTR to adjust the base of the PSN window it is allowed to send as well as 
* the size of the window. The special_ack_rate_code controls the frequency of 
* these special acks. Note that a special nack is also sent if a packet was 
* unscorable due to no big scoreboards available or psn offset from expected 
* unordered psn is > big scoreboard size. A special ack is also sent if this 
* packet has already been seen (unordered packets only).
*/
#define FXR_RXE2E_CFG_SPECIAL_ACK_RATE							(FXR_RX_E2E_CSRS + 0x000000000848)
#define FXR_RXE2E_CFG_SPECIAL_ACK_RATE_RESETCSR						0x0000000000000004ull
#define FXR_RXE2E_CFG_SPECIAL_ACK_RATE_RESERVED_63_3_SHIFT				3
#define FXR_RXE2E_CFG_SPECIAL_ACK_RATE_RESERVED_63_3_MASK				0x1FFFFFFFFFFFFFFFull
#define FXR_RXE2E_CFG_SPECIAL_ACK_RATE_RESERVED_63_3_SMASK				0xFFFFFFFFFFFFFFF8ull
#define FXR_RXE2E_CFG_SPECIAL_ACK_RATE_SPECIAL_ACK_RATE_CODE_SHIFT			0
#define FXR_RXE2E_CFG_SPECIAL_ACK_RATE_SPECIAL_ACK_RATE_CODE_MASK			0x7ull
#define FXR_RXE2E_CFG_SPECIAL_ACK_RATE_SPECIAL_ACK_RATE_CODE_SMASK			0x7ull
/*
* Table #7 of fxr_top - RXE2E_CFG_LMC
* This CSR contains the the number of low DLID bits the network has masked for 
* the packet to arrive. This is used to determine the HIARB address for psn 
* cache evicts and fills. See #%%#<blue text>Section 22.5.4, 'PSN State 
* Layout'#%%#. The max value for LMC is 2. A value of 3 written to this register 
* will be interpreted as if it was 2. See #%%#Section 9.2.1.3.3.3, 'Packet 
* Sequence Number Table Structures'#%%# for how this csr affects client psn 
* cache addresses. 
*/
#define FXR_RXE2E_CFG_LMC								(FXR_RX_E2E_CSRS + 0x000000000858)
#define FXR_RXE2E_CFG_LMC_RESETCSR							0x0000000000000000ull
#define FXR_RXE2E_CFG_LMC_RESERVED_63_4_SHIFT						4
#define FXR_RXE2E_CFG_LMC_RESERVED_63_4_MASK						0xFFFFFFFFFFFFFFFull
#define FXR_RXE2E_CFG_LMC_RESERVED_63_4_SMASK						0xFFFFFFFFFFFFFFF0ull
#define FXR_RXE2E_CFG_LMC_RESERVED_3_2_SHIFT						2
#define FXR_RXE2E_CFG_LMC_RESERVED_3_2_MASK						0x3ull
#define FXR_RXE2E_CFG_LMC_RESERVED_3_2_SMASK						0xCull
#define FXR_RXE2E_CFG_LMC_LMC_P0_SHIFT							0
#define FXR_RXE2E_CFG_LMC_LMC_P0_MASK							0x3ull
#define FXR_RXE2E_CFG_LMC_LMC_P0_SMASK							0x3ull
/*
* Table #8 of fxr_top - RXE2E_CFG_LM_CREDIT_FUND_MAX
* This CSR contains the configuration parameters necessary to configure the max 
* number of credit funds outstanding to the Link Mux. Any value > 20 will be 
* clamped to 20 to prevent E2E input fifo overrun, i.e. the effective credit max 
* = min(csr value, 20). These credit funds will be used by Link Mux to send 
* packet flits to E2E. It is ok to write these while system is running. Note 
* that 0 will shut off an interface 
*/
#define FXR_RXE2E_CFG_LM_CREDIT_FUND_MAX						(FXR_RX_E2E_CSRS + 0x000000000860)
#define FXR_RXE2E_CFG_LM_CREDIT_FUND_MAX_RESETCSR					0x000000A5294A5294ull
#define FXR_RXE2E_CFG_LM_CREDIT_FUND_MAX_RESERVED_63_40_SHIFT				40
#define FXR_RXE2E_CFG_LM_CREDIT_FUND_MAX_RESERVED_63_40_MASK				0xFFFFFFull
#define FXR_RXE2E_CFG_LM_CREDIT_FUND_MAX_RESERVED_63_40_SMASK				0xFFFFFF0000000000ull
#define FXR_RXE2E_CFG_LM_CREDIT_FUND_MAX_MC1_TC3_CRDT_FUND_MAX_SHIFT			35
#define FXR_RXE2E_CFG_LM_CREDIT_FUND_MAX_MC1_TC3_CRDT_FUND_MAX_MASK			0x1Full
#define FXR_RXE2E_CFG_LM_CREDIT_FUND_MAX_MC1_TC3_CRDT_FUND_MAX_SMASK			0xF800000000ull
#define FXR_RXE2E_CFG_LM_CREDIT_FUND_MAX_MC1_TC2_CRDT_FUND_MAX_SHIFT			30
#define FXR_RXE2E_CFG_LM_CREDIT_FUND_MAX_MC1_TC2_CRDT_FUND_MAX_MASK			0x1Full
#define FXR_RXE2E_CFG_LM_CREDIT_FUND_MAX_MC1_TC2_CRDT_FUND_MAX_SMASK			0x7C0000000ull
#define FXR_RXE2E_CFG_LM_CREDIT_FUND_MAX_MC1_TC1_CRDT_FUND_MAX_SHIFT			25
#define FXR_RXE2E_CFG_LM_CREDIT_FUND_MAX_MC1_TC1_CRDT_FUND_MAX_MASK			0x1Full
#define FXR_RXE2E_CFG_LM_CREDIT_FUND_MAX_MC1_TC1_CRDT_FUND_MAX_SMASK			0x3E000000ull
#define FXR_RXE2E_CFG_LM_CREDIT_FUND_MAX_MC1_TC0_CRDT_FUND_MAX_SHIFT			20
#define FXR_RXE2E_CFG_LM_CREDIT_FUND_MAX_MC1_TC0_CRDT_FUND_MAX_MASK			0x1Full
#define FXR_RXE2E_CFG_LM_CREDIT_FUND_MAX_MC1_TC0_CRDT_FUND_MAX_SMASK			0x1F00000ull
#define FXR_RXE2E_CFG_LM_CREDIT_FUND_MAX_MC0_TC3_CRDT_FUND_MAX_SHIFT			15
#define FXR_RXE2E_CFG_LM_CREDIT_FUND_MAX_MC0_TC3_CRDT_FUND_MAX_MASK			0x1Full
#define FXR_RXE2E_CFG_LM_CREDIT_FUND_MAX_MC0_TC3_CRDT_FUND_MAX_SMASK			0xF8000ull
#define FXR_RXE2E_CFG_LM_CREDIT_FUND_MAX_MC0_TC2_CRDT_FUND_MAX_SHIFT			10
#define FXR_RXE2E_CFG_LM_CREDIT_FUND_MAX_MC0_TC2_CRDT_FUND_MAX_MASK			0x1Full
#define FXR_RXE2E_CFG_LM_CREDIT_FUND_MAX_MC0_TC2_CRDT_FUND_MAX_SMASK			0x7C00ull
#define FXR_RXE2E_CFG_LM_CREDIT_FUND_MAX_MC0_TC1_CRDT_FUND_MAX_SHIFT			5
#define FXR_RXE2E_CFG_LM_CREDIT_FUND_MAX_MC0_TC1_CRDT_FUND_MAX_MASK			0x1Full
#define FXR_RXE2E_CFG_LM_CREDIT_FUND_MAX_MC0_TC1_CRDT_FUND_MAX_SMASK			0x3E0ull
#define FXR_RXE2E_CFG_LM_CREDIT_FUND_MAX_MC0_TC0_CRDT_FUND_MAX_SHIFT			0
#define FXR_RXE2E_CFG_LM_CREDIT_FUND_MAX_MC0_TC0_CRDT_FUND_MAX_MASK			0x1Full
#define FXR_RXE2E_CFG_LM_CREDIT_FUND_MAX_MC0_TC0_CRDT_FUND_MAX_SMASK			0x1Full
/*
* Table #9 of fxr_top - RXE2E_CFG_PSN_CACHE_CLIENT_DISABLE
* This CSR contains the disable bit for client psn cache requests. A one value 
* will hold off any client requests. This has no effect on csr psn cache 
* requests. 
*/
#define FXR_RXE2E_CFG_PSN_CACHE_CLIENT_DISABLE						(FXR_RX_E2E_CSRS + 0x000000000868)
#define FXR_RXE2E_CFG_PSN_CACHE_CLIENT_DISABLE_RESETCSR					0x0000000000000000ull
#define FXR_RXE2E_CFG_PSN_CACHE_CLIENT_DISABLE_RESERVED_63_1_SHIFT			1
#define FXR_RXE2E_CFG_PSN_CACHE_CLIENT_DISABLE_RESERVED_63_1_MASK			0x7FFFFFFFFFFFFFFFull
#define FXR_RXE2E_CFG_PSN_CACHE_CLIENT_DISABLE_RESERVED_63_1_SMASK			0xFFFFFFFFFFFFFFFEull
#define FXR_RXE2E_CFG_PSN_CACHE_CLIENT_DISABLE_CLIENT_PSN_CACHE_REQUEST_DISABLE_SHIFT	0
#define FXR_RXE2E_CFG_PSN_CACHE_CLIENT_DISABLE_CLIENT_PSN_CACHE_REQUEST_DISABLE_MASK	0x1ull
#define FXR_RXE2E_CFG_PSN_CACHE_CLIENT_DISABLE_CLIENT_PSN_CACHE_REQUEST_DISABLE_SMASK	0x1ull
/*
* Table #10 of fxr_top - RXE2E_CFG_CREDIT_ENABLE
* This CSR contains the enable bits for credits for HIARB, OTR and RXHP. Setting 
* an enable to 0 will make it appear that there are no credit funds for a 
* transfer, so no further transfer requests will be initiated. RXHP may have 
* some pkt_status transfers in progress that will continue, but no new ones will 
* be initiated. These bits do not affect the number of credit funds nor the 
* accumulation of more credit funds while the enable is 0. Disabling and then 
* enabling an interface with these bits looks just like a transmission 
* pause.
*/
#define FXR_RXE2E_CFG_CREDIT_ENABLE							(FXR_RX_E2E_CSRS + 0x000000000870)
#define FXR_RXE2E_CFG_CREDIT_ENABLE_RESETCSR						0x000000000000001Full
#define FXR_RXE2E_CFG_CREDIT_ENABLE_RESERVED_63_5_SHIFT					5
#define FXR_RXE2E_CFG_CREDIT_ENABLE_RESERVED_63_5_MASK					0x7FFFFFFFFFFFFFFull
#define FXR_RXE2E_CFG_CREDIT_ENABLE_RESERVED_63_5_SMASK					0xFFFFFFFFFFFFFFE0ull
#define FXR_RXE2E_CFG_CREDIT_ENABLE_HIARB_CREDIT_ENABLE_SHIFT				4
#define FXR_RXE2E_CFG_CREDIT_ENABLE_HIARB_CREDIT_ENABLE_MASK				0x1ull
#define FXR_RXE2E_CFG_CREDIT_ENABLE_HIARB_CREDIT_ENABLE_SMASK				0x10ull
#define FXR_RXE2E_CFG_CREDIT_ENABLE_OTR_PKT_STATUS_CREDIT_ENABLE_SHIFT			3
#define FXR_RXE2E_CFG_CREDIT_ENABLE_OTR_PKT_STATUS_CREDIT_ENABLE_MASK			0x1ull
#define FXR_RXE2E_CFG_CREDIT_ENABLE_OTR_PKT_STATUS_CREDIT_ENABLE_SMASK			0x8ull
#define FXR_RXE2E_CFG_CREDIT_ENABLE_OTR_HDR_FLIT_CREDIT_ENABLE_SHIFT			2
#define FXR_RXE2E_CFG_CREDIT_ENABLE_OTR_HDR_FLIT_CREDIT_ENABLE_MASK			0x1ull
#define FXR_RXE2E_CFG_CREDIT_ENABLE_OTR_HDR_FLIT_CREDIT_ENABLE_SMASK			0x4ull
#define FXR_RXE2E_CFG_CREDIT_ENABLE_RXHP_PKT_STATUS_CREDIT_ENABLE_SHIFT			1
#define FXR_RXE2E_CFG_CREDIT_ENABLE_RXHP_PKT_STATUS_CREDIT_ENABLE_MASK			0x1ull
#define FXR_RXE2E_CFG_CREDIT_ENABLE_RXHP_PKT_STATUS_CREDIT_ENABLE_SMASK			0x2ull
#define FXR_RXE2E_CFG_CREDIT_ENABLE_RXHP_HDR_FLIT_CREDIT_ENABLE_SHIFT			0
#define FXR_RXE2E_CFG_CREDIT_ENABLE_RXHP_HDR_FLIT_CREDIT_ENABLE_MASK			0x1ull
#define FXR_RXE2E_CFG_CREDIT_ENABLE_RXHP_HDR_FLIT_CREDIT_ENABLE_SMASK			0x1ull
/*
* Table #11 of fxr_top - RXE2E_CFG_RC_ORDERED_MAP
* This CSR contains the mapping of the packet rc[2:0] field to ordered needed 
* for psn checking. It is reset to 0xF to agree with Stormlake spec #%%#Section 
* 8.2.4.7, 'Routing Control'#%%#. 
*/
#define FXR_RXE2E_CFG_RC_ORDERED_MAP							(FXR_RX_E2E_CSRS + 0x000000000878)
#define FXR_RXE2E_CFG_RC_ORDERED_MAP_RESETCSR						0x000000000000000Full
#define FXR_RXE2E_CFG_RC_ORDERED_MAP_RESERVED_63_8_SHIFT				8
#define FXR_RXE2E_CFG_RC_ORDERED_MAP_RESERVED_63_8_MASK					0xFFFFFFFFFFFFFFull
#define FXR_RXE2E_CFG_RC_ORDERED_MAP_RESERVED_63_8_SMASK				0xFFFFFFFFFFFFFF00ull
#define FXR_RXE2E_CFG_RC_ORDERED_MAP_ORDERED_SHIFT					0
#define FXR_RXE2E_CFG_RC_ORDERED_MAP_ORDERED_MASK					0xFFull
#define FXR_RXE2E_CFG_RC_ORDERED_MAP_ORDERED_SMASK					0xFFull
/*
* Table #12 of fxr_top - RXE2E_CFG_PORT_MIRROR
* Enable for Port Mirroring. Turn on this bit when this node is in Port 
* Mirroring Mode. rx_e2e will do the following:
*/
#define FXR_RXE2E_CFG_PORT_MIRROR							(FXR_RX_E2E_CSRS + 0x000000000880)
#define FXR_RXE2E_CFG_PORT_MIRROR_RESETCSR						0x0000000000000000ull
#define FXR_RXE2E_CFG_PORT_MIRROR_RESERVED_63_1_SHIFT					1
#define FXR_RXE2E_CFG_PORT_MIRROR_RESERVED_63_1_MASK					0x7FFFFFFFFFFFFFFFull
#define FXR_RXE2E_CFG_PORT_MIRROR_RESERVED_63_1_SMASK					0xFFFFFFFFFFFFFFFEull
#define FXR_RXE2E_CFG_PORT_MIRROR_PORT_MIRROR_ON_SHIFT					0
#define FXR_RXE2E_CFG_PORT_MIRROR_PORT_MIRROR_ON_MASK					0x1ull
#define FXR_RXE2E_CFG_PORT_MIRROR_PORT_MIRROR_ON_SMASK					0x1ull
/*
* Table #13 of fxr_top - RXE2E_CFG_PSN_CACHE_ACCESS_CTL
* The PSN Cache access control can be used to write or read, PSN cache data and 
* tag memories as well as invalidate tag entries and flush cache data to host 
* memory. For reads, if the requested address is not in cache, a fill request is 
* sent to hiarb with possibly an evict request. For writes, if the requested 
* address is not in cache, an evict request is sent to hiarb (assuming no 
* invalid entries in tag line) and then the PSN Cache Data is written.
*/
#define FXR_RXE2E_CFG_PSN_CACHE_ACCESS_CTL						(FXR_RX_E2E_CSRS + 0x000000000888)
#define FXR_RXE2E_CFG_PSN_CACHE_ACCESS_CTL_RESETCSR					0x0000006000000000ull
#define FXR_RXE2E_CFG_PSN_CACHE_ACCESS_CTL_RESERVED_63_40_SHIFT				40
#define FXR_RXE2E_CFG_PSN_CACHE_ACCESS_CTL_RESERVED_63_40_MASK				0xFFFFFFull
#define FXR_RXE2E_CFG_PSN_CACHE_ACCESS_CTL_RESERVED_63_40_SMASK				0xFFFFFF0000000000ull
#define FXR_RXE2E_CFG_PSN_CACHE_ACCESS_CTL_BAD_ADDR_SHIFT				39
#define FXR_RXE2E_CFG_PSN_CACHE_ACCESS_CTL_BAD_ADDR_MASK				0x1ull
#define FXR_RXE2E_CFG_PSN_CACHE_ACCESS_CTL_BAD_ADDR_SMASK				0x8000000000ull
#define FXR_RXE2E_CFG_PSN_CACHE_ACCESS_CTL_BUSY_SHIFT					38
#define FXR_RXE2E_CFG_PSN_CACHE_ACCESS_CTL_BUSY_MASK					0x1ull
#define FXR_RXE2E_CFG_PSN_CACHE_ACCESS_CTL_BUSY_SMASK					0x4000000000ull
#define FXR_RXE2E_CFG_PSN_CACHE_ACCESS_CTL_CMD_SHIFT					34
#define FXR_RXE2E_CFG_PSN_CACHE_ACCESS_CTL_CMD_MASK					0xFull
#define FXR_RXE2E_CFG_PSN_CACHE_ACCESS_CTL_CMD_SMASK					0x3C00000000ull
#define FXR_RXE2E_CFG_PSN_CACHE_ACCESS_CTL_ADDRESS_SHIFT				0
#define FXR_RXE2E_CFG_PSN_CACHE_ACCESS_CTL_ADDRESS_MASK					0x3FFFFFFFFull
#define FXR_RXE2E_CFG_PSN_CACHE_ACCESS_CTL_ADDRESS_SMASK				0x3FFFFFFFFull
/*
* Table #14 of fxr_top - RXE2E_CFG_PSN_CACHE_TAG_SEARCH_MASK
* This csr holds the address mask used for flushing/invalidating cache entries. 
* This csr must be written before writing a flush or invalidate command into 
* #%%#RXE2E_CFG_PSN_CACHE_ACCESS_CTL#%%#. 
*/
#define FXR_RXE2E_CFG_PSN_CACHE_TAG_SEARCH_MASK						(FXR_RX_E2E_CSRS + 0x000000000890)
#define FXR_RXE2E_CFG_PSN_CACHE_TAG_SEARCH_MASK_RESETCSR				0x00000003FFFFFFFFull
#define FXR_RXE2E_CFG_PSN_CACHE_TAG_SEARCH_MASK_RESERVED_63_34_SHIFT			34
#define FXR_RXE2E_CFG_PSN_CACHE_TAG_SEARCH_MASK_RESERVED_63_34_MASK			0x3FFFFFFFull
#define FXR_RXE2E_CFG_PSN_CACHE_TAG_SEARCH_MASK_RESERVED_63_34_SMASK			0xFFFFFFFC00000000ull
#define FXR_RXE2E_CFG_PSN_CACHE_TAG_SEARCH_MASK_MASK_ADDRESS_SHIFT			0
#define FXR_RXE2E_CFG_PSN_CACHE_TAG_SEARCH_MASK_MASK_ADDRESS_MASK			0x3FFFFFFFFull
#define FXR_RXE2E_CFG_PSN_CACHE_TAG_SEARCH_MASK_MASK_ADDRESS_SMASK			0x3FFFFFFFFull
/*
* Table #15 of fxr_top - RXE2E_CFG_PSN_CACHE_ACCESS_DATA
* This csr along with #%%#RXE2E_CFG_PSN_CACHE_ACCESS_CTL#%%# is used to read, 
* write (warmup/teardown) the PSN Cache. See  #%%#RXE2E_CFG_PSN_CACHE_ACCESS_CTL#%%# 
* for proper technique. .
*/
#define FXR_RXE2E_CFG_PSN_CACHE_ACCESS_DATA						(FXR_RX_E2E_CSRS + 0x000000000898)
#define FXR_RXE2E_CFG_PSN_CACHE_ACCESS_DATA_RESETCSR					0x0000000000000000ull
#define FXR_RXE2E_CFG_PSN_CACHE_ACCESS_DATA_CONNECTED_SHIFT				63
#define FXR_RXE2E_CFG_PSN_CACHE_ACCESS_DATA_CONNECTED_MASK				0x1ull
#define FXR_RXE2E_CFG_PSN_CACHE_ACCESS_DATA_CONNECTED_SMASK				0x8000000000000000ull
#define FXR_RXE2E_CFG_PSN_CACHE_ACCESS_DATA_MISSING_ORDERED_SEEN_SHIFT			62
#define FXR_RXE2E_CFG_PSN_CACHE_ACCESS_DATA_MISSING_ORDERED_SEEN_MASK			0x1ull
#define FXR_RXE2E_CFG_PSN_CACHE_ACCESS_DATA_MISSING_ORDERED_SEEN_SMASK			0x4000000000000000ull
#define FXR_RXE2E_CFG_PSN_CACHE_ACCESS_DATA_ORDERED_PSN_SHIFT				46
#define FXR_RXE2E_CFG_PSN_CACHE_ACCESS_DATA_ORDERED_PSN_MASK				0xFFFFull
#define FXR_RXE2E_CFG_PSN_CACHE_ACCESS_DATA_ORDERED_PSN_SMASK				0x3FFFC00000000000ull
#define FXR_RXE2E_CFG_PSN_CACHE_ACCESS_DATA_UNORDERED_PSN_SHIFT				30
#define FXR_RXE2E_CFG_PSN_CACHE_ACCESS_DATA_UNORDERED_PSN_MASK				0xFFFFull
#define FXR_RXE2E_CFG_PSN_CACHE_ACCESS_DATA_UNORDERED_PSN_SMASK				0x3FFFC0000000ull
#define FXR_RXE2E_CFG_PSN_CACHE_ACCESS_DATA_BIG_IN_USE_SHIFT				29
#define FXR_RXE2E_CFG_PSN_CACHE_ACCESS_DATA_BIG_IN_USE_MASK				0x1ull
#define FXR_RXE2E_CFG_PSN_CACHE_ACCESS_DATA_BIG_IN_USE_SMASK				0x20000000ull
#define FXR_RXE2E_CFG_PSN_CACHE_ACCESS_DATA_SMALL_SCOREBOARD_SHIFT			0
#define FXR_RXE2E_CFG_PSN_CACHE_ACCESS_DATA_SMALL_SCOREBOARD_MASK			0x1FFFFFFFull
#define FXR_RXE2E_CFG_PSN_CACHE_ACCESS_DATA_SMALL_SCOREBOARD_SMASK			0x1FFFFFFFull
/*
* Table #16 of fxr_top - RXE2E_CFG_PSN_CACHE_ACCESS_DATA_BIT_ENABLE
* This csr is used for masked bit writes to the PSN Cache. This csr is only used 
* with CACHE_CMD_WR. If this csr is all 1's, no read or fill is necessary. If 
* this csr is not all 1's, we need to do a read-modify-write which may require a 
* fill from host memory. See  #%%#RXE2E_CFG_PSN_CACHE_ACCESS_CTL#%%# for proper 
* technique.
*/
#define FXR_RXE2E_CFG_PSN_CACHE_ACCESS_DATA_BIT_ENABLE					(FXR_RX_E2E_CSRS + 0x0000000008A0)
#define FXR_RXE2E_CFG_PSN_CACHE_ACCESS_DATA_BIT_ENABLE_RESETCSR				0xFFFFFFFFFFFFFFFFull
#define FXR_RXE2E_CFG_PSN_CACHE_ACCESS_DATA_BIT_ENABLE_CONNECTED_SHIFT			63
#define FXR_RXE2E_CFG_PSN_CACHE_ACCESS_DATA_BIT_ENABLE_CONNECTED_MASK			0x1ull
#define FXR_RXE2E_CFG_PSN_CACHE_ACCESS_DATA_BIT_ENABLE_CONNECTED_SMASK			0x8000000000000000ull
#define FXR_RXE2E_CFG_PSN_CACHE_ACCESS_DATA_BIT_ENABLE_MISSING_ORDERED_SEEN_SHIFT	62
#define FXR_RXE2E_CFG_PSN_CACHE_ACCESS_DATA_BIT_ENABLE_MISSING_ORDERED_SEEN_MASK	0x1ull
#define FXR_RXE2E_CFG_PSN_CACHE_ACCESS_DATA_BIT_ENABLE_MISSING_ORDERED_SEEN_SMASK	0x4000000000000000ull
#define FXR_RXE2E_CFG_PSN_CACHE_ACCESS_DATA_BIT_ENABLE_ORDERED_PSN_SHIFT		46
#define FXR_RXE2E_CFG_PSN_CACHE_ACCESS_DATA_BIT_ENABLE_ORDERED_PSN_MASK			0xFFFFull
#define FXR_RXE2E_CFG_PSN_CACHE_ACCESS_DATA_BIT_ENABLE_ORDERED_PSN_SMASK		0x3FFFC00000000000ull
#define FXR_RXE2E_CFG_PSN_CACHE_ACCESS_DATA_BIT_ENABLE_UNORDERED_PSN_SHIFT		30
#define FXR_RXE2E_CFG_PSN_CACHE_ACCESS_DATA_BIT_ENABLE_UNORDERED_PSN_MASK		0xFFFFull
#define FXR_RXE2E_CFG_PSN_CACHE_ACCESS_DATA_BIT_ENABLE_UNORDERED_PSN_SMASK		0x3FFFC0000000ull
#define FXR_RXE2E_CFG_PSN_CACHE_ACCESS_DATA_BIT_ENABLE_BIG_IN_USE_SHIFT			29
#define FXR_RXE2E_CFG_PSN_CACHE_ACCESS_DATA_BIT_ENABLE_BIG_IN_USE_MASK			0x1ull
#define FXR_RXE2E_CFG_PSN_CACHE_ACCESS_DATA_BIT_ENABLE_BIG_IN_USE_SMASK			0x20000000ull
#define FXR_RXE2E_CFG_PSN_CACHE_ACCESS_DATA_BIT_ENABLE_SMALL_SCOREBOARD_SHIFT		0
#define FXR_RXE2E_CFG_PSN_CACHE_ACCESS_DATA_BIT_ENABLE_SMALL_SCOREBOARD_MASK		0x1FFFFFFFull
#define FXR_RXE2E_CFG_PSN_CACHE_ACCESS_DATA_BIT_ENABLE_SMALL_SCOREBOARD_SMASK		0x1FFFFFFFull
/*
* Table #17 of fxr_top - RXE2E_CFG_CHINTS
* This CSR contains the Cache Hints to be used for commands to the HI. These are 
* muxed to the HI for the specified command. Hints are 0000=Non-Allocating, 
* Non-Temporal, 0001=Non-Allocating, Temporal LLC, 0010=Allocating L1, 
* Non-Temporal L1, 0011=Allocating L1, Temporal L1. 
*/
#define FXR_RXE2E_CFG_CHINTS								(FXR_RX_E2E_CSRS + 0x0000000008A8)
#define FXR_RXE2E_CFG_CHINTS_RESETCSR							0x0000000000000200ull
#define FXR_RXE2E_CFG_CHINTS_RESERVED_63_12_SHIFT					12
#define FXR_RXE2E_CFG_CHINTS_RESERVED_63_12_MASK					0xFFFFFFFFFFFFFull
#define FXR_RXE2E_CFG_CHINTS_RESERVED_63_12_SMASK					0xFFFFFFFFFFFFF000ull
#define FXR_RXE2E_CFG_CHINTS_CH_PSN_VICTIM_WR_SHIFT					8
#define FXR_RXE2E_CFG_CHINTS_CH_PSN_VICTIM_WR_MASK					0xFull
#define FXR_RXE2E_CFG_CHINTS_CH_PSN_VICTIM_WR_SMASK					0xF00ull
#define FXR_RXE2E_CFG_CHINTS_CH_PSN_FLUSH_WR_SHIFT					4
#define FXR_RXE2E_CFG_CHINTS_CH_PSN_FLUSH_WR_MASK					0xFull
#define FXR_RXE2E_CFG_CHINTS_CH_PSN_FLUSH_WR_SMASK					0xF0ull
#define FXR_RXE2E_CFG_CHINTS_CH_PSN_RD_SHIFT						0
#define FXR_RXE2E_CFG_CHINTS_CH_PSN_RD_MASK						0xFull
#define FXR_RXE2E_CFG_CHINTS_CH_PSN_RD_SMASK						0xFull
/*
* Table #18 of fxr_top - RXE2E_CFG_PSN_CACHE_HASH_SELECT
* This CSR is used to select an address hash function for the PSN Cache from a 
* set of 4 pre-defined hash functions optimized for different traffic 
* patterns.
*/
#define FXR_RXE2E_CFG_PSN_CACHE_HASH_SELECT						(FXR_RX_E2E_CSRS + 0x0000000008B0)
#define FXR_RXE2E_CFG_PSN_CACHE_HASH_SELECT_RESETCSR					0x0000000000000000ull
#define FXR_RXE2E_CFG_PSN_CACHE_HASH_SELECT_RESERVED_63_2_SHIFT				2
#define FXR_RXE2E_CFG_PSN_CACHE_HASH_SELECT_RESERVED_63_2_MASK				0x3FFFFFFFFFFFFFFFull
#define FXR_RXE2E_CFG_PSN_CACHE_HASH_SELECT_RESERVED_63_2_SMASK				0xFFFFFFFFFFFFFFFCull
#define FXR_RXE2E_CFG_PSN_CACHE_HASH_SELECT_HASH_SELECT_SHIFT				0
#define FXR_RXE2E_CFG_PSN_CACHE_HASH_SELECT_HASH_SELECT_MASK				0x3ull
#define FXR_RXE2E_CFG_PSN_CACHE_HASH_SELECT_HASH_SELECT_SMASK				0x3ull
/*
* Table #19 of fxr_top - RXE2E_CFG_8B_PKEY
* This CSR is used to store the pkey value for 8B packets which do not contain 
* the pkey field in the packet itself. This value is valid system wide and 
* should match the value in the corresponding CSR in OTR.
*/
#define FXR_RXE2E_CFG_8B_PKEY								(FXR_RX_E2E_CSRS + 0x0000000008B8)
#define FXR_RXE2E_CFG_8B_PKEY_RESETCSR							0x0000000000000000ull
#define FXR_RXE2E_CFG_8B_PKEY_RESERVED_63_16_SHIFT					16
#define FXR_RXE2E_CFG_8B_PKEY_RESERVED_63_16_MASK					0xFFFFFFFFFFFFull
#define FXR_RXE2E_CFG_8B_PKEY_RESERVED_63_16_SMASK					0xFFFFFFFFFFFF0000ull
#define FXR_RXE2E_CFG_8B_PKEY_PKEY_8B_SHIFT						0
#define FXR_RXE2E_CFG_8B_PKEY_PKEY_8B_MASK						0xFFFFull
#define FXR_RXE2E_CFG_8B_PKEY_PKEY_8B_SMASK						0xFFFFull
/*
* Table #20 of fxr_top - RXE2E_CFG_PTL_PKEY_CHECK_DISABLE
* This CSR is used to disable PKEY checks. PTL_INDEX=0 is used in this 
* case.
*/
#define FXR_RXE2E_CFG_PTL_PKEY_CHECK_DISABLE						(FXR_RX_E2E_CSRS + 0x0000000008C0)
#define FXR_RXE2E_CFG_PTL_PKEY_CHECK_DISABLE_RESETCSR					0x0000000000000000ull
#define FXR_RXE2E_CFG_PTL_PKEY_CHECK_DISABLE_RESERVED_63_1_SHIFT			1
#define FXR_RXE2E_CFG_PTL_PKEY_CHECK_DISABLE_RESERVED_63_1_MASK				0x7FFFFFFFFFFFFFFFull
#define FXR_RXE2E_CFG_PTL_PKEY_CHECK_DISABLE_RESERVED_63_1_SMASK			0xFFFFFFFFFFFFFFFEull
#define FXR_RXE2E_CFG_PTL_PKEY_CHECK_DISABLE_PTL_PKEY_CHECK_DISABLE_SHIFT		0
#define FXR_RXE2E_CFG_PTL_PKEY_CHECK_DISABLE_PTL_PKEY_CHECK_DISABLE_MASK		0x1ull
#define FXR_RXE2E_CFG_PTL_PKEY_CHECK_DISABLE_PTL_PKEY_CHECK_DISABLE_SMASK		0x1ull
/*
* Table #21 of fxr_top - RXE2E_CFG_BIG_SCOREBOARDS_MAX
* This CSR is used to set the max number of big scoreboards that can be used for 
* PSN tracking. Hardware associated with this CSR does not support changing 
* value of this CSR dynamically. The maximum possible value is 1024, indicating 
* that all available big scoreboards are usable. The minimum number is 0 
* indicating that none of the big scoreboards are usable.
*/
#define FXR_RXE2E_CFG_BIG_SCOREBOARDS_MAX						(FXR_RX_E2E_CSRS + 0x0000000008C8)
#define FXR_RXE2E_CFG_BIG_SCOREBOARDS_MAX_RESETCSR					0x0000000000000400ull
#define FXR_RXE2E_CFG_BIG_SCOREBOARDS_MAX_RESERVED_63_11_SHIFT				11
#define FXR_RXE2E_CFG_BIG_SCOREBOARDS_MAX_RESERVED_63_11_MASK				0x1FFFFFFFFFFFFFull
#define FXR_RXE2E_CFG_BIG_SCOREBOARDS_MAX_RESERVED_63_11_SMASK				0xFFFFFFFFFFFFF800ull
#define FXR_RXE2E_CFG_BIG_SCOREBOARDS_MAX_MAX_NUM_BIG_SCOREBOARDS_SHIFT			0
#define FXR_RXE2E_CFG_BIG_SCOREBOARDS_MAX_MAX_NUM_BIG_SCOREBOARDS_MASK			0x7FFull
#define FXR_RXE2E_CFG_BIG_SCOREBOARDS_MAX_MAX_NUM_BIG_SCOREBOARDS_SMASK			0x7FFull
/*
* Table #22 of fxr_top - RXE2E_CFG_PSN_CACHE_ACCESS_TAG
* This is the psn cache tag data csr. This csr along with #%%#RXE2E_CFG_PSN_CACHE_ACCESS_CTL#%%# 
* is used to read, write the PSN Cache Tag. See  #%%#RXE2E_CFG_PSN_CACHE_ACCESS_CTL#%%# 
* for proper technique. This layout is for one way. There are 16of these regs 
* for a total of 16 ways.
*/
#define FXR_RXE2E_CFG_PSN_CACHE_ACCESS_TAG						(FXR_RX_E2E_CSRS + 0x000000000900)
#define FXR_RXE2E_CFG_PSN_CACHE_ACCESS_TAG_RESETCSR					0x0000000000000000ull
#define FXR_RXE2E_CFG_PSN_CACHE_ACCESS_TAG_RESERVED_63_36_SHIFT				36
#define FXR_RXE2E_CFG_PSN_CACHE_ACCESS_TAG_RESERVED_63_36_MASK				0xFFFFFFFull
#define FXR_RXE2E_CFG_PSN_CACHE_ACCESS_TAG_RESERVED_63_36_SMASK				0xFFFFFFF000000000ull
#define FXR_RXE2E_CFG_PSN_CACHE_ACCESS_TAG_TAG_WAY_VALID_SHIFT				35
#define FXR_RXE2E_CFG_PSN_CACHE_ACCESS_TAG_TAG_WAY_VALID_MASK				0x1ull
#define FXR_RXE2E_CFG_PSN_CACHE_ACCESS_TAG_TAG_WAY_VALID_SMASK				0x800000000ull
#define FXR_RXE2E_CFG_PSN_CACHE_ACCESS_TAG_TAG_WAY_MRU_SHIFT				34
#define FXR_RXE2E_CFG_PSN_CACHE_ACCESS_TAG_TAG_WAY_MRU_MASK				0x1ull
#define FXR_RXE2E_CFG_PSN_CACHE_ACCESS_TAG_TAG_WAY_MRU_SMASK				0x400000000ull
#define FXR_RXE2E_CFG_PSN_CACHE_ACCESS_TAG_TAG_WAY_ADDR_SHIFT				0
#define FXR_RXE2E_CFG_PSN_CACHE_ACCESS_TAG_TAG_WAY_ADDR_MASK				0x3FFFFFFFFull
#define FXR_RXE2E_CFG_PSN_CACHE_ACCESS_TAG_TAG_WAY_ADDR_SMASK				0x3FFFFFFFFull
/*
* Table #23 of fxr_top - RXE2E_CFG_HDR_FLIT_CNT_CAM
* This table is used to determine how many 32B header flits to send to RXHP. If 
* the following holds true for a packet:
*/
#define FXR_RXE2E_CFG_HDR_FLIT_CNT_CAM							(FXR_RX_E2E_CSRS + 0x000000000A00)
#define FXR_RXE2E_CFG_HDR_FLIT_CNT_CAM_RESETCSR						0x0000000000000000ull
#define FXR_RXE2E_CFG_HDR_FLIT_CNT_CAM_RESERVED_63_43_SHIFT				43
#define FXR_RXE2E_CFG_HDR_FLIT_CNT_CAM_RESERVED_63_43_MASK				0x1FFFFFull
#define FXR_RXE2E_CFG_HDR_FLIT_CNT_CAM_RESERVED_63_43_SMASK				0xFFFFF80000000000ull
#define FXR_RXE2E_CFG_HDR_FLIT_CNT_CAM_VALID_SHIFT					42
#define FXR_RXE2E_CFG_HDR_FLIT_CNT_CAM_VALID_MASK					0x1ull
#define FXR_RXE2E_CFG_HDR_FLIT_CNT_CAM_VALID_SMASK					0x40000000000ull
#define FXR_RXE2E_CFG_HDR_FLIT_CNT_CAM_MC0_ENTRY_SHIFT					41
#define FXR_RXE2E_CFG_HDR_FLIT_CNT_CAM_MC0_ENTRY_MASK					0x1ull
#define FXR_RXE2E_CFG_HDR_FLIT_CNT_CAM_MC0_ENTRY_SMASK					0x20000000000ull
#define FXR_RXE2E_CFG_HDR_FLIT_CNT_CAM_L2_SHIFT						39
#define FXR_RXE2E_CFG_HDR_FLIT_CNT_CAM_L2_MASK						0x3ull
#define FXR_RXE2E_CFG_HDR_FLIT_CNT_CAM_L2_SMASK						0x18000000000ull
#define FXR_RXE2E_CFG_HDR_FLIT_CNT_CAM_L2_MASK_SHIFT					37
#define FXR_RXE2E_CFG_HDR_FLIT_CNT_CAM_L2_MASK_MASK					0x3ull
#define FXR_RXE2E_CFG_HDR_FLIT_CNT_CAM_L2_MASK_SMASK					0x6000000000ull
#define FXR_RXE2E_CFG_HDR_FLIT_CNT_CAM_L2EXT_SHIFT					33
#define FXR_RXE2E_CFG_HDR_FLIT_CNT_CAM_L2EXT_MASK					0xFull
#define FXR_RXE2E_CFG_HDR_FLIT_CNT_CAM_L2EXT_SMASK					0x1E00000000ull
#define FXR_RXE2E_CFG_HDR_FLIT_CNT_CAM_L2EXT_MASK_SHIFT					29
#define FXR_RXE2E_CFG_HDR_FLIT_CNT_CAM_L2EXT_MASK_MASK					0xFull
#define FXR_RXE2E_CFG_HDR_FLIT_CNT_CAM_L2EXT_MASK_SMASK					0x1E0000000ull
#define FXR_RXE2E_CFG_HDR_FLIT_CNT_CAM_L4_SHIFT						21
#define FXR_RXE2E_CFG_HDR_FLIT_CNT_CAM_L4_MASK						0xFFull
#define FXR_RXE2E_CFG_HDR_FLIT_CNT_CAM_L4_SMASK						0x1FE00000ull
#define FXR_RXE2E_CFG_HDR_FLIT_CNT_CAM_L4_MASK_SHIFT					13
#define FXR_RXE2E_CFG_HDR_FLIT_CNT_CAM_L4_MASK_MASK					0xFFull
#define FXR_RXE2E_CFG_HDR_FLIT_CNT_CAM_L4_MASK_SMASK					0x1FE000ull
#define FXR_RXE2E_CFG_HDR_FLIT_CNT_CAM_OPCODE_LOW_SHIFT					8
#define FXR_RXE2E_CFG_HDR_FLIT_CNT_CAM_OPCODE_LOW_MASK					0x1Full
#define FXR_RXE2E_CFG_HDR_FLIT_CNT_CAM_OPCODE_LOW_SMASK					0x1F00ull
#define FXR_RXE2E_CFG_HDR_FLIT_CNT_CAM_OPCODE_LOW_MASK_SHIFT				3
#define FXR_RXE2E_CFG_HDR_FLIT_CNT_CAM_OPCODE_LOW_MASK_MASK				0x1Full
#define FXR_RXE2E_CFG_HDR_FLIT_CNT_CAM_OPCODE_LOW_MASK_SMASK				0xF8ull
#define FXR_RXE2E_CFG_HDR_FLIT_CNT_CAM_CNT_M1_SHIFT					0
#define FXR_RXE2E_CFG_HDR_FLIT_CNT_CAM_CNT_M1_MASK					0x7ull
#define FXR_RXE2E_CFG_HDR_FLIT_CNT_CAM_CNT_M1_SMASK					0x7ull
/*
* Table #24 of fxr_top - RXE2E_CFG_PTL_PKEY_TABLE_CAM
* This CAM is used to store the PTL PKEY table that is used in RxE2E to perform 
* PKEY checks to either promote or demote membership status of received packets. 
* Software ensures there is a maximum of one match. If a match is found, the 
* index, called the PTL_PKEY_IDX is used for the PSN addressing. If no match is 
* found, the packet is marked as failed (PKT_STATUS_NOT_CONNECTED is used). PKEY 
* = 0 indicates an invalid entry.
*/
#define FXR_RXE2E_CFG_PTL_PKEY_TABLE_CAM						(FXR_RX_E2E_CSRS + 0x000000000B00)
#define FXR_RXE2E_CFG_PTL_PKEY_TABLE_CAM_RESETCSR					0x0000000000000000ull
#define FXR_RXE2E_CFG_PTL_PKEY_TABLE_CAM_RESERVED_63_16_SHIFT				16
#define FXR_RXE2E_CFG_PTL_PKEY_TABLE_CAM_RESERVED_63_16_MASK				0xFFFFFFFFFFFFull
#define FXR_RXE2E_CFG_PTL_PKEY_TABLE_CAM_RESERVED_63_16_SMASK				0xFFFFFFFFFFFF0000ull
#define FXR_RXE2E_CFG_PTL_PKEY_TABLE_CAM_MEMBERSHIP_SHIFT				15
#define FXR_RXE2E_CFG_PTL_PKEY_TABLE_CAM_MEMBERSHIP_MASK				0x1ull
#define FXR_RXE2E_CFG_PTL_PKEY_TABLE_CAM_MEMBERSHIP_SMASK				0x8000ull
#define FXR_RXE2E_CFG_PTL_PKEY_TABLE_CAM_PKEY_SHIFT					0
#define FXR_RXE2E_CFG_PTL_PKEY_TABLE_CAM_PKEY_MASK					0x7FFFull
#define FXR_RXE2E_CFG_PTL_PKEY_TABLE_CAM_PKEY_SMASK					0x7FFFull
/*
* Table #25 of fxr_top - RXE2E_ERR_STS_1
* This is the Error Status CSR. Bits are set by hardware or by writing to the 
* #%%#RXE2E_ERR_FRC_1#%%# CSR. Bits are cleared by writing to the 
* #%%#RXE2E_ERR_CLR_1#%%# CSR.
*/
#define FXR_RXE2E_ERR_STS_1								(FXR_RX_E2E_CSRS + 0x000000000D00)
#define FXR_RXE2E_ERR_STS_1_RESETCSR							0x0000000000000000ull
#define FXR_RXE2E_ERR_STS_1_RESERVED_63_21_SHIFT					21
#define FXR_RXE2E_ERR_STS_1_RESERVED_63_21_MASK						0x7FFFFFFFFFFull
#define FXR_RXE2E_ERR_STS_1_RESERVED_63_21_SMASK					0xFFFFFFFFFFE00000ull
#define FXR_RXE2E_ERR_STS_1_ANY_SBE_CNTR_NON_ZERO_SHIFT					20
#define FXR_RXE2E_ERR_STS_1_ANY_SBE_CNTR_NON_ZERO_MASK					0x1ull
#define FXR_RXE2E_ERR_STS_1_ANY_SBE_CNTR_NON_ZERO_SMASK					0x100000ull
#define FXR_RXE2E_ERR_STS_1_ANY_SBE_CNTR_MAX_SHIFT					19
#define FXR_RXE2E_ERR_STS_1_ANY_SBE_CNTR_MAX_MASK					0x1ull
#define FXR_RXE2E_ERR_STS_1_ANY_SBE_CNTR_MAX_SMASK					0x80000ull
#define FXR_RXE2E_ERR_STS_1_ANY_MBE_CNTR_NON_ZERO_SHIFT					18
#define FXR_RXE2E_ERR_STS_1_ANY_MBE_CNTR_NON_ZERO_MASK					0x1ull
#define FXR_RXE2E_ERR_STS_1_ANY_MBE_CNTR_NON_ZERO_SMASK					0x40000ull
#define FXR_RXE2E_ERR_STS_1_ANY_MBE_CNTR_MAX_SHIFT					17
#define FXR_RXE2E_ERR_STS_1_ANY_MBE_CNTR_MAX_MASK					0x1ull
#define FXR_RXE2E_ERR_STS_1_ANY_MBE_CNTR_MAX_SMASK					0x20000ull
#define FXR_RXE2E_ERR_STS_1_BIG_SCOREBOARD_SBE_SHIFT					16
#define FXR_RXE2E_ERR_STS_1_BIG_SCOREBOARD_SBE_MASK					0x1ull
#define FXR_RXE2E_ERR_STS_1_BIG_SCOREBOARD_SBE_SMASK					0x10000ull
#define FXR_RXE2E_ERR_STS_1_BIG_SCOREBOARD_MBE_SHIFT					15
#define FXR_RXE2E_ERR_STS_1_BIG_SCOREBOARD_MBE_MASK					0x1ull
#define FXR_RXE2E_ERR_STS_1_BIG_SCOREBOARD_MBE_SMASK					0x8000ull
#define FXR_RXE2E_ERR_STS_1_MC1CRC_SHIFT						14
#define FXR_RXE2E_ERR_STS_1_MC1CRC_MASK							0x1ull
#define FXR_RXE2E_ERR_STS_1_MC1CRC_SMASK						0x4000ull
#define FXR_RXE2E_ERR_STS_1_MC0CRC_SHIFT						13
#define FXR_RXE2E_ERR_STS_1_MC0CRC_MASK							0x1ull
#define FXR_RXE2E_ERR_STS_1_MC0CRC_SMASK						0x2000ull
#define FXR_RXE2E_ERR_STS_1_PSN_CACHE_DATA_SBE_SHIFT					12
#define FXR_RXE2E_ERR_STS_1_PSN_CACHE_DATA_SBE_MASK					0x1ull
#define FXR_RXE2E_ERR_STS_1_PSN_CACHE_DATA_SBE_SMASK					0x1000ull
#define FXR_RXE2E_ERR_STS_1_PSN_CACHE_DATA_MBE_SHIFT					11
#define FXR_RXE2E_ERR_STS_1_PSN_CACHE_DATA_MBE_MASK					0x1ull
#define FXR_RXE2E_ERR_STS_1_PSN_CACHE_DATA_MBE_SMASK					0x800ull
#define FXR_RXE2E_ERR_STS_1_PSN_CACHE_TAG_SBE_SHIFT					10
#define FXR_RXE2E_ERR_STS_1_PSN_CACHE_TAG_SBE_MASK					0x1ull
#define FXR_RXE2E_ERR_STS_1_PSN_CACHE_TAG_SBE_SMASK					0x400ull
#define FXR_RXE2E_ERR_STS_1_PSN_CACHE_TAG_MBE_SHIFT					9
#define FXR_RXE2E_ERR_STS_1_PSN_CACHE_TAG_MBE_MASK					0x1ull
#define FXR_RXE2E_ERR_STS_1_PSN_CACHE_TAG_MBE_SMASK					0x200ull
#define FXR_RXE2E_ERR_STS_1_MC1_INPUT_FIFO_SBE_SHIFT					8
#define FXR_RXE2E_ERR_STS_1_MC1_INPUT_FIFO_SBE_MASK					0x1ull
#define FXR_RXE2E_ERR_STS_1_MC1_INPUT_FIFO_SBE_SMASK					0x100ull
#define FXR_RXE2E_ERR_STS_1_MC1_INPUT_FIFO_MBE_SHIFT					7
#define FXR_RXE2E_ERR_STS_1_MC1_INPUT_FIFO_MBE_MASK					0x1ull
#define FXR_RXE2E_ERR_STS_1_MC1_INPUT_FIFO_MBE_SMASK					0x80ull
#define FXR_RXE2E_ERR_STS_1_MC0_INPUT_FIFO_SBE_SHIFT					6
#define FXR_RXE2E_ERR_STS_1_MC0_INPUT_FIFO_SBE_MASK					0x1ull
#define FXR_RXE2E_ERR_STS_1_MC0_INPUT_FIFO_SBE_SMASK					0x40ull
#define FXR_RXE2E_ERR_STS_1_MC0_INPUT_FIFO_MBE_SHIFT					5
#define FXR_RXE2E_ERR_STS_1_MC0_INPUT_FIFO_MBE_MASK					0x1ull
#define FXR_RXE2E_ERR_STS_1_MC0_INPUT_FIFO_MBE_SMASK					0x20ull
#define FXR_RXE2E_ERR_STS_1_MC1_LM_IN_SBE_SHIFT						4
#define FXR_RXE2E_ERR_STS_1_MC1_LM_IN_SBE_MASK						0x1ull
#define FXR_RXE2E_ERR_STS_1_MC1_LM_IN_SBE_SMASK						0x10ull
#define FXR_RXE2E_ERR_STS_1_MC1_LM_IN_MBE_SHIFT						3
#define FXR_RXE2E_ERR_STS_1_MC1_LM_IN_MBE_MASK						0x1ull
#define FXR_RXE2E_ERR_STS_1_MC1_LM_IN_MBE_SMASK						0x8ull
#define FXR_RXE2E_ERR_STS_1_MC0_LM_IN_SBE_SHIFT						2
#define FXR_RXE2E_ERR_STS_1_MC0_LM_IN_SBE_MASK						0x1ull
#define FXR_RXE2E_ERR_STS_1_MC0_LM_IN_SBE_SMASK						0x4ull
#define FXR_RXE2E_ERR_STS_1_MC0_LM_IN_MBE_SHIFT						1
#define FXR_RXE2E_ERR_STS_1_MC0_LM_IN_MBE_MASK						0x1ull
#define FXR_RXE2E_ERR_STS_1_MC0_LM_IN_MBE_SMASK						0x2ull
#define FXR_RXE2E_ERR_STS_1_DIAGNOSTIC_SHIFT						0
#define FXR_RXE2E_ERR_STS_1_DIAGNOSTIC_MASK						0x1ull
#define FXR_RXE2E_ERR_STS_1_DIAGNOSTIC_SMASK						0x1ull
/*
* Table #26 of fxr_top - RXE2E_ERR_CLR_1
* This is the Error Clear CSR. Writing a 1 to a valid bit will clear the 
* corresponding bit in the #%%#RXE2E_ERR_STS_1#%%# CSR.
*/
#define FXR_RXE2E_ERR_CLR_1								(FXR_RX_E2E_CSRS + 0x000000000D08)
#define FXR_RXE2E_ERR_CLR_1_RESETCSR							0x0000000000000000ull
#define FXR_RXE2E_ERR_CLR_1_RESERVED_63_21_SHIFT					21
#define FXR_RXE2E_ERR_CLR_1_RESERVED_63_21_MASK						0x7FFFFFFFFFFull
#define FXR_RXE2E_ERR_CLR_1_RESERVED_63_21_SMASK					0xFFFFFFFFFFE00000ull
#define FXR_RXE2E_ERR_CLR_1_EVENTS_SHIFT						0
#define FXR_RXE2E_ERR_CLR_1_EVENTS_MASK							0x1FFFFFull
#define FXR_RXE2E_ERR_CLR_1_EVENTS_SMASK						0x1FFFFFull
/*
* Table #27 of fxr_top - RXE2E_ERR_FRC_1
* This is the Error Force CSR. Writing a 1 to a valid bit will set the 
* corresponding bit in the #%%#RXE2E_ERR_STS_1#%%# CSR.
*/
#define FXR_RXE2E_ERR_FRC_1								(FXR_RX_E2E_CSRS + 0x000000000D10)
#define FXR_RXE2E_ERR_FRC_1_RESETCSR							0x0000000000000000ull
#define FXR_RXE2E_ERR_FRC_1_RESERVED_63_21_SHIFT					21
#define FXR_RXE2E_ERR_FRC_1_RESERVED_63_21_MASK						0x7FFFFFFFFFFull
#define FXR_RXE2E_ERR_FRC_1_RESERVED_63_21_SMASK					0xFFFFFFFFFFE00000ull
#define FXR_RXE2E_ERR_FRC_1_EVENTS_SHIFT						0
#define FXR_RXE2E_ERR_FRC_1_EVENTS_MASK							0x1FFFFFull
#define FXR_RXE2E_ERR_FRC_1_EVENTS_SMASK						0x1FFFFFull
/*
* Table #28 of fxr_top - RXE2E_ERR_EN_HOST_1
* This is the Error Enable for the Host Interrupt. If a bit is set, the 
* corresponding error bit in #%%#RXE2E_ERR_STS_1#%%# will cause an interrupt on 
* the HOST interrupt signal.
*/
#define FXR_RXE2E_ERR_EN_HOST_1								(FXR_RX_E2E_CSRS + 0x000000000D18)
#define FXR_RXE2E_ERR_EN_HOST_1_RESETCSR						0x0000000000000000ull
#define FXR_RXE2E_ERR_EN_HOST_1_RESERVED_63_21_SHIFT					21
#define FXR_RXE2E_ERR_EN_HOST_1_RESERVED_63_21_MASK					0x7FFFFFFFFFFull
#define FXR_RXE2E_ERR_EN_HOST_1_RESERVED_63_21_SMASK					0xFFFFFFFFFFE00000ull
#define FXR_RXE2E_ERR_EN_HOST_1_EVENTS_SHIFT						0
#define FXR_RXE2E_ERR_EN_HOST_1_EVENTS_MASK						0x1FFFFFull
#define FXR_RXE2E_ERR_EN_HOST_1_EVENTS_SMASK						0x1FFFFFull
/*
* Table #29 of fxr_top - RXE2E_ERR_FIRST_HOST_1
* This is the First Error CSR for the Host Interrupt. When this CSR is clear, it 
* will capture the next #%%#RXE2E_ERR_STS_1#%%# value when a new HOST Interrupt 
* occurs.
*/
#define FXR_RXE2E_ERR_FIRST_HOST_1							(FXR_RX_E2E_CSRS + 0x000000000D20)
#define FXR_RXE2E_ERR_FIRST_HOST_1_RESETCSR						0x0000000000000000ull
#define FXR_RXE2E_ERR_FIRST_HOST_1_RESERVED_63_21_SHIFT					21
#define FXR_RXE2E_ERR_FIRST_HOST_1_RESERVED_63_21_MASK					0x7FFFFFFFFFFull
#define FXR_RXE2E_ERR_FIRST_HOST_1_RESERVED_63_21_SMASK					0xFFFFFFFFFFE00000ull
#define FXR_RXE2E_ERR_FIRST_HOST_1_EVENTS_SHIFT						0
#define FXR_RXE2E_ERR_FIRST_HOST_1_EVENTS_MASK						0x1FFFFFull
#define FXR_RXE2E_ERR_FIRST_HOST_1_EVENTS_SMASK						0x1FFFFFull
/*
* Table #30 of fxr_top - RXE2E_ERR_EN_BMC_1
* This is the Error Enable for the BMC Interrupt. If a bit is set, the 
* corresponding error bit in #%%#RXE2E_ERR_STS_1#%%# will cause an interrupt on 
* the BMC interrupt signal.
*/
#define FXR_RXE2E_ERR_EN_BMC_1								(FXR_RX_E2E_CSRS + 0x000000000D28)
#define FXR_RXE2E_ERR_EN_BMC_1_RESETCSR							0x0000000000000000ull
#define FXR_RXE2E_ERR_EN_BMC_1_RESERVED_63_21_SHIFT					21
#define FXR_RXE2E_ERR_EN_BMC_1_RESERVED_63_21_MASK					0x7FFFFFFFFFFull
#define FXR_RXE2E_ERR_EN_BMC_1_RESERVED_63_21_SMASK					0xFFFFFFFFFFE00000ull
#define FXR_RXE2E_ERR_EN_BMC_1_EVENTS_SHIFT						0
#define FXR_RXE2E_ERR_EN_BMC_1_EVENTS_MASK						0x1FFFFFull
#define FXR_RXE2E_ERR_EN_BMC_1_EVENTS_SMASK						0x1FFFFFull
/*
* Table #31 of fxr_top - RXE2E_ERR_FIRST_BMC_1
* This is the First Error CSR for the BMC Interrupt. When this CSR is clear, it 
* will capture the next #%%#RXE2E_ERR_STS_1#%%# value when a new BMC Interrupt 
* occurs.
*/
#define FXR_RXE2E_ERR_FIRST_BMC_1							(FXR_RX_E2E_CSRS + 0x000000000D30)
#define FXR_RXE2E_ERR_FIRST_BMC_1_RESETCSR						0x0000000000000000ull
#define FXR_RXE2E_ERR_FIRST_BMC_1_RESERVED_63_21_SHIFT					21
#define FXR_RXE2E_ERR_FIRST_BMC_1_RESERVED_63_21_MASK					0x7FFFFFFFFFFull
#define FXR_RXE2E_ERR_FIRST_BMC_1_RESERVED_63_21_SMASK					0xFFFFFFFFFFE00000ull
#define FXR_RXE2E_ERR_FIRST_BMC_1_EVENTS_SHIFT						0
#define FXR_RXE2E_ERR_FIRST_BMC_1_EVENTS_MASK						0x1FFFFFull
#define FXR_RXE2E_ERR_FIRST_BMC_1_EVENTS_SMASK						0x1FFFFFull
/*
* Table #32 of fxr_top - RXE2E_ERR_EN_QUAR_1
* This is the Error Enable for the Quarantine Interrupt. If a bit is set, the 
* corresponding error bit in #%%#RXE2E_ERR_STS_1#%%# will cause an interrupt on 
* the QUAR interrupt signal.
*/
#define FXR_RXE2E_ERR_EN_QUAR_1								(FXR_RX_E2E_CSRS + 0x000000000D38)
#define FXR_RXE2E_ERR_EN_QUAR_1_RESETCSR						0x0000000000000000ull
#define FXR_RXE2E_ERR_EN_QUAR_1_RESERVED_63_21_SHIFT					21
#define FXR_RXE2E_ERR_EN_QUAR_1_RESERVED_63_21_MASK					0x7FFFFFFFFFFull
#define FXR_RXE2E_ERR_EN_QUAR_1_RESERVED_63_21_SMASK					0xFFFFFFFFFFE00000ull
#define FXR_RXE2E_ERR_EN_QUAR_1_EVENTS_SHIFT						0
#define FXR_RXE2E_ERR_EN_QUAR_1_EVENTS_MASK						0x1FFFFFull
#define FXR_RXE2E_ERR_EN_QUAR_1_EVENTS_SMASK						0x1FFFFFull
/*
* Table #33 of fxr_top - RXE2E_ERR_FIRST_QUAR_1
* This is the First Error CSR for the Quarantine Interrupt. When this CSR is 
* clear, it will capture the next #%%#RXE2E_ERR_STS_1#%%# value when a new QUAR 
* Interrupt occurs.
*/
#define FXR_RXE2E_ERR_FIRST_QUAR_1							(FXR_RX_E2E_CSRS + 0x000000000D40)
#define FXR_RXE2E_ERR_FIRST_QUAR_1_RESETCSR						0x0000000000000000ull
#define FXR_RXE2E_ERR_FIRST_QUAR_1_RESERVED_63_21_SHIFT					21
#define FXR_RXE2E_ERR_FIRST_QUAR_1_RESERVED_63_21_MASK					0x7FFFFFFFFFFull
#define FXR_RXE2E_ERR_FIRST_QUAR_1_RESERVED_63_21_SMASK					0xFFFFFFFFFFE00000ull
#define FXR_RXE2E_ERR_FIRST_QUAR_1_EVENTS_SHIFT						0
#define FXR_RXE2E_ERR_FIRST_QUAR_1_EVENTS_MASK						0x1FFFFFull
#define FXR_RXE2E_ERR_FIRST_QUAR_1_EVENTS_SMASK						0x1FFFFFull
/*
* Table #34 of fxr_top - RXE2E_ERR_SBE_MBE_CNTR_SUMMARY_STATUS
* This is a summary status register for the sbe/mbe err counters in the various 
* errinfo regs. It saves having to read all the error info regs looking for 
* sbe/mbe cntr values.
*/
#define FXR_RXE2E_ERR_SBE_MBE_CNTR_SUMMARY_STATUS					(FXR_RX_E2E_CSRS + 0x000000000E00)
#define FXR_RXE2E_ERR_SBE_MBE_CNTR_SUMMARY_STATUS_RESETCSR				0x0000000000000000ull
#define FXR_RXE2E_ERR_SBE_MBE_CNTR_SUMMARY_STATUS_RESERVED_63_4_SHIFT			4
#define FXR_RXE2E_ERR_SBE_MBE_CNTR_SUMMARY_STATUS_RESERVED_63_4_MASK			0xFFFFFFFFFFFFFFFull
#define FXR_RXE2E_ERR_SBE_MBE_CNTR_SUMMARY_STATUS_RESERVED_63_4_SMASK			0xFFFFFFFFFFFFFFF0ull
#define FXR_RXE2E_ERR_SBE_MBE_CNTR_SUMMARY_STATUS_SOME_SBE_CNTR_MAX_SHIFT		3
#define FXR_RXE2E_ERR_SBE_MBE_CNTR_SUMMARY_STATUS_SOME_SBE_CNTR_MAX_MASK		0x1ull
#define FXR_RXE2E_ERR_SBE_MBE_CNTR_SUMMARY_STATUS_SOME_SBE_CNTR_MAX_SMASK		0x8ull
#define FXR_RXE2E_ERR_SBE_MBE_CNTR_SUMMARY_STATUS_SOME_SBE_CNTR_NON_ZERO_SHIFT		2
#define FXR_RXE2E_ERR_SBE_MBE_CNTR_SUMMARY_STATUS_SOME_SBE_CNTR_NON_ZERO_MASK		0x1ull
#define FXR_RXE2E_ERR_SBE_MBE_CNTR_SUMMARY_STATUS_SOME_SBE_CNTR_NON_ZERO_SMASK		0x4ull
#define FXR_RXE2E_ERR_SBE_MBE_CNTR_SUMMARY_STATUS_SOME_MBE_CNTR_MAX_SHIFT		1
#define FXR_RXE2E_ERR_SBE_MBE_CNTR_SUMMARY_STATUS_SOME_MBE_CNTR_MAX_MASK		0x1ull
#define FXR_RXE2E_ERR_SBE_MBE_CNTR_SUMMARY_STATUS_SOME_MBE_CNTR_MAX_SMASK		0x2ull
#define FXR_RXE2E_ERR_SBE_MBE_CNTR_SUMMARY_STATUS_SOME_MBE_CNTR_NON_ZERO_SHIFT		0
#define FXR_RXE2E_ERR_SBE_MBE_CNTR_SUMMARY_STATUS_SOME_MBE_CNTR_NON_ZERO_MASK		0x1ull
#define FXR_RXE2E_ERR_SBE_MBE_CNTR_SUMMARY_STATUS_SOME_MBE_CNTR_NON_ZERO_SMASK		0x1ull
/*
* Table #35 of fxr_top - RXE2E_ERR_INFO_MC0_LM_INPUT_SBE_MBE
* Error Info for the MC0 Linkmux input #%%#mc0_lm_in_sbe#%%# and 
* #%%#mc0_lm_in_mbe#%%# events. There is no address associated with these. There 
* are 4 ecc domains: 3:0 cover data 255:192, 191:128, 127:64, 63:0 respectively. 
* In case of simultaneous errors in more than 1 ecc domain, the syndrome of the 
* least significant ecc domain is what is saved.
*/
#define FXR_RXE2E_ERR_INFO_MC0_LM_INPUT_SBE_MBE						(FXR_RX_E2E_CSRS + 0x000000000E08)
#define FXR_RXE2E_ERR_INFO_MC0_LM_INPUT_SBE_MBE_RESETCSR				0x0000000000000000ull
#define FXR_RXE2E_ERR_INFO_MC0_LM_INPUT_SBE_MBE_RESERVED_63_54_SHIFT			54
#define FXR_RXE2E_ERR_INFO_MC0_LM_INPUT_SBE_MBE_RESERVED_63_54_MASK			0x3FFull
#define FXR_RXE2E_ERR_INFO_MC0_LM_INPUT_SBE_MBE_RESERVED_63_54_SMASK			0xFFC0000000000000ull
#define FXR_RXE2E_ERR_INFO_MC0_LM_INPUT_SBE_MBE_SBE_COUNT_SHIFT				46
#define FXR_RXE2E_ERR_INFO_MC0_LM_INPUT_SBE_MBE_SBE_COUNT_MASK				0xFFull
#define FXR_RXE2E_ERR_INFO_MC0_LM_INPUT_SBE_MBE_SBE_COUNT_SMASK				0x3FC00000000000ull
#define FXR_RXE2E_ERR_INFO_MC0_LM_INPUT_SBE_MBE_SBE_SHIFT				42
#define FXR_RXE2E_ERR_INFO_MC0_LM_INPUT_SBE_MBE_SBE_MASK				0xFull
#define FXR_RXE2E_ERR_INFO_MC0_LM_INPUT_SBE_MBE_SBE_SMASK				0x3C0000000000ull
#define FXR_RXE2E_ERR_INFO_MC0_LM_INPUT_SBE_MBE_SBE_LAST_DOMAIN_SHIFT			40
#define FXR_RXE2E_ERR_INFO_MC0_LM_INPUT_SBE_MBE_SBE_LAST_DOMAIN_MASK			0x3ull
#define FXR_RXE2E_ERR_INFO_MC0_LM_INPUT_SBE_MBE_SBE_LAST_DOMAIN_SMASK			0x30000000000ull
#define FXR_RXE2E_ERR_INFO_MC0_LM_INPUT_SBE_MBE_SBE_LAST_SYNDROME_SHIFT			32
#define FXR_RXE2E_ERR_INFO_MC0_LM_INPUT_SBE_MBE_SBE_LAST_SYNDROME_MASK			0xFFull
#define FXR_RXE2E_ERR_INFO_MC0_LM_INPUT_SBE_MBE_SBE_LAST_SYNDROME_SMASK			0xFF00000000ull
#define FXR_RXE2E_ERR_INFO_MC0_LM_INPUT_SBE_MBE_RESERVED_31_22_SHIFT			22
#define FXR_RXE2E_ERR_INFO_MC0_LM_INPUT_SBE_MBE_RESERVED_31_22_MASK			0x3FFull
#define FXR_RXE2E_ERR_INFO_MC0_LM_INPUT_SBE_MBE_RESERVED_31_22_SMASK			0xFFC00000ull
#define FXR_RXE2E_ERR_INFO_MC0_LM_INPUT_SBE_MBE_MBE_COUNT_SHIFT				14
#define FXR_RXE2E_ERR_INFO_MC0_LM_INPUT_SBE_MBE_MBE_COUNT_MASK				0xFFull
#define FXR_RXE2E_ERR_INFO_MC0_LM_INPUT_SBE_MBE_MBE_COUNT_SMASK				0x3FC000ull
#define FXR_RXE2E_ERR_INFO_MC0_LM_INPUT_SBE_MBE_MBE_SHIFT				10
#define FXR_RXE2E_ERR_INFO_MC0_LM_INPUT_SBE_MBE_MBE_MASK				0xFull
#define FXR_RXE2E_ERR_INFO_MC0_LM_INPUT_SBE_MBE_MBE_SMASK				0x3C00ull
#define FXR_RXE2E_ERR_INFO_MC0_LM_INPUT_SBE_MBE_MBE_LAST_DOMAIN_SHIFT			8
#define FXR_RXE2E_ERR_INFO_MC0_LM_INPUT_SBE_MBE_MBE_LAST_DOMAIN_MASK			0x3ull
#define FXR_RXE2E_ERR_INFO_MC0_LM_INPUT_SBE_MBE_MBE_LAST_DOMAIN_SMASK			0x300ull
#define FXR_RXE2E_ERR_INFO_MC0_LM_INPUT_SBE_MBE_MBE_LAST_SYNDROME_SHIFT			0
#define FXR_RXE2E_ERR_INFO_MC0_LM_INPUT_SBE_MBE_MBE_LAST_SYNDROME_MASK			0xFFull
#define FXR_RXE2E_ERR_INFO_MC0_LM_INPUT_SBE_MBE_MBE_LAST_SYNDROME_SMASK			0xFFull
/*
* Table #36 of fxr_top - RXE2E_ERR_INFO_MC1_LM_INPUT_SBE_MBE
* Error Info for the MC1 Linkmux input #%%#mc1_lm_in_sbe#%%# and 
* #%%#mc1_lm_in_mbe#%%# events. There is no address associated with these. There 
* are 4 ecc domains: 3:0 cover data 255:192, 191:128, 127:64, 63:0 respectively. 
* In case of simultaneous errors in more than 1 ecc domain, the syndrome of the 
* least significant ecc domain is what is saved.
*/
#define FXR_RXE2E_ERR_INFO_MC1_LM_INPUT_SBE_MBE						(FXR_RX_E2E_CSRS + 0x000000000E10)
#define FXR_RXE2E_ERR_INFO_MC1_LM_INPUT_SBE_MBE_RESETCSR				0x0000000000000000ull
#define FXR_RXE2E_ERR_INFO_MC1_LM_INPUT_SBE_MBE_RESERVED_63_58_SHIFT			58
#define FXR_RXE2E_ERR_INFO_MC1_LM_INPUT_SBE_MBE_RESERVED_63_58_MASK			0x3Full
#define FXR_RXE2E_ERR_INFO_MC1_LM_INPUT_SBE_MBE_RESERVED_63_58_SMASK			0xFC00000000000000ull
#define FXR_RXE2E_ERR_INFO_MC1_LM_INPUT_SBE_MBE_SBE_COUNT_SHIFT				46
#define FXR_RXE2E_ERR_INFO_MC1_LM_INPUT_SBE_MBE_SBE_COUNT_MASK				0xFFFull
#define FXR_RXE2E_ERR_INFO_MC1_LM_INPUT_SBE_MBE_SBE_COUNT_SMASK				0x3FFC00000000000ull
#define FXR_RXE2E_ERR_INFO_MC1_LM_INPUT_SBE_MBE_SBE_SHIFT				42
#define FXR_RXE2E_ERR_INFO_MC1_LM_INPUT_SBE_MBE_SBE_MASK				0xFull
#define FXR_RXE2E_ERR_INFO_MC1_LM_INPUT_SBE_MBE_SBE_SMASK				0x3C0000000000ull
#define FXR_RXE2E_ERR_INFO_MC1_LM_INPUT_SBE_MBE_SBE_LAST_DOMAIN_SHIFT			40
#define FXR_RXE2E_ERR_INFO_MC1_LM_INPUT_SBE_MBE_SBE_LAST_DOMAIN_MASK			0x3ull
#define FXR_RXE2E_ERR_INFO_MC1_LM_INPUT_SBE_MBE_SBE_LAST_DOMAIN_SMASK			0x30000000000ull
#define FXR_RXE2E_ERR_INFO_MC1_LM_INPUT_SBE_MBE_SBE_LAST_SYNDROME_SHIFT			32
#define FXR_RXE2E_ERR_INFO_MC1_LM_INPUT_SBE_MBE_SBE_LAST_SYNDROME_MASK			0xFFull
#define FXR_RXE2E_ERR_INFO_MC1_LM_INPUT_SBE_MBE_SBE_LAST_SYNDROME_SMASK			0xFF00000000ull
#define FXR_RXE2E_ERR_INFO_MC1_LM_INPUT_SBE_MBE_RESERVED_31_18_SHIFT			18
#define FXR_RXE2E_ERR_INFO_MC1_LM_INPUT_SBE_MBE_RESERVED_31_18_MASK			0x3FFFull
#define FXR_RXE2E_ERR_INFO_MC1_LM_INPUT_SBE_MBE_RESERVED_31_18_SMASK			0xFFFC0000ull
#define FXR_RXE2E_ERR_INFO_MC1_LM_INPUT_SBE_MBE_MBE_COUNT_SHIFT				14
#define FXR_RXE2E_ERR_INFO_MC1_LM_INPUT_SBE_MBE_MBE_COUNT_MASK				0xFull
#define FXR_RXE2E_ERR_INFO_MC1_LM_INPUT_SBE_MBE_MBE_COUNT_SMASK				0x3C000ull
#define FXR_RXE2E_ERR_INFO_MC1_LM_INPUT_SBE_MBE_MBE_SHIFT				10
#define FXR_RXE2E_ERR_INFO_MC1_LM_INPUT_SBE_MBE_MBE_MASK				0xFull
#define FXR_RXE2E_ERR_INFO_MC1_LM_INPUT_SBE_MBE_MBE_SMASK				0x3C00ull
#define FXR_RXE2E_ERR_INFO_MC1_LM_INPUT_SBE_MBE_MBE_LAST_DOMAIN_SHIFT			8
#define FXR_RXE2E_ERR_INFO_MC1_LM_INPUT_SBE_MBE_MBE_LAST_DOMAIN_MASK			0x3ull
#define FXR_RXE2E_ERR_INFO_MC1_LM_INPUT_SBE_MBE_MBE_LAST_DOMAIN_SMASK			0x300ull
#define FXR_RXE2E_ERR_INFO_MC1_LM_INPUT_SBE_MBE_MBE_LAST_SYNDROME_SHIFT			0
#define FXR_RXE2E_ERR_INFO_MC1_LM_INPUT_SBE_MBE_MBE_LAST_SYNDROME_MASK			0xFFull
#define FXR_RXE2E_ERR_INFO_MC1_LM_INPUT_SBE_MBE_MBE_LAST_SYNDROME_SMASK			0xFFull
/*
* Table #37 of fxr_top - RXE2E_ERR_INFO_MC0_INPUT_SBE_MBE
* Error Info for the #%%#mc0_input_fifo_sbe#%%# and #%%#mc0_input_fifo_mbe#%%# 
* events. There are 4 ecc domains: 3:0 cover data 255:192, 191:128, 127:64, 63:0 
* respectively. In case of simultaneous errors in more than 1 ecc domain, the 
* syndrome of the least significant ecc domain is what is saved.
*/
#define FXR_RXE2E_ERR_INFO_MC0_INPUT_SBE_MBE						(FXR_RX_E2E_CSRS + 0x000000000E18)
#define FXR_RXE2E_ERR_INFO_MC0_INPUT_SBE_MBE_RESETCSR					0x0000000000000000ull
#define FXR_RXE2E_ERR_INFO_MC0_INPUT_SBE_MBE_RESERVED_63_58_SHIFT			58
#define FXR_RXE2E_ERR_INFO_MC0_INPUT_SBE_MBE_RESERVED_63_58_MASK			0x3Full
#define FXR_RXE2E_ERR_INFO_MC0_INPUT_SBE_MBE_RESERVED_63_58_SMASK			0xFC00000000000000ull
#define FXR_RXE2E_ERR_INFO_MC0_INPUT_SBE_MBE_SBE_LAST_ADDRESS_SHIFT			51
#define FXR_RXE2E_ERR_INFO_MC0_INPUT_SBE_MBE_SBE_LAST_ADDRESS_MASK			0x7Full
#define FXR_RXE2E_ERR_INFO_MC0_INPUT_SBE_MBE_SBE_LAST_ADDRESS_SMASK			0x3F8000000000000ull
#define FXR_RXE2E_ERR_INFO_MC0_INPUT_SBE_MBE_SBE_COUNT_SHIFT				39
#define FXR_RXE2E_ERR_INFO_MC0_INPUT_SBE_MBE_SBE_COUNT_MASK				0xFFFull
#define FXR_RXE2E_ERR_INFO_MC0_INPUT_SBE_MBE_SBE_COUNT_SMASK				0x7FF8000000000ull
#define FXR_RXE2E_ERR_INFO_MC0_INPUT_SBE_MBE_SBE_SHIFT					35
#define FXR_RXE2E_ERR_INFO_MC0_INPUT_SBE_MBE_SBE_MASK					0xFull
#define FXR_RXE2E_ERR_INFO_MC0_INPUT_SBE_MBE_SBE_SMASK					0x7800000000ull
#define FXR_RXE2E_ERR_INFO_MC0_INPUT_SBE_MBE_SBE_LAST_DOMAIN_SHIFT			33
#define FXR_RXE2E_ERR_INFO_MC0_INPUT_SBE_MBE_SBE_LAST_DOMAIN_MASK			0x3ull
#define FXR_RXE2E_ERR_INFO_MC0_INPUT_SBE_MBE_SBE_LAST_DOMAIN_SMASK			0x600000000ull
#define FXR_RXE2E_ERR_INFO_MC0_INPUT_SBE_MBE_SBE_LAST_SYNDROME_SHIFT			25
#define FXR_RXE2E_ERR_INFO_MC0_INPUT_SBE_MBE_SBE_LAST_SYNDROME_MASK			0xFFull
#define FXR_RXE2E_ERR_INFO_MC0_INPUT_SBE_MBE_SBE_LAST_SYNDROME_SMASK			0x1FE000000ull
#define FXR_RXE2E_ERR_INFO_MC0_INPUT_SBE_MBE_MBE_LAST_ADDRESS_SHIFT			18
#define FXR_RXE2E_ERR_INFO_MC0_INPUT_SBE_MBE_MBE_LAST_ADDRESS_MASK			0x7Full
#define FXR_RXE2E_ERR_INFO_MC0_INPUT_SBE_MBE_MBE_LAST_ADDRESS_SMASK			0x1FC0000ull
#define FXR_RXE2E_ERR_INFO_MC0_INPUT_SBE_MBE_MBE_COUNT_SHIFT				14
#define FXR_RXE2E_ERR_INFO_MC0_INPUT_SBE_MBE_MBE_COUNT_MASK				0xFull
#define FXR_RXE2E_ERR_INFO_MC0_INPUT_SBE_MBE_MBE_COUNT_SMASK				0x3C000ull
#define FXR_RXE2E_ERR_INFO_MC0_INPUT_SBE_MBE_MBE_SHIFT					10
#define FXR_RXE2E_ERR_INFO_MC0_INPUT_SBE_MBE_MBE_MASK					0xFull
#define FXR_RXE2E_ERR_INFO_MC0_INPUT_SBE_MBE_MBE_SMASK					0x3C00ull
#define FXR_RXE2E_ERR_INFO_MC0_INPUT_SBE_MBE_MBE_LAST_DOMAIN_SHIFT			8
#define FXR_RXE2E_ERR_INFO_MC0_INPUT_SBE_MBE_MBE_LAST_DOMAIN_MASK			0x3ull
#define FXR_RXE2E_ERR_INFO_MC0_INPUT_SBE_MBE_MBE_LAST_DOMAIN_SMASK			0x300ull
#define FXR_RXE2E_ERR_INFO_MC0_INPUT_SBE_MBE_MBE_LAST_SYNDROME_SHIFT			0
#define FXR_RXE2E_ERR_INFO_MC0_INPUT_SBE_MBE_MBE_LAST_SYNDROME_MASK			0xFFull
#define FXR_RXE2E_ERR_INFO_MC0_INPUT_SBE_MBE_MBE_LAST_SYNDROME_SMASK			0xFFull
/*
* Table #38 of fxr_top - RXE2E_ERR_INFO_MC1_INPUT_SBE_MBE
* Error Info for the #%%#mc1_input_fifo_sbe#%%# and #%%#mc1_input_fifo_mbe#%%# 
* events. There are 4 ecc domains: 3:0 cover data 255:192, 191:128, 127:64, 63:0 
* respectively. In case of simultaneous errors in more than 1 ecc domain, the 
* syndrome of the least significant ecc domain is what is saved.
*/
#define FXR_RXE2E_ERR_INFO_MC1_INPUT_SBE_MBE						(FXR_RX_E2E_CSRS + 0x000000000E20)
#define FXR_RXE2E_ERR_INFO_MC1_INPUT_SBE_MBE_RESETCSR					0x0000000000000000ull
#define FXR_RXE2E_ERR_INFO_MC1_INPUT_SBE_MBE_RESERVED_63_58_SHIFT			58
#define FXR_RXE2E_ERR_INFO_MC1_INPUT_SBE_MBE_RESERVED_63_58_MASK			0x3Full
#define FXR_RXE2E_ERR_INFO_MC1_INPUT_SBE_MBE_RESERVED_63_58_SMASK			0xFC00000000000000ull
#define FXR_RXE2E_ERR_INFO_MC1_INPUT_SBE_MBE_SBE_LAST_ADDRESS_SHIFT			51
#define FXR_RXE2E_ERR_INFO_MC1_INPUT_SBE_MBE_SBE_LAST_ADDRESS_MASK			0x7Full
#define FXR_RXE2E_ERR_INFO_MC1_INPUT_SBE_MBE_SBE_LAST_ADDRESS_SMASK			0x3F8000000000000ull
#define FXR_RXE2E_ERR_INFO_MC1_INPUT_SBE_MBE_SBE_COUNT_SHIFT				39
#define FXR_RXE2E_ERR_INFO_MC1_INPUT_SBE_MBE_SBE_COUNT_MASK				0xFFFull
#define FXR_RXE2E_ERR_INFO_MC1_INPUT_SBE_MBE_SBE_COUNT_SMASK				0x7FF8000000000ull
#define FXR_RXE2E_ERR_INFO_MC1_INPUT_SBE_MBE_SBE_SHIFT					35
#define FXR_RXE2E_ERR_INFO_MC1_INPUT_SBE_MBE_SBE_MASK					0xFull
#define FXR_RXE2E_ERR_INFO_MC1_INPUT_SBE_MBE_SBE_SMASK					0x7800000000ull
#define FXR_RXE2E_ERR_INFO_MC1_INPUT_SBE_MBE_SBE_LAST_DOMAIN_SHIFT			33
#define FXR_RXE2E_ERR_INFO_MC1_INPUT_SBE_MBE_SBE_LAST_DOMAIN_MASK			0x3ull
#define FXR_RXE2E_ERR_INFO_MC1_INPUT_SBE_MBE_SBE_LAST_DOMAIN_SMASK			0x600000000ull
#define FXR_RXE2E_ERR_INFO_MC1_INPUT_SBE_MBE_SBE_LAST_SYNDROME_SHIFT			25
#define FXR_RXE2E_ERR_INFO_MC1_INPUT_SBE_MBE_SBE_LAST_SYNDROME_MASK			0xFFull
#define FXR_RXE2E_ERR_INFO_MC1_INPUT_SBE_MBE_SBE_LAST_SYNDROME_SMASK			0x1FE000000ull
#define FXR_RXE2E_ERR_INFO_MC1_INPUT_SBE_MBE_MBE_LAST_ADDRESS_SHIFT			18
#define FXR_RXE2E_ERR_INFO_MC1_INPUT_SBE_MBE_MBE_LAST_ADDRESS_MASK			0x7Full
#define FXR_RXE2E_ERR_INFO_MC1_INPUT_SBE_MBE_MBE_LAST_ADDRESS_SMASK			0x1FC0000ull
#define FXR_RXE2E_ERR_INFO_MC1_INPUT_SBE_MBE_MBE_COUNT_SHIFT				14
#define FXR_RXE2E_ERR_INFO_MC1_INPUT_SBE_MBE_MBE_COUNT_MASK				0xFull
#define FXR_RXE2E_ERR_INFO_MC1_INPUT_SBE_MBE_MBE_COUNT_SMASK				0x3C000ull
#define FXR_RXE2E_ERR_INFO_MC1_INPUT_SBE_MBE_MBE_SHIFT					10
#define FXR_RXE2E_ERR_INFO_MC1_INPUT_SBE_MBE_MBE_MASK					0xFull
#define FXR_RXE2E_ERR_INFO_MC1_INPUT_SBE_MBE_MBE_SMASK					0x3C00ull
#define FXR_RXE2E_ERR_INFO_MC1_INPUT_SBE_MBE_MBE_LAST_DOMAIN_SHIFT			8
#define FXR_RXE2E_ERR_INFO_MC1_INPUT_SBE_MBE_MBE_LAST_DOMAIN_MASK			0x3ull
#define FXR_RXE2E_ERR_INFO_MC1_INPUT_SBE_MBE_MBE_LAST_DOMAIN_SMASK			0x300ull
#define FXR_RXE2E_ERR_INFO_MC1_INPUT_SBE_MBE_MBE_LAST_SYNDROME_SHIFT			0
#define FXR_RXE2E_ERR_INFO_MC1_INPUT_SBE_MBE_MBE_LAST_SYNDROME_MASK			0xFFull
#define FXR_RXE2E_ERR_INFO_MC1_INPUT_SBE_MBE_MBE_LAST_SYNDROME_SMASK			0xFFull
/*
* Table #39 of fxr_top - RXE2E_ERR_INFO_PSN_CACHE_TAG_SBE
* Error Info for the PSN Cache tag #%%#psn_cache_tag_sbe#%%# events. There are 8 
* ecc domains each domain covers two tag ways. tag_mem[543:0] = 
* {tag_ecc[7:0][7:0],tag_way_data[7:0][1:0][29:0]}
*/
#define FXR_RXE2E_ERR_INFO_PSN_CACHE_TAG_SBE						(FXR_RX_E2E_CSRS + 0x000000000E28)
#define FXR_RXE2E_ERR_INFO_PSN_CACHE_TAG_SBE_RESETCSR					0x0000000000000000ull
#define FXR_RXE2E_ERR_INFO_PSN_CACHE_TAG_SBE_RESERVED_63_42_SHIFT			42
#define FXR_RXE2E_ERR_INFO_PSN_CACHE_TAG_SBE_RESERVED_63_42_MASK			0x3FFFFFull
#define FXR_RXE2E_ERR_INFO_PSN_CACHE_TAG_SBE_RESERVED_63_42_SMASK			0xFFFFFC0000000000ull
#define FXR_RXE2E_ERR_INFO_PSN_CACHE_TAG_SBE_SBE_LAST_ADDRESS_SHIFT			31
#define FXR_RXE2E_ERR_INFO_PSN_CACHE_TAG_SBE_SBE_LAST_ADDRESS_MASK			0x7FFull
#define FXR_RXE2E_ERR_INFO_PSN_CACHE_TAG_SBE_SBE_LAST_ADDRESS_SMASK			0x3FF80000000ull
#define FXR_RXE2E_ERR_INFO_PSN_CACHE_TAG_SBE_SBE_COUNT_SHIFT				19
#define FXR_RXE2E_ERR_INFO_PSN_CACHE_TAG_SBE_SBE_COUNT_MASK				0xFFFull
#define FXR_RXE2E_ERR_INFO_PSN_CACHE_TAG_SBE_SBE_COUNT_SMASK				0x7FF80000ull
#define FXR_RXE2E_ERR_INFO_PSN_CACHE_TAG_SBE_SBE_SHIFT					11
#define FXR_RXE2E_ERR_INFO_PSN_CACHE_TAG_SBE_SBE_MASK					0xFFull
#define FXR_RXE2E_ERR_INFO_PSN_CACHE_TAG_SBE_SBE_SMASK					0x7F800ull
#define FXR_RXE2E_ERR_INFO_PSN_CACHE_TAG_SBE_SBE_LAST_DOMAIN_SHIFT			8
#define FXR_RXE2E_ERR_INFO_PSN_CACHE_TAG_SBE_SBE_LAST_DOMAIN_MASK			0x7ull
#define FXR_RXE2E_ERR_INFO_PSN_CACHE_TAG_SBE_SBE_LAST_DOMAIN_SMASK			0x700ull
#define FXR_RXE2E_ERR_INFO_PSN_CACHE_TAG_SBE_SBE_LAST_SYNDROME_SHIFT			0
#define FXR_RXE2E_ERR_INFO_PSN_CACHE_TAG_SBE_SBE_LAST_SYNDROME_MASK			0xFFull
#define FXR_RXE2E_ERR_INFO_PSN_CACHE_TAG_SBE_SBE_LAST_SYNDROME_SMASK			0xFFull
/*
* Table #40 of fxr_top - RXE2E_ERR_INFO_PSN_CACHE_TAG_MBE
* Error Info for the PSN Cache tag #%%#psn_cache_tag_mbe#%%# events. There are 8 
* ecc domains each domain covers two tag ways. tag_mem[543:0] = 
* {tag_ecc[7:0][7:0],tag_way_data[7:0][1:0][29:0]}
*/
#define FXR_RXE2E_ERR_INFO_PSN_CACHE_TAG_MBE						(FXR_RX_E2E_CSRS + 0x000000000E30)
#define FXR_RXE2E_ERR_INFO_PSN_CACHE_TAG_MBE_RESETCSR					0x0000000000000000ull
#define FXR_RXE2E_ERR_INFO_PSN_CACHE_TAG_MBE_RESERVED_63_34_SHIFT			34
#define FXR_RXE2E_ERR_INFO_PSN_CACHE_TAG_MBE_RESERVED_63_34_MASK			0x3FFFFFFFull
#define FXR_RXE2E_ERR_INFO_PSN_CACHE_TAG_MBE_RESERVED_63_34_SMASK			0xFFFFFFFC00000000ull
#define FXR_RXE2E_ERR_INFO_PSN_CACHE_TAG_MBE_MBE_LAST_ADDRESS_SHIFT			23
#define FXR_RXE2E_ERR_INFO_PSN_CACHE_TAG_MBE_MBE_LAST_ADDRESS_MASK			0x7FFull
#define FXR_RXE2E_ERR_INFO_PSN_CACHE_TAG_MBE_MBE_LAST_ADDRESS_SMASK			0x3FF800000ull
#define FXR_RXE2E_ERR_INFO_PSN_CACHE_TAG_MBE_MBE_COUNT_SHIFT				19
#define FXR_RXE2E_ERR_INFO_PSN_CACHE_TAG_MBE_MBE_COUNT_MASK				0xFull
#define FXR_RXE2E_ERR_INFO_PSN_CACHE_TAG_MBE_MBE_COUNT_SMASK				0x780000ull
#define FXR_RXE2E_ERR_INFO_PSN_CACHE_TAG_MBE_MBE_SHIFT					11
#define FXR_RXE2E_ERR_INFO_PSN_CACHE_TAG_MBE_MBE_MASK					0xFFull
#define FXR_RXE2E_ERR_INFO_PSN_CACHE_TAG_MBE_MBE_SMASK					0x7F800ull
#define FXR_RXE2E_ERR_INFO_PSN_CACHE_TAG_MBE_MBE_LAST_DOMAIN_SHIFT			8
#define FXR_RXE2E_ERR_INFO_PSN_CACHE_TAG_MBE_MBE_LAST_DOMAIN_MASK			0x7ull
#define FXR_RXE2E_ERR_INFO_PSN_CACHE_TAG_MBE_MBE_LAST_DOMAIN_SMASK			0x700ull
#define FXR_RXE2E_ERR_INFO_PSN_CACHE_TAG_MBE_MBE_LAST_SYNDROME_SHIFT			0
#define FXR_RXE2E_ERR_INFO_PSN_CACHE_TAG_MBE_MBE_LAST_SYNDROME_MASK			0xFFull
#define FXR_RXE2E_ERR_INFO_PSN_CACHE_TAG_MBE_MBE_LAST_SYNDROME_SMASK			0xFFull
/*
* Table #41 of fxr_top - RXE2E_ERR_INFO_PSN_CACHE_DATA_SBE_MBE
* Error Info for the PSN Cache Data #%%#psn_cache_data_sbe#%%# and 
* #%%#psn_cache_data_mbe#%%# events. There is no address associated with these. 
* 
*/
#define FXR_RXE2E_ERR_INFO_PSN_CACHE_DATA_SBE_MBE					(FXR_RX_E2E_CSRS + 0x000000000E38)
#define FXR_RXE2E_ERR_INFO_PSN_CACHE_DATA_SBE_MBE_RESETCSR				0x0000000000000000ull
#define FXR_RXE2E_ERR_INFO_PSN_CACHE_DATA_SBE_MBE_RESERVED_63_32_SHIFT			32
#define FXR_RXE2E_ERR_INFO_PSN_CACHE_DATA_SBE_MBE_RESERVED_63_32_MASK			0xFFFFFFFFull
#define FXR_RXE2E_ERR_INFO_PSN_CACHE_DATA_SBE_MBE_RESERVED_63_32_SMASK			0xFFFFFFFF00000000ull
#define FXR_RXE2E_ERR_INFO_PSN_CACHE_DATA_SBE_MBE_SBE_COUNT_SHIFT			20
#define FXR_RXE2E_ERR_INFO_PSN_CACHE_DATA_SBE_MBE_SBE_COUNT_MASK			0xFFFull
#define FXR_RXE2E_ERR_INFO_PSN_CACHE_DATA_SBE_MBE_SBE_COUNT_SMASK			0xFFF00000ull
#define FXR_RXE2E_ERR_INFO_PSN_CACHE_DATA_SBE_MBE_SBE_LAST_SYNDROME_SHIFT		12
#define FXR_RXE2E_ERR_INFO_PSN_CACHE_DATA_SBE_MBE_SBE_LAST_SYNDROME_MASK		0xFFull
#define FXR_RXE2E_ERR_INFO_PSN_CACHE_DATA_SBE_MBE_SBE_LAST_SYNDROME_SMASK		0xFF000ull
#define FXR_RXE2E_ERR_INFO_PSN_CACHE_DATA_SBE_MBE_MBE_COUNT_SHIFT			8
#define FXR_RXE2E_ERR_INFO_PSN_CACHE_DATA_SBE_MBE_MBE_COUNT_MASK			0xFull
#define FXR_RXE2E_ERR_INFO_PSN_CACHE_DATA_SBE_MBE_MBE_COUNT_SMASK			0xF00ull
#define FXR_RXE2E_ERR_INFO_PSN_CACHE_DATA_SBE_MBE_MBE_LAST_SYNDROME_SHIFT		0
#define FXR_RXE2E_ERR_INFO_PSN_CACHE_DATA_SBE_MBE_MBE_LAST_SYNDROME_MASK		0xFFull
#define FXR_RXE2E_ERR_INFO_PSN_CACHE_DATA_SBE_MBE_MBE_LAST_SYNDROME_SMASK		0xFFull
/*
* Table #42 of fxr_top - RXE2E_ERR_INFO_BIG_SCOREBOARD_SBE
* Error Info for the #%%#big_scoreboard_sbe#%%# events. There are 16 ecc 
* domains. big_scoreboard_mem[1149:0] = {ecc[15:0][7:0],data[15:0][63:0]}. Note 
* that data[15][63:62] is always written with 0. This reflects the big 
* scoreboard width is 1022, not 1024.
*/
#define FXR_RXE2E_ERR_INFO_BIG_SCOREBOARD_SBE						(FXR_RX_E2E_CSRS + 0x000000000E40)
#define FXR_RXE2E_ERR_INFO_BIG_SCOREBOARD_SBE_RESETCSR					0x0000000000000000ull
#define FXR_RXE2E_ERR_INFO_BIG_SCOREBOARD_SBE_RESERVED_63_50_SHIFT			50
#define FXR_RXE2E_ERR_INFO_BIG_SCOREBOARD_SBE_RESERVED_63_50_MASK			0x3FFFull
#define FXR_RXE2E_ERR_INFO_BIG_SCOREBOARD_SBE_RESERVED_63_50_SMASK			0xFFFC000000000000ull
#define FXR_RXE2E_ERR_INFO_BIG_SCOREBOARD_SBE_SBE_LAST_ADDRESS_SHIFT			40
#define FXR_RXE2E_ERR_INFO_BIG_SCOREBOARD_SBE_SBE_LAST_ADDRESS_MASK			0x3FFull
#define FXR_RXE2E_ERR_INFO_BIG_SCOREBOARD_SBE_SBE_LAST_ADDRESS_SMASK			0x3FF0000000000ull
#define FXR_RXE2E_ERR_INFO_BIG_SCOREBOARD_SBE_SBE_COUNT_SHIFT				28
#define FXR_RXE2E_ERR_INFO_BIG_SCOREBOARD_SBE_SBE_COUNT_MASK				0xFFFull
#define FXR_RXE2E_ERR_INFO_BIG_SCOREBOARD_SBE_SBE_COUNT_SMASK				0xFFF0000000ull
#define FXR_RXE2E_ERR_INFO_BIG_SCOREBOARD_SBE_SBE_SHIFT					12
#define FXR_RXE2E_ERR_INFO_BIG_SCOREBOARD_SBE_SBE_MASK					0xFFFFull
#define FXR_RXE2E_ERR_INFO_BIG_SCOREBOARD_SBE_SBE_SMASK					0xFFFF000ull
#define FXR_RXE2E_ERR_INFO_BIG_SCOREBOARD_SBE_SBE_LAST_DOMAIN_SHIFT			8
#define FXR_RXE2E_ERR_INFO_BIG_SCOREBOARD_SBE_SBE_LAST_DOMAIN_MASK			0xFull
#define FXR_RXE2E_ERR_INFO_BIG_SCOREBOARD_SBE_SBE_LAST_DOMAIN_SMASK			0xF00ull
#define FXR_RXE2E_ERR_INFO_BIG_SCOREBOARD_SBE_SBE_LAST_SYNDROME_SHIFT			0
#define FXR_RXE2E_ERR_INFO_BIG_SCOREBOARD_SBE_SBE_LAST_SYNDROME_MASK			0xFFull
#define FXR_RXE2E_ERR_INFO_BIG_SCOREBOARD_SBE_SBE_LAST_SYNDROME_SMASK			0xFFull
/*
* Table #43 of fxr_top - RXE2E_ERR_INFO_BIG_SCOREBOARD_MBE
* Error Info for the #%%#big_scoreboard_mbe#%%# events. There are 16 ecc 
* domains. big_scoreboard_mem[1149:0] = {ecc[15:0][7:0],data[15:0][63:0]}. Note 
* that data[15][63:62] is always written with 0. This reflects the big 
* scoreboard data width is 1022, not 1024.
*/
#define FXR_RXE2E_ERR_INFO_BIG_SCOREBOARD_MBE						(FXR_RX_E2E_CSRS + 0x000000000E48)
#define FXR_RXE2E_ERR_INFO_BIG_SCOREBOARD_MBE_RESETCSR					0x0000000000000000ull
#define FXR_RXE2E_ERR_INFO_BIG_SCOREBOARD_MBE_RESERVED_63_42_SHIFT			42
#define FXR_RXE2E_ERR_INFO_BIG_SCOREBOARD_MBE_RESERVED_63_42_MASK			0x3FFFFFull
#define FXR_RXE2E_ERR_INFO_BIG_SCOREBOARD_MBE_RESERVED_63_42_SMASK			0xFFFFFC0000000000ull
#define FXR_RXE2E_ERR_INFO_BIG_SCOREBOARD_MBE_MBE_LAST_ADDRESS_SHIFT			32
#define FXR_RXE2E_ERR_INFO_BIG_SCOREBOARD_MBE_MBE_LAST_ADDRESS_MASK			0x3FFull
#define FXR_RXE2E_ERR_INFO_BIG_SCOREBOARD_MBE_MBE_LAST_ADDRESS_SMASK			0x3FF00000000ull
#define FXR_RXE2E_ERR_INFO_BIG_SCOREBOARD_MBE_MBE_COUNT_SHIFT				28
#define FXR_RXE2E_ERR_INFO_BIG_SCOREBOARD_MBE_MBE_COUNT_MASK				0xFull
#define FXR_RXE2E_ERR_INFO_BIG_SCOREBOARD_MBE_MBE_COUNT_SMASK				0xF0000000ull
#define FXR_RXE2E_ERR_INFO_BIG_SCOREBOARD_MBE_MBE_SHIFT					12
#define FXR_RXE2E_ERR_INFO_BIG_SCOREBOARD_MBE_MBE_MASK					0xFFFFull
#define FXR_RXE2E_ERR_INFO_BIG_SCOREBOARD_MBE_MBE_SMASK					0xFFFF000ull
#define FXR_RXE2E_ERR_INFO_BIG_SCOREBOARD_MBE_MBE_LAST_DOMAIN_SHIFT			8
#define FXR_RXE2E_ERR_INFO_BIG_SCOREBOARD_MBE_MBE_LAST_DOMAIN_MASK			0xFull
#define FXR_RXE2E_ERR_INFO_BIG_SCOREBOARD_MBE_MBE_LAST_DOMAIN_SMASK			0xF00ull
#define FXR_RXE2E_ERR_INFO_BIG_SCOREBOARD_MBE_MBE_LAST_SYNDROME_SHIFT			0
#define FXR_RXE2E_ERR_INFO_BIG_SCOREBOARD_MBE_MBE_LAST_SYNDROME_MASK			0xFFull
#define FXR_RXE2E_ERR_INFO_BIG_SCOREBOARD_MBE_MBE_LAST_SYNDROME_SMASK			0xFFull
/*
* Table #44 of fxr_top - RXE2E_ERR_INFO_CRC
* Error Info for the #%%#MC0 crc#%%# and #%%#MC1 crc#%%# events.
*/
#define FXR_RXE2E_ERR_INFO_CRC								(FXR_RX_E2E_CSRS + 0x000000000E50)
#define FXR_RXE2E_ERR_INFO_CRC_RESETCSR							0x0000000000000000ull
#define FXR_RXE2E_ERR_INFO_CRC_RESERVED_63_32_SHIFT					32
#define FXR_RXE2E_ERR_INFO_CRC_RESERVED_63_32_MASK					0xFFFFFFFFull
#define FXR_RXE2E_ERR_INFO_CRC_RESERVED_63_32_SMASK					0xFFFFFFFF00000000ull
#define FXR_RXE2E_ERR_INFO_CRC_MC1_CRC_CNT_SHIFT					16
#define FXR_RXE2E_ERR_INFO_CRC_MC1_CRC_CNT_MASK						0xFFFFull
#define FXR_RXE2E_ERR_INFO_CRC_MC1_CRC_CNT_SMASK					0xFFFF0000ull
#define FXR_RXE2E_ERR_INFO_CRC_MC0_CRC_CNT_SHIFT					0
#define FXR_RXE2E_ERR_INFO_CRC_MC0_CRC_CNT_MASK						0xFFFFull
#define FXR_RXE2E_ERR_INFO_CRC_MC0_CRC_CNT_SMASK					0xFFFFull
/*
* Table #45 of fxr_top - RXE2E_ERR_INJECT_SBE_MBE
* Error Injection for the various sbe/mbe fields. Setting a single bit will 
* cause an sbe in the ecc field and cause that bit to be flipped, no data bits 
* will be flipped. Setting 2 bits will cause an mbe. An even number of bits > 2 
* may or may not cause an mbe. Setting an odd number of bits that is a legal 
* syndrome for that data width will cause an sbe and the corresponding data bit 
* to be flipped. See shrtl_ecc_correct.sv for legal syndromes for each data 
* width.
*/
#define FXR_RXE2E_ERR_INJECT_SBE_MBE							(FXR_RX_E2E_CSRS + 0x000000000E58)
#define FXR_RXE2E_ERR_INJECT_SBE_MBE_RESETCSR						0x0000000000000000ull
#define FXR_RXE2E_ERR_INJECT_SBE_MBE_RESERVED_63_56_SHIFT				56
#define FXR_RXE2E_ERR_INJECT_SBE_MBE_RESERVED_63_56_MASK				0xFFull
#define FXR_RXE2E_ERR_INJECT_SBE_MBE_RESERVED_63_56_SMASK				0xFF00000000000000ull
#define FXR_RXE2E_ERR_INJECT_SBE_MBE_BIG_SCOREBOARD_ERR_INJ_ENABLE_SHIFT		55
#define FXR_RXE2E_ERR_INJECT_SBE_MBE_BIG_SCOREBOARD_ERR_INJ_ENABLE_MASK			0x1ull
#define FXR_RXE2E_ERR_INJECT_SBE_MBE_BIG_SCOREBOARD_ERR_INJ_ENABLE_SMASK		0x80000000000000ull
#define FXR_RXE2E_ERR_INJECT_SBE_MBE_BIG_SCOREBOARD_ERR_INJ_DOMAIN_SHIFT		51
#define FXR_RXE2E_ERR_INJECT_SBE_MBE_BIG_SCOREBOARD_ERR_INJ_DOMAIN_MASK			0xFull
#define FXR_RXE2E_ERR_INJECT_SBE_MBE_BIG_SCOREBOARD_ERR_INJ_DOMAIN_SMASK		0x78000000000000ull
#define FXR_RXE2E_ERR_INJECT_SBE_MBE_BIG_SCOREBOARD_ERR_INJ_MASK_SHIFT			43
#define FXR_RXE2E_ERR_INJECT_SBE_MBE_BIG_SCOREBOARD_ERR_INJ_MASK_MASK			0xFFull
#define FXR_RXE2E_ERR_INJECT_SBE_MBE_BIG_SCOREBOARD_ERR_INJ_MASK_SMASK			0x7F80000000000ull
#define FXR_RXE2E_ERR_INJECT_SBE_MBE_PSN_CACHE_DATA_ERR_INJ_ENABLE_SHIFT		42
#define FXR_RXE2E_ERR_INJECT_SBE_MBE_PSN_CACHE_DATA_ERR_INJ_ENABLE_MASK			0x1ull
#define FXR_RXE2E_ERR_INJECT_SBE_MBE_PSN_CACHE_DATA_ERR_INJ_ENABLE_SMASK		0x40000000000ull
#define FXR_RXE2E_ERR_INJECT_SBE_MBE_PSN_CACHE_DATA_ERR_INJ_MASK_SHIFT			34
#define FXR_RXE2E_ERR_INJECT_SBE_MBE_PSN_CACHE_DATA_ERR_INJ_MASK_MASK			0xFFull
#define FXR_RXE2E_ERR_INJECT_SBE_MBE_PSN_CACHE_DATA_ERR_INJ_MASK_SMASK			0x3FC00000000ull
#define FXR_RXE2E_ERR_INJECT_SBE_MBE_PSN_CACHE_TAG_ERR_INJ_ENABLE_SHIFT			33
#define FXR_RXE2E_ERR_INJECT_SBE_MBE_PSN_CACHE_TAG_ERR_INJ_ENABLE_MASK			0x1ull
#define FXR_RXE2E_ERR_INJECT_SBE_MBE_PSN_CACHE_TAG_ERR_INJ_ENABLE_SMASK			0x200000000ull
#define FXR_RXE2E_ERR_INJECT_SBE_MBE_PSN_CACHE_TAG_ERR_INJ_DOMAIN_SHIFT			30
#define FXR_RXE2E_ERR_INJECT_SBE_MBE_PSN_CACHE_TAG_ERR_INJ_DOMAIN_MASK			0x7ull
#define FXR_RXE2E_ERR_INJECT_SBE_MBE_PSN_CACHE_TAG_ERR_INJ_DOMAIN_SMASK			0x1C0000000ull
#define FXR_RXE2E_ERR_INJECT_SBE_MBE_PSN_CACHE_TAG_ERR_INJ_MASK_SHIFT			22
#define FXR_RXE2E_ERR_INJECT_SBE_MBE_PSN_CACHE_TAG_ERR_INJ_MASK_MASK			0xFFull
#define FXR_RXE2E_ERR_INJECT_SBE_MBE_PSN_CACHE_TAG_ERR_INJ_MASK_SMASK			0x3FC00000ull
#define FXR_RXE2E_ERR_INJECT_SBE_MBE_MC1_INPUT_FIFO_ERR_INJ_ENABLE_SHIFT		21
#define FXR_RXE2E_ERR_INJECT_SBE_MBE_MC1_INPUT_FIFO_ERR_INJ_ENABLE_MASK			0x1ull
#define FXR_RXE2E_ERR_INJECT_SBE_MBE_MC1_INPUT_FIFO_ERR_INJ_ENABLE_SMASK		0x200000ull
#define FXR_RXE2E_ERR_INJECT_SBE_MBE_MC1_INPUT_FIFO_ERR_INJ_DOMAIN_SHIFT		19
#define FXR_RXE2E_ERR_INJECT_SBE_MBE_MC1_INPUT_FIFO_ERR_INJ_DOMAIN_MASK			0x3ull
#define FXR_RXE2E_ERR_INJECT_SBE_MBE_MC1_INPUT_FIFO_ERR_INJ_DOMAIN_SMASK		0x180000ull
#define FXR_RXE2E_ERR_INJECT_SBE_MBE_MC1_INPUT_FIFO_ERR_INJ_MASK_SHIFT			11
#define FXR_RXE2E_ERR_INJECT_SBE_MBE_MC1_INPUT_FIFO_ERR_INJ_MASK_MASK			0xFFull
#define FXR_RXE2E_ERR_INJECT_SBE_MBE_MC1_INPUT_FIFO_ERR_INJ_MASK_SMASK			0x7F800ull
#define FXR_RXE2E_ERR_INJECT_SBE_MBE_MC0_INPUT_FIFO_ERR_INJ_ENABLE_SHIFT		10
#define FXR_RXE2E_ERR_INJECT_SBE_MBE_MC0_INPUT_FIFO_ERR_INJ_ENABLE_MASK			0x1ull
#define FXR_RXE2E_ERR_INJECT_SBE_MBE_MC0_INPUT_FIFO_ERR_INJ_ENABLE_SMASK		0x400ull
#define FXR_RXE2E_ERR_INJECT_SBE_MBE_MC0_INPUT_FIFO_ERR_INJ_DOMAIN_SHIFT		8
#define FXR_RXE2E_ERR_INJECT_SBE_MBE_MC0_INPUT_FIFO_ERR_INJ_DOMAIN_MASK			0x3ull
#define FXR_RXE2E_ERR_INJECT_SBE_MBE_MC0_INPUT_FIFO_ERR_INJ_DOMAIN_SMASK		0x300ull
#define FXR_RXE2E_ERR_INJECT_SBE_MBE_MC0_INPUT_FIFO_ERR_INJ_MASK_SHIFT			0
#define FXR_RXE2E_ERR_INJECT_SBE_MBE_MC0_INPUT_FIFO_ERR_INJ_MASK_MASK			0xFFull
#define FXR_RXE2E_ERR_INJECT_SBE_MBE_MC0_INPUT_FIFO_ERR_INJ_MASK_SMASK			0xFFull
/*
* Table #46 of fxr_top - RXE2E_ERR_INJECT_LINK
* This CSR provides a mechanism for injecting link errors in RxE2E. Every valid 
* flit on an unmasked MC/TC will be a candidate for error injection. If error 
* injection is valid, LM framing error status is force reported to RxHP which 
* eventually drops the packet.
*/
#define FXR_RXE2E_ERR_INJECT_LINK							(FXR_RX_E2E_CSRS + 0x000000000E60)
#define FXR_RXE2E_ERR_INJECT_LINK_RESETCSR						0x0000000000000000ull
#define FXR_RXE2E_ERR_INJECT_LINK_RESERVED_63_11_SHIFT					11
#define FXR_RXE2E_ERR_INJECT_LINK_RESERVED_63_11_MASK					0x1FFFFFFFFFFFFFull
#define FXR_RXE2E_ERR_INJECT_LINK_RESERVED_63_11_SMASK					0xFFFFFFFFFFFFF800ull
#define FXR_RXE2E_ERR_INJECT_LINK_AUTO_DISARM_SHIFT					10
#define FXR_RXE2E_ERR_INJECT_LINK_AUTO_DISARM_MASK					0x1ull
#define FXR_RXE2E_ERR_INJECT_LINK_AUTO_DISARM_SMASK					0x400ull
#define FXR_RXE2E_ERR_INJECT_LINK_DONE_SHIFT						9
#define FXR_RXE2E_ERR_INJECT_LINK_DONE_MASK						0x1ull
#define FXR_RXE2E_ERR_INJECT_LINK_DONE_SMASK						0x200ull
#define FXR_RXE2E_ERR_INJECT_LINK_ARMED_SHIFT						8
#define FXR_RXE2E_ERR_INJECT_LINK_ARMED_MASK						0x1ull
#define FXR_RXE2E_ERR_INJECT_LINK_ARMED_SMASK						0x100ull
#define FXR_RXE2E_ERR_INJECT_LINK_MCTC_MASK_SHIFT					0
#define FXR_RXE2E_ERR_INJECT_LINK_MCTC_MASK_MASK					0xFFull
#define FXR_RXE2E_ERR_INJECT_LINK_MCTC_MASK_SMASK					0xFFull
/*
* Table #47 of fxr_top - RXE2E_DBG_PSN_CACHE_TAG_WAY_ENABLE
* These bits enable the 16 PSN Cache Tag Ways for filling and evicting. Set bits 
* to 0 to remove them from being an evict or fill candidate. For example, 
* setting to 16'h3 will only enable ways 1 and 0. This will stress the cache 
* causing more evicts and fills. This can be useful for testing the cache. Every 
* bit cleared will decrease the cache capacity by 1/16th. Any valid cache 
* entries that are in a disabled way will be invisible so another request for 
* that entry will result in a fill from memory, with possibly stale data, to one 
* of the enabled ways.
*/
#define FXR_RXE2E_DBG_PSN_CACHE_TAG_WAY_ENABLE						(FXR_RX_E2E_CSRS + 0x000000000F00)
#define FXR_RXE2E_DBG_PSN_CACHE_TAG_WAY_ENABLE_RESETCSR					0x000000000000FFFFull
#define FXR_RXE2E_DBG_PSN_CACHE_TAG_WAY_ENABLE_RESERVED_63_16_SHIFT			16
#define FXR_RXE2E_DBG_PSN_CACHE_TAG_WAY_ENABLE_RESERVED_63_16_MASK			0xFFFFFFFFFFFFull
#define FXR_RXE2E_DBG_PSN_CACHE_TAG_WAY_ENABLE_RESERVED_63_16_SMASK			0xFFFFFFFFFFFF0000ull
#define FXR_RXE2E_DBG_PSN_CACHE_TAG_WAY_ENABLE_WAY_ENABLE_SHIFT				0
#define FXR_RXE2E_DBG_PSN_CACHE_TAG_WAY_ENABLE_WAY_ENABLE_MASK				0xFFFFull
#define FXR_RXE2E_DBG_PSN_CACHE_TAG_WAY_ENABLE_WAY_ENABLE_SMASK				0xFFFFull
/*
* Table #48 of fxr_top - RXE2E_DBG_BIG_SCOREBOARD_ACCESS_ADDR
* This is an RXE2E debug CSR. It allows indirect access to the Big Scoreboard. 
* This can not be written to during normal operation. This register is for debug 
* use only.  The data for the read or write to the big scoreboard  is contained 
* in#%%#RXE2E_DBG_BIG_SCOREBOARD_ACCESS_DATA#%%#. E2E logic will generate the 
* ecc for writes. For writes, write #%%#RXE2E_DBG_BIG_SCOREBOARD_ACCESS_DATA#%%# 
* before writing this register. For reads,
*/
#define FXR_RXE2E_DBG_BIG_SCOREBOARD_ACCESS_ADDR					(FXR_RX_E2E_CSRS + 0x000000000F08)
#define FXR_RXE2E_DBG_BIG_SCOREBOARD_ACCESS_ADDR_RESETCSR				0x0000000000000000ull
#define FXR_RXE2E_DBG_BIG_SCOREBOARD_ACCESS_ADDR_BUSY_SHIFT				63
#define FXR_RXE2E_DBG_BIG_SCOREBOARD_ACCESS_ADDR_BUSY_MASK				0x1ull
#define FXR_RXE2E_DBG_BIG_SCOREBOARD_ACCESS_ADDR_BUSY_SMASK				0x8000000000000000ull
#define FXR_RXE2E_DBG_BIG_SCOREBOARD_ACCESS_ADDR_WRITE_SHIFT				62
#define FXR_RXE2E_DBG_BIG_SCOREBOARD_ACCESS_ADDR_WRITE_MASK				0x1ull
#define FXR_RXE2E_DBG_BIG_SCOREBOARD_ACCESS_ADDR_WRITE_SMASK				0x4000000000000000ull
#define FXR_RXE2E_DBG_BIG_SCOREBOARD_ACCESS_ADDR_RESERVED_61_10_SHIFT			10
#define FXR_RXE2E_DBG_BIG_SCOREBOARD_ACCESS_ADDR_RESERVED_61_10_MASK			0xFFFFFFFFFFFFFull
#define FXR_RXE2E_DBG_BIG_SCOREBOARD_ACCESS_ADDR_RESERVED_61_10_SMASK			0x3FFFFFFFFFFFFC00ull
#define FXR_RXE2E_DBG_BIG_SCOREBOARD_ACCESS_ADDR_ADDRESS_SHIFT				0
#define FXR_RXE2E_DBG_BIG_SCOREBOARD_ACCESS_ADDR_ADDRESS_MASK				0x3FFull
#define FXR_RXE2E_DBG_BIG_SCOREBOARD_ACCESS_ADDR_ADDRESS_SMASK				0x3FFull
/*
* Table #49 of fxr_top - RXE2E_DBG_BIG_SCOREBOARD_ACCESS_DATA
* This is an RXE2E debug CSR. It allows indirect access to the Big Scoreboard. 
* This register is for debug use only. Note that this register is 1023 bits 
* wide. This register is written before doing a write and read after doing a 
* read as defined by #%%#RXE2E_DBG_BIG_SCOREBOARD_ACCESS_ADDR#%%#. Note 
* big_data[15][63] is always read and written as 0 by E2E logic.
*/
#define FXR_RXE2E_DBG_BIG_SCOREBOARD_ACCESS_DATA					(FXR_RX_E2E_CSRS + 0x000000000F10)
#define FXR_RXE2E_DBG_BIG_SCOREBOARD_ACCESS_DATA_RESETCSR				0x0000000000000000ull
#define FXR_RXE2E_DBG_BIG_SCOREBOARD_ACCESS_DATA_BIG_DATA_SHIFT				0
#define FXR_RXE2E_DBG_BIG_SCOREBOARD_ACCESS_DATA_BIG_DATA_MASK				0xFFFFFFFFFFFFFFFFull
#define FXR_RXE2E_DBG_BIG_SCOREBOARD_ACCESS_DATA_BIG_DATA_SMASK				0xFFFFFFFFFFFFFFFFull
/*
* Table #50 of fxr_top - RXE2E_DBG_MC0_0_PKT_CNTR_FLIT_MATCH
* This is an RXE2E debug CSR. These are the flit match bits for MC0 Pkt CNTR 0. 
* Note that this register is 256 bits wide. Refer to StormLake spec #%%#Section 
* 10.9.6, 'Packet Formats'#%%# for writing this csr.
*/
#define FXR_RXE2E_DBG_MC0_0_PKT_CNTR_FLIT_MATCH						(FXR_RX_E2E_CSRS + 0x000000001000)
#define FXR_RXE2E_DBG_MC0_0_PKT_CNTR_FLIT_MATCH_RESETCSR				0x0000000000000000ull
#define FXR_RXE2E_DBG_MC0_0_PKT_CNTR_FLIT_MATCH_MATCH_SHIFT				0
#define FXR_RXE2E_DBG_MC0_0_PKT_CNTR_FLIT_MATCH_MATCH_MASK				0xFFFFFFFFFFFFFFFFull
#define FXR_RXE2E_DBG_MC0_0_PKT_CNTR_FLIT_MATCH_MATCH_SMASK				0xFFFFFFFFFFFFFFFFull
/*
* Table #51 of fxr_top - RXE2E_DBG_MC0_0_PKT_CNTR_FLIT_MASK
* This is an RXE2E debug CSR. These are the flit mask bits for MC0 Pkt CNTR 0. 
* Note that this register is 256 bits wide. Refer to StormLake spec #%%#Section 
* 10.9.6, 'Packet Formats'#%%# for writing this csr.
*/
#define FXR_RXE2E_DBG_MC0_0_PKT_CNTR_FLIT_MASK						(FXR_RX_E2E_CSRS + 0x000000001100)
#define FXR_RXE2E_DBG_MC0_0_PKT_CNTR_FLIT_MASK_RESETCSR					0x0000000000000000ull
#define FXR_RXE2E_DBG_MC0_0_PKT_CNTR_FLIT_MASK_MASK_SHIFT				0
#define FXR_RXE2E_DBG_MC0_0_PKT_CNTR_FLIT_MASK_MASK_MASK				0xFFFFFFFFFFFFFFFFull
#define FXR_RXE2E_DBG_MC0_0_PKT_CNTR_FLIT_MASK_MASK_SMASK				0xFFFFFFFFFFFFFFFFull
/*
* Table #52 of fxr_top - RXE2E_DBG_MC0_1_PKT_CNTR_FLIT_MATCH
* This is an RXE2E debug CSR. These are the flit match bits for MC0 Pkt CNTR 1. 
* Note that this register is 256 bits wide. Refer to StormLake spec #%%#Section 
* 10.9.6, 'Packet Formats'#%%# for writing this csr.
*/
#define FXR_RXE2E_DBG_MC0_1_PKT_CNTR_FLIT_MATCH						(FXR_RX_E2E_CSRS + 0x000000001200)
#define FXR_RXE2E_DBG_MC0_1_PKT_CNTR_FLIT_MATCH_RESETCSR				0x0000000000000000ull
#define FXR_RXE2E_DBG_MC0_1_PKT_CNTR_FLIT_MATCH_MATCH_SHIFT				0
#define FXR_RXE2E_DBG_MC0_1_PKT_CNTR_FLIT_MATCH_MATCH_MASK				0xFFFFFFFFFFFFFFFFull
#define FXR_RXE2E_DBG_MC0_1_PKT_CNTR_FLIT_MATCH_MATCH_SMASK				0xFFFFFFFFFFFFFFFFull
/*
* Table #53 of fxr_top - RXE2E_DBG_MC0_1_PKT_CNTR_FLIT_MASK
* This is an RXE2E debug CSR. These are the flit mask bits for MC0 Pkt CNTR 1. 
* Note that this register is 256 bits wide. Refer to StormLake spec #%%#Section 
* 10.9.6, 'Packet Formats'#%%# for writing this csr.
*/
#define FXR_RXE2E_DBG_MC0_1_PKT_CNTR_FLIT_MASK						(FXR_RX_E2E_CSRS + 0x000000001300)
#define FXR_RXE2E_DBG_MC0_1_PKT_CNTR_FLIT_MASK_RESETCSR					0x0000000000000000ull
#define FXR_RXE2E_DBG_MC0_1_PKT_CNTR_FLIT_MASK_MASK_SHIFT				0
#define FXR_RXE2E_DBG_MC0_1_PKT_CNTR_FLIT_MASK_MASK_MASK				0xFFFFFFFFFFFFFFFFull
#define FXR_RXE2E_DBG_MC0_1_PKT_CNTR_FLIT_MASK_MASK_SMASK				0xFFFFFFFFFFFFFFFFull
/*
* Table #54 of fxr_top - RXE2E_DBG_MC0_2_PKT_CNTR_FLIT_MATCH
* This is an RXE2E debug CSR. These are the flit match bits for MC0 Pkt CNTR 2. 
* Note that this register is 256 bits wide. Refer to StormLake spec #%%#Section 
* 10.9.6, 'Packet Formats'#%%# for writing this csr.
*/
#define FXR_RXE2E_DBG_MC0_2_PKT_CNTR_FLIT_MATCH						(FXR_RX_E2E_CSRS + 0x000000001400)
#define FXR_RXE2E_DBG_MC0_2_PKT_CNTR_FLIT_MATCH_RESETCSR				0x0000000000000000ull
#define FXR_RXE2E_DBG_MC0_2_PKT_CNTR_FLIT_MATCH_MATCH_SHIFT				0
#define FXR_RXE2E_DBG_MC0_2_PKT_CNTR_FLIT_MATCH_MATCH_MASK				0xFFFFFFFFFFFFFFFFull
#define FXR_RXE2E_DBG_MC0_2_PKT_CNTR_FLIT_MATCH_MATCH_SMASK				0xFFFFFFFFFFFFFFFFull
/*
* Table #55 of fxr_top - RXE2E_DBG_MC0_2_PKT_CNTR_FLIT_MASK
* 
*/
#define FXR_RXE2E_DBG_MC0_2_PKT_CNTR_FLIT_MASK						(FXR_RX_E2E_CSRS + 0x000000001500)
#define FXR_RXE2E_DBG_MC0_2_PKT_CNTR_FLIT_MASK_RESETCSR					0x0000000000000000ull
#define FXR_RXE2E_DBG_MC0_2_PKT_CNTR_FLIT_MASK_MASK_SHIFT				0
#define FXR_RXE2E_DBG_MC0_2_PKT_CNTR_FLIT_MASK_MASK_MASK				0xFFFFFFFFFFFFFFFFull
#define FXR_RXE2E_DBG_MC0_2_PKT_CNTR_FLIT_MASK_MASK_SMASK				0xFFFFFFFFFFFFFFFFull
/*
* Table #56 of fxr_top - RXE2E_DBG_MC0_3_PKT_CNTR_FLIT_MATCH
* This is an RXE2E debug CSR. These are the flit match bits for MC0 Pkt CNTR 3. 
* Note that this register is 256 bits wide. Refer to StormLake spec #%%#Section 
* 10.9.6, 'Packet Formats'#%%# for writing this csr.
*/
#define FXR_RXE2E_DBG_MC0_3_PKT_CNTR_FLIT_MATCH						(FXR_RX_E2E_CSRS + 0x000000001600)
#define FXR_RXE2E_DBG_MC0_3_PKT_CNTR_FLIT_MATCH_RESETCSR				0x0000000000000000ull
#define FXR_RXE2E_DBG_MC0_3_PKT_CNTR_FLIT_MATCH_MATCH_SHIFT				0
#define FXR_RXE2E_DBG_MC0_3_PKT_CNTR_FLIT_MATCH_MATCH_MASK				0xFFFFFFFFFFFFFFFFull
#define FXR_RXE2E_DBG_MC0_3_PKT_CNTR_FLIT_MATCH_MATCH_SMASK				0xFFFFFFFFFFFFFFFFull
/*
* Table #57 of fxr_top - RXE2E_DBG_MC0_3_PKT_CNTR_FLIT_MASK
* This is an RXE2E debug CSR. These are the flit mask bits for MC0 Pkt CNTR 3. 
* Note that this register is 256 bits wide. Refer to StormLake spec #%%#Section 
* 10.9.6, 'Packet Formats'#%%# for writing this csr.
*/
#define FXR_RXE2E_DBG_MC0_3_PKT_CNTR_FLIT_MASK						(FXR_RX_E2E_CSRS + 0x000000001700)
#define FXR_RXE2E_DBG_MC0_3_PKT_CNTR_FLIT_MASK_RESETCSR					0x0000000000000000ull
#define FXR_RXE2E_DBG_MC0_3_PKT_CNTR_FLIT_MASK_MASK_SHIFT				0
#define FXR_RXE2E_DBG_MC0_3_PKT_CNTR_FLIT_MASK_MASK_MASK				0xFFFFFFFFFFFFFFFFull
#define FXR_RXE2E_DBG_MC0_3_PKT_CNTR_FLIT_MASK_MASK_SMASK				0xFFFFFFFFFFFFFFFFull
/*
* Table #58 of fxr_top - RXE2E_DBG_MC1_0_PKT_CNTR_FLIT_MATCH
* This is an RXE2E debug CSR. These are the flit match bits for MC1 Pkt CNTR 0. 
* Note that this register is 256 bits wide. Refer to StormLake spec #%%#Section 
* 10.9.6, 'Packet Formats'#%%# for writing this csr.
*/
#define FXR_RXE2E_DBG_MC1_0_PKT_CNTR_FLIT_MATCH						(FXR_RX_E2E_CSRS + 0x000000001800)
#define FXR_RXE2E_DBG_MC1_0_PKT_CNTR_FLIT_MATCH_RESETCSR				0x0000000000000000ull
#define FXR_RXE2E_DBG_MC1_0_PKT_CNTR_FLIT_MATCH_MATCH_SHIFT				0
#define FXR_RXE2E_DBG_MC1_0_PKT_CNTR_FLIT_MATCH_MATCH_MASK				0xFFFFFFFFFFFFFFFFull
#define FXR_RXE2E_DBG_MC1_0_PKT_CNTR_FLIT_MATCH_MATCH_SMASK				0xFFFFFFFFFFFFFFFFull
/*
* Table #59 of fxr_top - RXE2E_DBG_MC1_0_PKT_CNTR_FLIT_MASK
* This is an RXE2E debug CSR. These are the flit mask bits for MC1 Pkt CNTR 0. 
* Note that this register is 256 bits wide. Refer to StormLake spec #%%#Section 
* 10.9.6, 'Packet Formats'#%%# for writing this csr.
*/
#define FXR_RXE2E_DBG_MC1_0_PKT_CNTR_FLIT_MASK						(FXR_RX_E2E_CSRS + 0x000000001900)
#define FXR_RXE2E_DBG_MC1_0_PKT_CNTR_FLIT_MASK_RESETCSR					0x0000000000000000ull
#define FXR_RXE2E_DBG_MC1_0_PKT_CNTR_FLIT_MASK_MASK_SHIFT				0
#define FXR_RXE2E_DBG_MC1_0_PKT_CNTR_FLIT_MASK_MASK_MASK				0xFFFFFFFFFFFFFFFFull
#define FXR_RXE2E_DBG_MC1_0_PKT_CNTR_FLIT_MASK_MASK_SMASK				0xFFFFFFFFFFFFFFFFull
/*
* Table #60 of fxr_top - RXE2E_DBG_MC1_1_PKT_CNTR_FLIT_MATCH
* This is an RXE2E debug CSR. These are the flit match bits for MC1 Pkt CNTR 1. 
* Note that this register is 256 bits wide. Refer to StormLake spec #%%#Section 
* 10.9.6, 'Packet Formats'#%%# for writing this csr.
*/
#define FXR_RXE2E_DBG_MC1_1_PKT_CNTR_FLIT_MATCH						(FXR_RX_E2E_CSRS + 0x000000001A00)
#define FXR_RXE2E_DBG_MC1_1_PKT_CNTR_FLIT_MATCH_RESETCSR				0x0000000000000000ull
#define FXR_RXE2E_DBG_MC1_1_PKT_CNTR_FLIT_MATCH_MATCH_SHIFT				0
#define FXR_RXE2E_DBG_MC1_1_PKT_CNTR_FLIT_MATCH_MATCH_MASK				0xFFFFFFFFFFFFFFFFull
#define FXR_RXE2E_DBG_MC1_1_PKT_CNTR_FLIT_MATCH_MATCH_SMASK				0xFFFFFFFFFFFFFFFFull
/*
* Table #61 of fxr_top - RXE2E_DBG_MC1_1_PKT_CNTR_FLIT_MASK
* This is an RXE2E debug CSR. These are the flit mask bits for MC1 Pkt CNTR 1. 
* Note that this register is 256 bits wide. Refer to StormLake spec #%%#Section 
* 10.9.6, 'Packet Formats'#%%# for writing this csr.
*/
#define FXR_RXE2E_DBG_MC1_1_PKT_CNTR_FLIT_MASK						(FXR_RX_E2E_CSRS + 0x000000001B00)
#define FXR_RXE2E_DBG_MC1_1_PKT_CNTR_FLIT_MASK_RESETCSR					0x0000000000000000ull
#define FXR_RXE2E_DBG_MC1_1_PKT_CNTR_FLIT_MASK_MASK_SHIFT				0
#define FXR_RXE2E_DBG_MC1_1_PKT_CNTR_FLIT_MASK_MASK_MASK				0xFFFFFFFFFFFFFFFFull
#define FXR_RXE2E_DBG_MC1_1_PKT_CNTR_FLIT_MASK_MASK_SMASK				0xFFFFFFFFFFFFFFFFull
/*
* Table #62 of fxr_top - RXE2E_DBG_MC0_PKT_CNTR_CTL
* This is an RXE2E debug CSR. These are other match/mask fields for the MC0 pkt 
* cntrs as well as controlling how pkt cntrs can be ganged to match/mask on 
* different flits of the packet. Ganging allows something like pkt cntr 0 
* match/masks on flit 0 and enabling pkt cntr 1 to match/mask on flit 
* 1.
*/
#define FXR_RXE2E_DBG_MC0_PKT_CNTR_CTL							(FXR_RX_E2E_CSRS + 0x000000001C00)
#define FXR_RXE2E_DBG_MC0_PKT_CNTR_CTL_RESETCSR						0x0000000000000000ull
#define FXR_RXE2E_DBG_MC0_PKT_CNTR_CTL_RESERVED_63_27_SHIFT				27
#define FXR_RXE2E_DBG_MC0_PKT_CNTR_CTL_RESERVED_63_27_MASK				0x1FFFFFFFFFull
#define FXR_RXE2E_DBG_MC0_PKT_CNTR_CTL_RESERVED_63_27_SMASK				0xFFFFFFFFF8000000ull
#define FXR_RXE2E_DBG_MC0_PKT_CNTR_CTL_PKT_CNTR_CTL_SHIFT				24
#define FXR_RXE2E_DBG_MC0_PKT_CNTR_CTL_PKT_CNTR_CTL_MASK				0x7ull
#define FXR_RXE2E_DBG_MC0_PKT_CNTR_CTL_PKT_CNTR_CTL_SMASK				0x7000000ull
#define FXR_RXE2E_DBG_MC0_PKT_CNTR_CTL_FLIT_INDEX_3_SHIFT				22
#define FXR_RXE2E_DBG_MC0_PKT_CNTR_CTL_FLIT_INDEX_3_MASK				0x3ull
#define FXR_RXE2E_DBG_MC0_PKT_CNTR_CTL_FLIT_INDEX_3_SMASK				0xC00000ull
#define FXR_RXE2E_DBG_MC0_PKT_CNTR_CTL_FLIT_INDEX_2_SHIFT				20
#define FXR_RXE2E_DBG_MC0_PKT_CNTR_CTL_FLIT_INDEX_2_MASK				0x3ull
#define FXR_RXE2E_DBG_MC0_PKT_CNTR_CTL_FLIT_INDEX_2_SMASK				0x300000ull
#define FXR_RXE2E_DBG_MC0_PKT_CNTR_CTL_FLIT_INDEX_1_SHIFT				18
#define FXR_RXE2E_DBG_MC0_PKT_CNTR_CTL_FLIT_INDEX_1_MASK				0x3ull
#define FXR_RXE2E_DBG_MC0_PKT_CNTR_CTL_FLIT_INDEX_1_SMASK				0xC0000ull
#define FXR_RXE2E_DBG_MC0_PKT_CNTR_CTL_FLIT_INDEX_0_SHIFT				16
#define FXR_RXE2E_DBG_MC0_PKT_CNTR_CTL_FLIT_INDEX_0_MASK				0x3ull
#define FXR_RXE2E_DBG_MC0_PKT_CNTR_CTL_FLIT_INDEX_0_SMASK				0x30000ull
#define FXR_RXE2E_DBG_MC0_PKT_CNTR_CTL_TC_MATCH_3_SHIFT					14
#define FXR_RXE2E_DBG_MC0_PKT_CNTR_CTL_TC_MATCH_3_MASK					0x3ull
#define FXR_RXE2E_DBG_MC0_PKT_CNTR_CTL_TC_MATCH_3_SMASK					0xC000ull
#define FXR_RXE2E_DBG_MC0_PKT_CNTR_CTL_TC_MASK_3_SHIFT					12
#define FXR_RXE2E_DBG_MC0_PKT_CNTR_CTL_TC_MASK_3_MASK					0x3ull
#define FXR_RXE2E_DBG_MC0_PKT_CNTR_CTL_TC_MASK_3_SMASK					0x3000ull
#define FXR_RXE2E_DBG_MC0_PKT_CNTR_CTL_TC_MATCH_2_SHIFT					10
#define FXR_RXE2E_DBG_MC0_PKT_CNTR_CTL_TC_MATCH_2_MASK					0x3ull
#define FXR_RXE2E_DBG_MC0_PKT_CNTR_CTL_TC_MATCH_2_SMASK					0xC00ull
#define FXR_RXE2E_DBG_MC0_PKT_CNTR_CTL_TC_MASK_2_SHIFT					8
#define FXR_RXE2E_DBG_MC0_PKT_CNTR_CTL_TC_MASK_2_MASK					0x3ull
#define FXR_RXE2E_DBG_MC0_PKT_CNTR_CTL_TC_MASK_2_SMASK					0x300ull
#define FXR_RXE2E_DBG_MC0_PKT_CNTR_CTL_TC_MATCH_1_SHIFT					6
#define FXR_RXE2E_DBG_MC0_PKT_CNTR_CTL_TC_MATCH_1_MASK					0x3ull
#define FXR_RXE2E_DBG_MC0_PKT_CNTR_CTL_TC_MATCH_1_SMASK					0xC0ull
#define FXR_RXE2E_DBG_MC0_PKT_CNTR_CTL_TC_MASK_1_SHIFT					4
#define FXR_RXE2E_DBG_MC0_PKT_CNTR_CTL_TC_MASK_1_MASK					0x3ull
#define FXR_RXE2E_DBG_MC0_PKT_CNTR_CTL_TC_MASK_1_SMASK					0x30ull
#define FXR_RXE2E_DBG_MC0_PKT_CNTR_CTL_TC_MATCH_0_SHIFT					2
#define FXR_RXE2E_DBG_MC0_PKT_CNTR_CTL_TC_MATCH_0_MASK					0x3ull
#define FXR_RXE2E_DBG_MC0_PKT_CNTR_CTL_TC_MATCH_0_SMASK					0xCull
#define FXR_RXE2E_DBG_MC0_PKT_CNTR_CTL_TC_MASK_0_SHIFT					0
#define FXR_RXE2E_DBG_MC0_PKT_CNTR_CTL_TC_MASK_0_MASK					0x3ull
#define FXR_RXE2E_DBG_MC0_PKT_CNTR_CTL_TC_MASK_0_SMASK					0x3ull
/*
* Table #63 of fxr_top - RXE2E_DBG_MC1_PKT_CNTR_CTL
* This is an RXE2E debug CSR. These are other match/mask fields for the MC1 pkt 
* cntrs as well as controlling how pkt cntrs can be ganged to match/mask on 
* different flits of the packet. Ganging allows something like pkt cntr 0 
* match/masks on flit 0 and enabling pkt cntr 1 to match/mask on flit 
* 1.
*/
#define FXR_RXE2E_DBG_MC1_PKT_CNTR_CTL							(FXR_RX_E2E_CSRS + 0x000000001C08)
#define FXR_RXE2E_DBG_MC1_PKT_CNTR_CTL_RESETCSR						0x0000000000000000ull
#define FXR_RXE2E_DBG_MC1_PKT_CNTR_CTL_RESERVED_63_13_SHIFT				13
#define FXR_RXE2E_DBG_MC1_PKT_CNTR_CTL_RESERVED_63_13_MASK				0x7FFFFFFFFFFFFull
#define FXR_RXE2E_DBG_MC1_PKT_CNTR_CTL_RESERVED_63_13_SMASK				0xFFFFFFFFFFFFE000ull
#define FXR_RXE2E_DBG_MC1_PKT_CNTR_CTL_PKT_CNTR_CTL_SHIFT				12
#define FXR_RXE2E_DBG_MC1_PKT_CNTR_CTL_PKT_CNTR_CTL_MASK				0x1ull
#define FXR_RXE2E_DBG_MC1_PKT_CNTR_CTL_PKT_CNTR_CTL_SMASK				0x1000ull
#define FXR_RXE2E_DBG_MC1_PKT_CNTR_CTL_FLIT_INDEX_1_SHIFT				10
#define FXR_RXE2E_DBG_MC1_PKT_CNTR_CTL_FLIT_INDEX_1_MASK				0x3ull
#define FXR_RXE2E_DBG_MC1_PKT_CNTR_CTL_FLIT_INDEX_1_SMASK				0xC00ull
#define FXR_RXE2E_DBG_MC1_PKT_CNTR_CTL_FLIT_INDEX_0_SHIFT				8
#define FXR_RXE2E_DBG_MC1_PKT_CNTR_CTL_FLIT_INDEX_0_MASK				0x3ull
#define FXR_RXE2E_DBG_MC1_PKT_CNTR_CTL_FLIT_INDEX_0_SMASK				0x300ull
#define FXR_RXE2E_DBG_MC1_PKT_CNTR_CTL_TC_MATCH_1_SHIFT					6
#define FXR_RXE2E_DBG_MC1_PKT_CNTR_CTL_TC_MATCH_1_MASK					0x3ull
#define FXR_RXE2E_DBG_MC1_PKT_CNTR_CTL_TC_MATCH_1_SMASK					0xC0ull
#define FXR_RXE2E_DBG_MC1_PKT_CNTR_CTL_TC_MASK_1_SHIFT					4
#define FXR_RXE2E_DBG_MC1_PKT_CNTR_CTL_TC_MASK_1_MASK					0x3ull
#define FXR_RXE2E_DBG_MC1_PKT_CNTR_CTL_TC_MASK_1_SMASK					0x30ull
#define FXR_RXE2E_DBG_MC1_PKT_CNTR_CTL_TC_MATCH_0_SHIFT					2
#define FXR_RXE2E_DBG_MC1_PKT_CNTR_CTL_TC_MATCH_0_MASK					0x3ull
#define FXR_RXE2E_DBG_MC1_PKT_CNTR_CTL_TC_MATCH_0_SMASK					0xCull
#define FXR_RXE2E_DBG_MC1_PKT_CNTR_CTL_TC_MASK_0_SHIFT					0
#define FXR_RXE2E_DBG_MC1_PKT_CNTR_CTL_TC_MASK_0_MASK					0x3ull
#define FXR_RXE2E_DBG_MC1_PKT_CNTR_CTL_TC_MASK_0_SMASK					0x3ull

#endif 		/* DEF_FXR_RX_E2E_SW_DEF */
