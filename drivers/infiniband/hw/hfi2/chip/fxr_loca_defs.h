/*
*------------------------------------------------------------------------------
*                                                                              
*  INTEL CONFIDENTIAL                                                          
*                                                                              
*  Copyright 2016 Intel Corporation All Rights Reserved.                 
*                                                                              
*  The source code contained or described herein and all documents related     
*  to the source code ("Material") are owned by Intel Corporation or its    
*  suppliers or licensors. Title to the Material remains with Intel            
*  Corporation or its suppliers and licensors. The Material contains trade     
*  secrets and proprietary and confidential information of Intel or its        
*  suppliers and licensors. The Material is protected by worldwide copyright   
*  and trade secret laws and treaty provisions. No part of the Material may    
*  be used, copied, reproduced, modified, published, uploaded, posted,         
*  transmitted, distributed, or disclosed in any way without Intel's prior     
*  express written permission.                                                 
*                                                                              
*  No license under any patent, copyright, trade secret or other intellectual  
*  property right is granted to or conferred upon you by disclosure or         
*  delivery of the Materials, either expressly, by implication, inducement,    
*  estoppel or otherwise. Any license under such intellectual property rights  
*  must be express and approved by Intel in writing.                           
*                                                                              
*------------------------------------------------------------------------------
*  Auto-generated by /nfs/sc/disks/slx_0108/pvesv/fxr_autogen/i_csrs.pl
*  i_csrs.pl Version 1.5 last modified on Monday 12/19/16 11:42:34
*  /nfs/sc/disks/slx_0108/pvesv/fxr_autogen/i_csrs.pl -C -RVREGS -ST fxr_loca -o /nfs/sc/disks/slx_0108/pvesv/fxr_autogen/fxr /nfs/sc/disks/slx_0108/pvesv/fxr_autogen/repo_xml/300_Memory_Map.xml /nfs/sc/disks/slx_0108/pvesv/fxr_autogen/repo_xml/342_Memory_Map_LOCA.xml
*------------------------------------------------------------------------------
*/

#ifndef DEF_FXR_LOCA_SW_DEF
#define DEF_FXR_LOCA_SW_DEF

#ifndef FXR_LOCA_CSRS
#define FXR_LOCA_CSRS						0x000000000000ULL
#endif
#define FXR_NUM_CONTEXTS					256
#define FXR_NUM_PIDS						4096
#define FXR_MAX_CONTEXT						255
#define FXR_TX_CONTEXT_ENTRIES					128
#define FXR_TX_CONTEXT_MAX					127
#define FXR_RX_CONTEXT_ENTRIES					16
#define FXR_RX_CONTEXT_MAX					15
#define FXR_NUM_SL						32
#define FXR_MAX_SL						31
#define LOCA_CFG_BASE						0
#define LOCA_PROBE_BASE						112
#define LOCA_PROBE_DATA_BASE					128
#define LOCA_HIFIS_CFG_BASE					256
#define LOCA_ERR_BASE0						512
#define LOCA_ERR_BASE1						768
#define LOCA_PMON_CNTR_BASE					1024
#define LOCA_PCAM_ADDR_BASE					2048
#define LOCA_PCAM_DATA_BASE					4096
#define LOCA_MRU_BASE						8192
#define LOCA_PROQ_FID_BASE					12288
#define LOCA_PROQ_CMPLT_BASE					12800
#define LOCA_PROQ_GLOBAL_BASE					12864
#define LOCA_PROQ_CONQVAL_BASE					12928
#define LOCA_IMI_ORB0_BASE					16384
#define LOCA_IMI_ORB1_BASE					16392
#define LOCA_IMI_ORBVAL_BASE					20480
#define LOCA_IMI_ORBHOLD_BASE					20512
#define LOCA_IMI_USB_BASE					20544
#define LOCA_IMI_DPBVAL_BASE					20576
#define LOCA_IMI_DRBVAL0_BASE					20608
#define LOCA_IMI_DRBVAL1_BASE					20616
#define LOCA_CONQ_TAILVAL_BASE					24576
#define LOCA_CONQ_PSRRPL					24592
#define LOCA_CONQ_HEADER0_BASE					28672
#define LOCA_CONQ_HEADER1_BASE					28680
#define LOCA_CONQ_LINKS_BASE					32768
#define LOCA_DCD_BASE						65536
#define LOCA_DCACHE_BASE					1048576
#define IDI_VERSION						0
#define PMON_CNTRS						127
#define PCAM_ENTRIES						255
#define MRU_ENTRIES						511
#define DCD_ENTRIES						8191
#define CACHE_LINE_ENTRIES					65535
/*
* Table #4 of fxr_top - LOCA_CFG_PIPE
* This register enables selected modes and operations within the various 
* Pipeline Blocks.
*/
#define FXR_LOCA_CFG_PIPE					(FXR_LOCA_CSRS + 0x000000000000)
#define FXR_LOCA_CFG_PIPE_RESETCSR				0x0020120F0801F510ull
#define FXR_LOCA_CFG_PIPE_RESERVED_63_59_SHIFT			59
#define FXR_LOCA_CFG_PIPE_RESERVED_63_59_MASK			0x1Full
#define FXR_LOCA_CFG_PIPE_RESERVED_63_59_SMASK			0xF800000000000000ull
#define FXR_LOCA_CFG_PIPE_SNPFC_THRESH_SHIFT			50
#define FXR_LOCA_CFG_PIPE_SNPFC_THRESH_MASK			0x1FFull
#define FXR_LOCA_CFG_PIPE_SNPFC_THRESH_SMASK			0x7FC000000000000ull
#define FXR_LOCA_CFG_PIPE_NEWFC_BURP_THRESH_SHIFT		41
#define FXR_LOCA_CFG_PIPE_NEWFC_BURP_THRESH_MASK		0x1FFull
#define FXR_LOCA_CFG_PIPE_NEWFC_BURP_THRESH_SMASK		0x3FE0000000000ull
#define FXR_LOCA_CFG_PIPE_NEWFC_THRESH_SHIFT			32
#define FXR_LOCA_CFG_PIPE_NEWFC_THRESH_MASK			0x1FFull
#define FXR_LOCA_CFG_PIPE_NEWFC_THRESH_SMASK			0x1FF00000000ull
#define FXR_LOCA_CFG_PIPE_RESERVED_31_SHIFT			31
#define FXR_LOCA_CFG_PIPE_RESERVED_31_MASK			0x1ull
#define FXR_LOCA_CFG_PIPE_RESERVED_31_SMASK			0x80000000ull
#define FXR_LOCA_CFG_PIPE_XIN2_PLUS_THRESH_SHIFT		24
#define FXR_LOCA_CFG_PIPE_XIN2_PLUS_THRESH_MASK			0x7Full
#define FXR_LOCA_CFG_PIPE_XIN2_PLUS_THRESH_SMASK		0x7F000000ull
#define FXR_LOCA_CFG_PIPE_RESERVED_23_18_SHIFT			18
#define FXR_LOCA_CFG_PIPE_RESERVED_23_18_MASK			0x3Full
#define FXR_LOCA_CFG_PIPE_RESERVED_23_18_SMASK			0xFC0000ull
#define FXR_LOCA_CFG_PIPE_PROQ_FULL_THRESH_SHIFT		8
#define FXR_LOCA_CFG_PIPE_PROQ_FULL_THRESH_MASK			0x3FFull
#define FXR_LOCA_CFG_PIPE_PROQ_FULL_THRESH_SMASK		0x3FF00ull
#define FXR_LOCA_CFG_PIPE_RESERVED_7_6_SHIFT			6
#define FXR_LOCA_CFG_PIPE_RESERVED_7_6_MASK			0x3ull
#define FXR_LOCA_CFG_PIPE_RESERVED_7_6_SMASK			0xC0ull
#define FXR_LOCA_CFG_PIPE_LOCA_WAKE_SHIFT			5
#define FXR_LOCA_CFG_PIPE_LOCA_WAKE_MASK			0x1ull
#define FXR_LOCA_CFG_PIPE_LOCA_WAKE_SMASK			0x20ull
#define FXR_LOCA_CFG_PIPE_SNPFC_BURP_ENABLE_SHIFT		4
#define FXR_LOCA_CFG_PIPE_SNPFC_BURP_ENABLE_MASK		0x1ull
#define FXR_LOCA_CFG_PIPE_SNPFC_BURP_ENABLE_SMASK		0x10ull
#define FXR_LOCA_CFG_PIPE_IMICAM_ENTRIES_SHIFT			2
#define FXR_LOCA_CFG_PIPE_IMICAM_ENTRIES_MASK			0x3ull
#define FXR_LOCA_CFG_PIPE_IMICAM_ENTRIES_SMASK			0xCull
#define FXR_LOCA_CFG_PIPE_DEPIPE_HALF_ENABLE_SHIFT		1
#define FXR_LOCA_CFG_PIPE_DEPIPE_HALF_ENABLE_MASK		0x1ull
#define FXR_LOCA_CFG_PIPE_DEPIPE_HALF_ENABLE_SMASK		0x2ull
#define FXR_LOCA_CFG_PIPE_DEPIPE_FULL_ENABLE_SHIFT		0
#define FXR_LOCA_CFG_PIPE_DEPIPE_FULL_ENABLE_MASK		0x1ull
#define FXR_LOCA_CFG_PIPE_DEPIPE_FULL_ENABLE_SMASK		0x1ull
/*
* Table #5 of fxr_top - LOCA_CFG_PIPE2
* This register enables selected modes and operations within the various 
* Pipeline Blocks.
*/
#define FXR_LOCA_CFG_PIPE2					(FXR_LOCA_CSRS + 0x000000000008)
#define FXR_LOCA_CFG_PIPE2_RESETCSR				0x0000000000509100ull
#define FXR_LOCA_CFG_PIPE2_RESERVED_63_49_SHIFT			49
#define FXR_LOCA_CFG_PIPE2_RESERVED_63_49_MASK			0x7FFFull
#define FXR_LOCA_CFG_PIPE2_RESERVED_63_49_SMASK			0xFFFE000000000000ull
#define FXR_LOCA_CFG_PIPE2_FRC_MRU_INIT_SHIFT			48
#define FXR_LOCA_CFG_PIPE2_FRC_MRU_INIT_MASK			0x1ull
#define FXR_LOCA_CFG_PIPE2_FRC_MRU_INIT_SMASK			0x1000000000000ull
#define FXR_LOCA_CFG_PIPE2_MRU_PEND_INIT_SHIFT			32
#define FXR_LOCA_CFG_PIPE2_MRU_PEND_INIT_MASK			0xFFFFull
#define FXR_LOCA_CFG_PIPE2_MRU_PEND_INIT_SMASK			0xFFFF00000000ull
#define FXR_LOCA_CFG_PIPE2_RESERVED_31_25_SHIFT			25
#define FXR_LOCA_CFG_PIPE2_RESERVED_31_25_MASK			0x7Full
#define FXR_LOCA_CFG_PIPE2_RESERVED_31_25_SMASK			0xFE000000ull
#define FXR_LOCA_CFG_PIPE2_IRQ_SYNC_THRESH_SHIFT		20
#define FXR_LOCA_CFG_PIPE2_IRQ_SYNC_THRESH_MASK			0x1Full
#define FXR_LOCA_CFG_PIPE2_IRQ_SYNC_THRESH_SMASK		0x1F00000ull
#define FXR_LOCA_CFG_PIPE2_CONQ_FC_THRESH_SHIFT			12
#define FXR_LOCA_CFG_PIPE2_CONQ_FC_THRESH_MASK			0xFFull
#define FXR_LOCA_CFG_PIPE2_CONQ_FC_THRESH_SMASK			0xFF000ull
#define FXR_LOCA_CFG_PIPE2_RESERVED_11_9_SHIFT			9
#define FXR_LOCA_CFG_PIPE2_RESERVED_11_9_MASK			0x7ull
#define FXR_LOCA_CFG_PIPE2_RESERVED_11_9_SMASK			0xE00ull
#define FXR_LOCA_CFG_PIPE2_CONQ_ENTRY_LIMIT_SHIFT		0
#define FXR_LOCA_CFG_PIPE2_CONQ_ENTRY_LIMIT_MASK		0x1FFull
#define FXR_LOCA_CFG_PIPE2_CONQ_ENTRY_LIMIT_SMASK		0x1FFull
/*
* Table #6 of fxr_top - LOCA_CFG_PIPE3
* This register enables selected modes and operations within the various 
* Pipeline Blocks.
*/
#define FXR_LOCA_CFG_PIPE3					(FXR_LOCA_CSRS + 0x000000000010)
#define FXR_LOCA_CFG_PIPE3_RESETCSR				0x0000000000000004ull
#define FXR_LOCA_CFG_PIPE3_RESERVED_63_16_SHIFT			16
#define FXR_LOCA_CFG_PIPE3_RESERVED_63_16_MASK			0xFFFFFFFFFFFFull
#define FXR_LOCA_CFG_PIPE3_RESERVED_63_16_SMASK			0xFFFFFFFFFFFF0000ull
#define FXR_LOCA_CFG_PIPE3_VAMISS_THRESH_SHIFT			12
#define FXR_LOCA_CFG_PIPE3_VAMISS_THRESH_MASK			0xFull
#define FXR_LOCA_CFG_PIPE3_VAMISS_THRESH_SMASK			0xF000ull
#define FXR_LOCA_CFG_PIPE3_VAHIT_THRESH_SHIFT			8
#define FXR_LOCA_CFG_PIPE3_VAHIT_THRESH_MASK			0xFull
#define FXR_LOCA_CFG_PIPE3_VAHIT_THRESH_SMASK			0xF00ull
#define FXR_LOCA_CFG_PIPE3_RESERVED_7_3_SHIFT			3
#define FXR_LOCA_CFG_PIPE3_RESERVED_7_3_MASK			0x1Full
#define FXR_LOCA_CFG_PIPE3_RESERVED_7_3_SMASK			0xF8ull
#define FXR_LOCA_CFG_PIPE3_SO_PUT_OPTIMIZATION_SHIFT		2
#define FXR_LOCA_CFG_PIPE3_SO_PUT_OPTIMIZATION_MASK		0x1ull
#define FXR_LOCA_CFG_PIPE3_SO_PUT_OPTIMIZATION_SMASK		0x4ull
#define FXR_LOCA_CFG_PIPE3_AGGRESSIVE_REFETCH_SHIFT		1
#define FXR_LOCA_CFG_PIPE3_AGGRESSIVE_REFETCH_MASK		0x1ull
#define FXR_LOCA_CFG_PIPE3_AGGRESSIVE_REFETCH_SMASK		0x2ull
#define FXR_LOCA_CFG_PIPE3_RESERVED_0_SHIFT			0
#define FXR_LOCA_CFG_PIPE3_RESERVED_0_MASK			0x1ull
#define FXR_LOCA_CFG_PIPE3_RESERVED_0_SMASK			0x1ull
/*
* Table #7 of fxr_top - LOCA_CFG_PARB
* This register enables selected modes and operations within the PARB 
* Block.
*/
#define FXR_LOCA_CFG_PARB					(FXR_LOCA_CSRS + 0x000000000018)
#define FXR_LOCA_CFG_PARB_RESETCSR				0x000005DC2D23160Full
#define FXR_LOCA_CFG_PARB_WAKE_HOLD_PERIOD_SHIFT		32
#define FXR_LOCA_CFG_PARB_WAKE_HOLD_PERIOD_MASK			0xFFFFFFFFull
#define FXR_LOCA_CFG_PARB_WAKE_HOLD_PERIOD_SMASK		0xFFFFFFFF00000000ull
#define FXR_LOCA_CFG_PARB_TRRP_REQ_TO_THRESH_SHIFT		24
#define FXR_LOCA_CFG_PARB_TRRP_REQ_TO_THRESH_MASK		0xFFull
#define FXR_LOCA_CFG_PARB_TRRP_REQ_TO_THRESH_SMASK		0xFF000000ull
#define FXR_LOCA_CFG_PARB_CONQ_REQ_TO_THRESH_SHIFT		16
#define FXR_LOCA_CFG_PARB_CONQ_REQ_TO_THRESH_MASK		0xFFull
#define FXR_LOCA_CFG_PARB_CONQ_REQ_TO_THRESH_SMASK		0xFF0000ull
#define FXR_LOCA_CFG_PARB_EMEC_REQ_TO_THRESH_SHIFT		8
#define FXR_LOCA_CFG_PARB_EMEC_REQ_TO_THRESH_MASK		0xFFull
#define FXR_LOCA_CFG_PARB_EMEC_REQ_TO_THRESH_SMASK		0xFF00ull
#define FXR_LOCA_CFG_PARB_IMI_REQ_TO_THRESH_SHIFT		0
#define FXR_LOCA_CFG_PARB_IMI_REQ_TO_THRESH_MASK		0xFFull
#define FXR_LOCA_CFG_PARB_IMI_REQ_TO_THRESH_SMASK		0xFFull
/*
* Table #8 of fxr_top - LOCA_CFG_IMI
* This register enables selected modes and operations within the IMI Block. The 
* ARB_CTL control fields in this CSR define the priority for arbitration 
* selection when two are more request inputs are valid. A local pointer into the 
* 16-bit field selects a bit which determines the priority for a given 
* arbitration cycle. The local pointer advances to the next bit after an active 
* arbitration cycle. Note that a valid request is blocked only when a valid 
* higher priority request is presented.
*/
#define FXR_LOCA_CFG_IMI					(FXR_LOCA_CSRS + 0x000000000020)
#define FXR_LOCA_CFG_IMI_RESETCSR				0x00090914AAAA0000ull
#define FXR_LOCA_CFG_IMI_RESERVED_63_53_SHIFT			53
#define FXR_LOCA_CFG_IMI_RESERVED_63_53_MASK			0x7FFull
#define FXR_LOCA_CFG_IMI_RESERVED_63_53_SMASK			0xFFE0000000000000ull
#define FXR_LOCA_CFG_IMI_IMI_EVICT_Q_THRESH_SHIFT		48
#define FXR_LOCA_CFG_IMI_IMI_EVICT_Q_THRESH_MASK		0x1Full
#define FXR_LOCA_CFG_IMI_IMI_EVICT_Q_THRESH_SMASK		0x1F000000000000ull
#define FXR_LOCA_CFG_IMI_RESERVED_47_45_SHIFT			45
#define FXR_LOCA_CFG_IMI_RESERVED_47_45_MASK			0x7ull
#define FXR_LOCA_CFG_IMI_RESERVED_47_45_SMASK			0xE00000000000ull
#define FXR_LOCA_CFG_IMI_IMI_REQ_Q_THRESH_SHIFT			40
#define FXR_LOCA_CFG_IMI_IMI_REQ_Q_THRESH_MASK			0x1Full
#define FXR_LOCA_CFG_IMI_IMI_REQ_Q_THRESH_SMASK			0x1F0000000000ull
#define FXR_LOCA_CFG_IMI_DPB_SNP_BUF_THRESH_SHIFT		32
#define FXR_LOCA_CFG_IMI_DPB_SNP_BUF_THRESH_MASK		0xFFull
#define FXR_LOCA_CFG_IMI_DPB_SNP_BUF_THRESH_SMASK		0xFF00000000ull
#define FXR_LOCA_CFG_IMI_IDI_C2U_ARB_CTL_SHIFT			16
#define FXR_LOCA_CFG_IMI_IDI_C2U_ARB_CTL_MASK			0xFFFFull
#define FXR_LOCA_CFG_IMI_IDI_C2U_ARB_CTL_SMASK			0xFFFF0000ull
#define FXR_LOCA_CFG_IMI_DPB_ARB_CTL_SHIFT			0
#define FXR_LOCA_CFG_IMI_DPB_ARB_CTL_MASK			0xFFFFull
#define FXR_LOCA_CFG_IMI_DPB_ARB_CTL_SMASK			0xFFFFull
/*
* Table #9 of fxr_top - LOCA_CFG_IMI2
* This register enables selected modes and operations within the IMI 
* Block.
*/
#define FXR_LOCA_CFG_IMI2					(FXR_LOCA_CSRS + 0x000000000028)
#define FXR_LOCA_CFG_IMI2_RESETCSR				0x000000000014002Cull
#define FXR_LOCA_CFG_IMI2_RESERVED_63_25_SHIFT			25
#define FXR_LOCA_CFG_IMI2_RESERVED_63_25_MASK			0x7FFFFFFFFFull
#define FXR_LOCA_CFG_IMI2_RESERVED_63_25_SMASK			0xFFFFFFFFFE000000ull
#define FXR_LOCA_CFG_IMI2_IDI_U2C_DATA_CREDITS_SHIFT		16
#define FXR_LOCA_CFG_IMI2_IDI_U2C_DATA_CREDITS_MASK		0x1FFull
#define FXR_LOCA_CFG_IMI2_IDI_U2C_DATA_CREDITS_SMASK		0x1FF0000ull
#define FXR_LOCA_CFG_IMI2_RESERVED_15_9_SHIFT			9
#define FXR_LOCA_CFG_IMI2_RESERVED_15_9_MASK			0x7Full
#define FXR_LOCA_CFG_IMI2_RESERVED_15_9_SMASK			0xFE00ull
#define FXR_LOCA_CFG_IMI2_IDI_U2C_RSP_CREDITS_SHIFT		0
#define FXR_LOCA_CFG_IMI2_IDI_U2C_RSP_CREDITS_MASK		0x1FFull
#define FXR_LOCA_CFG_IMI2_IDI_U2C_RSP_CREDITS_SMASK		0x1FFull
/*
* Table #10 of fxr_top - LOCA_CFG_IMI3
* This register configures how the Cache Near, Cache Far and Non-Temporal 
* control signals are set for IDI requests issued by FXR.
*/
#define FXR_LOCA_CFG_IMI3					(FXR_LOCA_CSRS + 0x000000000030)
#define FXR_LOCA_CFG_IMI3_RESETCSR				0x0000C5C5C5C5C5C5ull
#define FXR_LOCA_CFG_IMI3_RESERVED_63_59_SHIFT			59
#define FXR_LOCA_CFG_IMI3_RESERVED_63_59_MASK			0x1Full
#define FXR_LOCA_CFG_IMI3_RESERVED_63_59_SMASK			0xF800000000000000ull
#define FXR_LOCA_CFG_IMI3_C2U_POISON_DISABLE_SHIFT		58
#define FXR_LOCA_CFG_IMI3_C2U_POISON_DISABLE_MASK		0x1ull
#define FXR_LOCA_CFG_IMI3_C2U_POISON_DISABLE_SMASK		0x400000000000000ull
#define FXR_LOCA_CFG_IMI3_FULL_ADDR_PARITY_EN_SHIFT		57
#define FXR_LOCA_CFG_IMI3_FULL_ADDR_PARITY_EN_MASK		0x1ull
#define FXR_LOCA_CFG_IMI3_FULL_ADDR_PARITY_EN_SMASK		0x200000000000000ull
#define FXR_LOCA_CFG_IMI3_IDI_ECC_DISABLE_SHIFT			56
#define FXR_LOCA_CFG_IMI3_IDI_ECC_DISABLE_MASK			0x1ull
#define FXR_LOCA_CFG_IMI3_IDI_ECC_DISABLE_SMASK			0x100000000000000ull
#define FXR_LOCA_CFG_IMI3_RESERVED_55_54_SHIFT			54
#define FXR_LOCA_CFG_IMI3_RESERVED_55_54_MASK			0x3ull
#define FXR_LOCA_CFG_IMI3_RESERVED_55_54_SMASK			0xC0000000000000ull
#define FXR_LOCA_CFG_IMI3_CACHE_NEAR_WBMTOI_SHIFT		53
#define FXR_LOCA_CFG_IMI3_CACHE_NEAR_WBMTOI_MASK		0x1ull
#define FXR_LOCA_CFG_IMI3_CACHE_NEAR_WBMTOI_SMASK		0x20000000000000ull
#define FXR_LOCA_CFG_IMI3_CACHE_FAR_WBMTOI_SHIFT		52
#define FXR_LOCA_CFG_IMI3_CACHE_FAR_WBMTOI_MASK			0x1ull
#define FXR_LOCA_CFG_IMI3_CACHE_FAR_WBMTOI_SMASK		0x10000000000000ull
#define FXR_LOCA_CFG_IMI3_RESERVED_51_50_SHIFT			50
#define FXR_LOCA_CFG_IMI3_RESERVED_51_50_MASK			0x3ull
#define FXR_LOCA_CFG_IMI3_RESERVED_51_50_SMASK			0xC000000000000ull
#define FXR_LOCA_CFG_IMI3_NON_TEMP_WBMTOI_SHIFT			48
#define FXR_LOCA_CFG_IMI3_NON_TEMP_WBMTOI_MASK			0x3ull
#define FXR_LOCA_CFG_IMI3_NON_TEMP_WBMTOI_SMASK			0x3000000000000ull
#define FXR_LOCA_CFG_IMI3_CACHE_NEAR_RFO_SHIFT			46
#define FXR_LOCA_CFG_IMI3_CACHE_NEAR_RFO_MASK			0x3ull
#define FXR_LOCA_CFG_IMI3_CACHE_NEAR_RFO_SMASK			0xC00000000000ull
#define FXR_LOCA_CFG_IMI3_CACHE_FAR_RFO_SHIFT			44
#define FXR_LOCA_CFG_IMI3_CACHE_FAR_RFO_MASK			0x3ull
#define FXR_LOCA_CFG_IMI3_CACHE_FAR_RFO_SMASK			0x300000000000ull
#define FXR_LOCA_CFG_IMI3_RESERVED_43_SHIFT			43
#define FXR_LOCA_CFG_IMI3_RESERVED_43_MASK			0x1ull
#define FXR_LOCA_CFG_IMI3_RESERVED_43_SMASK			0x80000000000ull
#define FXR_LOCA_CFG_IMI3_NON_TEMP_RFO_SHIFT			40
#define FXR_LOCA_CFG_IMI3_NON_TEMP_RFO_MASK			0x7ull
#define FXR_LOCA_CFG_IMI3_NON_TEMP_RFO_SMASK			0x70000000000ull
#define FXR_LOCA_CFG_IMI3_CACHE_NEAR_SPECITOM_SHIFT		38
#define FXR_LOCA_CFG_IMI3_CACHE_NEAR_SPECITOM_MASK		0x3ull
#define FXR_LOCA_CFG_IMI3_CACHE_NEAR_SPECITOM_SMASK		0xC000000000ull
#define FXR_LOCA_CFG_IMI3_CACHE_FAR_SPECITOM_SHIFT		36
#define FXR_LOCA_CFG_IMI3_CACHE_FAR_SPECITOM_MASK		0x3ull
#define FXR_LOCA_CFG_IMI3_CACHE_FAR_SPECITOM_SMASK		0x3000000000ull
#define FXR_LOCA_CFG_IMI3_RESERVED_35_SHIFT			35
#define FXR_LOCA_CFG_IMI3_RESERVED_35_MASK			0x1ull
#define FXR_LOCA_CFG_IMI3_RESERVED_35_SMASK			0x800000000ull
#define FXR_LOCA_CFG_IMI3_NON_TEMP_SPECITOM_SHIFT		32
#define FXR_LOCA_CFG_IMI3_NON_TEMP_SPECITOM_MASK		0x7ull
#define FXR_LOCA_CFG_IMI3_NON_TEMP_SPECITOM_SMASK		0x700000000ull
#define FXR_LOCA_CFG_IMI3_CACHE_NEAR_ITOM_SHIFT			30
#define FXR_LOCA_CFG_IMI3_CACHE_NEAR_ITOM_MASK			0x3ull
#define FXR_LOCA_CFG_IMI3_CACHE_NEAR_ITOM_SMASK			0xC0000000ull
#define FXR_LOCA_CFG_IMI3_CACHE_FAR_ITOM_SHIFT			28
#define FXR_LOCA_CFG_IMI3_CACHE_FAR_ITOM_MASK			0x3ull
#define FXR_LOCA_CFG_IMI3_CACHE_FAR_ITOM_SMASK			0x30000000ull
#define FXR_LOCA_CFG_IMI3_RESERVED_27_SHIFT			27
#define FXR_LOCA_CFG_IMI3_RESERVED_27_MASK			0x1ull
#define FXR_LOCA_CFG_IMI3_RESERVED_27_SMASK			0x8000000ull
#define FXR_LOCA_CFG_IMI3_NON_TEMP_ITOM_SHIFT			24
#define FXR_LOCA_CFG_IMI3_NON_TEMP_ITOM_MASK			0x7ull
#define FXR_LOCA_CFG_IMI3_NON_TEMP_ITOM_SMASK			0x7000000ull
#define FXR_LOCA_CFG_IMI3_CACHE_NEAR_MEMPUSHWR_SHIFT		22
#define FXR_LOCA_CFG_IMI3_CACHE_NEAR_MEMPUSHWR_MASK		0x3ull
#define FXR_LOCA_CFG_IMI3_CACHE_NEAR_MEMPUSHWR_SMASK		0xC00000ull
#define FXR_LOCA_CFG_IMI3_CACHE_FAR_MEMPUSHWR_SHIFT		20
#define FXR_LOCA_CFG_IMI3_CACHE_FAR_MEMPUSHWR_MASK		0x3ull
#define FXR_LOCA_CFG_IMI3_CACHE_FAR_MEMPUSHWR_SMASK		0x300000ull
#define FXR_LOCA_CFG_IMI3_RESERVED_19_SHIFT			19
#define FXR_LOCA_CFG_IMI3_RESERVED_19_MASK			0x1ull
#define FXR_LOCA_CFG_IMI3_RESERVED_19_SMASK			0x80000ull
#define FXR_LOCA_CFG_IMI3_NON_TEMP_MEMPUSHWR_SHIFT		16
#define FXR_LOCA_CFG_IMI3_NON_TEMP_MEMPUSHWR_MASK		0x7ull
#define FXR_LOCA_CFG_IMI3_NON_TEMP_MEMPUSHWR_SMASK		0x70000ull
#define FXR_LOCA_CFG_IMI3_CACHE_NEAR_DRD_OPT_SHIFT		14
#define FXR_LOCA_CFG_IMI3_CACHE_NEAR_DRD_OPT_MASK		0x3ull
#define FXR_LOCA_CFG_IMI3_CACHE_NEAR_DRD_OPT_SMASK		0xC000ull
#define FXR_LOCA_CFG_IMI3_CACHE_FAR_DRD_OPT_SHIFT		12
#define FXR_LOCA_CFG_IMI3_CACHE_FAR_DRD_OPT_MASK		0x3ull
#define FXR_LOCA_CFG_IMI3_CACHE_FAR_DRD_OPT_SMASK		0x3000ull
#define FXR_LOCA_CFG_IMI3_RESERVED_11_SHIFT			11
#define FXR_LOCA_CFG_IMI3_RESERVED_11_MASK			0x1ull
#define FXR_LOCA_CFG_IMI3_RESERVED_11_SMASK			0x800ull
#define FXR_LOCA_CFG_IMI3_NON_TEMP_DRD_OPT_SHIFT		8
#define FXR_LOCA_CFG_IMI3_NON_TEMP_DRD_OPT_MASK			0x7ull
#define FXR_LOCA_CFG_IMI3_NON_TEMP_DRD_OPT_SMASK		0x700ull
#define FXR_LOCA_CFG_IMI3_CACHE_NEAR_RD_CURR_SHIFT		6
#define FXR_LOCA_CFG_IMI3_CACHE_NEAR_RD_CURR_MASK		0x3ull
#define FXR_LOCA_CFG_IMI3_CACHE_NEAR_RD_CURR_SMASK		0xC0ull
#define FXR_LOCA_CFG_IMI3_CACHE_FAR_RD_CURR_SHIFT		4
#define FXR_LOCA_CFG_IMI3_CACHE_FAR_RD_CURR_MASK		0x3ull
#define FXR_LOCA_CFG_IMI3_CACHE_FAR_RD_CURR_SMASK		0x30ull
#define FXR_LOCA_CFG_IMI3_RESERVED_3_SHIFT			3
#define FXR_LOCA_CFG_IMI3_RESERVED_3_MASK			0x1ull
#define FXR_LOCA_CFG_IMI3_RESERVED_3_SMASK			0x8ull
#define FXR_LOCA_CFG_IMI3_NON_TEMP_RD_CURR_SHIFT		0
#define FXR_LOCA_CFG_IMI3_NON_TEMP_RD_CURR_MASK			0x7ull
#define FXR_LOCA_CFG_IMI3_NON_TEMP_RD_CURR_SMASK		0x7ull
/*
* Table #11 of fxr_top - LOCA_CFG_ITI
* This register enables selected modes and operations within the IMI 
* Block.
*/
#define FXR_LOCA_CFG_ITI					(FXR_LOCA_CSRS + 0x000000000038)
#define FXR_LOCA_CFG_ITI_RESETCSR				0x0008003C00100010ull
#define FXR_LOCA_CFG_ITI_RESERVED_63_53_SHIFT			53
#define FXR_LOCA_CFG_ITI_RESERVED_63_53_MASK			0x7FFull
#define FXR_LOCA_CFG_ITI_RESERVED_63_53_SMASK			0xFFE0000000000000ull
#define FXR_LOCA_CFG_ITI_C2U_CSB_FULL_THRESH_SHIFT		48
#define FXR_LOCA_CFG_ITI_C2U_CSB_FULL_THRESH_MASK		0x1Full
#define FXR_LOCA_CFG_ITI_C2U_CSB_FULL_THRESH_SMASK		0x1F000000000000ull
#define FXR_LOCA_CFG_ITI_RESERVED_47_41_SHIFT			41
#define FXR_LOCA_CFG_ITI_RESERVED_47_41_MASK			0x7Full
#define FXR_LOCA_CFG_ITI_RESERVED_47_41_SMASK			0xFE0000000000ull
#define FXR_LOCA_CFG_ITI_IMI_SNP_RSP_CREDITS_SHIFT		32
#define FXR_LOCA_CFG_ITI_IMI_SNP_RSP_CREDITS_MASK		0x1FFull
#define FXR_LOCA_CFG_ITI_IMI_SNP_RSP_CREDITS_SMASK		0x1FF00000000ull
#define FXR_LOCA_CFG_ITI_RESERVED_31_26_SHIFT			26
#define FXR_LOCA_CFG_ITI_RESERVED_31_26_MASK			0x3Full
#define FXR_LOCA_CFG_ITI_RESERVED_31_26_SMASK			0xFC000000ull
#define FXR_LOCA_CFG_ITI_UQB_STOP_THRESH_SHIFT			16
#define FXR_LOCA_CFG_ITI_UQB_STOP_THRESH_MASK			0x3FFull
#define FXR_LOCA_CFG_ITI_UQB_STOP_THRESH_SMASK			0x3FF0000ull
#define FXR_LOCA_CFG_ITI_RESERVED_15_9_SHIFT			9
#define FXR_LOCA_CFG_ITI_RESERVED_15_9_MASK			0x7Full
#define FXR_LOCA_CFG_ITI_RESERVED_15_9_SMASK			0xFE00ull
#define FXR_LOCA_CFG_ITI_IDI_U2C_REQ_CREDITS_SHIFT		0
#define FXR_LOCA_CFG_ITI_IDI_U2C_REQ_CREDITS_MASK		0x1FFull
#define FXR_LOCA_CFG_ITI_IDI_U2C_REQ_CREDITS_SMASK		0x1FFull
/*
* Table #12 of fxr_top - LOCA_CFG_DALU
* This register defines Flags, Masks, and Control modes for the 
* DALU.
*/
#define FXR_LOCA_CFG_DALU					(FXR_LOCA_CSRS + 0x000000000040)
#define FXR_LOCA_CFG_DALU_RESETCSR				0x0000000000001F80ull
#define FXR_LOCA_CFG_DALU_RESERVED_63_16_SHIFT			16
#define FXR_LOCA_CFG_DALU_RESERVED_63_16_MASK			0xFFFFFFFFFFFFull
#define FXR_LOCA_CFG_DALU_RESERVED_63_16_SMASK			0xFFFFFFFFFFFF0000ull
#define FXR_LOCA_CFG_DALU_FZ_SHIFT				15
#define FXR_LOCA_CFG_DALU_FZ_MASK				0x1ull
#define FXR_LOCA_CFG_DALU_FZ_SMASK				0x8000ull
#define FXR_LOCA_CFG_DALU_RC_SHIFT				13
#define FXR_LOCA_CFG_DALU_RC_MASK				0x3ull
#define FXR_LOCA_CFG_DALU_RC_SMASK				0x6000ull
#define FXR_LOCA_CFG_DALU_PM_SHIFT				12
#define FXR_LOCA_CFG_DALU_PM_MASK				0x1ull
#define FXR_LOCA_CFG_DALU_PM_SMASK				0x1000ull
#define FXR_LOCA_CFG_DALU_UM_SHIFT				11
#define FXR_LOCA_CFG_DALU_UM_MASK				0x1ull
#define FXR_LOCA_CFG_DALU_UM_SMASK				0x800ull
#define FXR_LOCA_CFG_DALU_OM_SHIFT				10
#define FXR_LOCA_CFG_DALU_OM_MASK				0x1ull
#define FXR_LOCA_CFG_DALU_OM_SMASK				0x400ull
#define FXR_LOCA_CFG_DALU_ZM_SHIFT				9
#define FXR_LOCA_CFG_DALU_ZM_MASK				0x1ull
#define FXR_LOCA_CFG_DALU_ZM_SMASK				0x200ull
#define FXR_LOCA_CFG_DALU_DM_SHIFT				8
#define FXR_LOCA_CFG_DALU_DM_MASK				0x1ull
#define FXR_LOCA_CFG_DALU_DM_SMASK				0x100ull
#define FXR_LOCA_CFG_DALU_IM_SHIFT				7
#define FXR_LOCA_CFG_DALU_IM_MASK				0x1ull
#define FXR_LOCA_CFG_DALU_IM_SMASK				0x80ull
#define FXR_LOCA_CFG_DALU_DAZ_SHIFT				6
#define FXR_LOCA_CFG_DALU_DAZ_MASK				0x1ull
#define FXR_LOCA_CFG_DALU_DAZ_SMASK				0x40ull
#define FXR_LOCA_CFG_DALU_PE_SHIFT				5
#define FXR_LOCA_CFG_DALU_PE_MASK				0x1ull
#define FXR_LOCA_CFG_DALU_PE_SMASK				0x20ull
#define FXR_LOCA_CFG_DALU_UE_SHIFT				4
#define FXR_LOCA_CFG_DALU_UE_MASK				0x1ull
#define FXR_LOCA_CFG_DALU_UE_SMASK				0x10ull
#define FXR_LOCA_CFG_DALU_OE_SHIFT				3
#define FXR_LOCA_CFG_DALU_OE_MASK				0x1ull
#define FXR_LOCA_CFG_DALU_OE_SMASK				0x8ull
#define FXR_LOCA_CFG_DALU_ZE_SHIFT				2
#define FXR_LOCA_CFG_DALU_ZE_MASK				0x1ull
#define FXR_LOCA_CFG_DALU_ZE_SMASK				0x4ull
#define FXR_LOCA_CFG_DALU_DE_SHIFT				1
#define FXR_LOCA_CFG_DALU_DE_MASK				0x1ull
#define FXR_LOCA_CFG_DALU_DE_SMASK				0x2ull
#define FXR_LOCA_CFG_DALU_IE_SHIFT				0
#define FXR_LOCA_CFG_DALU_IE_MASK				0x1ull
#define FXR_LOCA_CFG_DALU_IE_SMASK				0x1ull
/*
* Table #13 of fxr_top - LOCA_IDI_STRAP
* This register captures the strap settings for the IDI interface.
*/
#define FXR_LOCA_IDI_STRAP					(FXR_LOCA_CSRS + 0x000000000048)
#define FXR_LOCA_IDI_STRAP_RESETCSR				0x0000000000000600ull
#define FXR_LOCA_IDI_STRAP_RESERVED_63_51_SHIFT			51
#define FXR_LOCA_IDI_STRAP_RESERVED_63_51_MASK			0x1FFFull
#define FXR_LOCA_IDI_STRAP_RESERVED_63_51_SMASK			0xFFF8000000000000ull
#define FXR_LOCA_IDI_STRAP_U2C_SPARE_SHIFT			43
#define FXR_LOCA_IDI_STRAP_U2C_SPARE_MASK			0xFFull
#define FXR_LOCA_IDI_STRAP_U2C_SPARE_SMASK			0x7F80000000000ull
#define FXR_LOCA_IDI_STRAP_U2C_ECC_SHIFT			42
#define FXR_LOCA_IDI_STRAP_U2C_ECC_MASK				0x1ull
#define FXR_LOCA_IDI_STRAP_U2C_ECC_SMASK			0x40000000000ull
#define FXR_LOCA_IDI_STRAP_U2C_PARITY_SHIFT			41
#define FXR_LOCA_IDI_STRAP_U2C_PARITY_MASK			0x1ull
#define FXR_LOCA_IDI_STRAP_U2C_PARITY_SMASK			0x20000000000ull
#define FXR_LOCA_IDI_STRAP_U2C_CLEANEVICT_SHIFT			40
#define FXR_LOCA_IDI_STRAP_U2C_CLEANEVICT_MASK			0x1ull
#define FXR_LOCA_IDI_STRAP_U2C_CLEANEVICT_SMASK			0x10000000000ull
#define FXR_LOCA_IDI_STRAP_RESERVED_39_37_SHIFT			37
#define FXR_LOCA_IDI_STRAP_RESERVED_39_37_MASK			0x7ull
#define FXR_LOCA_IDI_STRAP_RESERVED_39_37_SMASK			0xE000000000ull
#define FXR_LOCA_IDI_STRAP_U2C_VERSION_SHIFT			32
#define FXR_LOCA_IDI_STRAP_U2C_VERSION_MASK			0x1Full
#define FXR_LOCA_IDI_STRAP_U2C_VERSION_SMASK			0x1F00000000ull
#define FXR_LOCA_IDI_STRAP_RESERVED_31_19_SHIFT			19
#define FXR_LOCA_IDI_STRAP_RESERVED_31_19_MASK			0x1FFFull
#define FXR_LOCA_IDI_STRAP_RESERVED_31_19_SMASK			0xFFF80000ull
#define FXR_LOCA_IDI_STRAP_C2U_SPARE_SHIFT			13
#define FXR_LOCA_IDI_STRAP_C2U_SPARE_MASK			0x3Full
#define FXR_LOCA_IDI_STRAP_C2U_SPARE_SMASK			0x7E000ull
#define FXR_LOCA_IDI_STRAP_C2U_DATAHDRSEP_SHIFT			12
#define FXR_LOCA_IDI_STRAP_C2U_DATAHDRSEP_MASK			0x1ull
#define FXR_LOCA_IDI_STRAP_C2U_DATAHDRSEP_SMASK			0x1000ull
#define FXR_LOCA_IDI_STRAP_C2U_OWNED_SHIFT			11
#define FXR_LOCA_IDI_STRAP_C2U_OWNED_MASK			0x1ull
#define FXR_LOCA_IDI_STRAP_C2U_OWNED_SMASK			0x800ull
#define FXR_LOCA_IDI_STRAP_C2U_ECC_SHIFT			10
#define FXR_LOCA_IDI_STRAP_C2U_ECC_MASK				0x1ull
#define FXR_LOCA_IDI_STRAP_C2U_ECC_SMASK			0x400ull
#define FXR_LOCA_IDI_STRAP_C2U_PARITY_SHIFT			9
#define FXR_LOCA_IDI_STRAP_C2U_PARITY_MASK			0x1ull
#define FXR_LOCA_IDI_STRAP_C2U_PARITY_SMASK			0x200ull
#define FXR_LOCA_IDI_STRAP_C2U_HASH_SHIFT			8
#define FXR_LOCA_IDI_STRAP_C2U_HASH_MASK			0x1ull
#define FXR_LOCA_IDI_STRAP_C2U_HASH_SMASK			0x100ull
#define FXR_LOCA_IDI_STRAP_RESERVED_7_5_SHIFT			5
#define FXR_LOCA_IDI_STRAP_RESERVED_7_5_MASK			0x7ull
#define FXR_LOCA_IDI_STRAP_RESERVED_7_5_SMASK			0xE0ull
#define FXR_LOCA_IDI_STRAP_C2U_VERSION_SHIFT			0
#define FXR_LOCA_IDI_STRAP_C2U_VERSION_MASK			0x1Full
#define FXR_LOCA_IDI_STRAP_C2U_VERSION_SMASK			0x1Full
/*
* Table #14 of fxr_top - LOCA_DBG_CACHE_CLN
* This register controls various cache clean operations in the Data Cache. A 
* cache clean operation evicts modified lines to the uncore and invalidates 
* clean lines. Clean data eviction notification will be signaled to the uncore 
* if the Clean Evict Notify strap bit is set.
*/
#define FXR_LOCA_DBG_CACHE_CLN					(FXR_LOCA_CSRS + 0x000000000050)
#define FXR_LOCA_DBG_CACHE_CLN_RESETCSR				0x0000000000000000ull
#define FXR_LOCA_DBG_CACHE_CLN_RESERVED_63_52_SHIFT		52
#define FXR_LOCA_DBG_CACHE_CLN_RESERVED_63_52_MASK		0xFFFull
#define FXR_LOCA_DBG_CACHE_CLN_RESERVED_63_52_SMASK		0xFFF0000000000000ull
#define FXR_LOCA_DBG_CACHE_CLN_ADDR_SHIFT			6
#define FXR_LOCA_DBG_CACHE_CLN_ADDR_MASK			0x3FFFFFFFFFFFull
#define FXR_LOCA_DBG_CACHE_CLN_ADDR_SMASK			0xFFFFFFFFFFFC0ull
#define FXR_LOCA_DBG_CACHE_CLN_RESERVED_5_3_SHIFT		3
#define FXR_LOCA_DBG_CACHE_CLN_RESERVED_5_3_MASK		0x7ull
#define FXR_LOCA_DBG_CACHE_CLN_RESERVED_5_3_SMASK		0x38ull
#define FXR_LOCA_DBG_CACHE_CLN_HW_SEQ_CC_SHIFT			2
#define FXR_LOCA_DBG_CACHE_CLN_HW_SEQ_CC_MASK			0x1ull
#define FXR_LOCA_DBG_CACHE_CLN_HW_SEQ_CC_SMASK			0x4ull
#define FXR_LOCA_DBG_CACHE_CLN_CC_ENTRY_SHIFT			1
#define FXR_LOCA_DBG_CACHE_CLN_CC_ENTRY_MASK			0x1ull
#define FXR_LOCA_DBG_CACHE_CLN_CC_ENTRY_SMASK			0x2ull
#define FXR_LOCA_DBG_CACHE_CLN_CC_ADDR_SHIFT			0
#define FXR_LOCA_DBG_CACHE_CLN_CC_ADDR_MASK			0x1ull
#define FXR_LOCA_DBG_CACHE_CLN_CC_ADDR_SMASK			0x1ull
/*
* Table #15 of fxr_top - LOCA_DBG_ERRINJECT
* This register enables error injection into the DCache Read Data..
*/
#define FXR_LOCA_DBG_ERRINJECT					(FXR_LOCA_CSRS + 0x000000000058)
#define FXR_LOCA_DBG_ERRINJECT_RESETCSR				0x0000000000000000ull
#define FXR_LOCA_DBG_ERRINJECT_RESERVED_63_16_SHIFT		16
#define FXR_LOCA_DBG_ERRINJECT_RESERVED_63_16_MASK		0xFFFFFFFFFFFFull
#define FXR_LOCA_DBG_ERRINJECT_RESERVED_63_16_SMASK		0xFFFFFFFFFFFF0000ull
#define FXR_LOCA_DBG_ERRINJECT_ENABLE_SHIFT			8
#define FXR_LOCA_DBG_ERRINJECT_ENABLE_MASK			0xFFull
#define FXR_LOCA_DBG_ERRINJECT_ENABLE_SMASK			0xFF00ull
#define FXR_LOCA_DBG_ERRINJECT_MASK_SHIFT			0
#define FXR_LOCA_DBG_ERRINJECT_MASK_MASK			0xFFull
#define FXR_LOCA_DBG_ERRINJECT_MASK_SMASK			0xFFull
/*
* Table #16 of fxr_top - LOCA_DBG_PROBE_ADDR
* Writes to this CSR will probe the DCache Directory and Data for cache hit, 
* line status and data contents. The write data provides the physical cache line 
* address used by the probe operation and a Valid bit to initiate the probe 
* operation. The #%%#LOCA_DBG_PROBE_DIR#%%# CSR provides Directory Status 
* information and the #%%#LOCA_DBG_PROBE_DATA#%%# CSRs provide the DCache Data 
* contents when the physical address hits in the cache. Reads to this register 
* return the register contents with no side effects.  
*/
#define FXR_LOCA_DBG_PROBE_ADDR					(FXR_LOCA_CSRS + 0x000000000070)
#define FXR_LOCA_DBG_PROBE_ADDR_RESETCSR			0x0000000000000000ull
#define FXR_LOCA_DBG_PROBE_ADDR_RESERVED_63_52_SHIFT		52
#define FXR_LOCA_DBG_PROBE_ADDR_RESERVED_63_52_MASK		0xFFFull
#define FXR_LOCA_DBG_PROBE_ADDR_RESERVED_63_52_SMASK		0xFFF0000000000000ull
#define FXR_LOCA_DBG_PROBE_ADDR_ADDR_SHIFT			6
#define FXR_LOCA_DBG_PROBE_ADDR_ADDR_MASK			0x3FFFFFFFFFFFull
#define FXR_LOCA_DBG_PROBE_ADDR_ADDR_SMASK			0xFFFFFFFFFFFC0ull
#define FXR_LOCA_DBG_PROBE_ADDR_RESERVED_5_1_SHIFT		1
#define FXR_LOCA_DBG_PROBE_ADDR_RESERVED_5_1_MASK		0x1Full
#define FXR_LOCA_DBG_PROBE_ADDR_RESERVED_5_1_SMASK		0x3Eull
#define FXR_LOCA_DBG_PROBE_ADDR_GO_SHIFT			0
#define FXR_LOCA_DBG_PROBE_ADDR_GO_MASK				0x1ull
#define FXR_LOCA_DBG_PROBE_ADDR_GO_SMASK			0x1ull
/*
* Table #17 of fxr_top - LOCA_DBG_PROBE_DIR
* This CSR contains the Data Cache Directory State from a Data Cache Probe 
* operation. See #%%#LOCA_DBG_PROBE_ADDR#%%# for details 
*/
#define FXR_LOCA_DBG_PROBE_DIR					(FXR_LOCA_CSRS + 0x000000000078)
#define FXR_LOCA_DBG_PROBE_DIR_RESETCSR				0x0000000000000000ull
#define FXR_LOCA_DBG_PROBE_DIR_RESERVED_63_48_SHIFT		48
#define FXR_LOCA_DBG_PROBE_DIR_RESERVED_63_48_MASK		0xFFFFull
#define FXR_LOCA_DBG_PROBE_DIR_RESERVED_63_48_SMASK		0xFFFF000000000000ull
#define FXR_LOCA_DBG_PROBE_DIR_PCAM_SNPFWD_SHIFT		47
#define FXR_LOCA_DBG_PROBE_DIR_PCAM_SNPFWD_MASK			0x1ull
#define FXR_LOCA_DBG_PROBE_DIR_PCAM_SNPFWD_SMASK		0x800000000000ull
#define FXR_LOCA_DBG_PROBE_DIR_PCAM_PROQID_SHIFT		38
#define FXR_LOCA_DBG_PROBE_DIR_PCAM_PROQID_MASK			0x1FFull
#define FXR_LOCA_DBG_PROBE_DIR_PCAM_PROQID_SMASK		0x7FC000000000ull
#define FXR_LOCA_DBG_PROBE_DIR_PCAM_PROQEFILL_SHIFT		37
#define FXR_LOCA_DBG_PROBE_DIR_PCAM_PROQEFILL_MASK		0x1ull
#define FXR_LOCA_DBG_PROBE_DIR_PCAM_PROQEFILL_SMASK		0x2000000000ull
#define FXR_LOCA_DBG_PROBE_DIR_PCAM_PROQSRPLY_SHIFT		36
#define FXR_LOCA_DBG_PROBE_DIR_PCAM_PROQSRPLY_MASK		0x1ull
#define FXR_LOCA_DBG_PROBE_DIR_PCAM_PROQSRPLY_SMASK		0x1000000000ull
#define FXR_LOCA_DBG_PROBE_DIR_PCAM_CONQTP_SHIFT		28
#define FXR_LOCA_DBG_PROBE_DIR_PCAM_CONQTP_MASK			0xFFull
#define FXR_LOCA_DBG_PROBE_DIR_PCAM_CONQTP_SMASK		0xFF0000000ull
#define FXR_LOCA_DBG_PROBE_DIR_PCAM_CONQHP_SHIFT		20
#define FXR_LOCA_DBG_PROBE_DIR_PCAM_CONQHP_MASK			0xFFull
#define FXR_LOCA_DBG_PROBE_DIR_PCAM_CONQHP_SMASK		0xFF00000ull
#define FXR_LOCA_DBG_PROBE_DIR_PCAM_CONQVAL_SHIFT		19
#define FXR_LOCA_DBG_PROBE_DIR_PCAM_CONQVAL_MASK		0x1ull
#define FXR_LOCA_DBG_PROBE_DIR_PCAM_CONQVAL_SMASK		0x80000ull
#define FXR_LOCA_DBG_PROBE_DIR_PCAM_WAY_SHIFT			15
#define FXR_LOCA_DBG_PROBE_DIR_PCAM_WAY_MASK			0xFull
#define FXR_LOCA_DBG_PROBE_DIR_PCAM_WAY_SMASK			0x78000ull
#define FXR_LOCA_DBG_PROBE_DIR_PCAM_CHINT1_SHIFT		14
#define FXR_LOCA_DBG_PROBE_DIR_PCAM_CHINT1_MASK			0x1ull
#define FXR_LOCA_DBG_PROBE_DIR_PCAM_CHINT1_SMASK		0x4000ull
#define FXR_LOCA_DBG_PROBE_DIR_PCAM_RPLFLG_SHIFT		13
#define FXR_LOCA_DBG_PROBE_DIR_PCAM_RPLFLG_MASK			0x1ull
#define FXR_LOCA_DBG_PROBE_DIR_PCAM_RPLFLG_SMASK		0x2000ull
#define FXR_LOCA_DBG_PROBE_DIR_PCAM_PREFETCH_SHIFT		12
#define FXR_LOCA_DBG_PROBE_DIR_PCAM_PREFETCH_MASK		0x1ull
#define FXR_LOCA_DBG_PROBE_DIR_PCAM_PREFETCH_SMASK		0x1000ull
#define FXR_LOCA_DBG_PROBE_DIR_PCAM_STATE_SHIFT			8
#define FXR_LOCA_DBG_PROBE_DIR_PCAM_STATE_MASK			0xFull
#define FXR_LOCA_DBG_PROBE_DIR_PCAM_STATE_SMASK			0xF00ull
#define FXR_LOCA_DBG_PROBE_DIR_DCD_MESIF_SHIFT			4
#define FXR_LOCA_DBG_PROBE_DIR_DCD_MESIF_MASK			0xFull
#define FXR_LOCA_DBG_PROBE_DIR_DCD_MESIF_SMASK			0xF0ull
#define FXR_LOCA_DBG_PROBE_DIR_RESERVED_3_SHIFT			3
#define FXR_LOCA_DBG_PROBE_DIR_RESERVED_3_MASK			0x1ull
#define FXR_LOCA_DBG_PROBE_DIR_RESERVED_3_SMASK			0x8ull
#define FXR_LOCA_DBG_PROBE_DIR_PCAM_HIT_SHIFT			2
#define FXR_LOCA_DBG_PROBE_DIR_PCAM_HIT_MASK			0x1ull
#define FXR_LOCA_DBG_PROBE_DIR_PCAM_HIT_SMASK			0x4ull
#define FXR_LOCA_DBG_PROBE_DIR_DCD_HIT_SHIFT			1
#define FXR_LOCA_DBG_PROBE_DIR_DCD_HIT_MASK			0x1ull
#define FXR_LOCA_DBG_PROBE_DIR_DCD_HIT_SMASK			0x2ull
#define FXR_LOCA_DBG_PROBE_DIR_VALID_SHIFT			0
#define FXR_LOCA_DBG_PROBE_DIR_VALID_MASK			0x1ull
#define FXR_LOCA_DBG_PROBE_DIR_VALID_SMASK			0x1ull
/*
* Table #18 of fxr_top - LOCA_DBG_PROBE_DATA
* These 8 CSRs provide the Data Cache contents resulting from a Cache Probe 
* operation. See #%%#LOCA_DBG_PROBE_ADDR#%%# for details on initiating a probe 
* request. The contents of these CSRs are valid when the #%%#LOCA_DBG_PROBE_DIR#%%#.VALID 
* bit is set and the #%%#LOCA_DBG_PROBE_DIR#%%# contents indicate the probe 
* resulted in a Cache Hit. Register offset 0x80 provides the least significant 
* 8B of cache line data and register offset 0xB8 provides the most significant 
* 8B of cache line data.  
*/
#define FXR_LOCA_DBG_PROBE_DATA					(FXR_LOCA_CSRS + 0x000000000080)
#define FXR_LOCA_DBG_PROBE_DATA_RESETCSR			0x0000000000000000ull
#define FXR_LOCA_DBG_PROBE_DATA_DATA_SHIFT			0
#define FXR_LOCA_DBG_PROBE_DATA_DATA_MASK			0xFFFFFFFFFFFFFFFFull
#define FXR_LOCA_DBG_PROBE_DATA_DATA_SMASK			0xFFFFFFFFFFFFFFFFull
/*
* Table #19 of fxr_top - LOCA_HIFIS_CFG_CONTROL1
* Various HIFIS Block control for 1.5Ghz domain logic.The ARB_CTL control fields 
* in this CSR define the priority for arbitration selection when two are more 
* request inputs are valid. A local pointer into the 16-bit field selects a bit 
* which determines the priority for a given arbitration cycle. The local pointer 
* advances to the next bit after an active arbitration cycle. Note that a valid 
* request is blocked only when a valid higher priority request is 
* presented.l
*/
#define FXR_LOCA_HIFIS_CFG_CONTROL1				(FXR_LOCA_CSRS + 0x000000000100)
#define FXR_LOCA_HIFIS_CFG_CONTROL1_RESETCSR			0x0000001EAAAA4924ull
#define FXR_LOCA_HIFIS_CFG_CONTROL1_ECC_CORR_BYPASS_SHIFT	63
#define FXR_LOCA_HIFIS_CFG_CONTROL1_ECC_CORR_BYPASS_MASK	0x1ull
#define FXR_LOCA_HIFIS_CFG_CONTROL1_ECC_CORR_BYPASS_SMASK	0x8000000000000000ull
#define FXR_LOCA_HIFIS_CFG_CONTROL1_RESERVED_62_38_SHIFT	38
#define FXR_LOCA_HIFIS_CFG_CONTROL1_RESERVED_62_38_MASK		0x1FFFFFFull
#define FXR_LOCA_HIFIS_CFG_CONTROL1_RESERVED_62_38_SMASK	0x7FFFFFC000000000ull
#define FXR_LOCA_HIFIS_CFG_CONTROL1_RSPACK_THRESH_SHIFT		32
#define FXR_LOCA_HIFIS_CFG_CONTROL1_RSPACK_THRESH_MASK		0x3Full
#define FXR_LOCA_HIFIS_CFG_CONTROL1_RSPACK_THRESH_SMASK		0x3F00000000ull
#define FXR_LOCA_HIFIS_CFG_CONTROL1_ARB_CNTL_A_SHIFT		16
#define FXR_LOCA_HIFIS_CFG_CONTROL1_ARB_CNTL_A_MASK		0xFFFFull
#define FXR_LOCA_HIFIS_CFG_CONTROL1_ARB_CNTL_A_SMASK		0xFFFF0000ull
#define FXR_LOCA_HIFIS_CFG_CONTROL1_ARB_CNTL_B_SHIFT		0
#define FXR_LOCA_HIFIS_CFG_CONTROL1_ARB_CNTL_B_MASK		0xFFFFull
#define FXR_LOCA_HIFIS_CFG_CONTROL1_ARB_CNTL_B_SMASK		0xFFFFull
/*
* Table #20 of fxr_top - LOCA0_ERR_STS
* This is the Error Status CSR. Bits are set by hardware or by writing to the 
* LOCA_ERR_FRC CSR. Bits are cleared by writing to the LOCA_ERR_CLR 
* CSR.
*/
#define FXR_LOCA0_ERR_STS					(FXR_LOCA_CSRS + 0x000000000200)
#define FXR_LOCA0_ERR_STS_RESETCSR				0x0000000000000000ull
#define FXR_LOCA0_ERR_STS_RESERVED_63_SHIFT			63
#define FXR_LOCA0_ERR_STS_RESERVED_63_MASK			0x1ull
#define FXR_LOCA0_ERR_STS_RESERVED_63_SMASK			0x8000000000000000ull
#define FXR_LOCA0_ERR_STS_WRIFILL_SBE_SHIFT			62
#define FXR_LOCA0_ERR_STS_WRIFILL_SBE_MASK			0x1ull
#define FXR_LOCA0_ERR_STS_WRIFILL_SBE_SMASK			0x4000000000000000ull
#define FXR_LOCA0_ERR_STS_DCACHE_SBE_SHIFT			61
#define FXR_LOCA0_ERR_STS_DCACHE_SBE_MASK			0x1ull
#define FXR_LOCA0_ERR_STS_DCACHE_SBE_SMASK			0x2000000000000000ull
#define FXR_LOCA0_ERR_STS_ADM_SL_DB_SBE_SHIFT			60
#define FXR_LOCA0_ERR_STS_ADM_SL_DB_SBE_MASK			0x1ull
#define FXR_LOCA0_ERR_STS_ADM_SL_DB_SBE_SMASK			0x1000000000000000ull
#define FXR_LOCA0_ERR_STS_ADM_RE_DB_SBE_SHIFT			59
#define FXR_LOCA0_ERR_STS_ADM_RE_DB_SBE_MASK			0x1ull
#define FXR_LOCA0_ERR_STS_ADM_RE_DB_SBE_SMASK			0x800000000000000ull
#define FXR_LOCA0_ERR_STS_ADM_PAF_DB_SBE_SHIFT			58
#define FXR_LOCA0_ERR_STS_ADM_PAF_DB_SBE_MASK			0x1ull
#define FXR_LOCA0_ERR_STS_ADM_PAF_DB_SBE_SMASK			0x400000000000000ull
#define FXR_LOCA0_ERR_STS_ADM_HDR_DB_SBE_SHIFT			57
#define FXR_LOCA0_ERR_STS_ADM_HDR_DB_SBE_MASK			0x1ull
#define FXR_LOCA0_ERR_STS_ADM_HDR_DB_SBE_SMASK			0x200000000000000ull
#define FXR_LOCA0_ERR_STS_ADM_CAS_DB_SBE_SHIFT			56
#define FXR_LOCA0_ERR_STS_ADM_CAS_DB_SBE_MASK			0x1ull
#define FXR_LOCA0_ERR_STS_ADM_CAS_DB_SBE_SMASK			0x100000000000000ull
#define FXR_LOCA0_ERR_STS_HCC_REPLAY_ERR_SHIFT			55
#define FXR_LOCA0_ERR_STS_HCC_REPLAY_ERR_MASK			0x1ull
#define FXR_LOCA0_ERR_STS_HCC_REPLAY_ERR_SMASK			0x80000000000000ull
#define FXR_LOCA0_ERR_STS_PCAM_SBE_SHIFT			54
#define FXR_LOCA0_ERR_STS_PCAM_SBE_MASK				0x1ull
#define FXR_LOCA0_ERR_STS_PCAM_SBE_SMASK			0x40000000000000ull
#define FXR_LOCA0_ERR_STS_MRU_TABLE_SBE_SHIFT			53
#define FXR_LOCA0_ERR_STS_MRU_TABLE_SBE_MASK			0x1ull
#define FXR_LOCA0_ERR_STS_MRU_TABLE_SBE_SMASK			0x20000000000000ull
#define FXR_LOCA0_ERR_STS_IMI_ORB_SCH_SBE_SHIFT			52
#define FXR_LOCA0_ERR_STS_IMI_ORB_SCH_SBE_MASK			0x1ull
#define FXR_LOCA0_ERR_STS_IMI_ORB_SCH_SBE_SMASK			0x10000000000000ull
#define FXR_LOCA0_ERR_STS_IMI_ORB_RSP_SBE_SHIFT			51
#define FXR_LOCA0_ERR_STS_IMI_ORB_RSP_SBE_MASK			0x1ull
#define FXR_LOCA0_ERR_STS_IMI_ORB_RSP_SBE_SMASK			0x8000000000000ull
#define FXR_LOCA0_ERR_STS_IMI_ORB_CNF_SBE_SHIFT			50
#define FXR_LOCA0_ERR_STS_IMI_ORB_CNF_SBE_MASK			0x1ull
#define FXR_LOCA0_ERR_STS_IMI_ORB_CNF_SBE_SMASK			0x4000000000000ull
#define FXR_LOCA0_ERR_STS_C2U_DATA_SBE_SHIFT			49
#define FXR_LOCA0_ERR_STS_C2U_DATA_SBE_MASK			0x1ull
#define FXR_LOCA0_ERR_STS_C2U_DATA_SBE_SMASK			0x2000000000000ull
#define FXR_LOCA0_ERR_STS_C2U_WP_SBE_SHIFT			48
#define FXR_LOCA0_ERR_STS_C2U_WP_SBE_MASK			0x1ull
#define FXR_LOCA0_ERR_STS_C2U_WP_SBE_SMASK			0x1000000000000ull
#define FXR_LOCA0_ERR_STS_C2U_SNP_SBE_SHIFT			47
#define FXR_LOCA0_ERR_STS_C2U_SNP_SBE_MASK			0x1ull
#define FXR_LOCA0_ERR_STS_C2U_SNP_SBE_SMASK			0x800000000000ull
#define FXR_LOCA0_ERR_STS_C2U_NQB_SBE_SHIFT			46
#define FXR_LOCA0_ERR_STS_C2U_NQB_SBE_MASK			0x1ull
#define FXR_LOCA0_ERR_STS_C2U_NQB_SBE_SMASK			0x400000000000ull
#define FXR_LOCA0_ERR_STS_C2U_EQB_SBE_SHIFT			45
#define FXR_LOCA0_ERR_STS_C2U_EQB_SBE_MASK			0x1ull
#define FXR_LOCA0_ERR_STS_C2U_EQB_SBE_SMASK			0x200000000000ull
#define FXR_LOCA0_ERR_STS_U2C_WP_SBE_SHIFT			44
#define FXR_LOCA0_ERR_STS_U2C_WP_SBE_MASK			0x1ull
#define FXR_LOCA0_ERR_STS_U2C_WP_SBE_SMASK			0x100000000000ull
#define FXR_LOCA0_ERR_STS_U2C_DIR_SBE_SHIFT			43
#define FXR_LOCA0_ERR_STS_U2C_DIR_SBE_MASK			0x1ull
#define FXR_LOCA0_ERR_STS_U2C_DIR_SBE_SMASK			0x80000000000ull
#define FXR_LOCA0_ERR_STS_U2C_POI_SBE_SHIFT			42
#define FXR_LOCA0_ERR_STS_U2C_POI_SBE_MASK			0x1ull
#define FXR_LOCA0_ERR_STS_U2C_POI_SBE_SMASK			0x40000000000ull
#define FXR_LOCA0_ERR_STS_U2C_DATA_SBE_SHIFT			41
#define FXR_LOCA0_ERR_STS_U2C_DATA_SBE_MASK			0x1ull
#define FXR_LOCA0_ERR_STS_U2C_DATA_SBE_SMASK			0x20000000000ull
#define FXR_LOCA0_ERR_STS_ITI_WP_SBE_SHIFT			40
#define FXR_LOCA0_ERR_STS_ITI_WP_SBE_MASK			0x1ull
#define FXR_LOCA0_ERR_STS_ITI_WP_SBE_SMASK			0x10000000000ull
#define FXR_LOCA0_ERR_STS_CONQ_HDR_SBE_SHIFT			39
#define FXR_LOCA0_ERR_STS_CONQ_HDR_SBE_MASK			0x1ull
#define FXR_LOCA0_ERR_STS_CONQ_HDR_SBE_SMASK			0x8000000000ull
#define FXR_LOCA0_ERR_STS_PROQ_HL_SBE_SHIFT			38
#define FXR_LOCA0_ERR_STS_PROQ_HL_SBE_MASK			0x1ull
#define FXR_LOCA0_ERR_STS_PROQ_HL_SBE_SMASK			0x4000000000ull
#define FXR_LOCA0_ERR_STS_PROQ_F_SBE_SHIFT			37
#define FXR_LOCA0_ERR_STS_PROQ_F_SBE_MASK			0x1ull
#define FXR_LOCA0_ERR_STS_PROQ_F_SBE_SMASK			0x2000000000ull
#define FXR_LOCA0_ERR_STS_PROQ_G_SBE_SHIFT			36
#define FXR_LOCA0_ERR_STS_PROQ_G_SBE_MASK			0x1ull
#define FXR_LOCA0_ERR_STS_PROQ_G_SBE_SMASK			0x1000000000ull
#define FXR_LOCA0_ERR_STS_HCC_RPL_DELAY_PERR_SHIFT		35
#define FXR_LOCA0_ERR_STS_HCC_RPL_DELAY_PERR_MASK		0x1ull
#define FXR_LOCA0_ERR_STS_HCC_RPL_DELAY_PERR_SMASK		0x800000000ull
#define FXR_LOCA0_ERR_STS_WRIFILL_MBE_SHIFT			34
#define FXR_LOCA0_ERR_STS_WRIFILL_MBE_MASK			0x1ull
#define FXR_LOCA0_ERR_STS_WRIFILL_MBE_SMASK			0x400000000ull
#define FXR_LOCA0_ERR_STS_DCACHE_MBE_SHIFT			33
#define FXR_LOCA0_ERR_STS_DCACHE_MBE_MASK			0x1ull
#define FXR_LOCA0_ERR_STS_DCACHE_MBE_SMASK			0x200000000ull
#define FXR_LOCA0_ERR_STS_ADM_SL_DB_MBE_SHIFT			32
#define FXR_LOCA0_ERR_STS_ADM_SL_DB_MBE_MASK			0x1ull
#define FXR_LOCA0_ERR_STS_ADM_SL_DB_MBE_SMASK			0x100000000ull
#define FXR_LOCA0_ERR_STS_ADM_RE_DB_MBE_SHIFT			31
#define FXR_LOCA0_ERR_STS_ADM_RE_DB_MBE_MASK			0x1ull
#define FXR_LOCA0_ERR_STS_ADM_RE_DB_MBE_SMASK			0x80000000ull
#define FXR_LOCA0_ERR_STS_ADM_PAF_DB_MBE_SHIFT			30
#define FXR_LOCA0_ERR_STS_ADM_PAF_DB_MBE_MASK			0x1ull
#define FXR_LOCA0_ERR_STS_ADM_PAF_DB_MBE_SMASK			0x40000000ull
#define FXR_LOCA0_ERR_STS_ADM_HDR_DB_MBE_SHIFT			29
#define FXR_LOCA0_ERR_STS_ADM_HDR_DB_MBE_MASK			0x1ull
#define FXR_LOCA0_ERR_STS_ADM_HDR_DB_MBE_SMASK			0x20000000ull
#define FXR_LOCA0_ERR_STS_ADM_CAS_DB_MBE_SHIFT			28
#define FXR_LOCA0_ERR_STS_ADM_CAS_DB_MBE_MASK			0x1ull
#define FXR_LOCA0_ERR_STS_ADM_CAS_DB_MBE_SMASK			0x10000000ull
#define FXR_LOCA0_ERR_STS_HCC_DCD_TAG_MBE_SHIFT			27
#define FXR_LOCA0_ERR_STS_HCC_DCD_TAG_MBE_MASK			0x1ull
#define FXR_LOCA0_ERR_STS_HCC_DCD_TAG_MBE_SMASK			0x8000000ull
#define FXR_LOCA0_ERR_STS_PCAM_MBE_SHIFT			26
#define FXR_LOCA0_ERR_STS_PCAM_MBE_MASK				0x1ull
#define FXR_LOCA0_ERR_STS_PCAM_MBE_SMASK			0x4000000ull
#define FXR_LOCA0_ERR_STS_MRU_TABLE_MBE_SHIFT			25
#define FXR_LOCA0_ERR_STS_MRU_TABLE_MBE_MASK			0x1ull
#define FXR_LOCA0_ERR_STS_MRU_TABLE_MBE_SMASK			0x2000000ull
#define FXR_LOCA0_ERR_STS_IMI_ORB_SCH_MBE_SHIFT			24
#define FXR_LOCA0_ERR_STS_IMI_ORB_SCH_MBE_MASK			0x1ull
#define FXR_LOCA0_ERR_STS_IMI_ORB_SCH_MBE_SMASK			0x1000000ull
#define FXR_LOCA0_ERR_STS_IMI_ORB_RSP_MBE_SHIFT			23
#define FXR_LOCA0_ERR_STS_IMI_ORB_RSP_MBE_MASK			0x1ull
#define FXR_LOCA0_ERR_STS_IMI_ORB_RSP_MBE_SMASK			0x800000ull
#define FXR_LOCA0_ERR_STS_IMI_ORB_CNF_MBE_SHIFT			22
#define FXR_LOCA0_ERR_STS_IMI_ORB_CNF_MBE_MASK			0x1ull
#define FXR_LOCA0_ERR_STS_IMI_ORB_CNF_MBE_SMASK			0x400000ull
#define FXR_LOCA0_ERR_STS_C2U_DATA_MBE_SHIFT			21
#define FXR_LOCA0_ERR_STS_C2U_DATA_MBE_MASK			0x1ull
#define FXR_LOCA0_ERR_STS_C2U_DATA_MBE_SMASK			0x200000ull
#define FXR_LOCA0_ERR_STS_C2U_WP_MBE_SHIFT			20
#define FXR_LOCA0_ERR_STS_C2U_WP_MBE_MASK			0x1ull
#define FXR_LOCA0_ERR_STS_C2U_WP_MBE_SMASK			0x100000ull
#define FXR_LOCA0_ERR_STS_C2U_SNP_MBE_SHIFT			19
#define FXR_LOCA0_ERR_STS_C2U_SNP_MBE_MASK			0x1ull
#define FXR_LOCA0_ERR_STS_C2U_SNP_MBE_SMASK			0x80000ull
#define FXR_LOCA0_ERR_STS_C2U_NQB_MBE_SHIFT			18
#define FXR_LOCA0_ERR_STS_C2U_NQB_MBE_MASK			0x1ull
#define FXR_LOCA0_ERR_STS_C2U_NQB_MBE_SMASK			0x40000ull
#define FXR_LOCA0_ERR_STS_C2U_EQB_MBE_SHIFT			17
#define FXR_LOCA0_ERR_STS_C2U_EQB_MBE_MASK			0x1ull
#define FXR_LOCA0_ERR_STS_C2U_EQB_MBE_SMASK			0x20000ull
#define FXR_LOCA0_ERR_STS_U2C_WP_MBE_SHIFT			16
#define FXR_LOCA0_ERR_STS_U2C_WP_MBE_MASK			0x1ull
#define FXR_LOCA0_ERR_STS_U2C_WP_MBE_SMASK			0x10000ull
#define FXR_LOCA0_ERR_STS_U2C_DIR_MBE_SHIFT			15
#define FXR_LOCA0_ERR_STS_U2C_DIR_MBE_MASK			0x1ull
#define FXR_LOCA0_ERR_STS_U2C_DIR_MBE_SMASK			0x8000ull
#define FXR_LOCA0_ERR_STS_U2C_POI_MBE_SHIFT			14
#define FXR_LOCA0_ERR_STS_U2C_POI_MBE_MASK			0x1ull
#define FXR_LOCA0_ERR_STS_U2C_POI_MBE_SMASK			0x4000ull
#define FXR_LOCA0_ERR_STS_U2C_DATA_MBE_SHIFT			13
#define FXR_LOCA0_ERR_STS_U2C_DATA_MBE_MASK			0x1ull
#define FXR_LOCA0_ERR_STS_U2C_DATA_MBE_SMASK			0x2000ull
#define FXR_LOCA0_ERR_STS_ITI_WP_MBE_SHIFT			12
#define FXR_LOCA0_ERR_STS_ITI_WP_MBE_MASK			0x1ull
#define FXR_LOCA0_ERR_STS_ITI_WP_MBE_SMASK			0x1000ull
#define FXR_LOCA0_ERR_STS_CONQ_HDR_MBE_SHIFT			11
#define FXR_LOCA0_ERR_STS_CONQ_HDR_MBE_MASK			0x1ull
#define FXR_LOCA0_ERR_STS_CONQ_HDR_MBE_SMASK			0x800ull
#define FXR_LOCA0_ERR_STS_PROQ_HL_MBE_SHIFT			10
#define FXR_LOCA0_ERR_STS_PROQ_HL_MBE_MASK			0x1ull
#define FXR_LOCA0_ERR_STS_PROQ_HL_MBE_SMASK			0x400ull
#define FXR_LOCA0_ERR_STS_PROQ_F_MBE_SHIFT			9
#define FXR_LOCA0_ERR_STS_PROQ_F_MBE_MASK			0x1ull
#define FXR_LOCA0_ERR_STS_PROQ_F_MBE_SMASK			0x200ull
#define FXR_LOCA0_ERR_STS_PROQ_G_MBE_SHIFT			8
#define FXR_LOCA0_ERR_STS_PROQ_G_MBE_MASK			0x1ull
#define FXR_LOCA0_ERR_STS_PROQ_G_MBE_SMASK			0x100ull
#define FXR_LOCA0_ERR_STS_IMI_REQ_QUE_ERR_SHIFT			7
#define FXR_LOCA0_ERR_STS_IMI_REQ_QUE_ERR_MASK			0x1ull
#define FXR_LOCA0_ERR_STS_IMI_REQ_QUE_ERR_SMASK			0x80ull
#define FXR_LOCA0_ERR_STS_DPB_SNPQ_ERR_SHIFT			6
#define FXR_LOCA0_ERR_STS_DPB_SNPQ_ERR_MASK			0x1ull
#define FXR_LOCA0_ERR_STS_DPB_SNPQ_ERR_SMASK			0x40ull
#define FXR_LOCA0_ERR_STS_U2C_RSP_PE_SHIFT			5
#define FXR_LOCA0_ERR_STS_U2C_RSP_PE_MASK			0x1ull
#define FXR_LOCA0_ERR_STS_U2C_RSP_PE_SMASK			0x20ull
#define FXR_LOCA0_ERR_STS_U2C_RSP_GO_SHIFT			4
#define FXR_LOCA0_ERR_STS_U2C_RSP_GO_MASK			0x1ull
#define FXR_LOCA0_ERR_STS_U2C_RSP_GO_SMASK			0x10ull
#define FXR_LOCA0_ERR_STS_U2C_RSP_INVALID_SHIFT			3
#define FXR_LOCA0_ERR_STS_U2C_RSP_INVALID_MASK			0x1ull
#define FXR_LOCA0_ERR_STS_U2C_RSP_INVALID_SMASK			0x8ull
#define FXR_LOCA0_ERR_STS_U2C_RSP_OPCODE_SHIFT			2
#define FXR_LOCA0_ERR_STS_U2C_RSP_OPCODE_MASK			0x1ull
#define FXR_LOCA0_ERR_STS_U2C_RSP_OPCODE_SMASK			0x4ull
#define FXR_LOCA0_ERR_STS_U2C_REQ_PE_SHIFT			1
#define FXR_LOCA0_ERR_STS_U2C_REQ_PE_MASK			0x1ull
#define FXR_LOCA0_ERR_STS_U2C_REQ_PE_SMASK			0x2ull
#define FXR_LOCA0_ERR_STS_HCC_IDI_RSP_ERR_SHIFT			0
#define FXR_LOCA0_ERR_STS_HCC_IDI_RSP_ERR_MASK			0x1ull
#define FXR_LOCA0_ERR_STS_HCC_IDI_RSP_ERR_SMASK			0x1ull
/*
* Table #21 of fxr_top - LOCA0_ERR_CLR
* This is the Error Clear CSR. Writing a 1 to a valid bit will clear the 
* corresponding bit in the LOCA_ERR_STS CSR.
*/
#define FXR_LOCA0_ERR_CLR					(FXR_LOCA_CSRS + 0x000000000208)
#define FXR_LOCA0_ERR_CLR_RESETCSR				0x0000000000000000ull
#define FXR_LOCA0_ERR_CLR_EVENTS_SHIFT				0
#define FXR_LOCA0_ERR_CLR_EVENTS_MASK				0xFFFFFFFFFFFFFFFFull
#define FXR_LOCA0_ERR_CLR_EVENTS_SMASK				0xFFFFFFFFFFFFFFFFull
/*
* Table #22 of fxr_top - LOCA0_ERR_FRC
* This is the Error Force CSR. Writing a 1 to a valid bit will set the 
* corresponding bit in the LOCA_ERR_STS CSR.
*/
#define FXR_LOCA0_ERR_FRC					(FXR_LOCA_CSRS + 0x000000000210)
#define FXR_LOCA0_ERR_FRC_RESETCSR				0x0000000000000000ull
#define FXR_LOCA0_ERR_FRC_EVENTS_SHIFT				0
#define FXR_LOCA0_ERR_FRC_EVENTS_MASK				0xFFFFFFFFFFFFFFFFull
#define FXR_LOCA0_ERR_FRC_EVENTS_SMASK				0xFFFFFFFFFFFFFFFFull
/*
* Table #23 of fxr_top - LOCA0_ERR_EN_HOST
* This is the Error Enable for the Host Interrupt. If a bit is set, the 
* corresponding error bit in LOCA_ERR_STS will cause an interrupt on the HOST 
* interrupt signal.
*/
#define FXR_LOCA0_ERR_EN_HOST					(FXR_LOCA_CSRS + 0x000000000218)
#define FXR_LOCA0_ERR_EN_HOST_RESETCSR				0x0000000000000000ull
#define FXR_LOCA0_ERR_EN_HOST_EVENTS_SHIFT			0
#define FXR_LOCA0_ERR_EN_HOST_EVENTS_MASK			0xFFFFFFFFFFFFFFFFull
#define FXR_LOCA0_ERR_EN_HOST_EVENTS_SMASK			0xFFFFFFFFFFFFFFFFull
/*
* Table #24 of fxr_top - LOCA0_ERR_FIRST_HOST
* This is the First Error CSR for the Host Interrupt. When this CSR is clear, it 
* will capture the next LOCA_ERR_STS value when a new HOST Interrupt 
* occurs.
*/
#define FXR_LOCA0_ERR_FIRST_HOST				(FXR_LOCA_CSRS + 0x000000000220)
#define FXR_LOCA0_ERR_FIRST_HOST_RESETCSR			0x0000000000000000ull
#define FXR_LOCA0_ERR_FIRST_HOST_EVENTS_SHIFT			0
#define FXR_LOCA0_ERR_FIRST_HOST_EVENTS_MASK			0xFFFFFFFFFFFFFFFFull
#define FXR_LOCA0_ERR_FIRST_HOST_EVENTS_SMASK			0xFFFFFFFFFFFFFFFFull
/*
* Table #25 of fxr_top - LOCA0_ERR_EN_BMC
* This is the Error Enable for the BMC Interrupt. If a bit is set, the 
* corresponding error bit in LOCA_ERR_STS will cause an interrupt on the BMC 
* interrupt signal.
*/
#define FXR_LOCA0_ERR_EN_BMC					(FXR_LOCA_CSRS + 0x000000000228)
#define FXR_LOCA0_ERR_EN_BMC_RESETCSR				0x0000000000000000ull
#define FXR_LOCA0_ERR_EN_BMC_EVENTS_SHIFT			0
#define FXR_LOCA0_ERR_EN_BMC_EVENTS_MASK			0xFFFFFFFFFFFFFFFFull
#define FXR_LOCA0_ERR_EN_BMC_EVENTS_SMASK			0xFFFFFFFFFFFFFFFFull
/*
* Table #26 of fxr_top - LOCA0_ERR_FIRST_BMC
* This is the First Error CSR for the BMC Interrupt. When this CSR is clear, it 
* will capture the next LOCA_ERR_STS value when a new BMC Interrupt 
* occurs.
*/
#define FXR_LOCA0_ERR_FIRST_BMC					(FXR_LOCA_CSRS + 0x000000000230)
#define FXR_LOCA0_ERR_FIRST_BMC_RESETCSR			0x0000000000000000ull
#define FXR_LOCA0_ERR_FIRST_BMC_EVENTS_SHIFT			0
#define FXR_LOCA0_ERR_FIRST_BMC_EVENTS_MASK			0xFFFFFFFFFFFFFFFFull
#define FXR_LOCA0_ERR_FIRST_BMC_EVENTS_SMASK			0xFFFFFFFFFFFFFFFFull
/*
* Table #27 of fxr_top - LOCA0_ERR_EN_QUAR
* This is the Error Enable for the Quarantine Interrupt. If a bit is set, the 
* corresponding error bit in LOCA_ERR_STS will cause an interrupt on the QUAR 
* interrupt signal.
*/
#define FXR_LOCA0_ERR_EN_QUAR					(FXR_LOCA_CSRS + 0x000000000238)
#define FXR_LOCA0_ERR_EN_QUAR_RESETCSR				0x0000000000000000ull
#define FXR_LOCA0_ERR_EN_QUAR_EVENTS_SHIFT			0
#define FXR_LOCA0_ERR_EN_QUAR_EVENTS_MASK			0xFFFFFFFFFFFFFFFFull
#define FXR_LOCA0_ERR_EN_QUAR_EVENTS_SMASK			0xFFFFFFFFFFFFFFFFull
/*
* Table #28 of fxr_top - LOCA0_ERR_FIRST_QUAR
* This is the First Error CSR for the Quarantine Interrupt. When this CSR is 
* clear, it will capture the next LOCA_ERR_STS value when a new QUAR Interrupt 
* occurs.
*/
#define FXR_LOCA0_ERR_FIRST_QUAR				(FXR_LOCA_CSRS + 0x000000000240)
#define FXR_LOCA0_ERR_FIRST_QUAR_RESETCSR			0x0000000000000000ull
#define FXR_LOCA0_ERR_FIRST_QUAR_EVENTS_SHIFT			0
#define FXR_LOCA0_ERR_FIRST_QUAR_EVENTS_MASK			0xFFFFFFFFFFFFFFFFull
#define FXR_LOCA0_ERR_FIRST_QUAR_EVENTS_SMASK			0xFFFFFFFFFFFFFFFFull
/*
* Table #29 of fxr_top - LOCA0_VIRAL_ENABLE
* This is the Error Enable for the Viral signaling. If a bit is set, the 
* corresponding error bit in #%%#LOCA0_ERR_STS#%%# will assert viral 
* signaling.
*/
#define FXR_LOCA0_VIRAL_ENABLE					(FXR_LOCA_CSRS + 0x000000000248)
#define FXR_LOCA0_VIRAL_ENABLE_RESETCSR				0x0000000000000000ull
#define FXR_LOCA0_VIRAL_ENABLE_ENABLED_ERRS_SHIFT		0
#define FXR_LOCA0_VIRAL_ENABLE_ENABLED_ERRS_MASK		0xFFFFFFFFFFFFFFFFull
#define FXR_LOCA0_VIRAL_ENABLE_ENABLED_ERRS_SMASK		0xFFFFFFFFFFFFFFFFull
/*
* Table #30 of fxr_top - LOCA_ERR_INFO
* Misc syndrome bits for associated SBE/SBE events. Syndrome is held until the 
* associated event is cleared in the #%%#LOCA0_ERR_STS#%%# register. 
* 
*/
#define FXR_LOCA_ERR_INFO					(FXR_LOCA_CSRS + 0x000000000250)
#define FXR_LOCA_ERR_INFO_RESETCSR				0x0000000000000000ull
#define FXR_LOCA_ERR_INFO_PROQ_TF_MBE_SHIFT			60
#define FXR_LOCA_ERR_INFO_PROQ_TF_MBE_MASK			0xFull
#define FXR_LOCA_ERR_INFO_PROQ_TF_MBE_SMASK			0xF000000000000000ull
#define FXR_LOCA_ERR_INFO_PROQ_TF_SBE_SHIFT			56
#define FXR_LOCA_ERR_INFO_PROQ_TF_SBE_MASK			0xFull
#define FXR_LOCA_ERR_INFO_PROQ_TF_SBE_SMASK			0xF00000000000000ull
#define FXR_LOCA_ERR_INFO_ADM_HDR_SYND_SHIFT			48
#define FXR_LOCA_ERR_INFO_ADM_HDR_SYND_MASK			0xFFull
#define FXR_LOCA_ERR_INFO_ADM_HDR_SYND_SMASK			0xFF000000000000ull
#define FXR_LOCA_ERR_INFO_ADM_CAS_SYND_SHIFT			40
#define FXR_LOCA_ERR_INFO_ADM_CAS_SYND_MASK			0xFFull
#define FXR_LOCA_ERR_INFO_ADM_CAS_SYND_SMASK			0xFF0000000000ull
#define FXR_LOCA_ERR_INFO_CONQ_HDR_SYND_SHIFT			32
#define FXR_LOCA_ERR_INFO_CONQ_HDR_SYND_MASK			0xFFull
#define FXR_LOCA_ERR_INFO_CONQ_HDR_SYND_SMASK			0xFF00000000ull
#define FXR_LOCA_ERR_INFO_RESERVED_31_30_SHIFT			30
#define FXR_LOCA_ERR_INFO_RESERVED_31_30_MASK			0x3ull
#define FXR_LOCA_ERR_INFO_RESERVED_31_30_SMASK			0xC0000000ull
#define FXR_LOCA_ERR_INFO_PROQ_TG_SYND_SHIFT			25
#define FXR_LOCA_ERR_INFO_PROQ_TG_SYND_MASK			0x1Full
#define FXR_LOCA_ERR_INFO_PROQ_TG_SYND_SMASK			0x3E000000ull
#define FXR_LOCA_ERR_INFO_PROQ_TF0_SYND_SHIFT			20
#define FXR_LOCA_ERR_INFO_PROQ_TF0_SYND_MASK			0x1Full
#define FXR_LOCA_ERR_INFO_PROQ_TF0_SYND_SMASK			0x1F00000ull
#define FXR_LOCA_ERR_INFO_PROQ_TF1_SYND_SHIFT			15
#define FXR_LOCA_ERR_INFO_PROQ_TF1_SYND_MASK			0x1Full
#define FXR_LOCA_ERR_INFO_PROQ_TF1_SYND_SMASK			0xF8000ull
#define FXR_LOCA_ERR_INFO_PROQ_TF2_SYND_SHIFT			10
#define FXR_LOCA_ERR_INFO_PROQ_TF2_SYND_MASK			0x1Full
#define FXR_LOCA_ERR_INFO_PROQ_TF2_SYND_SMASK			0x7C00ull
#define FXR_LOCA_ERR_INFO_PROQ_TF3_SYND_SHIFT			5
#define FXR_LOCA_ERR_INFO_PROQ_TF3_SYND_MASK			0x1Full
#define FXR_LOCA_ERR_INFO_PROQ_TF3_SYND_SMASK			0x3E0ull
#define FXR_LOCA_ERR_INFO_PROQ_HL_SYND_SHIFT			0
#define FXR_LOCA_ERR_INFO_PROQ_HL_SYND_MASK			0x1Full
#define FXR_LOCA_ERR_INFO_PROQ_HL_SYND_SMASK			0x1Full
/*
* Table #31 of fxr_top - LOCA_ERR_INFO1
* Syndrome bits for associated SBE/SBE events. Syndrome is held until the 
* associated event is cleared in the #%%#LOCA0_ERR_STS#%%# register. 
* 
*/
#define FXR_LOCA_ERR_INFO1					(FXR_LOCA_CSRS + 0x000000000258)
#define FXR_LOCA_ERR_INFO1_RESETCSR				0x0000000000000000ull
#define FXR_LOCA_ERR_INFO1_C2U_DATA_SYND_SHIFT			0
#define FXR_LOCA_ERR_INFO1_C2U_DATA_SYND_MASK			0xFFFFFFFFFFFFFFFFull
#define FXR_LOCA_ERR_INFO1_C2U_DATA_SYND_SMASK			0xFFFFFFFFFFFFFFFFull
/*
* Table #32 of fxr_top - LOCA_ERR_INFO2
* Misc syndrome bits for associated SBE/SBE events. Syndrome is held until the 
* associated event is cleared in the #%%#LOCA0_ERR_STS#%%# register. 
* 
*/
#define FXR_LOCA_ERR_INFO2					(FXR_LOCA_CSRS + 0x000000000260)
#define FXR_LOCA_ERR_INFO2_RESETCSR				0x0000000000000000ull
#define FXR_LOCA_ERR_INFO2_ITI_WP_SYND_SHIFT			56
#define FXR_LOCA_ERR_INFO2_ITI_WP_SYND_MASK			0xFFull
#define FXR_LOCA_ERR_INFO2_ITI_WP_SYND_SMASK			0xFF00000000000000ull
#define FXR_LOCA_ERR_INFO2_ORB_CNF_SYND_SHIFT			48
#define FXR_LOCA_ERR_INFO2_ORB_CNF_SYND_MASK			0xFFull
#define FXR_LOCA_ERR_INFO2_ORB_CNF_SYND_SMASK			0xFF000000000000ull
#define FXR_LOCA_ERR_INFO2_ORB_RSP_SYND_SHIFT			40
#define FXR_LOCA_ERR_INFO2_ORB_RSP_SYND_MASK			0xFFull
#define FXR_LOCA_ERR_INFO2_ORB_RSP_SYND_SMASK			0xFF0000000000ull
#define FXR_LOCA_ERR_INFO2_ORB_SCH_SYND_SHIFT			32
#define FXR_LOCA_ERR_INFO2_ORB_SCH_SYND_MASK			0xFFull
#define FXR_LOCA_ERR_INFO2_ORB_SCH_SYND_SMASK			0xFF00000000ull
#define FXR_LOCA_ERR_INFO2_RESERVED_31_30_SHIFT			30
#define FXR_LOCA_ERR_INFO2_RESERVED_31_30_MASK			0x3ull
#define FXR_LOCA_ERR_INFO2_RESERVED_31_30_SMASK			0xC0000000ull
#define FXR_LOCA_ERR_INFO2_C2U_SNP_SYND_SHIFT			24
#define FXR_LOCA_ERR_INFO2_C2U_SNP_SYND_MASK			0x3Full
#define FXR_LOCA_ERR_INFO2_C2U_SNP_SYND_SMASK			0x3F000000ull
#define FXR_LOCA_ERR_INFO2_RESERVED_23_22_SHIFT			22
#define FXR_LOCA_ERR_INFO2_RESERVED_23_22_MASK			0x3ull
#define FXR_LOCA_ERR_INFO2_RESERVED_23_22_SMASK			0xC00000ull
#define FXR_LOCA_ERR_INFO2_C2U_WP_SYND_SHIFT			16
#define FXR_LOCA_ERR_INFO2_C2U_WP_SYND_MASK			0x3Full
#define FXR_LOCA_ERR_INFO2_C2U_WP_SYND_SMASK			0x3F0000ull
#define FXR_LOCA_ERR_INFO2_EQB_SYND_SHIFT			8
#define FXR_LOCA_ERR_INFO2_EQB_SYND_MASK			0xFFull
#define FXR_LOCA_ERR_INFO2_EQB_SYND_SMASK			0xFF00ull
#define FXR_LOCA_ERR_INFO2_NQB_SYND_SHIFT			0
#define FXR_LOCA_ERR_INFO2_NQB_SYND_MASK			0xFFull
#define FXR_LOCA_ERR_INFO2_NQB_SYND_SMASK			0xFFull
/*
* Table #33 of fxr_top - LOCA_ERR_INFO3
* Misc syndrome bits for associated SBE/SBE events. Syndrome is held until the 
* associated event is cleared in the #%%#LOCA1_ERR_STS#%%# register. 
* 
*/
#define FXR_LOCA_ERR_INFO3					(FXR_LOCA_CSRS + 0x000000000268)
#define FXR_LOCA_ERR_INFO3_RESETCSR				0x0000000000000000ull
#define FXR_LOCA_ERR_INFO3_MRU_TABLE_SYND_SHIFT			56
#define FXR_LOCA_ERR_INFO3_MRU_TABLE_SYND_MASK			0xFFull
#define FXR_LOCA_ERR_INFO3_MRU_TABLE_SYND_SMASK			0xFF00000000000000ull
#define FXR_LOCA_ERR_INFO3_RESERVED_55_53_SHIFT			53
#define FXR_LOCA_ERR_INFO3_RESERVED_55_53_MASK			0x7ull
#define FXR_LOCA_ERR_INFO3_RESERVED_55_53_SMASK			0xE0000000000000ull
#define FXR_LOCA_ERR_INFO3_U2C_DIR_SYND_SHIFT			46
#define FXR_LOCA_ERR_INFO3_U2C_DIR_SYND_MASK			0x7Full
#define FXR_LOCA_ERR_INFO3_U2C_DIR_SYND_SMASK			0x1FC00000000000ull
#define FXR_LOCA_ERR_INFO3_U2C_WP_SYND_SHIFT			40
#define FXR_LOCA_ERR_INFO3_U2C_WP_SYND_MASK			0x3Full
#define FXR_LOCA_ERR_INFO3_U2C_WP_SYND_SMASK			0x3F0000000000ull
#define FXR_LOCA_ERR_INFO3_U2C_DATA1_SYND_SHIFT			30
#define FXR_LOCA_ERR_INFO3_U2C_DATA1_SYND_MASK			0x3FFull
#define FXR_LOCA_ERR_INFO3_U2C_DATA1_SYND_SMASK			0xFFC0000000ull
#define FXR_LOCA_ERR_INFO3_U2C_DATA0_SYND_SHIFT			20
#define FXR_LOCA_ERR_INFO3_U2C_DATA0_SYND_MASK			0x3FFull
#define FXR_LOCA_ERR_INFO3_U2C_DATA0_SYND_SMASK			0x3FF00000ull
#define FXR_LOCA_ERR_INFO3_U2C_POI_VAL_SYND11_SHIFT		15
#define FXR_LOCA_ERR_INFO3_U2C_POI_VAL_SYND11_MASK		0x1Full
#define FXR_LOCA_ERR_INFO3_U2C_POI_VAL_SYND11_SMASK		0xF8000ull
#define FXR_LOCA_ERR_INFO3_U2C_POI_VAL_SYND10_SHIFT		10
#define FXR_LOCA_ERR_INFO3_U2C_POI_VAL_SYND10_MASK		0x1Full
#define FXR_LOCA_ERR_INFO3_U2C_POI_VAL_SYND10_SMASK		0x7C00ull
#define FXR_LOCA_ERR_INFO3_U2C_POI_VAL_SYND01_SHIFT		5
#define FXR_LOCA_ERR_INFO3_U2C_POI_VAL_SYND01_MASK		0x1Full
#define FXR_LOCA_ERR_INFO3_U2C_POI_VAL_SYND01_SMASK		0x3E0ull
#define FXR_LOCA_ERR_INFO3_U2C_POI_VAL_SYND00_SHIFT		0
#define FXR_LOCA_ERR_INFO3_U2C_POI_VAL_SYND00_MASK		0x1Full
#define FXR_LOCA_ERR_INFO3_U2C_POI_VAL_SYND00_SMASK		0x1Full
/*
* Table #34 of fxr_top - LOCA_ERR_INFO4
* Syndrome bits for associated SBE/SBE events. Syndrome is held until the 
* associated event is cleared in the #%%#LOCA1_ERR_STS#%%# register. 
* 
*/
#define FXR_LOCA_ERR_INFO4					(FXR_LOCA_CSRS + 0x000000000270)
#define FXR_LOCA_ERR_INFO4_RESETCSR				0x0000000000000000ull
#define FXR_LOCA_ERR_INFO4_RESERVED_63_60_SHIFT			60
#define FXR_LOCA_ERR_INFO4_RESERVED_63_60_MASK			0xFull
#define FXR_LOCA_ERR_INFO4_RESERVED_63_60_SMASK			0xF000000000000000ull
#define FXR_LOCA_ERR_INFO4_DCD_BANK4_SYND_SHIFT			48
#define FXR_LOCA_ERR_INFO4_DCD_BANK4_SYND_MASK			0xFFFull
#define FXR_LOCA_ERR_INFO4_DCD_BANK4_SYND_SMASK			0xFFF000000000000ull
#define FXR_LOCA_ERR_INFO4_DCD_BANK3_SYND_SHIFT			36
#define FXR_LOCA_ERR_INFO4_DCD_BANK3_SYND_MASK			0xFFFull
#define FXR_LOCA_ERR_INFO4_DCD_BANK3_SYND_SMASK			0xFFF000000000ull
#define FXR_LOCA_ERR_INFO4_DCD_BANK2_SYND_SHIFT			24
#define FXR_LOCA_ERR_INFO4_DCD_BANK2_SYND_MASK			0xFFFull
#define FXR_LOCA_ERR_INFO4_DCD_BANK2_SYND_SMASK			0xFFF000000ull
#define FXR_LOCA_ERR_INFO4_DCD_BANK1_SYND_SHIFT			12
#define FXR_LOCA_ERR_INFO4_DCD_BANK1_SYND_MASK			0xFFFull
#define FXR_LOCA_ERR_INFO4_DCD_BANK1_SYND_SMASK			0xFFF000ull
#define FXR_LOCA_ERR_INFO4_DCD_BANK0_SYND_SHIFT			0
#define FXR_LOCA_ERR_INFO4_DCD_BANK0_SYND_MASK			0xFFFull
#define FXR_LOCA_ERR_INFO4_DCD_BANK0_SYND_SMASK			0xFFFull
/*
* Table #35 of fxr_top - LOCA_ERR_INFO5
* Syndrome bits for associated SBE/SBE events. Syndrome is held until the 
* associated event is cleared in the #%%#LOCA1_ERR_STS#%%# register. 
* 
*/
#define FXR_LOCA_ERR_INFO5					(FXR_LOCA_CSRS + 0x000000000278)
#define FXR_LOCA_ERR_INFO5_RESETCSR				0x0000000000000000ull
#define FXR_LOCA_ERR_INFO5_RESERVED_63_60_SHIFT			60
#define FXR_LOCA_ERR_INFO5_RESERVED_63_60_MASK			0xFull
#define FXR_LOCA_ERR_INFO5_RESERVED_63_60_SMASK			0xF000000000000000ull
#define FXR_LOCA_ERR_INFO5_DCD_BANK9_SYND_SHIFT			48
#define FXR_LOCA_ERR_INFO5_DCD_BANK9_SYND_MASK			0xFFFull
#define FXR_LOCA_ERR_INFO5_DCD_BANK9_SYND_SMASK			0xFFF000000000000ull
#define FXR_LOCA_ERR_INFO5_DCD_BANK8_SYND_SHIFT			36
#define FXR_LOCA_ERR_INFO5_DCD_BANK8_SYND_MASK			0xFFFull
#define FXR_LOCA_ERR_INFO5_DCD_BANK8_SYND_SMASK			0xFFF000000000ull
#define FXR_LOCA_ERR_INFO5_DCD_BANK7_SYND_SHIFT			24
#define FXR_LOCA_ERR_INFO5_DCD_BANK7_SYND_MASK			0xFFFull
#define FXR_LOCA_ERR_INFO5_DCD_BANK7_SYND_SMASK			0xFFF000000ull
#define FXR_LOCA_ERR_INFO5_DCD_BANK6_SYND_SHIFT			12
#define FXR_LOCA_ERR_INFO5_DCD_BANK6_SYND_MASK			0xFFFull
#define FXR_LOCA_ERR_INFO5_DCD_BANK6_SYND_SMASK			0xFFF000ull
#define FXR_LOCA_ERR_INFO5_DCD_BANK5_SYND_SHIFT			0
#define FXR_LOCA_ERR_INFO5_DCD_BANK5_SYND_MASK			0xFFFull
#define FXR_LOCA_ERR_INFO5_DCD_BANK5_SYND_SMASK			0xFFFull
/*
* Table #36 of fxr_top - LOCA_ERR_INFO6
* Syndrome bits for associated SBE/SBE events. Syndrome is held until the 
* associated event is cleared in the #%%#LOCA0_ERR_STS#%%# register. 
* 
*/
#define FXR_LOCA_ERR_INFO6					(FXR_LOCA_CSRS + 0x000000000280)
#define FXR_LOCA_ERR_INFO6_RESETCSR				0x0000000000000000ull
#define FXR_LOCA_ERR_INFO6_ADM_PAF_SYND_SHIFT			0
#define FXR_LOCA_ERR_INFO6_ADM_PAF_SYND_MASK			0xFFFFFFFFFFFFFFFFull
#define FXR_LOCA_ERR_INFO6_ADM_PAF_SYND_SMASK			0xFFFFFFFFFFFFFFFFull
/*
* Table #37 of fxr_top - LOCA_ERR_INFO7
* Syndrome bits for associated SBE/SBE events. Syndrome is held until the 
* associated event is cleared in the #%%#LOCA0_ERR_STS#%%# register. 
* 
*/
#define FXR_LOCA_ERR_INFO7					(FXR_LOCA_CSRS + 0x000000000288)
#define FXR_LOCA_ERR_INFO7_RESETCSR				0x0000000000000000ull
#define FXR_LOCA_ERR_INFO7_ADM_RE_SYND_SHIFT			0
#define FXR_LOCA_ERR_INFO7_ADM_RE_SYND_MASK			0xFFFFFFFFFFFFFFFFull
#define FXR_LOCA_ERR_INFO7_ADM_RE_SYND_SMASK			0xFFFFFFFFFFFFFFFFull
/*
* Table #38 of fxr_top - LOCA_ERR_INFO8
* Syndrome bits for associated SBE/SBE events. Syndrome is held until the 
* associated event is cleared in the #%%#LOCA0_ERR_STS#%%# register. 
* 
*/
#define FXR_LOCA_ERR_INFO8					(FXR_LOCA_CSRS + 0x000000000290)
#define FXR_LOCA_ERR_INFO8_RESETCSR				0x0000000000000000ull
#define FXR_LOCA_ERR_INFO8_ADM_SLDB_SYND_SHIFT			0
#define FXR_LOCA_ERR_INFO8_ADM_SLDB_SYND_MASK			0xFFFFFFFFFFFFFFFFull
#define FXR_LOCA_ERR_INFO8_ADM_SLDB_SYND_SMASK			0xFFFFFFFFFFFFFFFFull
/*
* Table #39 of fxr_top - LOCA_ERR_INFO9
* Transaction ID associated with HCC Replay Delay Buffer (RF) parity error. TID 
* is held until the associated event is cleared in the #%%#LOCA0_ERR_STS#%%# 
* register. 
*/
#define FXR_LOCA_ERR_INFO9					(FXR_LOCA_CSRS + 0x000000000298)
#define FXR_LOCA_ERR_INFO9_RESETCSR				0x0000000000000000ull
#define FXR_LOCA_ERR_INFO9_RESERVED_63_8_SHIFT			8
#define FXR_LOCA_ERR_INFO9_RESERVED_63_8_MASK			0xFFFFFFFFFFFFFFull
#define FXR_LOCA_ERR_INFO9_RESERVED_63_8_SMASK			0xFFFFFFFFFFFFFF00ull
#define FXR_LOCA_ERR_INFO9_IMI_CMPID_SHIFT			0
#define FXR_LOCA_ERR_INFO9_IMI_CMPID_MASK			0xFFull
#define FXR_LOCA_ERR_INFO9_IMI_CMPID_SMASK			0xFFull
/*
* Table #40 of fxr_top - LOCA_ERR_INFO10
* Syndrome bits for associated SBE/SBE events. Syndrome is held until the 
* associated event is cleared in the #%%#LOCA0_ERR_STS#%%# register. 
* 
*/
#define FXR_LOCA_ERR_INFO10					(FXR_LOCA_CSRS + 0x0000000002A0)
#define FXR_LOCA_ERR_INFO10_RESETCSR				0x0000000000000000ull
#define FXR_LOCA_ERR_INFO10_DCACHE_SYND_SHIFT			0
#define FXR_LOCA_ERR_INFO10_DCACHE_SYND_MASK			0xFFFFFFFFFFFFFFFFull
#define FXR_LOCA_ERR_INFO10_DCACHE_SYND_SMASK			0xFFFFFFFFFFFFFFFFull
/*
* Table #41 of fxr_top - LOCA_ERR_INFO11
* Syndrome bits for associated SBE/SBE events. Syndrome is held until the 
* associated event is cleared in the #%%#LOCA0_ERR_STS#%%# register. 
* 
*/
#define FXR_LOCA_ERR_INFO11					(FXR_LOCA_CSRS + 0x0000000002A8)
#define FXR_LOCA_ERR_INFO11_RESETCSR				0x0000000000000000ull
#define FXR_LOCA_ERR_INFO11_WRIFILL_SYND_SHIFT			0
#define FXR_LOCA_ERR_INFO11_WRIFILL_SYND_MASK			0xFFFFFFFFFFFFFFFFull
#define FXR_LOCA_ERR_INFO11_WRIFILL_SYND_SMASK			0xFFFFFFFFFFFFFFFFull
/*
* Table #42 of fxr_top - LOCA_ERR_INFO12
* Error information for associated #%%#LOCA0_ERR_STS#%%# events. Error 
* information is held until the associated event is cleared in the 
* #%%#LOCA0_ERR_STS#%%# register. 
*/
#define FXR_LOCA_ERR_INFO12					(FXR_LOCA_CSRS + 0x0000000002B0)
#define FXR_LOCA_ERR_INFO12_RESETCSR				0x0000000000000000ull
#define FXR_LOCA_ERR_INFO12_RESERVED_63_57_SHIFT		57
#define FXR_LOCA_ERR_INFO12_RESERVED_63_57_MASK			0x7Full
#define FXR_LOCA_ERR_INFO12_RESERVED_63_57_SMASK		0xFE00000000000000ull
#define FXR_LOCA_ERR_INFO12_PCAM_DATA_SYND_SHIFT		50
#define FXR_LOCA_ERR_INFO12_PCAM_DATA_SYND_MASK			0x7Full
#define FXR_LOCA_ERR_INFO12_PCAM_DATA_SYND_SMASK		0x1FC000000000000ull
#define FXR_LOCA_ERR_INFO12_U2C_REQ_OPCODE_SHIFT		45
#define FXR_LOCA_ERR_INFO12_U2C_REQ_OPCODE_MASK			0x1Full
#define FXR_LOCA_ERR_INFO12_U2C_REQ_OPCODE_SMASK		0x3E00000000000ull
#define FXR_LOCA_ERR_INFO12_U2C_REQ_ADDRPAR_SHIFT		44
#define FXR_LOCA_ERR_INFO12_U2C_REQ_ADDRPAR_MASK		0x1ull
#define FXR_LOCA_ERR_INFO12_U2C_REQ_ADDRPAR_SMASK		0x100000000000ull
#define FXR_LOCA_ERR_INFO12_U2C_REQ_REQDATA_SHIFT		28
#define FXR_LOCA_ERR_INFO12_U2C_REQ_REQDATA_MASK		0xFFFFull
#define FXR_LOCA_ERR_INFO12_U2C_REQ_REQDATA_SMASK		0xFFFF0000000ull
#define FXR_LOCA_ERR_INFO12_U2C_RSP_OPCODE_SHIFT		24
#define FXR_LOCA_ERR_INFO12_U2C_RSP_OPCODE_MASK			0xFull
#define FXR_LOCA_ERR_INFO12_U2C_RSP_OPCODE_SMASK		0xF000000ull
#define FXR_LOCA_ERR_INFO12_U2C_RSP_L1ID_SHIFT			16
#define FXR_LOCA_ERR_INFO12_U2C_RSP_L1ID_MASK			0xFFull
#define FXR_LOCA_ERR_INFO12_U2C_RSP_L1ID_SMASK			0xFF0000ull
#define FXR_LOCA_ERR_INFO12_RESERVED_15_13_SHIFT		13
#define FXR_LOCA_ERR_INFO12_RESERVED_15_13_MASK			0x7ull
#define FXR_LOCA_ERR_INFO12_RESERVED_15_13_SMASK		0xE000ull
#define FXR_LOCA_ERR_INFO12_U2C_RSP_RSPDATA_SHIFT		0
#define FXR_LOCA_ERR_INFO12_U2C_RSP_RSPDATA_MASK		0x1FFFull
#define FXR_LOCA_ERR_INFO12_U2C_RSP_RSPDATA_SMASK		0x1FFFull
/*
* Table #43 of fxr_top - LOCA_ERR_INFO13
* Error information for associated #%%#LOCA0_ERR_STS#%%# events. Error 
* information is held until the associated event is cleared in the 
* #%%#LOCA0_ERR_STS#%%# register. 
*/
#define FXR_LOCA_ERR_INFO13					(FXR_LOCA_CSRS + 0x0000000002B8)
#define FXR_LOCA_ERR_INFO13_RESETCSR				0x0000000000000000ull
#define FXR_LOCA_ERR_INFO13_HCC_REPLAY_STATUS_SHIFT		56
#define FXR_LOCA_ERR_INFO13_HCC_REPLAY_STATUS_MASK		0xFFull
#define FXR_LOCA_ERR_INFO13_HCC_REPLAY_STATUS_SMASK		0xFF00000000000000ull
#define FXR_LOCA_ERR_INFO13_RESERVED_55_52_SHIFT		52
#define FXR_LOCA_ERR_INFO13_RESERVED_55_52_MASK			0xFull
#define FXR_LOCA_ERR_INFO13_RESERVED_55_52_SMASK		0xF0000000000000ull
#define FXR_LOCA_ERR_INFO13_U2C_REQ_ADDR_SHIFT			3
#define FXR_LOCA_ERR_INFO13_U2C_REQ_ADDR_MASK			0x1FFFFFFFFFFFFull
#define FXR_LOCA_ERR_INFO13_U2C_REQ_ADDR_SMASK			0xFFFFFFFFFFFF8ull
#define FXR_LOCA_ERR_INFO13_RESERVED_2_0_SHIFT			0
#define FXR_LOCA_ERR_INFO13_RESERVED_2_0_MASK			0x7ull
#define FXR_LOCA_ERR_INFO13_RESERVED_2_0_SMASK			0x7ull
/*
* Table #44 of fxr_top - LOCA_ERR_INFO14
* Error information for associated #%%#LOCA0_ERR_STS#%%#.#%%#hcc_idi_rsp_err#%%# 
* event. Error information is held until the associated event is cleared in the 
* #%%#LOCA0_ERR_STS#%%# register. 
*/
#define FXR_LOCA_ERR_INFO14					(FXR_LOCA_CSRS + 0x0000000002C0)
#define FXR_LOCA_ERR_INFO14_RESETCSR				0x0000000000000000ull
#define FXR_LOCA_ERR_INFO14_TID_SHIFT				52
#define FXR_LOCA_ERR_INFO14_TID_MASK				0xFFFull
#define FXR_LOCA_ERR_INFO14_TID_SMASK				0xFFF0000000000000ull
#define FXR_LOCA_ERR_INFO14_ADDRESS_SHIFT			6
#define FXR_LOCA_ERR_INFO14_ADDRESS_MASK			0x3FFFFFFFFFFFull
#define FXR_LOCA_ERR_INFO14_ADDRESS_SMASK			0xFFFFFFFFFFFC0ull
#define FXR_LOCA_ERR_INFO14_RESERVED_5_1_SHIFT			1
#define FXR_LOCA_ERR_INFO14_RESERVED_5_1_MASK			0x1Full
#define FXR_LOCA_ERR_INFO14_RESERVED_5_1_SMASK			0x3Eull
#define FXR_LOCA_ERR_INFO14_DELAYED_REQS_SHIFT			0
#define FXR_LOCA_ERR_INFO14_DELAYED_REQS_MASK			0x1ull
#define FXR_LOCA_ERR_INFO14_DELAYED_REQS_SMASK			0x1ull
/*
* Table #45 of fxr_top - LOCA_ERR_INFO15
* Error information for associated #%%#LOCA1_ERR_STS#%%# event. Error 
* information is held until the associated event is cleared in the 
* #%%#LOCA1_ERR_STS#%%# register. 
*/
#define FXR_LOCA_ERR_INFO15					(FXR_LOCA_CSRS + 0x0000000002C8)
#define FXR_LOCA_ERR_INFO15_RESETCSR				0x0000000000000000ull
#define FXR_LOCA_ERR_INFO15_RESERVED_63_35_SHIFT		35
#define FXR_LOCA_ERR_INFO15_RESERVED_63_35_MASK			0x1FFFFFFFull
#define FXR_LOCA_ERR_INFO15_RESERVED_63_35_SMASK		0xFFFFFFF800000000ull
#define FXR_LOCA_ERR_INFO15_PMON_ROLLOVER_ID_SHIFT		28
#define FXR_LOCA_ERR_INFO15_PMON_ROLLOVER_ID_MASK		0x7Full
#define FXR_LOCA_ERR_INFO15_PMON_ROLLOVER_ID_SMASK		0x7F0000000ull
#define FXR_LOCA_ERR_INFO15_DCD_BANK15_SYND_SHIFT		16
#define FXR_LOCA_ERR_INFO15_DCD_BANK15_SYND_MASK		0xFFFull
#define FXR_LOCA_ERR_INFO15_DCD_BANK15_SYND_SMASK		0xFFF0000ull
#define FXR_LOCA_ERR_INFO15_RESERVED_15_13_SHIFT		13
#define FXR_LOCA_ERR_INFO15_RESERVED_15_13_MASK			0x7ull
#define FXR_LOCA_ERR_INFO15_RESERVED_15_13_SMASK		0xE000ull
#define FXR_LOCA_ERR_INFO15_CONQ_TAIL_SYND_SHIFT		8
#define FXR_LOCA_ERR_INFO15_CONQ_TAIL_SYND_MASK			0x1Full
#define FXR_LOCA_ERR_INFO15_CONQ_TAIL_SYND_SMASK		0x1F00ull
#define FXR_LOCA_ERR_INFO15_HIFIS_HDR_SYND_SHIFT		0
#define FXR_LOCA_ERR_INFO15_HIFIS_HDR_SYND_MASK			0xFFull
#define FXR_LOCA_ERR_INFO15_HIFIS_HDR_SYND_SMASK		0xFFull
/*
* Table #46 of fxr_top - LOCA_ERR_INFO16
* Syndrome bits for associated SBE/SBE events. Syndrome is held until the 
* associated event is cleared in the #%%#LOCA1_ERR_STS#%%# register. 
* 
*/
#define FXR_LOCA_ERR_INFO16					(FXR_LOCA_CSRS + 0x0000000002D0)
#define FXR_LOCA_ERR_INFO16_RESETCSR				0x0000000000000000ull
#define FXR_LOCA_ERR_INFO16_RESERVED_63_60_SHIFT		60
#define FXR_LOCA_ERR_INFO16_RESERVED_63_60_MASK			0xFull
#define FXR_LOCA_ERR_INFO16_RESERVED_63_60_SMASK		0xF000000000000000ull
#define FXR_LOCA_ERR_INFO16_DCD_BANK14_SYND_SHIFT		48
#define FXR_LOCA_ERR_INFO16_DCD_BANK14_SYND_MASK		0xFFFull
#define FXR_LOCA_ERR_INFO16_DCD_BANK14_SYND_SMASK		0xFFF000000000000ull
#define FXR_LOCA_ERR_INFO16_DCD_BANK13_SYND_SHIFT		36
#define FXR_LOCA_ERR_INFO16_DCD_BANK13_SYND_MASK		0xFFFull
#define FXR_LOCA_ERR_INFO16_DCD_BANK13_SYND_SMASK		0xFFF000000000ull
#define FXR_LOCA_ERR_INFO16_DCD_BANK12_SYND_SHIFT		24
#define FXR_LOCA_ERR_INFO16_DCD_BANK12_SYND_MASK		0xFFFull
#define FXR_LOCA_ERR_INFO16_DCD_BANK12_SYND_SMASK		0xFFF000000ull
#define FXR_LOCA_ERR_INFO16_DCD_BANK11_SYND_SHIFT		12
#define FXR_LOCA_ERR_INFO16_DCD_BANK11_SYND_MASK		0xFFFull
#define FXR_LOCA_ERR_INFO16_DCD_BANK11_SYND_SMASK		0xFFF000ull
#define FXR_LOCA_ERR_INFO16_DCD_BANK10_SYND_SHIFT		0
#define FXR_LOCA_ERR_INFO16_DCD_BANK10_SYND_MASK		0xFFFull
#define FXR_LOCA_ERR_INFO16_DCD_BANK10_SYND_SMASK		0xFFFull
/*
* Table #47 of fxr_top - LOCA1_ERR_STS
* This is the Error Status CSR. Bits are set by hardware or by writing to the 
* LOCA1_ERR_FRC CSR. Bits are cleared by writing to the LOCA1_ERR_CLR 
* CSR.
*/
#define FXR_LOCA1_ERR_STS					(FXR_LOCA_CSRS + 0x000000000300)
#define FXR_LOCA1_ERR_STS_RESETCSR				0x0000000000000000ull
#define FXR_LOCA1_ERR_STS_RESERVED_63_41_SHIFT			41
#define FXR_LOCA1_ERR_STS_RESERVED_63_41_MASK			0x7FFFFFull
#define FXR_LOCA1_ERR_STS_RESERVED_63_41_SMASK			0xFFFFFE0000000000ull
#define FXR_LOCA1_ERR_STS_ADM_MALFORM_ASO_SHIFT			40
#define FXR_LOCA1_ERR_STS_ADM_MALFORM_ASO_MASK			0x1ull
#define FXR_LOCA1_ERR_STS_ADM_MALFORM_ASO_SMASK			0x10000000000ull
#define FXR_LOCA1_ERR_STS_ADM_MALFORM_ADT_SHIFT			39
#define FXR_LOCA1_ERR_STS_ADM_MALFORM_ADT_MASK			0x1ull
#define FXR_LOCA1_ERR_STS_ADM_MALFORM_ADT_SMASK			0x8000000000ull
#define FXR_LOCA1_ERR_STS_ADM_MALFORM_ADDR_SHIFT		38
#define FXR_LOCA1_ERR_STS_ADM_MALFORM_ADDR_MASK			0x1ull
#define FXR_LOCA1_ERR_STS_ADM_MALFORM_ADDR_SMASK		0x4000000000ull
#define FXR_LOCA1_ERR_STS_ADM_MALFORM_BLEN_SHIFT		37
#define FXR_LOCA1_ERR_STS_ADM_MALFORM_BLEN_MASK			0x1ull
#define FXR_LOCA1_ERR_STS_ADM_MALFORM_BLEN_SMASK		0x2000000000ull
#define FXR_LOCA1_ERR_STS_PMON_ROLLOVER_SHIFT			36
#define FXR_LOCA1_ERR_STS_PMON_ROLLOVER_MASK			0x1ull
#define FXR_LOCA1_ERR_STS_PMON_ROLLOVER_SMASK			0x1000000000ull
#define FXR_LOCA1_ERR_STS_HIFIS_HDR_SBE_SHIFT			35
#define FXR_LOCA1_ERR_STS_HIFIS_HDR_SBE_MASK			0x1ull
#define FXR_LOCA1_ERR_STS_HIFIS_HDR_SBE_SMASK			0x800000000ull
#define FXR_LOCA1_ERR_STS_CONQ_TAIL_SBE_SHIFT			34
#define FXR_LOCA1_ERR_STS_CONQ_TAIL_SBE_MASK			0x1ull
#define FXR_LOCA1_ERR_STS_CONQ_TAIL_SBE_SMASK			0x400000000ull
#define FXR_LOCA1_ERR_STS_HIFIS_HDR_MBE_SHIFT			33
#define FXR_LOCA1_ERR_STS_HIFIS_HDR_MBE_MASK			0x1ull
#define FXR_LOCA1_ERR_STS_HIFIS_HDR_MBE_SMASK			0x200000000ull
#define FXR_LOCA1_ERR_STS_CONQ_TAIL_MBE_SHIFT			32
#define FXR_LOCA1_ERR_STS_CONQ_TAIL_MBE_MASK			0x1ull
#define FXR_LOCA1_ERR_STS_CONQ_TAIL_MBE_SMASK			0x100000000ull
#define FXR_LOCA1_ERR_STS_DCD_BANK_SBE_SHIFT			16
#define FXR_LOCA1_ERR_STS_DCD_BANK_SBE_MASK			0xFFFFull
#define FXR_LOCA1_ERR_STS_DCD_BANK_SBE_SMASK			0xFFFF0000ull
#define FXR_LOCA1_ERR_STS_DCD_BANK_MBE_SHIFT			0
#define FXR_LOCA1_ERR_STS_DCD_BANK_MBE_MASK			0xFFFFull
#define FXR_LOCA1_ERR_STS_DCD_BANK_MBE_SMASK			0xFFFFull
/*
* Table #48 of fxr_top - LOCA1_ERR_CLR
* This is the Error Clear CSR. Writing a 1 to a valid bit will clear the 
* corresponding bit in the LOCA_ERR_STS CSR.
*/
#define FXR_LOCA1_ERR_CLR					(FXR_LOCA_CSRS + 0x000000000308)
#define FXR_LOCA1_ERR_CLR_RESETCSR				0x0000000000000000ull
#define FXR_LOCA1_ERR_CLR_RESERVED_63_41_SHIFT			41
#define FXR_LOCA1_ERR_CLR_RESERVED_63_41_MASK			0x7FFFFFull
#define FXR_LOCA1_ERR_CLR_RESERVED_63_41_SMASK			0xFFFFFE0000000000ull
#define FXR_LOCA1_ERR_CLR_ADM_MALFORM_ASO_SHIFT			40
#define FXR_LOCA1_ERR_CLR_ADM_MALFORM_ASO_MASK			0x1ull
#define FXR_LOCA1_ERR_CLR_ADM_MALFORM_ASO_SMASK			0x10000000000ull
#define FXR_LOCA1_ERR_CLR_ADM_MALFORM_ADT_SHIFT			39
#define FXR_LOCA1_ERR_CLR_ADM_MALFORM_ADT_MASK			0x1ull
#define FXR_LOCA1_ERR_CLR_ADM_MALFORM_ADT_SMASK			0x8000000000ull
#define FXR_LOCA1_ERR_CLR_ADM_MALFORM_ADDR_SHIFT		38
#define FXR_LOCA1_ERR_CLR_ADM_MALFORM_ADDR_MASK			0x1ull
#define FXR_LOCA1_ERR_CLR_ADM_MALFORM_ADDR_SMASK		0x4000000000ull
#define FXR_LOCA1_ERR_CLR_ADM_MALFORM_BLEN_SHIFT		37
#define FXR_LOCA1_ERR_CLR_ADM_MALFORM_BLEN_MASK			0x1ull
#define FXR_LOCA1_ERR_CLR_ADM_MALFORM_BLEN_SMASK		0x2000000000ull
#define FXR_LOCA1_ERR_CLR_PMON_ROLLOVER_SHIFT			36
#define FXR_LOCA1_ERR_CLR_PMON_ROLLOVER_MASK			0x1ull
#define FXR_LOCA1_ERR_CLR_PMON_ROLLOVER_SMASK			0x1000000000ull
#define FXR_LOCA1_ERR_CLR_HIFIS_HDR_SBE_SHIFT			35
#define FXR_LOCA1_ERR_CLR_HIFIS_HDR_SBE_MASK			0x1ull
#define FXR_LOCA1_ERR_CLR_HIFIS_HDR_SBE_SMASK			0x800000000ull
#define FXR_LOCA1_ERR_CLR_CONQ_TAIL_SBE_SHIFT			34
#define FXR_LOCA1_ERR_CLR_CONQ_TAIL_SBE_MASK			0x1ull
#define FXR_LOCA1_ERR_CLR_CONQ_TAIL_SBE_SMASK			0x400000000ull
#define FXR_LOCA1_ERR_CLR_HIFIS_HDR_MBE_SHIFT			33
#define FXR_LOCA1_ERR_CLR_HIFIS_HDR_MBE_MASK			0x1ull
#define FXR_LOCA1_ERR_CLR_HIFIS_HDR_MBE_SMASK			0x200000000ull
#define FXR_LOCA1_ERR_CLR_CONQ_TAIL_MBE_SHIFT			32
#define FXR_LOCA1_ERR_CLR_CONQ_TAIL_MBE_MASK			0x1ull
#define FXR_LOCA1_ERR_CLR_CONQ_TAIL_MBE_SMASK			0x100000000ull
#define FXR_LOCA1_ERR_CLR_DCD_BANK_SBE_SHIFT			16
#define FXR_LOCA1_ERR_CLR_DCD_BANK_SBE_MASK			0xFFFFull
#define FXR_LOCA1_ERR_CLR_DCD_BANK_SBE_SMASK			0xFFFF0000ull
#define FXR_LOCA1_ERR_CLR_DCD_BANK_MBE_SHIFT			0
#define FXR_LOCA1_ERR_CLR_DCD_BANK_MBE_MASK			0xFFFFull
#define FXR_LOCA1_ERR_CLR_DCD_BANK_MBE_SMASK			0xFFFFull
/*
* Table #49 of fxr_top - LOCA1_ERR_FRC
* This is the Error Force CSR. Writing a 1 to a valid bit will set the 
* corresponding bit in the LOCA_ERR_STS CSR.
*/
#define FXR_LOCA1_ERR_FRC					(FXR_LOCA_CSRS + 0x000000000310)
#define FXR_LOCA1_ERR_FRC_RESETCSR				0x0000000000000000ull
#define FXR_LOCA1_ERR_FRC_RESERVED_63_41_SHIFT			41
#define FXR_LOCA1_ERR_FRC_RESERVED_63_41_MASK			0x7FFFFFull
#define FXR_LOCA1_ERR_FRC_RESERVED_63_41_SMASK			0xFFFFFE0000000000ull
#define FXR_LOCA1_ERR_FRC_ADM_MALFORM_ASO_SHIFT			40
#define FXR_LOCA1_ERR_FRC_ADM_MALFORM_ASO_MASK			0x1ull
#define FXR_LOCA1_ERR_FRC_ADM_MALFORM_ASO_SMASK			0x10000000000ull
#define FXR_LOCA1_ERR_FRC_ADM_MALFORM_ADT_SHIFT			39
#define FXR_LOCA1_ERR_FRC_ADM_MALFORM_ADT_MASK			0x1ull
#define FXR_LOCA1_ERR_FRC_ADM_MALFORM_ADT_SMASK			0x8000000000ull
#define FXR_LOCA1_ERR_FRC_ADM_MALFORM_ADDR_SHIFT		38
#define FXR_LOCA1_ERR_FRC_ADM_MALFORM_ADDR_MASK			0x1ull
#define FXR_LOCA1_ERR_FRC_ADM_MALFORM_ADDR_SMASK		0x4000000000ull
#define FXR_LOCA1_ERR_FRC_ADM_MALFORM_BLEN_SHIFT		37
#define FXR_LOCA1_ERR_FRC_ADM_MALFORM_BLEN_MASK			0x1ull
#define FXR_LOCA1_ERR_FRC_ADM_MALFORM_BLEN_SMASK		0x2000000000ull
#define FXR_LOCA1_ERR_FRC_PMON_ROLLOVER_SHIFT			36
#define FXR_LOCA1_ERR_FRC_PMON_ROLLOVER_MASK			0x1ull
#define FXR_LOCA1_ERR_FRC_PMON_ROLLOVER_SMASK			0x1000000000ull
#define FXR_LOCA1_ERR_FRC_HIFIS_HDR_SBE_SHIFT			35
#define FXR_LOCA1_ERR_FRC_HIFIS_HDR_SBE_MASK			0x1ull
#define FXR_LOCA1_ERR_FRC_HIFIS_HDR_SBE_SMASK			0x800000000ull
#define FXR_LOCA1_ERR_FRC_CONQ_TAIL_SBE_SHIFT			34
#define FXR_LOCA1_ERR_FRC_CONQ_TAIL_SBE_MASK			0x1ull
#define FXR_LOCA1_ERR_FRC_CONQ_TAIL_SBE_SMASK			0x400000000ull
#define FXR_LOCA1_ERR_FRC_HIFIS_HDR_MBE_SHIFT			33
#define FXR_LOCA1_ERR_FRC_HIFIS_HDR_MBE_MASK			0x1ull
#define FXR_LOCA1_ERR_FRC_HIFIS_HDR_MBE_SMASK			0x200000000ull
#define FXR_LOCA1_ERR_FRC_CONQ_TAIL_MBE_SHIFT			32
#define FXR_LOCA1_ERR_FRC_CONQ_TAIL_MBE_MASK			0x1ull
#define FXR_LOCA1_ERR_FRC_CONQ_TAIL_MBE_SMASK			0x100000000ull
#define FXR_LOCA1_ERR_FRC_DCD_BANK_SBE_SHIFT			16
#define FXR_LOCA1_ERR_FRC_DCD_BANK_SBE_MASK			0xFFFFull
#define FXR_LOCA1_ERR_FRC_DCD_BANK_SBE_SMASK			0xFFFF0000ull
#define FXR_LOCA1_ERR_FRC_DCD_BANK_MBE_SHIFT			0
#define FXR_LOCA1_ERR_FRC_DCD_BANK_MBE_MASK			0xFFFFull
#define FXR_LOCA1_ERR_FRC_DCD_BANK_MBE_SMASK			0xFFFFull
/*
* Table #50 of fxr_top - LOCA1_ERR_EN_HOST
* This is the Error Enable for the Host Interrupt. If a bit is set, the 
* corresponding error bit in LOCA_ERR_STS will cause an interrupt on the HOST 
* interrupt signal.
*/
#define FXR_LOCA1_ERR_EN_HOST					(FXR_LOCA_CSRS + 0x000000000318)
#define FXR_LOCA1_ERR_EN_HOST_RESETCSR				0x0000000000000000ull
#define FXR_LOCA1_ERR_EN_HOST_RESERVED_63_41_SHIFT		41
#define FXR_LOCA1_ERR_EN_HOST_RESERVED_63_41_MASK		0x7FFFFFull
#define FXR_LOCA1_ERR_EN_HOST_RESERVED_63_41_SMASK		0xFFFFFE0000000000ull
#define FXR_LOCA1_ERR_EN_HOST_ADM_MALFORM_ASO_SHIFT		40
#define FXR_LOCA1_ERR_EN_HOST_ADM_MALFORM_ASO_MASK		0x1ull
#define FXR_LOCA1_ERR_EN_HOST_ADM_MALFORM_ASO_SMASK		0x10000000000ull
#define FXR_LOCA1_ERR_EN_HOST_ADM_MALFORM_ADT_SHIFT		39
#define FXR_LOCA1_ERR_EN_HOST_ADM_MALFORM_ADT_MASK		0x1ull
#define FXR_LOCA1_ERR_EN_HOST_ADM_MALFORM_ADT_SMASK		0x8000000000ull
#define FXR_LOCA1_ERR_EN_HOST_ADM_MALFORM_ADDR_SHIFT		38
#define FXR_LOCA1_ERR_EN_HOST_ADM_MALFORM_ADDR_MASK		0x1ull
#define FXR_LOCA1_ERR_EN_HOST_ADM_MALFORM_ADDR_SMASK		0x4000000000ull
#define FXR_LOCA1_ERR_EN_HOST_ADM_MALFORM_BLEN_SHIFT		37
#define FXR_LOCA1_ERR_EN_HOST_ADM_MALFORM_BLEN_MASK		0x1ull
#define FXR_LOCA1_ERR_EN_HOST_ADM_MALFORM_BLEN_SMASK		0x2000000000ull
#define FXR_LOCA1_ERR_EN_HOST_PMON_ROLLOVER_SHIFT		36
#define FXR_LOCA1_ERR_EN_HOST_PMON_ROLLOVER_MASK		0x1ull
#define FXR_LOCA1_ERR_EN_HOST_PMON_ROLLOVER_SMASK		0x1000000000ull
#define FXR_LOCA1_ERR_EN_HOST_HIFIS_HDR_SBE_SHIFT		35
#define FXR_LOCA1_ERR_EN_HOST_HIFIS_HDR_SBE_MASK		0x1ull
#define FXR_LOCA1_ERR_EN_HOST_HIFIS_HDR_SBE_SMASK		0x800000000ull
#define FXR_LOCA1_ERR_EN_HOST_CONQ_TAIL_SBE_SHIFT		34
#define FXR_LOCA1_ERR_EN_HOST_CONQ_TAIL_SBE_MASK		0x1ull
#define FXR_LOCA1_ERR_EN_HOST_CONQ_TAIL_SBE_SMASK		0x400000000ull
#define FXR_LOCA1_ERR_EN_HOST_HIFIS_HDR_MBE_SHIFT		33
#define FXR_LOCA1_ERR_EN_HOST_HIFIS_HDR_MBE_MASK		0x1ull
#define FXR_LOCA1_ERR_EN_HOST_HIFIS_HDR_MBE_SMASK		0x200000000ull
#define FXR_LOCA1_ERR_EN_HOST_CONQ_TAIL_MBE_SHIFT		32
#define FXR_LOCA1_ERR_EN_HOST_CONQ_TAIL_MBE_MASK		0x1ull
#define FXR_LOCA1_ERR_EN_HOST_CONQ_TAIL_MBE_SMASK		0x100000000ull
#define FXR_LOCA1_ERR_EN_HOST_DCD_BANK_SBE_SHIFT		16
#define FXR_LOCA1_ERR_EN_HOST_DCD_BANK_SBE_MASK			0xFFFFull
#define FXR_LOCA1_ERR_EN_HOST_DCD_BANK_SBE_SMASK		0xFFFF0000ull
#define FXR_LOCA1_ERR_EN_HOST_DCD_BANK_MBE_SHIFT		0
#define FXR_LOCA1_ERR_EN_HOST_DCD_BANK_MBE_MASK			0xFFFFull
#define FXR_LOCA1_ERR_EN_HOST_DCD_BANK_MBE_SMASK		0xFFFFull
/*
* Table #51 of fxr_top - LOCA1_ERR_FIRST_HOST
* This is the First Error CSR for the Host Interrupt. When this CSR is clear, it 
* will capture the next LOCA_ERR_STS value when a new HOST Interrupt 
* occurs.
*/
#define FXR_LOCA1_ERR_FIRST_HOST				(FXR_LOCA_CSRS + 0x000000000320)
#define FXR_LOCA1_ERR_FIRST_HOST_RESETCSR			0x0000000000000000ull
#define FXR_LOCA1_ERR_FIRST_HOST_RESERVED_63_41_SHIFT		41
#define FXR_LOCA1_ERR_FIRST_HOST_RESERVED_63_41_MASK		0x7FFFFFull
#define FXR_LOCA1_ERR_FIRST_HOST_RESERVED_63_41_SMASK		0xFFFFFE0000000000ull
#define FXR_LOCA1_ERR_FIRST_HOST_ADM_MALFORM_ASO_SHIFT		40
#define FXR_LOCA1_ERR_FIRST_HOST_ADM_MALFORM_ASO_MASK		0x1ull
#define FXR_LOCA1_ERR_FIRST_HOST_ADM_MALFORM_ASO_SMASK		0x10000000000ull
#define FXR_LOCA1_ERR_FIRST_HOST_ADM_MALFORM_ADT_SHIFT		39
#define FXR_LOCA1_ERR_FIRST_HOST_ADM_MALFORM_ADT_MASK		0x1ull
#define FXR_LOCA1_ERR_FIRST_HOST_ADM_MALFORM_ADT_SMASK		0x8000000000ull
#define FXR_LOCA1_ERR_FIRST_HOST_ADM_MALFORM_ADDR_SHIFT		38
#define FXR_LOCA1_ERR_FIRST_HOST_ADM_MALFORM_ADDR_MASK		0x1ull
#define FXR_LOCA1_ERR_FIRST_HOST_ADM_MALFORM_ADDR_SMASK		0x4000000000ull
#define FXR_LOCA1_ERR_FIRST_HOST_ADM_MALFORM_BLEN_SHIFT		37
#define FXR_LOCA1_ERR_FIRST_HOST_ADM_MALFORM_BLEN_MASK		0x1ull
#define FXR_LOCA1_ERR_FIRST_HOST_ADM_MALFORM_BLEN_SMASK		0x2000000000ull
#define FXR_LOCA1_ERR_FIRST_HOST_PMON_ROLLOVER_SHIFT		36
#define FXR_LOCA1_ERR_FIRST_HOST_PMON_ROLLOVER_MASK		0x1ull
#define FXR_LOCA1_ERR_FIRST_HOST_PMON_ROLLOVER_SMASK		0x1000000000ull
#define FXR_LOCA1_ERR_FIRST_HOST_HIFIS_HDR_SBE_SHIFT		35
#define FXR_LOCA1_ERR_FIRST_HOST_HIFIS_HDR_SBE_MASK		0x1ull
#define FXR_LOCA1_ERR_FIRST_HOST_HIFIS_HDR_SBE_SMASK		0x800000000ull
#define FXR_LOCA1_ERR_FIRST_HOST_CONQ_TAIL_SBE_SHIFT		34
#define FXR_LOCA1_ERR_FIRST_HOST_CONQ_TAIL_SBE_MASK		0x1ull
#define FXR_LOCA1_ERR_FIRST_HOST_CONQ_TAIL_SBE_SMASK		0x400000000ull
#define FXR_LOCA1_ERR_FIRST_HOST_HIFIS_HDR_MBE_SHIFT		33
#define FXR_LOCA1_ERR_FIRST_HOST_HIFIS_HDR_MBE_MASK		0x1ull
#define FXR_LOCA1_ERR_FIRST_HOST_HIFIS_HDR_MBE_SMASK		0x200000000ull
#define FXR_LOCA1_ERR_FIRST_HOST_CONQ_TAIL_MBE_SHIFT		32
#define FXR_LOCA1_ERR_FIRST_HOST_CONQ_TAIL_MBE_MASK		0x1ull
#define FXR_LOCA1_ERR_FIRST_HOST_CONQ_TAIL_MBE_SMASK		0x100000000ull
#define FXR_LOCA1_ERR_FIRST_HOST_DCD_BANK_SBE_SHIFT		16
#define FXR_LOCA1_ERR_FIRST_HOST_DCD_BANK_SBE_MASK		0xFFFFull
#define FXR_LOCA1_ERR_FIRST_HOST_DCD_BANK_SBE_SMASK		0xFFFF0000ull
#define FXR_LOCA1_ERR_FIRST_HOST_DCD_BANK_MBE_SHIFT		0
#define FXR_LOCA1_ERR_FIRST_HOST_DCD_BANK_MBE_MASK		0xFFFFull
#define FXR_LOCA1_ERR_FIRST_HOST_DCD_BANK_MBE_SMASK		0xFFFFull
/*
* Table #52 of fxr_top - LOCA1_ERR_EN_BMC
* This is the Error Enable for the BMC Interrupt. If a bit is set, the 
* corresponding error bit in LOCA_ERR_STS will cause an interrupt on the BMC 
* interrupt signal.
*/
#define FXR_LOCA1_ERR_EN_BMC					(FXR_LOCA_CSRS + 0x000000000328)
#define FXR_LOCA1_ERR_EN_BMC_RESETCSR				0x0000000000000000ull
#define FXR_LOCA1_ERR_EN_BMC_RESERVED_63_41_SHIFT		41
#define FXR_LOCA1_ERR_EN_BMC_RESERVED_63_41_MASK		0x7FFFFFull
#define FXR_LOCA1_ERR_EN_BMC_RESERVED_63_41_SMASK		0xFFFFFE0000000000ull
#define FXR_LOCA1_ERR_EN_BMC_ADM_MALFORM_ASO_SHIFT		40
#define FXR_LOCA1_ERR_EN_BMC_ADM_MALFORM_ASO_MASK		0x1ull
#define FXR_LOCA1_ERR_EN_BMC_ADM_MALFORM_ASO_SMASK		0x10000000000ull
#define FXR_LOCA1_ERR_EN_BMC_ADM_MALFORM_ADT_SHIFT		39
#define FXR_LOCA1_ERR_EN_BMC_ADM_MALFORM_ADT_MASK		0x1ull
#define FXR_LOCA1_ERR_EN_BMC_ADM_MALFORM_ADT_SMASK		0x8000000000ull
#define FXR_LOCA1_ERR_EN_BMC_ADM_MALFORM_ADDR_SHIFT		38
#define FXR_LOCA1_ERR_EN_BMC_ADM_MALFORM_ADDR_MASK		0x1ull
#define FXR_LOCA1_ERR_EN_BMC_ADM_MALFORM_ADDR_SMASK		0x4000000000ull
#define FXR_LOCA1_ERR_EN_BMC_ADM_MALFORM_BLEN_SHIFT		37
#define FXR_LOCA1_ERR_EN_BMC_ADM_MALFORM_BLEN_MASK		0x1ull
#define FXR_LOCA1_ERR_EN_BMC_ADM_MALFORM_BLEN_SMASK		0x2000000000ull
#define FXR_LOCA1_ERR_EN_BMC_PMON_ROLLOVER_SHIFT		36
#define FXR_LOCA1_ERR_EN_BMC_PMON_ROLLOVER_MASK			0x1ull
#define FXR_LOCA1_ERR_EN_BMC_PMON_ROLLOVER_SMASK		0x1000000000ull
#define FXR_LOCA1_ERR_EN_BMC_HIFIS_HDR_SBE_SHIFT		35
#define FXR_LOCA1_ERR_EN_BMC_HIFIS_HDR_SBE_MASK			0x1ull
#define FXR_LOCA1_ERR_EN_BMC_HIFIS_HDR_SBE_SMASK		0x800000000ull
#define FXR_LOCA1_ERR_EN_BMC_CONQ_TAIL_SBE_SHIFT		34
#define FXR_LOCA1_ERR_EN_BMC_CONQ_TAIL_SBE_MASK			0x1ull
#define FXR_LOCA1_ERR_EN_BMC_CONQ_TAIL_SBE_SMASK		0x400000000ull
#define FXR_LOCA1_ERR_EN_BMC_HIFIS_HDR_MBE_SHIFT		33
#define FXR_LOCA1_ERR_EN_BMC_HIFIS_HDR_MBE_MASK			0x1ull
#define FXR_LOCA1_ERR_EN_BMC_HIFIS_HDR_MBE_SMASK		0x200000000ull
#define FXR_LOCA1_ERR_EN_BMC_CONQ_TAIL_MBE_SHIFT		32
#define FXR_LOCA1_ERR_EN_BMC_CONQ_TAIL_MBE_MASK			0x1ull
#define FXR_LOCA1_ERR_EN_BMC_CONQ_TAIL_MBE_SMASK		0x100000000ull
#define FXR_LOCA1_ERR_EN_BMC_DCD_BANK_SBE_SHIFT			16
#define FXR_LOCA1_ERR_EN_BMC_DCD_BANK_SBE_MASK			0xFFFFull
#define FXR_LOCA1_ERR_EN_BMC_DCD_BANK_SBE_SMASK			0xFFFF0000ull
#define FXR_LOCA1_ERR_EN_BMC_DCD_BANK_MBE_SHIFT			0
#define FXR_LOCA1_ERR_EN_BMC_DCD_BANK_MBE_MASK			0xFFFFull
#define FXR_LOCA1_ERR_EN_BMC_DCD_BANK_MBE_SMASK			0xFFFFull
/*
* Table #53 of fxr_top - LOCA1_ERR_FIRST_BMC
* This is the First Error CSR for the BMC Interrupt. When this CSR is clear, it 
* will capture the next LOCA_ERR_STS value when a new BMC Interrupt 
* occurs.
*/
#define FXR_LOCA1_ERR_FIRST_BMC					(FXR_LOCA_CSRS + 0x000000000330)
#define FXR_LOCA1_ERR_FIRST_BMC_RESETCSR			0x0000000000000000ull
#define FXR_LOCA1_ERR_FIRST_BMC_RESERVED_63_41_SHIFT		41
#define FXR_LOCA1_ERR_FIRST_BMC_RESERVED_63_41_MASK		0x7FFFFFull
#define FXR_LOCA1_ERR_FIRST_BMC_RESERVED_63_41_SMASK		0xFFFFFE0000000000ull
#define FXR_LOCA1_ERR_FIRST_BMC_ADM_MALFORM_ASO_SHIFT		40
#define FXR_LOCA1_ERR_FIRST_BMC_ADM_MALFORM_ASO_MASK		0x1ull
#define FXR_LOCA1_ERR_FIRST_BMC_ADM_MALFORM_ASO_SMASK		0x10000000000ull
#define FXR_LOCA1_ERR_FIRST_BMC_ADM_MALFORM_ADT_SHIFT		39
#define FXR_LOCA1_ERR_FIRST_BMC_ADM_MALFORM_ADT_MASK		0x1ull
#define FXR_LOCA1_ERR_FIRST_BMC_ADM_MALFORM_ADT_SMASK		0x8000000000ull
#define FXR_LOCA1_ERR_FIRST_BMC_ADM_MALFORM_ADDR_SHIFT		38
#define FXR_LOCA1_ERR_FIRST_BMC_ADM_MALFORM_ADDR_MASK		0x1ull
#define FXR_LOCA1_ERR_FIRST_BMC_ADM_MALFORM_ADDR_SMASK		0x4000000000ull
#define FXR_LOCA1_ERR_FIRST_BMC_ADM_MALFORM_BLEN_SHIFT		37
#define FXR_LOCA1_ERR_FIRST_BMC_ADM_MALFORM_BLEN_MASK		0x1ull
#define FXR_LOCA1_ERR_FIRST_BMC_ADM_MALFORM_BLEN_SMASK		0x2000000000ull
#define FXR_LOCA1_ERR_FIRST_BMC_PMON_ROLLOVER_SHIFT		36
#define FXR_LOCA1_ERR_FIRST_BMC_PMON_ROLLOVER_MASK		0x1ull
#define FXR_LOCA1_ERR_FIRST_BMC_PMON_ROLLOVER_SMASK		0x1000000000ull
#define FXR_LOCA1_ERR_FIRST_BMC_HIFIS_HDR_SBE_SHIFT		35
#define FXR_LOCA1_ERR_FIRST_BMC_HIFIS_HDR_SBE_MASK		0x1ull
#define FXR_LOCA1_ERR_FIRST_BMC_HIFIS_HDR_SBE_SMASK		0x800000000ull
#define FXR_LOCA1_ERR_FIRST_BMC_CONQ_TAIL_SBE_SHIFT		34
#define FXR_LOCA1_ERR_FIRST_BMC_CONQ_TAIL_SBE_MASK		0x1ull
#define FXR_LOCA1_ERR_FIRST_BMC_CONQ_TAIL_SBE_SMASK		0x400000000ull
#define FXR_LOCA1_ERR_FIRST_BMC_HIFIS_HDR_MBE_SHIFT		33
#define FXR_LOCA1_ERR_FIRST_BMC_HIFIS_HDR_MBE_MASK		0x1ull
#define FXR_LOCA1_ERR_FIRST_BMC_HIFIS_HDR_MBE_SMASK		0x200000000ull
#define FXR_LOCA1_ERR_FIRST_BMC_CONQ_TAIL_MBE_SHIFT		32
#define FXR_LOCA1_ERR_FIRST_BMC_CONQ_TAIL_MBE_MASK		0x1ull
#define FXR_LOCA1_ERR_FIRST_BMC_CONQ_TAIL_MBE_SMASK		0x100000000ull
#define FXR_LOCA1_ERR_FIRST_BMC_DCD_BANK_SBE_SHIFT		16
#define FXR_LOCA1_ERR_FIRST_BMC_DCD_BANK_SBE_MASK		0xFFFFull
#define FXR_LOCA1_ERR_FIRST_BMC_DCD_BANK_SBE_SMASK		0xFFFF0000ull
#define FXR_LOCA1_ERR_FIRST_BMC_DCD_BANK_MBE_SHIFT		0
#define FXR_LOCA1_ERR_FIRST_BMC_DCD_BANK_MBE_MASK		0xFFFFull
#define FXR_LOCA1_ERR_FIRST_BMC_DCD_BANK_MBE_SMASK		0xFFFFull
/*
* Table #54 of fxr_top - LOCA1_ERR_EN_QUAR
* This is the Error Enable for the Quarantine Interrupt. If a bit is set, the 
* corresponding error bit in LOCA_ERR_STS will cause an interrupt on the QUAR 
* interrupt signal.
*/
#define FXR_LOCA1_ERR_EN_QUAR					(FXR_LOCA_CSRS + 0x000000000338)
#define FXR_LOCA1_ERR_EN_QUAR_RESETCSR				0x0000000000000000ull
#define FXR_LOCA1_ERR_EN_QUAR_RESERVED_63_41_SHIFT		41
#define FXR_LOCA1_ERR_EN_QUAR_RESERVED_63_41_MASK		0x7FFFFFull
#define FXR_LOCA1_ERR_EN_QUAR_RESERVED_63_41_SMASK		0xFFFFFE0000000000ull
#define FXR_LOCA1_ERR_EN_QUAR_ADM_MALFORM_ASO_SHIFT		40
#define FXR_LOCA1_ERR_EN_QUAR_ADM_MALFORM_ASO_MASK		0x1ull
#define FXR_LOCA1_ERR_EN_QUAR_ADM_MALFORM_ASO_SMASK		0x10000000000ull
#define FXR_LOCA1_ERR_EN_QUAR_ADM_MALFORM_ADT_SHIFT		39
#define FXR_LOCA1_ERR_EN_QUAR_ADM_MALFORM_ADT_MASK		0x1ull
#define FXR_LOCA1_ERR_EN_QUAR_ADM_MALFORM_ADT_SMASK		0x8000000000ull
#define FXR_LOCA1_ERR_EN_QUAR_ADM_MALFORM_ADDR_SHIFT		38
#define FXR_LOCA1_ERR_EN_QUAR_ADM_MALFORM_ADDR_MASK		0x1ull
#define FXR_LOCA1_ERR_EN_QUAR_ADM_MALFORM_ADDR_SMASK		0x4000000000ull
#define FXR_LOCA1_ERR_EN_QUAR_ADM_MALFORM_BLEN_SHIFT		37
#define FXR_LOCA1_ERR_EN_QUAR_ADM_MALFORM_BLEN_MASK		0x1ull
#define FXR_LOCA1_ERR_EN_QUAR_ADM_MALFORM_BLEN_SMASK		0x2000000000ull
#define FXR_LOCA1_ERR_EN_QUAR_PMON_ROLLOVER_SHIFT		36
#define FXR_LOCA1_ERR_EN_QUAR_PMON_ROLLOVER_MASK		0x1ull
#define FXR_LOCA1_ERR_EN_QUAR_PMON_ROLLOVER_SMASK		0x1000000000ull
#define FXR_LOCA1_ERR_EN_QUAR_HIFIS_HDR_SBE_SHIFT		35
#define FXR_LOCA1_ERR_EN_QUAR_HIFIS_HDR_SBE_MASK		0x1ull
#define FXR_LOCA1_ERR_EN_QUAR_HIFIS_HDR_SBE_SMASK		0x800000000ull
#define FXR_LOCA1_ERR_EN_QUAR_CONQ_TAIL_SBE_SHIFT		34
#define FXR_LOCA1_ERR_EN_QUAR_CONQ_TAIL_SBE_MASK		0x1ull
#define FXR_LOCA1_ERR_EN_QUAR_CONQ_TAIL_SBE_SMASK		0x400000000ull
#define FXR_LOCA1_ERR_EN_QUAR_HIFIS_HDR_MBE_SHIFT		33
#define FXR_LOCA1_ERR_EN_QUAR_HIFIS_HDR_MBE_MASK		0x1ull
#define FXR_LOCA1_ERR_EN_QUAR_HIFIS_HDR_MBE_SMASK		0x200000000ull
#define FXR_LOCA1_ERR_EN_QUAR_CONQ_TAIL_MBE_SHIFT		32
#define FXR_LOCA1_ERR_EN_QUAR_CONQ_TAIL_MBE_MASK		0x1ull
#define FXR_LOCA1_ERR_EN_QUAR_CONQ_TAIL_MBE_SMASK		0x100000000ull
#define FXR_LOCA1_ERR_EN_QUAR_DCD_BANK_SBE_SHIFT		16
#define FXR_LOCA1_ERR_EN_QUAR_DCD_BANK_SBE_MASK			0xFFFFull
#define FXR_LOCA1_ERR_EN_QUAR_DCD_BANK_SBE_SMASK		0xFFFF0000ull
#define FXR_LOCA1_ERR_EN_QUAR_DCD_BANK_MBE_SHIFT		0
#define FXR_LOCA1_ERR_EN_QUAR_DCD_BANK_MBE_MASK			0xFFFFull
#define FXR_LOCA1_ERR_EN_QUAR_DCD_BANK_MBE_SMASK		0xFFFFull
/*
* Table #55 of fxr_top - LOCA1_ERR_FIRST_QUAR
* This is the First Error CSR for the Quarantine Interrupt. When this CSR is 
* clear, it will capture the next LOCA_ERR_STS value when a new QUAR Interrupt 
* occurs.
*/
#define FXR_LOCA1_ERR_FIRST_QUAR				(FXR_LOCA_CSRS + 0x000000000340)
#define FXR_LOCA1_ERR_FIRST_QUAR_RESETCSR			0x0000000000000000ull
#define FXR_LOCA1_ERR_FIRST_QUAR_RESERVED_63_41_SHIFT		41
#define FXR_LOCA1_ERR_FIRST_QUAR_RESERVED_63_41_MASK		0x7FFFFFull
#define FXR_LOCA1_ERR_FIRST_QUAR_RESERVED_63_41_SMASK		0xFFFFFE0000000000ull
#define FXR_LOCA1_ERR_FIRST_QUAR_ADM_MALFORM_ASO_SHIFT		40
#define FXR_LOCA1_ERR_FIRST_QUAR_ADM_MALFORM_ASO_MASK		0x1ull
#define FXR_LOCA1_ERR_FIRST_QUAR_ADM_MALFORM_ASO_SMASK		0x10000000000ull
#define FXR_LOCA1_ERR_FIRST_QUAR_ADM_MALFORM_ADT_SHIFT		39
#define FXR_LOCA1_ERR_FIRST_QUAR_ADM_MALFORM_ADT_MASK		0x1ull
#define FXR_LOCA1_ERR_FIRST_QUAR_ADM_MALFORM_ADT_SMASK		0x8000000000ull
#define FXR_LOCA1_ERR_FIRST_QUAR_ADM_MALFORM_ADDR_SHIFT		38
#define FXR_LOCA1_ERR_FIRST_QUAR_ADM_MALFORM_ADDR_MASK		0x1ull
#define FXR_LOCA1_ERR_FIRST_QUAR_ADM_MALFORM_ADDR_SMASK		0x4000000000ull
#define FXR_LOCA1_ERR_FIRST_QUAR_ADM_MALFORM_BLEN_SHIFT		37
#define FXR_LOCA1_ERR_FIRST_QUAR_ADM_MALFORM_BLEN_MASK		0x1ull
#define FXR_LOCA1_ERR_FIRST_QUAR_ADM_MALFORM_BLEN_SMASK		0x2000000000ull
#define FXR_LOCA1_ERR_FIRST_QUAR_PMON_ROLLOVER_SHIFT		36
#define FXR_LOCA1_ERR_FIRST_QUAR_PMON_ROLLOVER_MASK		0x1ull
#define FXR_LOCA1_ERR_FIRST_QUAR_PMON_ROLLOVER_SMASK		0x1000000000ull
#define FXR_LOCA1_ERR_FIRST_QUAR_HIFIS_HDR_SBE_SHIFT		35
#define FXR_LOCA1_ERR_FIRST_QUAR_HIFIS_HDR_SBE_MASK		0x1ull
#define FXR_LOCA1_ERR_FIRST_QUAR_HIFIS_HDR_SBE_SMASK		0x800000000ull
#define FXR_LOCA1_ERR_FIRST_QUAR_CONQ_TAIL_SBE_SHIFT		34
#define FXR_LOCA1_ERR_FIRST_QUAR_CONQ_TAIL_SBE_MASK		0x1ull
#define FXR_LOCA1_ERR_FIRST_QUAR_CONQ_TAIL_SBE_SMASK		0x400000000ull
#define FXR_LOCA1_ERR_FIRST_QUAR_HIFIS_HDR_MBE_SHIFT		33
#define FXR_LOCA1_ERR_FIRST_QUAR_HIFIS_HDR_MBE_MASK		0x1ull
#define FXR_LOCA1_ERR_FIRST_QUAR_HIFIS_HDR_MBE_SMASK		0x200000000ull
#define FXR_LOCA1_ERR_FIRST_QUAR_CONQ_TAIL_MBE_SHIFT		32
#define FXR_LOCA1_ERR_FIRST_QUAR_CONQ_TAIL_MBE_MASK		0x1ull
#define FXR_LOCA1_ERR_FIRST_QUAR_CONQ_TAIL_MBE_SMASK		0x100000000ull
#define FXR_LOCA1_ERR_FIRST_QUAR_DCD_BANK_SBE_SHIFT		16
#define FXR_LOCA1_ERR_FIRST_QUAR_DCD_BANK_SBE_MASK		0xFFFFull
#define FXR_LOCA1_ERR_FIRST_QUAR_DCD_BANK_SBE_SMASK		0xFFFF0000ull
#define FXR_LOCA1_ERR_FIRST_QUAR_DCD_BANK_MBE_SHIFT		0
#define FXR_LOCA1_ERR_FIRST_QUAR_DCD_BANK_MBE_MASK		0xFFFFull
#define FXR_LOCA1_ERR_FIRST_QUAR_DCD_BANK_MBE_SMASK		0xFFFFull
/*
* Table #56 of fxr_top - LOCA1_VIRAL_ENABLE
* This is the Error Enable for the Viral signaling. If a bit is set, the 
* corresponding error bit in #%%#LOCA1_ERR_STS#%%# will assert viral 
* signaling.
*/
#define FXR_LOCA1_VIRAL_ENABLE					(FXR_LOCA_CSRS + 0x000000000348)
#define FXR_LOCA1_VIRAL_ENABLE_RESETCSR				0x0000000000000000ull
#define FXR_LOCA1_VIRAL_ENABLE_RESERVED_63_41_SHIFT		41
#define FXR_LOCA1_VIRAL_ENABLE_RESERVED_63_41_MASK		0x7FFFFFull
#define FXR_LOCA1_VIRAL_ENABLE_RESERVED_63_41_SMASK		0xFFFFFE0000000000ull
#define FXR_LOCA1_VIRAL_ENABLE_ADM_MALFORM_ASO_SHIFT		40
#define FXR_LOCA1_VIRAL_ENABLE_ADM_MALFORM_ASO_MASK		0x1ull
#define FXR_LOCA1_VIRAL_ENABLE_ADM_MALFORM_ASO_SMASK		0x10000000000ull
#define FXR_LOCA1_VIRAL_ENABLE_ADM_MALFORM_ADT_SHIFT		39
#define FXR_LOCA1_VIRAL_ENABLE_ADM_MALFORM_ADT_MASK		0x1ull
#define FXR_LOCA1_VIRAL_ENABLE_ADM_MALFORM_ADT_SMASK		0x8000000000ull
#define FXR_LOCA1_VIRAL_ENABLE_ADM_MALFORM_ADDR_SHIFT		38
#define FXR_LOCA1_VIRAL_ENABLE_ADM_MALFORM_ADDR_MASK		0x1ull
#define FXR_LOCA1_VIRAL_ENABLE_ADM_MALFORM_ADDR_SMASK		0x4000000000ull
#define FXR_LOCA1_VIRAL_ENABLE_ADM_MALFORM_BLEN_SHIFT		37
#define FXR_LOCA1_VIRAL_ENABLE_ADM_MALFORM_BLEN_MASK		0x1ull
#define FXR_LOCA1_VIRAL_ENABLE_ADM_MALFORM_BLEN_SMASK		0x2000000000ull
#define FXR_LOCA1_VIRAL_ENABLE_PMON_ROLLOVER_SHIFT		36
#define FXR_LOCA1_VIRAL_ENABLE_PMON_ROLLOVER_MASK		0x1ull
#define FXR_LOCA1_VIRAL_ENABLE_PMON_ROLLOVER_SMASK		0x1000000000ull
#define FXR_LOCA1_VIRAL_ENABLE_HIFIS_HDR_SBE_SHIFT		35
#define FXR_LOCA1_VIRAL_ENABLE_HIFIS_HDR_SBE_MASK		0x1ull
#define FXR_LOCA1_VIRAL_ENABLE_HIFIS_HDR_SBE_SMASK		0x800000000ull
#define FXR_LOCA1_VIRAL_ENABLE_CONQ_TAIL_SBE_SHIFT		34
#define FXR_LOCA1_VIRAL_ENABLE_CONQ_TAIL_SBE_MASK		0x1ull
#define FXR_LOCA1_VIRAL_ENABLE_CONQ_TAIL_SBE_SMASK		0x400000000ull
#define FXR_LOCA1_VIRAL_ENABLE_HIFIS_HDR_MBE_SHIFT		33
#define FXR_LOCA1_VIRAL_ENABLE_HIFIS_HDR_MBE_MASK		0x1ull
#define FXR_LOCA1_VIRAL_ENABLE_HIFIS_HDR_MBE_SMASK		0x200000000ull
#define FXR_LOCA1_VIRAL_ENABLE_CONQ_TAIL_MBE_SHIFT		32
#define FXR_LOCA1_VIRAL_ENABLE_CONQ_TAIL_MBE_MASK		0x1ull
#define FXR_LOCA1_VIRAL_ENABLE_CONQ_TAIL_MBE_SMASK		0x100000000ull
#define FXR_LOCA1_VIRAL_ENABLE_DCD_BANK_SBE_SHIFT		16
#define FXR_LOCA1_VIRAL_ENABLE_DCD_BANK_SBE_MASK		0xFFFFull
#define FXR_LOCA1_VIRAL_ENABLE_DCD_BANK_SBE_SMASK		0xFFFF0000ull
#define FXR_LOCA1_VIRAL_ENABLE_DCD_BANK_MBE_SHIFT		0
#define FXR_LOCA1_VIRAL_ENABLE_DCD_BANK_MBE_MASK		0xFFFFull
#define FXR_LOCA1_VIRAL_ENABLE_DCD_BANK_MBE_SMASK		0xFFFFull
/*
* Table #57 of fxr_top - LOCA_PMON_AR_LOWER
* Performance Monitor Address Range Lower control registers. These four 
* registers define the lower address range for the #%%#pm_addr_range3#%%# 
* through #%%#pm_addr_range0#%%# PMON counters. 
*/
#define FXR_LOCA_PMON_AR_LOWER					(FXR_LOCA_CSRS + 0x000000000350)
#define FXR_LOCA_PMON_AR_LOWER_RESETCSR				0x0000000000000000ull
#define FXR_LOCA_PMON_AR_LOWER_RESERVED_63_47_SHIFT		47
#define FXR_LOCA_PMON_AR_LOWER_RESERVED_63_47_MASK		0x1FFFFull
#define FXR_LOCA_PMON_AR_LOWER_RESERVED_63_47_SMASK		0xFFFF800000000000ull
#define FXR_LOCA_PMON_AR_LOWER_LOWER_ADDR_RANGE_SHIFT		12
#define FXR_LOCA_PMON_AR_LOWER_LOWER_ADDR_RANGE_MASK		0x7FFFFFFFFull
#define FXR_LOCA_PMON_AR_LOWER_LOWER_ADDR_RANGE_SMASK		0x7FFFFFFFF000ull
#define FXR_LOCA_PMON_AR_LOWER_RESERVED_11_5_SHIFT		5
#define FXR_LOCA_PMON_AR_LOWER_RESERVED_11_5_MASK		0x7Full
#define FXR_LOCA_PMON_AR_LOWER_RESERVED_11_5_SMASK		0xFE0ull
#define FXR_LOCA_PMON_AR_LOWER_CACHEMISS_ENABLE_SHIFT		4
#define FXR_LOCA_PMON_AR_LOWER_CACHEMISS_ENABLE_MASK		0x1ull
#define FXR_LOCA_PMON_AR_LOWER_CACHEMISS_ENABLE_SMASK		0x10ull
#define FXR_LOCA_PMON_AR_LOWER_CACHEHIT_ENABLE_SHIFT		3
#define FXR_LOCA_PMON_AR_LOWER_CACHEHIT_ENABLE_MASK		0x1ull
#define FXR_LOCA_PMON_AR_LOWER_CACHEHIT_ENABLE_SMASK		0x8ull
#define FXR_LOCA_PMON_AR_LOWER_ATOMIC_ENABLE_SHIFT		2
#define FXR_LOCA_PMON_AR_LOWER_ATOMIC_ENABLE_MASK		0x1ull
#define FXR_LOCA_PMON_AR_LOWER_ATOMIC_ENABLE_SMASK		0x4ull
#define FXR_LOCA_PMON_AR_LOWER_WRITE_ENABLE_SHIFT		1
#define FXR_LOCA_PMON_AR_LOWER_WRITE_ENABLE_MASK		0x1ull
#define FXR_LOCA_PMON_AR_LOWER_WRITE_ENABLE_SMASK		0x2ull
#define FXR_LOCA_PMON_AR_LOWER_READ_ENABLE_SHIFT		0
#define FXR_LOCA_PMON_AR_LOWER_READ_ENABLE_MASK			0x1ull
#define FXR_LOCA_PMON_AR_LOWER_READ_ENABLE_SMASK		0x1ull
/*
* Table #58 of fxr_top - LOCA_PMON_AR_UPPER
* Performance Monitor Address Range Upper control registers. These four 
* registers define the upper address ranges for the #%%#pm_addr_range3#%%# 
* through #%%#pm_addr_range0#%%# PMON counters. 
*/
#define FXR_LOCA_PMON_AR_UPPER					(FXR_LOCA_CSRS + 0x000000000370)
#define FXR_LOCA_PMON_AR_UPPER_RESETCSR				0x0000000000000000ull
#define FXR_LOCA_PMON_AR_UPPER_RESERVED_63_47_SHIFT		47
#define FXR_LOCA_PMON_AR_UPPER_RESERVED_63_47_MASK		0x1FFFFull
#define FXR_LOCA_PMON_AR_UPPER_RESERVED_63_47_SMASK		0xFFFF800000000000ull
#define FXR_LOCA_PMON_AR_UPPER_UPPER_ADDR_RANGE_SHIFT		12
#define FXR_LOCA_PMON_AR_UPPER_UPPER_ADDR_RANGE_MASK		0x7FFFFFFFFull
#define FXR_LOCA_PMON_AR_UPPER_UPPER_ADDR_RANGE_SMASK		0x7FFFFFFFF000ull
#define FXR_LOCA_PMON_AR_UPPER_RESERVED_11_0_SHIFT		0
#define FXR_LOCA_PMON_AR_UPPER_RESERVED_11_0_MASK		0xFFFull
#define FXR_LOCA_PMON_AR_UPPER_RESERVED_11_0_SMASK		0xFFFull
/*
* Table #59 of fxr_top - LOCA_PMON_CFG
* This CSR configures the LOCA Performance Monitor Counters (PMONs).
*/
#define FXR_LOCA_PMON_CFG					(FXR_LOCA_CSRS + 0x000000000390)
#define FXR_LOCA_PMON_CFG_RESETCSR				0x000000031F00000Full
#define FXR_LOCA_PMON_CFG_RESERVED_63_34_SHIFT			34
#define FXR_LOCA_PMON_CFG_RESERVED_63_34_MASK			0x3FFFFFFFull
#define FXR_LOCA_PMON_CFG_RESERVED_63_34_SMASK			0xFFFFFFFC00000000ull
#define FXR_LOCA_PMON_CFG_LATENCY_CTL_SHIFT			32
#define FXR_LOCA_PMON_CFG_LATENCY_CTL_MASK			0x3ull
#define FXR_LOCA_PMON_CFG_LATENCY_CTL_SMASK			0x300000000ull
#define FXR_LOCA_PMON_CFG_RESERVED_31_30_SHIFT			30
#define FXR_LOCA_PMON_CFG_RESERVED_31_30_MASK			0x3ull
#define FXR_LOCA_PMON_CFG_RESERVED_31_30_SMASK			0xC0000000ull
#define FXR_LOCA_PMON_CFG_FID_CNT_MSK_SHIFT			24
#define FXR_LOCA_PMON_CFG_FID_CNT_MSK_MASK			0x3Full
#define FXR_LOCA_PMON_CFG_FID_CNT_MSK_SMASK			0x3F000000ull
#define FXR_LOCA_PMON_CFG_RESERVED_23_22_SHIFT			22
#define FXR_LOCA_PMON_CFG_RESERVED_23_22_MASK			0x3ull
#define FXR_LOCA_PMON_CFG_RESERVED_23_22_SMASK			0xC00000ull
#define FXR_LOCA_PMON_CFG_FID_CNT_ID_SHIFT			16
#define FXR_LOCA_PMON_CFG_FID_CNT_ID_MASK			0x3Full
#define FXR_LOCA_PMON_CFG_FID_CNT_ID_SMASK			0x3F0000ull
#define FXR_LOCA_PMON_CFG_RESERVED_15_4_SHIFT			4
#define FXR_LOCA_PMON_CFG_RESERVED_15_4_MASK			0xFFFull
#define FXR_LOCA_PMON_CFG_RESERVED_15_4_SMASK			0xFFF0ull
#define FXR_LOCA_PMON_CFG_ALLOC_OPCODE_ENA_SHIFT		3
#define FXR_LOCA_PMON_CFG_ALLOC_OPCODE_ENA_MASK			0x1ull
#define FXR_LOCA_PMON_CFG_ALLOC_OPCODE_ENA_SMASK		0x8ull
#define FXR_LOCA_PMON_CFG_RX_CNT_ENA_SHIFT			2
#define FXR_LOCA_PMON_CFG_RX_CNT_ENA_MASK			0x1ull
#define FXR_LOCA_PMON_CFG_RX_CNT_ENA_SMASK			0x4ull
#define FXR_LOCA_PMON_CFG_TX_CNT_ENA_SHIFT			1
#define FXR_LOCA_PMON_CFG_TX_CNT_ENA_MASK			0x1ull
#define FXR_LOCA_PMON_CFG_TX_CNT_ENA_SMASK			0x2ull
#define FXR_LOCA_PMON_CFG_AT_CNT_ENA_SHIFT			0
#define FXR_LOCA_PMON_CFG_AT_CNT_ENA_MASK			0x1ull
#define FXR_LOCA_PMON_CFG_AT_CNT_ENA_SMASK			0x1ull
/*
* Table #60 of fxr_top - LOCA_PMON_CONTROL
* This CSR controls the LOCA Performance Monitor Counters (PMONs).
*/
#define FXR_LOCA_PMON_CONTROL					(FXR_LOCA_CSRS + 0x000000000398)
#define FXR_LOCA_PMON_CONTROL_RESETCSR				0x0000000000000000ull
#define FXR_LOCA_PMON_CONTROL_RESERVED_63_39_SHIFT		39
#define FXR_LOCA_PMON_CONTROL_RESERVED_63_39_MASK		0x1FFFFFFull
#define FXR_LOCA_PMON_CONTROL_RESERVED_63_39_SMASK		0xFFFFFF8000000000ull
#define FXR_LOCA_PMON_CONTROL_RESET_CTRS_SHIFT			32
#define FXR_LOCA_PMON_CONTROL_RESET_CTRS_MASK			0x7Full
#define FXR_LOCA_PMON_CONTROL_RESET_CTRS_SMASK			0x7F00000000ull
#define FXR_LOCA_PMON_CONTROL_RESERVED_31_23_SHIFT		23
#define FXR_LOCA_PMON_CONTROL_RESERVED_31_23_MASK		0x1FFull
#define FXR_LOCA_PMON_CONTROL_RESERVED_31_23_SMASK		0xFF800000ull
#define FXR_LOCA_PMON_CONTROL_LOG_OVERFLOW_SHIFT		16
#define FXR_LOCA_PMON_CONTROL_LOG_OVERFLOW_MASK			0x7Full
#define FXR_LOCA_PMON_CONTROL_LOG_OVERFLOW_SMASK		0x7F0000ull
#define FXR_LOCA_PMON_CONTROL_RESERVED_15_7_SHIFT		7
#define FXR_LOCA_PMON_CONTROL_RESERVED_15_7_MASK		0x1FFull
#define FXR_LOCA_PMON_CONTROL_RESERVED_15_7_SMASK		0xFF80ull
#define FXR_LOCA_PMON_CONTROL_FREEZE_SHIFT			0
#define FXR_LOCA_PMON_CONTROL_FREEZE_MASK			0x7Full
#define FXR_LOCA_PMON_CONTROL_FREEZE_SMASK			0x7Full
/*
* Table #61 of fxr_top - LOCA_PMON_FREEZE_TIME
* This is the local time at which the performance monitor counter array was 
* frozen. This is updated with #%%#LOCA_PMON_LOCAL_TIME#%%# if any bits in 
* #%%#LOCA_PMON_CONTROL#%%#.FREEZE go from 0 to 1.
*/
#define FXR_LOCA_PMON_FREEZE_TIME				(FXR_LOCA_CSRS + 0x0000000003A0)
#define FXR_LOCA_PMON_FREEZE_TIME_RESETCSR			0x0000000000000000ull
#define FXR_LOCA_PMON_FREEZE_TIME_RESERVED_63_56_SHIFT		56
#define FXR_LOCA_PMON_FREEZE_TIME_RESERVED_63_56_MASK		0xFFull
#define FXR_LOCA_PMON_FREEZE_TIME_RESERVED_63_56_SMASK		0xFF00000000000000ull
#define FXR_LOCA_PMON_FREEZE_TIME_FREEZE_TIME_SHIFT		0
#define FXR_LOCA_PMON_FREEZE_TIME_FREEZE_TIME_MASK		0xFFFFFFFFFFFFFFull
#define FXR_LOCA_PMON_FREEZE_TIME_FREEZE_TIME_SMASK		0xFFFFFFFFFFFFFFull
/*
* Table #62 of fxr_top - LOCA_PMON_ENABLE_TIME
* This is the local time at which the performance monitor counter array was 
* released from the freeze state. This is updated with #%%#LOCA_PMON_LOCAL_TIME#%%# 
* if any bits in #%%#LOCA_PMON_CONTROL#%%#.FREEZE go from 1 to 
* 0.
*/
#define FXR_LOCA_PMON_ENABLE_TIME				(FXR_LOCA_CSRS + 0x0000000003A8)
#define FXR_LOCA_PMON_ENABLE_TIME_RESETCSR			0x0000000000000000ull
#define FXR_LOCA_PMON_ENABLE_TIME_RESERVED_63_56_SHIFT		56
#define FXR_LOCA_PMON_ENABLE_TIME_RESERVED_63_56_MASK		0xFFull
#define FXR_LOCA_PMON_ENABLE_TIME_RESERVED_63_56_SMASK		0xFF00000000000000ull
#define FXR_LOCA_PMON_ENABLE_TIME_ENABLE_TIME_SHIFT		0
#define FXR_LOCA_PMON_ENABLE_TIME_ENABLE_TIME_MASK		0xFFFFFFFFFFFFFFull
#define FXR_LOCA_PMON_ENABLE_TIME_ENABLE_TIME_SMASK		0xFFFFFFFFFFFFFFull
/*
* Table #63 of fxr_top - LOCA_PMON_LOCAL_TIME
* This is the local time. It increments every hclk. At 1.5Ghz cclk, it will 
* rollover 1.4 years from hreset. Note: The HW counter is only 50 
* bits.
*/
#define FXR_LOCA_PMON_LOCAL_TIME				(FXR_LOCA_CSRS + 0x0000000003B0)
#define FXR_LOCA_PMON_LOCAL_TIME_RESETCSR			0x0000000000000000ull
#define FXR_LOCA_PMON_LOCAL_TIME_RESERVED_63_56_SHIFT		56
#define FXR_LOCA_PMON_LOCAL_TIME_RESERVED_63_56_MASK		0xFFull
#define FXR_LOCA_PMON_LOCAL_TIME_RESERVED_63_56_SMASK		0xFF00000000000000ull
#define FXR_LOCA_PMON_LOCAL_TIME_LOCAL_TIME_SHIFT		0
#define FXR_LOCA_PMON_LOCAL_TIME_LOCAL_TIME_MASK		0xFFFFFFFFFFFFFFull
#define FXR_LOCA_PMON_LOCAL_TIME_LOCAL_TIME_SMASK		0xFFFFFFFFFFFFFFull
/*
* Table #64 of fxr_top - LOCA_PMON_INFO
* This INFO register records the maximum latency values measured from sampled 
* IDI transactions
*/
#define FXR_LOCA_PMON_INFO					(FXR_LOCA_CSRS + 0x0000000003B8)
#define FXR_LOCA_PMON_INFO_RESETCSR				0x0000000000000000ull
#define FXR_LOCA_PMON_INFO_RESERVED_63_60_SHIFT			60
#define FXR_LOCA_PMON_INFO_RESERVED_63_60_MASK			0xFull
#define FXR_LOCA_PMON_INFO_RESERVED_63_60_SMASK			0xF000000000000000ull
#define FXR_LOCA_PMON_INFO_MAX_MEMPUSHWR_LATENCY_SHIFT		40
#define FXR_LOCA_PMON_INFO_MAX_MEMPUSHWR_LATENCY_MASK		0xFFFFFull
#define FXR_LOCA_PMON_INFO_MAX_MEMPUSHWR_LATENCY_SMASK		0xFFFFF0000000000ull
#define FXR_LOCA_PMON_INFO_MAX_WBMTOI_LATENCY_SHIFT		20
#define FXR_LOCA_PMON_INFO_MAX_WBMTOI_LATENCY_MASK		0xFFFFFull
#define FXR_LOCA_PMON_INFO_MAX_WBMTOI_LATENCY_SMASK		0xFFFFF00000ull
#define FXR_LOCA_PMON_INFO_MAX_WBSTOI_LATENCY_SHIFT		0
#define FXR_LOCA_PMON_INFO_MAX_WBSTOI_LATENCY_MASK		0xFFFFFull
#define FXR_LOCA_PMON_INFO_MAX_WBSTOI_LATENCY_SMASK		0xFFFFFull
/*
* Table #65 of fxr_top - LOCA_PMON_INFO1
* This INFO register records the maximum latency values measured from sampled 
* IDI transactions
*/
#define FXR_LOCA_PMON_INFO1					(FXR_LOCA_CSRS + 0x0000000003C0)
#define FXR_LOCA_PMON_INFO1_RESETCSR				0x0000000000000000ull
#define FXR_LOCA_PMON_INFO1_RESERVED_63_60_SHIFT		60
#define FXR_LOCA_PMON_INFO1_RESERVED_63_60_MASK			0xFull
#define FXR_LOCA_PMON_INFO1_RESERVED_63_60_SMASK		0xF000000000000000ull
#define FXR_LOCA_PMON_INFO1_MAX_RFO_LATENCY_SHIFT		40
#define FXR_LOCA_PMON_INFO1_MAX_RFO_LATENCY_MASK		0xFFFFFull
#define FXR_LOCA_PMON_INFO1_MAX_RFO_LATENCY_SMASK		0xFFFFF0000000000ull
#define FXR_LOCA_PMON_INFO1_MAX_DRD_LATENCY_SHIFT		20
#define FXR_LOCA_PMON_INFO1_MAX_DRD_LATENCY_MASK		0xFFFFFull
#define FXR_LOCA_PMON_INFO1_MAX_DRD_LATENCY_SMASK		0xFFFFF00000ull
#define FXR_LOCA_PMON_INFO1_MAX_RDCURR_LATENCY_SHIFT		0
#define FXR_LOCA_PMON_INFO1_MAX_RDCURR_LATENCY_MASK		0xFFFFFull
#define FXR_LOCA_PMON_INFO1_MAX_RDCURR_LATENCY_SMASK		0xFFFFFull
/*
* Table #66 of fxr_top - LOCA_PMON_INFO2
* This INFO register records the maximum latency values measured from sampled 
* IDI transactions
*/
#define FXR_LOCA_PMON_INFO2					(FXR_LOCA_CSRS + 0x0000000003C8)
#define FXR_LOCA_PMON_INFO2_RESETCSR				0x0000000000000000ull
#define FXR_LOCA_PMON_INFO2_RESERVED_63_40_SHIFT		40
#define FXR_LOCA_PMON_INFO2_RESERVED_63_40_MASK			0xFFFFFFull
#define FXR_LOCA_PMON_INFO2_RESERVED_63_40_SMASK		0xFFFFFF0000000000ull
#define FXR_LOCA_PMON_INFO2_MAX_ITOM_LATENCY_SHIFT		20
#define FXR_LOCA_PMON_INFO2_MAX_ITOM_LATENCY_MASK		0xFFFFFull
#define FXR_LOCA_PMON_INFO2_MAX_ITOM_LATENCY_SMASK		0xFFFFF00000ull
#define FXR_LOCA_PMON_INFO2_MAX_SPECITOM_LATENCY_SHIFT		0
#define FXR_LOCA_PMON_INFO2_MAX_SPECITOM_LATENCY_MASK		0xFFFFFull
#define FXR_LOCA_PMON_INFO2_MAX_SPECITOM_LATENCY_SMASK		0xFFFFFull
/*
* Table #67 of fxr_top - LOCA_PMON_CNTR
* Performance Monitor Counters are configured with the #%%#LOCA_PMON_CFG#%%# 
* CSR. The mapping of counting events to counter index is provided in #%%#Table 
* 29-35#%%# below. Note for rate calculations, clock cycle counts are based on a 
* 1.5Ghz clock. 
*/
#define FXR_LOCA_PMON_CNTR					(FXR_LOCA_CSRS + 0x000000000400)
#define FXR_LOCA_PMON_CNTR_RESETCSR				0x0000000000000000ull
#define FXR_LOCA_PMON_CNTR_RESERVED_63_49_SHIFT			49
#define FXR_LOCA_PMON_CNTR_RESERVED_63_49_MASK			0x7FFFull
#define FXR_LOCA_PMON_CNTR_RESERVED_63_49_SMASK			0xFFFE000000000000ull
#define FXR_LOCA_PMON_CNTR_OVERFLOW_SHIFT			48
#define FXR_LOCA_PMON_CNTR_OVERFLOW_MASK			0x1ull
#define FXR_LOCA_PMON_CNTR_OVERFLOW_SMASK			0x1000000000000ull
#define FXR_LOCA_PMON_CNTR_COUNT_SHIFT				0
#define FXR_LOCA_PMON_CNTR_COUNT_MASK				0xFFFFFFFFFFFFull
#define FXR_LOCA_PMON_CNTR_COUNT_SMASK				0xFFFFFFFFFFFFull
/*
* Table #69 of fxr_top - LOCA_DBG_PCAM_ADDR
* Register access to the 256 entry Pending CAM (PCAM) Address content. Each 
* entry provides entry valid bit and the physical cache line address ([51:6]) 
* associated with that entry. 
*/
#define FXR_LOCA_DBG_PCAM_ADDR					(FXR_LOCA_CSRS + 0x000000000800)
#define FXR_LOCA_DBG_PCAM_ADDR_RESETCSR				0x0000000000000000ull
#define FXR_LOCA_DBG_PCAM_ADDR_RESERVED_63_52_SHIFT		52
#define FXR_LOCA_DBG_PCAM_ADDR_RESERVED_63_52_MASK		0xFFFull
#define FXR_LOCA_DBG_PCAM_ADDR_RESERVED_63_52_SMASK		0xFFF0000000000000ull
#define FXR_LOCA_DBG_PCAM_ADDR_ADDR_SHIFT			6
#define FXR_LOCA_DBG_PCAM_ADDR_ADDR_MASK			0x3FFFFFFFFFFFull
#define FXR_LOCA_DBG_PCAM_ADDR_ADDR_SMASK			0xFFFFFFFFFFFC0ull
#define FXR_LOCA_DBG_PCAM_ADDR_RESERVED_5_1_SHIFT		1
#define FXR_LOCA_DBG_PCAM_ADDR_RESERVED_5_1_MASK		0x1Full
#define FXR_LOCA_DBG_PCAM_ADDR_RESERVED_5_1_SMASK		0x3Eull
#define FXR_LOCA_DBG_PCAM_ADDR_EVALID_SHIFT			0
#define FXR_LOCA_DBG_PCAM_ADDR_EVALID_MASK			0x1ull
#define FXR_LOCA_DBG_PCAM_ADDR_EVALID_SMASK			0x1ull
/*
* Table #70 of fxr_top - LOCA_DBG_PCAM_DATA
* Register access to the 256 entry Pending CAM (PCAM) Data content. Each entry 
* provides state, flags and request information about the pending request. Note: 
* writes to #%%#LOCA_DBG_PCAM_DATA#%%# will not mark the PCAM entry valid. See 
* #%%#LOCA_DBG_PCAM_ADDR#%%# CSR to validate a PCAM entry and set the entry CAM 
* address.  
*/
#define FXR_LOCA_DBG_PCAM_DATA					(FXR_LOCA_CSRS + 0x000000001000)
#define FXR_LOCA_DBG_PCAM_DATA_RESETCSR				0x0000000000000000ull
#define FXR_LOCA_DBG_PCAM_DATA_RESERVED_63_40_SHIFT		40
#define FXR_LOCA_DBG_PCAM_DATA_RESERVED_63_40_MASK		0xFFFFFFull
#define FXR_LOCA_DBG_PCAM_DATA_RESERVED_63_40_SMASK		0xFFFFFF0000000000ull
#define FXR_LOCA_DBG_PCAM_DATA_SNPFWD_SHIFT			39
#define FXR_LOCA_DBG_PCAM_DATA_SNPFWD_MASK			0x1ull
#define FXR_LOCA_DBG_PCAM_DATA_SNPFWD_SMASK			0x8000000000ull
#define FXR_LOCA_DBG_PCAM_DATA_PROQID_SHIFT			30
#define FXR_LOCA_DBG_PCAM_DATA_PROQID_MASK			0x1FFull
#define FXR_LOCA_DBG_PCAM_DATA_PROQID_SMASK			0x7FC0000000ull
#define FXR_LOCA_DBG_PCAM_DATA_PROQEFILL_SHIFT			29
#define FXR_LOCA_DBG_PCAM_DATA_PROQEFILL_MASK			0x1ull
#define FXR_LOCA_DBG_PCAM_DATA_PROQEFILL_SMASK			0x20000000ull
#define FXR_LOCA_DBG_PCAM_DATA_PROQSRPLY_SHIFT			28
#define FXR_LOCA_DBG_PCAM_DATA_PROQSRPLY_MASK			0x1ull
#define FXR_LOCA_DBG_PCAM_DATA_PROQSRPLY_SMASK			0x10000000ull
#define FXR_LOCA_DBG_PCAM_DATA_CONQTP_SHIFT			20
#define FXR_LOCA_DBG_PCAM_DATA_CONQTP_MASK			0xFFull
#define FXR_LOCA_DBG_PCAM_DATA_CONQTP_SMASK			0xFF00000ull
#define FXR_LOCA_DBG_PCAM_DATA_CONQHP_SHIFT			12
#define FXR_LOCA_DBG_PCAM_DATA_CONQHP_MASK			0xFFull
#define FXR_LOCA_DBG_PCAM_DATA_CONQHP_SMASK			0xFF000ull
#define FXR_LOCA_DBG_PCAM_DATA_CONQVAL_SHIFT			11
#define FXR_LOCA_DBG_PCAM_DATA_CONQVAL_MASK			0x1ull
#define FXR_LOCA_DBG_PCAM_DATA_CONQVAL_SMASK			0x800ull
#define FXR_LOCA_DBG_PCAM_DATA_WAY_SHIFT			7
#define FXR_LOCA_DBG_PCAM_DATA_WAY_MASK				0xFull
#define FXR_LOCA_DBG_PCAM_DATA_WAY_SMASK			0x780ull
#define FXR_LOCA_DBG_PCAM_DATA_CHINT1_SHIFT			6
#define FXR_LOCA_DBG_PCAM_DATA_CHINT1_MASK			0x1ull
#define FXR_LOCA_DBG_PCAM_DATA_CHINT1_SMASK			0x40ull
#define FXR_LOCA_DBG_PCAM_DATA_RPLFLG_SHIFT			5
#define FXR_LOCA_DBG_PCAM_DATA_RPLFLG_MASK			0x1ull
#define FXR_LOCA_DBG_PCAM_DATA_RPLFLG_SMASK			0x20ull
#define FXR_LOCA_DBG_PCAM_DATA_PREFETCH_SHIFT			4
#define FXR_LOCA_DBG_PCAM_DATA_PREFETCH_MASK			0x1ull
#define FXR_LOCA_DBG_PCAM_DATA_PREFETCH_SMASK			0x10ull
#define FXR_LOCA_DBG_PCAM_DATA_STATE_SHIFT			0
#define FXR_LOCA_DBG_PCAM_DATA_STATE_MASK			0xFull
#define FXR_LOCA_DBG_PCAM_DATA_STATE_SMASK			0xFull
/*
* Table #71 of fxr_top - LOCA_DBG_MRU
* Register access to the 512 entry Data Cache Directory MRU Table. Each entry 
* provides 16-bits of Pending, Valid and MRU state. One bit for each way (bank) 
* in the indexed set. The entry also describes which bank will be victimized by 
* the next new cache line for that set. 
*/
#define FXR_LOCA_DBG_MRU					(FXR_LOCA_CSRS + 0x000000002000)
#define FXR_LOCA_DBG_MRU_RESETCSR				0x0001000000000000ull
#define FXR_LOCA_DBG_MRU_VICTIM_SHIFT				48
#define FXR_LOCA_DBG_MRU_VICTIM_MASK				0xFFFFull
#define FXR_LOCA_DBG_MRU_VICTIM_SMASK				0xFFFF000000000000ull
#define FXR_LOCA_DBG_MRU_MRU_SHIFT				32
#define FXR_LOCA_DBG_MRU_MRU_MASK				0xFFFFull
#define FXR_LOCA_DBG_MRU_MRU_SMASK				0xFFFF00000000ull
#define FXR_LOCA_DBG_MRU_VALID_SHIFT				16
#define FXR_LOCA_DBG_MRU_VALID_MASK				0xFFFFull
#define FXR_LOCA_DBG_MRU_VALID_SMASK				0xFFFF0000ull
#define FXR_LOCA_DBG_MRU_PENDING_SHIFT				0
#define FXR_LOCA_DBG_MRU_PENDING_MASK				0xFFFFull
#define FXR_LOCA_DBG_MRU_PENDING_SMASK				0xFFFFull
/*
* Table #72 of fxr_top - LOCA_DBG_PROQ_FID_STATE
* Register access to the state of the 33 Flow IDs queues implemented in PROQ. 
* FlowID[32] is the Global ID queue. Entry contents are defined 
* below
*/
#define FXR_LOCA_DBG_PROQ_FID_STATE				(FXR_LOCA_CSRS + 0x000000003000)
#define FXR_LOCA_DBG_PROQ_FID_STATE_RESETCSR			0x0000000000000000ull
#define FXR_LOCA_DBG_PROQ_FID_STATE_RESERVED_63_41_SHIFT	41
#define FXR_LOCA_DBG_PROQ_FID_STATE_RESERVED_63_41_MASK		0x7FFFFFull
#define FXR_LOCA_DBG_PROQ_FID_STATE_RESERVED_63_41_SMASK	0xFFFFFE0000000000ull
#define FXR_LOCA_DBG_PROQ_FID_STATE_HEADPTR_SHIFT		32
#define FXR_LOCA_DBG_PROQ_FID_STATE_HEADPTR_MASK		0x1FFull
#define FXR_LOCA_DBG_PROQ_FID_STATE_HEADPTR_SMASK		0x1FF00000000ull
#define FXR_LOCA_DBG_PROQ_FID_STATE_RESERVED_31_17_SHIFT	17
#define FXR_LOCA_DBG_PROQ_FID_STATE_RESERVED_31_17_MASK		0x7FFFull
#define FXR_LOCA_DBG_PROQ_FID_STATE_RESERVED_31_17_SMASK	0xFFFE0000ull
#define FXR_LOCA_DBG_PROQ_FID_STATE_TAILPTR_SHIFT		8
#define FXR_LOCA_DBG_PROQ_FID_STATE_TAILPTR_MASK		0x1FFull
#define FXR_LOCA_DBG_PROQ_FID_STATE_TAILPTR_SMASK		0x1FF00ull
#define FXR_LOCA_DBG_PROQ_FID_STATE_RESERVED_7_4_SHIFT		4
#define FXR_LOCA_DBG_PROQ_FID_STATE_RESERVED_7_4_MASK		0xFull
#define FXR_LOCA_DBG_PROQ_FID_STATE_RESERVED_7_4_SMASK		0xF0ull
#define FXR_LOCA_DBG_PROQ_FID_STATE_EMPTY_SHIFT			3
#define FXR_LOCA_DBG_PROQ_FID_STATE_EMPTY_MASK			0x1ull
#define FXR_LOCA_DBG_PROQ_FID_STATE_EMPTY_SMASK			0x8ull
#define FXR_LOCA_DBG_PROQ_FID_STATE_CONQSENT_SHIFT		2
#define FXR_LOCA_DBG_PROQ_FID_STATE_CONQSENT_MASK		0x1ull
#define FXR_LOCA_DBG_PROQ_FID_STATE_CONQSENT_SMASK		0x4ull
#define FXR_LOCA_DBG_PROQ_FID_STATE_CMPL_RCV_SHIFT		1
#define FXR_LOCA_DBG_PROQ_FID_STATE_CMPL_RCV_MASK		0x1ull
#define FXR_LOCA_DBG_PROQ_FID_STATE_CMPL_RCV_SMASK		0x2ull
#define FXR_LOCA_DBG_PROQ_FID_STATE_HLD_SHIFT			0
#define FXR_LOCA_DBG_PROQ_FID_STATE_HLD_MASK			0x1ull
#define FXR_LOCA_DBG_PROQ_FID_STATE_HLD_SMASK			0x1ull
/*
* Table #73 of fxr_top - LOCA_DBG_PROQ_CMPLT
* Register access to the 512 complete state bits in the PROQ. The 8 registers 
* (64 bits each) in total provide all 512 completion bits in the PROQ, one bit 
* for each PROQ entry. Register N provides completion bits for PROQ entries 
* [64N+63:64N] 
*/
#define FXR_LOCA_DBG_PROQ_CMPLT					(FXR_LOCA_CSRS + 0x000000003200)
#define FXR_LOCA_DBG_PROQ_CMPLT_RESETCSR			0x0000000000000000ull
#define FXR_LOCA_DBG_PROQ_CMPLT_COMPLETE_SHIFT			0
#define FXR_LOCA_DBG_PROQ_CMPLT_COMPLETE_MASK			0xFFFFFFFFFFFFFFFFull
#define FXR_LOCA_DBG_PROQ_CMPLT_COMPLETE_SMASK			0xFFFFFFFFFFFFFFFFull
/*
* Table #74 of fxr_top - LOCA_DBG_PROQ_GLOBAL
* Register access to the 512 Global ID state bits in the PROQ. The 8 registers 
* (64 bits each) in total provide all 512 global bits in the PROQ, one bit for 
* each PROQ entry. Register N provides global bits for PROQ entries [64N+63:64N] 
* 
*/
#define FXR_LOCA_DBG_PROQ_GLOBAL				(FXR_LOCA_CSRS + 0x000000003240)
#define FXR_LOCA_DBG_PROQ_GLOBAL_RESETCSR			0x0000000000000000ull
#define FXR_LOCA_DBG_PROQ_GLOBAL_GLOBAL_ID_SHIFT		0
#define FXR_LOCA_DBG_PROQ_GLOBAL_GLOBAL_ID_MASK			0xFFFFFFFFFFFFFFFFull
#define FXR_LOCA_DBG_PROQ_GLOBAL_GLOBAL_ID_SMASK		0xFFFFFFFFFFFFFFFFull
/*
* Table #75 of fxr_top - LOCA_DBG_PROQ_CONQVAL
* Register access to the 512 ConQ valid state bits in the PROQ. The 8 registers 
* (64 bits each) in total provide all 512 ConQ bits in the PROQ, one bit for 
* each PROQ entry. Register N provides ConQ bits for PROQ entries [64N+63:64N] 
* 
*/
#define FXR_LOCA_DBG_PROQ_CONQVAL				(FXR_LOCA_CSRS + 0x000000003280)
#define FXR_LOCA_DBG_PROQ_CONQVAL_RESETCSR			0x0000000000000000ull
#define FXR_LOCA_DBG_PROQ_CONQVAL_CONQVAL_SHIFT			0
#define FXR_LOCA_DBG_PROQ_CONQVAL_CONQVAL_MASK			0xFFFFFFFFFFFFFFFFull
#define FXR_LOCA_DBG_PROQ_CONQVAL_CONQVAL_SMASK			0xFFFFFFFFFFFFFFFFull
/*
* Table #76 of fxr_top - LOCA_DBG_IMI_ORB0
* Register access to the 256 IMI ORB entries. One CSR per entry. ORB State0 bits 
* are presented here. ORB State1 bits are described in #%%#Section 29.18.4.73, 
* 'IMI ORB State1 Debug'
*/
#define FXR_LOCA_DBG_IMI_ORB0					(FXR_LOCA_CSRS + 0x000000004000)
#define FXR_LOCA_DBG_IMI_ORB0_RESETCSR				0x0000000000000000ull
#define FXR_LOCA_DBG_IMI_ORB0_ORB0_SHIFT			0
#define FXR_LOCA_DBG_IMI_ORB0_ORB0_MASK				0xFFFFFFFFFFFFFFFFull
#define FXR_LOCA_DBG_IMI_ORB0_ORB0_SMASK			0xFFFFFFFFFFFFFFFFull
/*
* Table #77 of fxr_top - LOCA_DBG_IMI_ORB1
* Register access to the 256 IMI ORB entries. One CSR per entry. ORB State0 bits 
* are presented here. ORB State0 bits are described in #%%#Section 29.18.4.72, 
* 'IMI ORB State0 Debug' 
*/
#define FXR_LOCA_DBG_IMI_ORB1					(FXR_LOCA_CSRS + 0x000000004008)
#define FXR_LOCA_DBG_IMI_ORB1_RESETCSR				0x0000000000000000ull
#define FXR_LOCA_DBG_IMI_ORB1_ORB1_SHIFT			0
#define FXR_LOCA_DBG_IMI_ORB1_ORB1_MASK				0xFFFFFFFFFFFFFFFFull
#define FXR_LOCA_DBG_IMI_ORB1_ORB1_SMASK			0xFFFFFFFFFFFFFFFFull
/*
* Table #78 of fxr_top - LOCA_DBG_IMI_ORBVAL
* Register access to the 256 IMI ORB Vaild bits. Total of 4 CSRs with 64 Valid 
* bits per CSR entry. Register N provides Valid bits for ORB entries 
* [64N+63:64N]. 
*/
#define FXR_LOCA_DBG_IMI_ORBVAL					(FXR_LOCA_CSRS + 0x000000005000)
#define FXR_LOCA_DBG_IMI_ORBVAL_RESETCSR			0x0000000000000000ull
#define FXR_LOCA_DBG_IMI_ORBVAL_VALID_SHIFT			0
#define FXR_LOCA_DBG_IMI_ORBVAL_VALID_MASK			0xFFFFFFFFFFFFFFFFull
#define FXR_LOCA_DBG_IMI_ORBVAL_VALID_SMASK			0xFFFFFFFFFFFFFFFFull
/*
* Table #79 of fxr_top - LOCA_DBG_IMI_ORBHOLD
* Register access to the 256 IMI ORB Hold bits. Total of 4 CSRs with 64 Hold 
* bits per CSR entry. Register N provides Hold bits for ORB entries 
* [64N+63:64N]. 
*/
#define FXR_LOCA_DBG_IMI_ORBHOLD				(FXR_LOCA_CSRS + 0x000000005020)
#define FXR_LOCA_DBG_IMI_ORBHOLD_RESETCSR			0x0000000000000000ull
#define FXR_LOCA_DBG_IMI_ORBHOLD_HOLD_SHIFT			0
#define FXR_LOCA_DBG_IMI_ORBHOLD_HOLD_MASK			0xFFFFFFFFFFFFFFFFull
#define FXR_LOCA_DBG_IMI_ORBHOLD_HOLD_SMASK			0xFFFFFFFFFFFFFFFFull
/*
* Table #80 of fxr_top - LOCA_DBG_IMI_USB_GOVAL
* Register access to the U2C Response GO Valid state of the 256 pending IMI 
* requests. Total of 4 CSRs with 64 GO Valid bits per CSR entry. Register N 
* provides GO Valid bits for pending requests [64N+63:64N]. 
*/
#define FXR_LOCA_DBG_IMI_USB_GOVAL				(FXR_LOCA_CSRS + 0x000000005040)
#define FXR_LOCA_DBG_IMI_USB_GOVAL_RESETCSR			0x0000000000000000ull
#define FXR_LOCA_DBG_IMI_USB_GOVAL_GOVALID_SHIFT		0
#define FXR_LOCA_DBG_IMI_USB_GOVAL_GOVALID_MASK			0xFFFFFFFFFFFFFFFFull
#define FXR_LOCA_DBG_IMI_USB_GOVAL_GOVALID_SMASK		0xFFFFFFFFFFFFFFFFull
/*
* Table #81 of fxr_top - LOCA_DBG_IMI_DPBVAL
* Register access to the DPB Entry Valid bits. Total of 4 CSRs with 64 Entry 
* Valid bits per CSR entry. Register N provides Valid bits for DPB entries 
* [64N+63:64N]. 
*/
#define FXR_LOCA_DBG_IMI_DPBVAL					(FXR_LOCA_CSRS + 0x000000005060)
#define FXR_LOCA_DBG_IMI_DPBVAL_RESETCSR			0x0000000000000000ull
#define FXR_LOCA_DBG_IMI_DPBVAL_VALID_SHIFT			0
#define FXR_LOCA_DBG_IMI_DPBVAL_VALID_MASK			0xFFFFFFFFFFFFFFFFull
#define FXR_LOCA_DBG_IMI_DPBVAL_VALID_SMASK			0xFFFFFFFFFFFFFFFFull
/*
* Table #82 of fxr_top - LOCA_DBG_IMI_DRBVAL0
* Register access to the DRB0 Entry Valid bits. Total of 4 CSRs with 64 Entry 
* Valid bits per CSR entry. Register N provides Valid bits for DRB0 entries 
* [64N+63:64N]. 
*/
#define FXR_LOCA_DBG_IMI_DRBVAL0				(FXR_LOCA_CSRS + 0x000000005080)
#define FXR_LOCA_DBG_IMI_DRBVAL0_RESETCSR			0x0000000000000000ull
#define FXR_LOCA_DBG_IMI_DRBVAL0_VALID_SHIFT			0
#define FXR_LOCA_DBG_IMI_DRBVAL0_VALID_MASK			0xFFFFFFFFFFFFFFFFull
#define FXR_LOCA_DBG_IMI_DRBVAL0_VALID_SMASK			0xFFFFFFFFFFFFFFFFull
/*
* Table #83 of fxr_top - LOCA_DBG_IMI_DRBVAL1
* Register access to the DRB1 Entry Valid bits. Total of 4 CSRs with 64 Entry 
* Valid bits per CSR entry. Register N provides Valid bits for DRB1 entries 
* [64N+63:64N]. 
*/
#define FXR_LOCA_DBG_IMI_DRBVAL1				(FXR_LOCA_CSRS + 0x000000005088)
#define FXR_LOCA_DBG_IMI_DRBVAL1_RESETCSR			0x0000000000000000ull
#define FXR_LOCA_DBG_IMI_DRBVAL1_VALID_SHIFT			0
#define FXR_LOCA_DBG_IMI_DRBVAL1_VALID_MASK			0xFFFFFFFFFFFFFFFFull
#define FXR_LOCA_DBG_IMI_DRBVAL1_VALID_SMASK			0xFFFFFFFFFFFFFFFFull
/*
* Table #84 of fxr_top - LOCA_DBG_CONQ_TAILVAL
* Register access to the Tail Valid state of the 256 ConQ entries. Each CSR 
* provides 64 Tail Valid bits. Register N provides Tail Valid bits for ConQ 
* entries [64N+63:64N] 
*/
#define FXR_LOCA_DBG_CONQ_TAILVAL				(FXR_LOCA_CSRS + 0x000000006000)
#define FXR_LOCA_DBG_CONQ_TAILVAL_RESETCSR			0x0000000000000000ull
#define FXR_LOCA_DBG_CONQ_TAILVAL_TAIL_VALID_SHIFT		0
#define FXR_LOCA_DBG_CONQ_TAILVAL_TAIL_VALID_MASK		0xFFFFFFFFFFFFFFFFull
#define FXR_LOCA_DBG_CONQ_TAILVAL_TAIL_VALID_SMASK		0xFFFFFFFFFFFFFFFFull
/*
* Table #85 of fxr_top - LOCA_DBG_CONQ_PSRRPLY
* Register access to the PSR Replay state of the 256 ConQ entries. Each CSR 
* provides 64 PSR Replay bits. Register N provides PSR Replay bits for ConQ 
* entries [64N+63:64N] 
*/
#define FXR_LOCA_DBG_CONQ_PSRRPLY				(FXR_LOCA_CSRS + 0x000000006020)
#define FXR_LOCA_DBG_CONQ_PSRRPLY_RESETCSR			0x0000000000000000ull
#define FXR_LOCA_DBG_CONQ_PSRRPLY_PSR_REPLAY_SHIFT		0
#define FXR_LOCA_DBG_CONQ_PSRRPLY_PSR_REPLAY_MASK		0xFFFFFFFFFFFFFFFFull
#define FXR_LOCA_DBG_CONQ_PSRRPLY_PSR_REPLAY_SMASK		0xFFFFFFFFFFFFFFFFull
/*
* Table #86 of fxr_top - LOCA_DBG_CONQ_HEADER0
* Register access to the 256 ConQ Request Header0. One CSR per entry. Header0 
* bits are presented here. Header1 bits are described in #%%#Section 29.18.4.83, 
* 'ConQ Header1 Debug'
*/
#define FXR_LOCA_DBG_CONQ_HEADER0				(FXR_LOCA_CSRS + 0x000000007000)
#define FXR_LOCA_DBG_CONQ_HEADER0_RESETCSR			0x0000000000000000ull
#define FXR_LOCA_DBG_CONQ_HEADER0_HEADER0_SHIFT			0
#define FXR_LOCA_DBG_CONQ_HEADER0_HEADER0_MASK			0xFFFFFFFFFFFFFFFFull
#define FXR_LOCA_DBG_CONQ_HEADER0_HEADER0_SMASK			0xFFFFFFFFFFFFFFFFull
/*
* Table #87 of fxr_top - LOCA_DBG_CONQ_HEADER1
* Register access to the 256 ConQ Request Header1. One CSR per entry. Header1 
* bits are presented here. Header0 bits are described in #%%#Section 29.18.4.82, 
* 'ConQ Header0 Debug' 
*/
#define FXR_LOCA_DBG_CONQ_HEADER1				(FXR_LOCA_CSRS + 0x000000007008)
#define FXR_LOCA_DBG_CONQ_HEADER1_RESETCSR			0x0000000000000000ull
#define FXR_LOCA_DBG_CONQ_HEADER1_HEADER1_SHIFT			0
#define FXR_LOCA_DBG_CONQ_HEADER1_HEADER1_MASK			0xFFFFFFFFFFFFFFFFull
#define FXR_LOCA_DBG_CONQ_HEADER1_HEADER1_SMASK			0xFFFFFFFFFFFFFFFFull
/*
* Table #88 of fxr_top - LOCA_DBG_CONQ_LINKS
* Register access to the 256 ConQ Request Links state. One CSR per 
* entry.
*/
#define FXR_LOCA_DBG_CONQ_LINKS					(FXR_LOCA_CSRS + 0x000000008000)
#define FXR_LOCA_DBG_CONQ_LINKS_RESETCSR			0x0000000000000000ull
#define FXR_LOCA_DBG_CONQ_LINKS_LINKS_SHIFT			0
#define FXR_LOCA_DBG_CONQ_LINKS_LINKS_MASK			0xFFFFFFFFFFFFFFFFull
#define FXR_LOCA_DBG_CONQ_LINKS_LINKS_SMASK			0xFFFFFFFFFFFFFFFFull
/*
* Table #89 of fxr_top - LOCA_DBG_DCD
* Register access to the 8K entry Data Cache Directory. Each entry provides the 
* 37 bit address 'tag' for the indexed entry and the 4 bit MESIF state for the 
* entry. The 8K entries are addressed as follows:
*/
#define FXR_LOCA_DBG_DCD					(FXR_LOCA_CSRS + 0x000000010000)
#define FXR_LOCA_DBG_DCD_RESETCSR				0x4000000000000000ull
#define FXR_LOCA_DBG_DCD_MESIF_SHIFT				60
#define FXR_LOCA_DBG_DCD_MESIF_MASK				0xFull
#define FXR_LOCA_DBG_DCD_MESIF_SMASK				0xF000000000000000ull
#define FXR_LOCA_DBG_DCD_RESERVED_59_52_SHIFT			52
#define FXR_LOCA_DBG_DCD_RESERVED_59_52_MASK			0xFFull
#define FXR_LOCA_DBG_DCD_RESERVED_59_52_SMASK			0xFF0000000000000ull
#define FXR_LOCA_DBG_DCD_TAG_SHIFT				15
#define FXR_LOCA_DBG_DCD_TAG_MASK				0x1FFFFFFFFFull
#define FXR_LOCA_DBG_DCD_TAG_SMASK				0xFFFFFFFFF8000ull
#define FXR_LOCA_DBG_DCD_INDX_SHIFT				6
#define FXR_LOCA_DBG_DCD_INDX_MASK				0x1FFull
#define FXR_LOCA_DBG_DCD_INDX_SMASK				0x7FC0ull
#define FXR_LOCA_DBG_DCD_RESERVED_5_4_SHIFT			4
#define FXR_LOCA_DBG_DCD_RESERVED_5_4_MASK			0x3ull
#define FXR_LOCA_DBG_DCD_RESERVED_5_4_SMASK			0x30ull
#define FXR_LOCA_DBG_DCD_WAY_SHIFT				0
#define FXR_LOCA_DBG_DCD_WAY_MASK				0xFull
#define FXR_LOCA_DBG_DCD_WAY_SMASK				0xFull
/*
* Table #90 of fxr_top - LOCA_DBG_DCACHE
* Register access to the 512MB Data Cache. Each entry provides 8B of raw DCache 
* access for a total of 64K entries. Entries are addressed as follows:
*/
#define FXR_LOCA_DBG_DCACHE					(FXR_LOCA_CSRS + 0x000000100000)
#define FXR_LOCA_DBG_DCACHE_RESETCSR				0x0000000000000000ull
#define FXR_LOCA_DBG_DCACHE_DATA_SHIFT				0
#define FXR_LOCA_DBG_DCACHE_DATA_MASK				0xFFFFFFFFFFFFFFFFull
#define FXR_LOCA_DBG_DCACHE_DATA_SMASK				0xFFFFFFFFFFFFFFFFull

/*
*  Enumerations from tables
*/
/* Enumeration from Table titled: LOCA Performance counter names (Enum - loca_perf_counter_t) - 7 bits
*                        In File: fxr_top
*/
#if defined(__STDC__)

enum loca_perf_counter {
                  pm_wrifill_sbe = 127,         /* WriteFill Buffer SBE. */
                   pm_dcache_sbe = 126,         /* DataCache SBE. */
                pm_adm_sl_db_sbe = 125,         /* ADM ShortLoop Delay Buffer SBE. */
                pm_adm_re_db_sbe = 124,         /* ADM RE Delay Buffer SBE. */
               pm_adm_paf_db_sbe = 123,         /* ADM PAF Delay Buffer SBE. */
               pm_adm_hdr_db_sbe = 122,         /* ADM Header Delay Buffer SBE. . */
               pm_adm_cas_db_sbe = 121,         /* ADM Compare & Swap Delay Buffer SBE. */
                     pm_pcam_sbe = 120,         /* PCAM data SBE. */
                pm_mru_table_sbe = 119,         /* MRU Table SBE. */
              pm_imi_orb_sch_sbe = 118,         /* IDI Master ORB SCH SBE. */
              pm_imi_orb_rsp_sbe = 117,         /* IDI Master ORB RSP SBE. */
              pm_imi_orb_cnf_sbe = 116,         /* IDI Master ORB CNF SBE. */
                 pm_c2u_data_sbe = 115,         /* C2U DPB Data SBE. */
                   pm_c2u_wp_sbe = 114,         /* C2U DPB WritePull header SBE. */
                  pm_c2u_snp_sbe = 113,         /* C2U DPB Snoop header SBE. */
                  pm_c2u_nqb_sbe = 112,         /* C2U New Request (NQB) SBE. */
                  pm_c2u_eqb_sbe = 111,         /* C2U Eviction Request (EQB) SBE. */
                   pm_u2c_wp_sbe = 110,         /* U2C WritePull (USB) SBE. */
                  pm_u2c_dir_sbe = 109,         /* U2C L1DIR (detected in IMI) SBE. */
                  pm_u2c_poi_sbe = 108,         /* U2C Poison and ECC valid bit queue SBE. */
                 pm_u2c_data_sbe = 107,         /* U2C Data SBE. */
                   pm_iti_wp_sbe = 106,         /* IDI Target WP (UQB) SBE. */
                 pm_conq_hdr_sbe = 105,         /* ConQ header SBE. */
                  pm_proq_hl_sbe = 104,         /* PROQ hold queue SBE. */
                  pm_proq_gf_sbe = 103,         /* PROQ global or Flow tail pointer queue SBE. */
                pm_hifis_hdr_sbe = 102,         /* HIFIS Header SBE. */
                pm_conq_tail_sbe = 101,         /* ConQ Tail pointer SBE. */
                 pm_dcd_bank_sbe = 100,         /* Data Cache Directory Bank SBE. */
                  pm_dcache_read = 99,          /* DCache reads. */
                 pm_dcache_write = 98,          /* DCache writes. */
                 pm_idi_u2c_data = 97,          /* IDI U2C Data Flit. */
                  pm_idi_u2c_rsp = 96,          /* IDI U2C Response Flit. */
                  pm_idi_u2c_req = 95,          /* IDI U2C Request Flit. */
                 pm_idi_c2u_data = 94,          /* IDI C2U Data Flit. */
                  pm_idi_c2u_rsp = 93,          /* IDI C2U Response Flit. */
                  pm_idi_c2u_req = 92,          /* IDI C2U Request Flit. */
           pm_no_c2u_req_credits = 91,          /* Clock cycles with No C2U Request Credits. */
          pm_no_c2u_data_credits = 90,          /* Clock cycles with No C2U Data Credits. */
           pm_no_c2u_rsp_credits = 89,          /* Clock cycles with No C2U Response Credits. */
             pm_snp_prefetch_hit = 88,          /* Snoop request that hits a pre-fetched line in the DCache. */
                 pm_prefetch_req = 87,          /* Pre-fetch to memory for a request with ordering conflict */
                  pm_addr_range3 = 86,          /* Address Range 3 request count. Enabled by upper_addr_range and lower_addr_range. */
                  pm_addr_range2 = 85,          /* Address Range 2 request count. Enabled by upper_addr_range and lower_addr_range. */
                  pm_addr_range1 = 84,          /* Address Range 1 request count. Enabled by upper_addr_range and lower_addr_range. */
                  pm_addr_range0 = 83,          /* Address Range 0 request count. Enabled by upper_addr_range and lower_addr_range. */
                   pm_new_tx_req = 82,          /* New Tx sourced request count. Enabled by tx_cnt_ena. */
                   pm_new_rx_req = 81,          /* New Rx sourced request count. Enabled by rx_cnt_ena. */
                   pm_new_at_req = 80,          /* New AT sourced request count. Enabled by at_cnt_ena. */
                  pm_new_get_req = 79,          /* New GET request count. Enabled by one or more of (tx_cnt_ena, rx_cnt_ena, at_cnt_ena). */
                  pm_new_put_req = 78,          /* New PUT request count. Enabled by one or more of (tx_cnt_ena, rx_cnt_ena, at_cnt_ena). */
                 pm_new_amo1_req = 77,          /* New non-vector Atomic request count. Enabled by one or more of (tx_cnt_ena, rx_cnt_ena, at_cnt_ena). */
                 pm_new_amo2_req = 76,          /* New 2-flit vector Atomic request count. Enabled by one or more of (tx_cnt_ena, rx_cnt_ena, at_cnt_ena). */
                 pm_new_amo3_req = 75,          /* New 3-flit vector Atomic request count. Enabled by one or more of (tx_cnt_ena, rx_cnt_ena, at_cnt_ena). */
                 pm_new_amo4_req = 74,          /* New 4-flit vector Atomic request count. Enabled by one or more of (tx_cnt_ena, rx_cnt_ena, at_cnt_ena). */
                  pm_new_irq_req = 73,          /* New IRQ request count. Enabled by one or more of (tx_cnt_ena, rx_cnt_ena, at_cnt_ena). */
                  pm_new_nop_req = 72,          /* New NOP request count. Enabled by one or more of (tx_cnt_ena, rx_cnt_ena, at_cnt_ena). */
                  pm_new_fid_req = 71,          /* New FID request count. The GID/FID counted is selected by the fid_cnt_id and fid_cnt_msk fields. Enabled by one or more of (tx_cnt_ena, rx_cnt_ena, at_cnt_ena). */
              pm_addr_replay_req = 70,          /* Address enabled Replay request count. */
             pm_order_replay_req = 69,          /* Order enabled Replay request count. */
                     pm_fill_req = 68,          /* Fill request count. */
                      pm_snp_req = 67,          /* Snoop request count. */
                        pm_va_fc = 66,          /* Clock cycle count of Vector Atomic cycles in Pipe. */
                       pm_irq_fc = 65,          /* Clock cycle count of IRQ buffer flow control signaling. */
                       pm_awp_fc = 64,          /* Clock cycle count of All Ways Pending condition in one or more DCache Directory sets. */
                      pm_lock_fc = 63,          /* Clock cycle count of IDI Lock flow control signaling. */
                      pm_proq_fc = 62,          /* Clock cycle count of PROQ flow control signaling due to lack of PROQ entries. */
                      pm_conq_fc = 61,          /* Clock cycle count of ConQ flow control signaling due to lack of ConQ entries. */
                       pm_new_fc = 60,          /* Clock cycle count of New/Replay Request flow control signaling due to lack of TIDs. */
                       pm_snp_fc = 59,          /* Clock cycle count of Snoop Request flow control signaling due to lack of TIDs. */
                       pm_eqb_fc = 58,          /* Clock cycle count of IMI Eviction Request Buffer flow control signaling. */
                       pm_nqb_fc = 57,          /* Clock cycle count of IMI New Request Buffer flow control signaling. */
                     pm_hifis_fc = 56,          /* Clock cycle count of HIFIS flow control signaling. */
              pm_new_timeout_haz = 55,          /* New request timeout cycles stalled by a New hazard. */
                  pm_new_timeout = 54,          /* New request timeout cycles at PARB head. */
           pm_replay_timeout_haz = 53,          /* Replay request timeout cycles stalled by a Replay hazard. */
               pm_replay_timeout = 52,          /* Replay request timeout cycles at PARB head. */
             pm_fill_timeout_haz = 51,          /* Fill request timeout cycles stalled by a Fill hazard. */
                 pm_fill_timeout = 50,          /* Fill request timeout cycles at PARB head. */
                   pm_new_fc_haz = 49,          /* New request cycles stalled by flow control. */
                   pm_new_ic_haz = 48,          /* New request cycles stalled by IMI CAM hazard. */
                   pm_new_pc_haz = 47,          /* New request cycles stalled by Pipe CAM hazard. */
                  pm_new_req_cyc = 46,          /* New request cycles count at PARB head. */
                pm_replay_fc_haz = 45,          /* Replay request cycles stalled by flow control. */
                pm_replay_ic_haz = 44,          /* Replay request cycles stalled by IMI CAM hazard. */
                pm_replay_pc_haz = 43,          /* Replay request cycles stalled by Pipe CAM hazard. */
               pm_replay_req_cyc = 42,          /* Replay request cycles count at PARB head. */
                  pm_fill_fc_haz = 41,          /* Fill request cycles stalled by flow control. */
                  pm_fill_ic_haz = 40,          /* Fill request cycles stalled by IMI CAM hazard. */
                  pm_fill_pc_haz = 39,          /* Fill request cycles stalled by Pipe CAM hazard. */
                 pm_fill_req_cyc = 38,          /* Fill request cycles count at PARB head. */
                   pm_snp_fc_haz = 37,          /* Snoop request cycles stalled by flow control. */
                   pm_snp_ic_haz = 36,          /* Snoop request cycles stalled by IMI CAM hazard. */
                   pm_snp_pc_haz = 35,          /* Snoop request cycles stalled by Pipe CAM hazard. */
                  pm_snp_req_cyc = 34,          /* Snoop request cycles count at PARB head. */
                   pm_wbstoi_req = 33,          /* Sampled WbStoI requests count. */
               pm_wbstoi_latency = 32,          /* Sampled WbStoI requests latency. Divide by pm_wbstoi_req to get average latency (in hclks). */
                   pm_wbmtoi_req = 31,          /* Sampled WbMtoI requests count.. */
               pm_wbmtoi_latency = 30,          /* Sampled WbMtoI requests latency. Divide by pm_wbmtoi_req to get average latency (in hclks). */
                pm_mempushwr_req = 29,          /* Sampled MemPushWr requests count. . */
            pm_mempushwr_latency = 28,          /* Sampled MemPushWr requests latency. Divide by pm_mempushwr_req to get average latency (in hclks). */
                   pm_rdcurr_req = 27,          /* Sampled RdCurr requests count. Enabled by latency_ctl. */
               pm_rdcurr_latency = 26,          /* Sampled RdCurr requests latency. Divide by pm_rdcurr_req to get average latency (in hclks). Enabled by latency_ctl. */
                      pm_drd_req = 25,          /* Sampled DRd_Opt requests count. Enabled by latency_ctl. */
                  pm_drd_latency = 24,          /* Sampled DRd_Opt requests latency. Divide by pm_drd_req to get average latency (in hclks). Enabled by latency_ctl. */
                      pm_rfo_req = 23,          /* Sampled RFO requests count. Enabled by latency_ctl. */
                  pm_rfo_latency = 22,          /* Sampled RFO requests latency. Divide by pm_rfo_req to get average latency (in hclks). Enabled by latency_ctl. */
                 pm_specitom_req = 21,          /* Sampled SpecItoM requests count. */
             pm_specitom_latency = 20,          /* Sampled SpecItoM requests latency. Divide by pm_specitom_req to get average latency (in hclks). */
                     pm_itom_req = 19,          /* Sampled ItoM requests count. */
                 pm_itom_latency = 18,          /* Sampled ItoM requests latency. Divide by pm_itom_req to get average latency (in hclks). */
                  pm_snp_dc_dhit = 17,          /* Snoop Request Hit with Data Forward Count. */
                   pm_snp_dc_hit = 16,          /* Snoop Request Hit Count. */
                   pm_snp_dc_req = 15,          /* Snoop Request Count. */
                   pm_fid_dc_hit = 14,          /* Flow ID based Request Hit Count. Enabled by fid_cnt_id/fid_cnt_msk */
                   pm_fid_dc_req = 13,          /* Flow ID based Request Count. Enabled by fid_cnt_id/fid_cnt_msk */
                pm_atomic_dc_hit = 12,          /* ATOMIC opcode Request Hit Count. Enabled byalloc_opcode_ena */
                pm_atomic_dc_req = 11,          /* ATOMIC opcode Request Count. Enabled by alloc_opcode_ena */
                   pm_put_dc_hit = 10,          /* PUT opcode Dcache Requests Hit Count. Enabled by alloc_opcode_ena */
                   pm_put_dc_req = 9,           /* PUT opcode Request Count. Enabled by alloc_opcode_ena */
                   pm_get_dc_hit = 8,           /* GET opcode Request Hit Count. Enabled by alloc_opcode_ena */
                   pm_get_dc_req = 7,           /* GET opcode Request Count. Enabled by alloc_opcode_ena */
              pm_alloc_dc_devict = 6,           /* Allocating Request w/ Data Eviction Count. */
               pm_alloc_dc_evict = 5,           /* Allocating Request w/ line Eviction Count. */
                 pm_alloc_dc_hit = 4,           /* Allocating Request Hit Count. */
                 pm_alloc_dc_req = 3,           /* Allocating Request Count. */
                   pm_all_dc_hit = 2,           /* All Request Hit Count. */
                   pm_all_dc_req = 1,           /* All Request Count. */
                      pm_mperiod = 0            /* Measurement Period. May be used by SW to calculate rates associated with other count values. */
};

#else

#define           pm_wrifill_sbe   127          /* WriteFill Buffer SBE. */
#define            pm_dcache_sbe   126          /* DataCache SBE. */
#define         pm_adm_sl_db_sbe   125          /* ADM ShortLoop Delay Buffer SBE. */
#define         pm_adm_re_db_sbe   124          /* ADM RE Delay Buffer SBE. */
#define        pm_adm_paf_db_sbe   123          /* ADM PAF Delay Buffer SBE. */
#define        pm_adm_hdr_db_sbe   122          /* ADM Header Delay Buffer SBE. . */
#define        pm_adm_cas_db_sbe   121          /* ADM Compare & Swap Delay Buffer SBE. */
#define              pm_pcam_sbe   120          /* PCAM data SBE. */
#define         pm_mru_table_sbe   119          /* MRU Table SBE. */
#define       pm_imi_orb_sch_sbe   118          /* IDI Master ORB SCH SBE. */
#define       pm_imi_orb_rsp_sbe   117          /* IDI Master ORB RSP SBE. */
#define       pm_imi_orb_cnf_sbe   116          /* IDI Master ORB CNF SBE. */
#define          pm_c2u_data_sbe   115          /* C2U DPB Data SBE. */
#define            pm_c2u_wp_sbe   114          /* C2U DPB WritePull header SBE. */
#define           pm_c2u_snp_sbe   113          /* C2U DPB Snoop header SBE. */
#define           pm_c2u_nqb_sbe   112          /* C2U New Request (NQB) SBE. */
#define           pm_c2u_eqb_sbe   111          /* C2U Eviction Request (EQB) SBE. */
#define            pm_u2c_wp_sbe   110          /* U2C WritePull (USB) SBE. */
#define           pm_u2c_dir_sbe   109          /* U2C L1DIR (detected in IMI) SBE. */
#define           pm_u2c_poi_sbe   108          /* U2C Poison and ECC valid bit queue SBE. */
#define          pm_u2c_data_sbe   107          /* U2C Data SBE. */
#define            pm_iti_wp_sbe   106          /* IDI Target WP (UQB) SBE. */
#define          pm_conq_hdr_sbe   105          /* ConQ header SBE. */
#define           pm_proq_hl_sbe   104          /* PROQ hold queue SBE. */
#define           pm_proq_gf_sbe   103          /* PROQ global or Flow tail pointer queue SBE. */
#define         pm_hifis_hdr_sbe   102          /* HIFIS Header SBE. */
#define         pm_conq_tail_sbe   101          /* ConQ Tail pointer SBE. */
#define          pm_dcd_bank_sbe   100          /* Data Cache Directory Bank SBE. */
#define           pm_dcache_read   99           /* DCache reads. */
#define          pm_dcache_write   98           /* DCache writes. */
#define          pm_idi_u2c_data   97           /* IDI U2C Data Flit. */
#define           pm_idi_u2c_rsp   96           /* IDI U2C Response Flit. */
#define           pm_idi_u2c_req   95           /* IDI U2C Request Flit. */
#define          pm_idi_c2u_data   94           /* IDI C2U Data Flit. */
#define           pm_idi_c2u_rsp   93           /* IDI C2U Response Flit. */
#define           pm_idi_c2u_req   92           /* IDI C2U Request Flit. */
#define    pm_no_c2u_req_credits   91           /* Clock cycles with No C2U Request Credits. */
#define   pm_no_c2u_data_credits   90           /* Clock cycles with No C2U Data Credits. */
#define    pm_no_c2u_rsp_credits   89           /* Clock cycles with No C2U Response Credits. */
#define      pm_snp_prefetch_hit   88           /* Snoop request that hits a pre-fetched line in the DCache. */
#define          pm_prefetch_req   87           /* Pre-fetch to memory for a request with ordering conflict */
#define           pm_addr_range3   86           /* Address Range 3 request count. Enabled by upper_addr_range and lower_addr_range. */
#define           pm_addr_range2   85           /* Address Range 2 request count. Enabled by upper_addr_range and lower_addr_range. */
#define           pm_addr_range1   84           /* Address Range 1 request count. Enabled by upper_addr_range and lower_addr_range. */
#define           pm_addr_range0   83           /* Address Range 0 request count. Enabled by upper_addr_range and lower_addr_range. */
#define            pm_new_tx_req   82           /* New Tx sourced request count. Enabled by tx_cnt_ena. */
#define            pm_new_rx_req   81           /* New Rx sourced request count. Enabled by rx_cnt_ena. */
#define            pm_new_at_req   80           /* New AT sourced request count. Enabled by at_cnt_ena. */
#define           pm_new_get_req   79           /* New GET request count. Enabled by one or more of (tx_cnt_ena, rx_cnt_ena, at_cnt_ena). */
#define           pm_new_put_req   78           /* New PUT request count. Enabled by one or more of (tx_cnt_ena, rx_cnt_ena, at_cnt_ena). */
#define          pm_new_amo1_req   77           /* New non-vector Atomic request count. Enabled by one or more of (tx_cnt_ena, rx_cnt_ena, at_cnt_ena). */
#define          pm_new_amo2_req   76           /* New 2-flit vector Atomic request count. Enabled by one or more of (tx_cnt_ena, rx_cnt_ena, at_cnt_ena). */
#define          pm_new_amo3_req   75           /* New 3-flit vector Atomic request count. Enabled by one or more of (tx_cnt_ena, rx_cnt_ena, at_cnt_ena). */
#define          pm_new_amo4_req   74           /* New 4-flit vector Atomic request count. Enabled by one or more of (tx_cnt_ena, rx_cnt_ena, at_cnt_ena). */
#define           pm_new_irq_req   73           /* New IRQ request count. Enabled by one or more of (tx_cnt_ena, rx_cnt_ena, at_cnt_ena). */
#define           pm_new_nop_req   72           /* New NOP request count. Enabled by one or more of (tx_cnt_ena, rx_cnt_ena, at_cnt_ena). */
#define           pm_new_fid_req   71           /* New FID request count. The GID/FID counted is selected by the fid_cnt_id and fid_cnt_msk fields. Enabled by one or more of (tx_cnt_ena, rx_cnt_ena, at_cnt_ena). */
#define       pm_addr_replay_req   70           /* Address enabled Replay request count. */
#define      pm_order_replay_req   69           /* Order enabled Replay request count. */
#define              pm_fill_req   68           /* Fill request count. */
#define               pm_snp_req   67           /* Snoop request count. */
#define                 pm_va_fc   66           /* Clock cycle count of Vector Atomic cycles in Pipe. */
#define                pm_irq_fc   65           /* Clock cycle count of IRQ buffer flow control signaling. */
#define                pm_awp_fc   64           /* Clock cycle count of All Ways Pending condition in one or more DCache Directory sets. */
#define               pm_lock_fc   63           /* Clock cycle count of IDI Lock flow control signaling. */
#define               pm_proq_fc   62           /* Clock cycle count of PROQ flow control signaling due to lack of PROQ entries. */
#define               pm_conq_fc   61           /* Clock cycle count of ConQ flow control signaling due to lack of ConQ entries. */
#define                pm_new_fc   60           /* Clock cycle count of New/Replay Request flow control signaling due to lack of TIDs. */
#define                pm_snp_fc   59           /* Clock cycle count of Snoop Request flow control signaling due to lack of TIDs. */
#define                pm_eqb_fc   58           /* Clock cycle count of IMI Eviction Request Buffer flow control signaling. */
#define                pm_nqb_fc   57           /* Clock cycle count of IMI New Request Buffer flow control signaling. */
#define              pm_hifis_fc   56           /* Clock cycle count of HIFIS flow control signaling. */
#define       pm_new_timeout_haz   55           /* New request timeout cycles stalled by a New hazard. */
#define           pm_new_timeout   54           /* New request timeout cycles at PARB head. */
#define    pm_replay_timeout_haz   53           /* Replay request timeout cycles stalled by a Replay hazard. */
#define        pm_replay_timeout   52           /* Replay request timeout cycles at PARB head. */
#define      pm_fill_timeout_haz   51           /* Fill request timeout cycles stalled by a Fill hazard. */
#define          pm_fill_timeout   50           /* Fill request timeout cycles at PARB head. */
#define            pm_new_fc_haz   49           /* New request cycles stalled by flow control. */
#define            pm_new_ic_haz   48           /* New request cycles stalled by IMI CAM hazard. */
#define            pm_new_pc_haz   47           /* New request cycles stalled by Pipe CAM hazard. */
#define           pm_new_req_cyc   46           /* New request cycles count at PARB head. */
#define         pm_replay_fc_haz   45           /* Replay request cycles stalled by flow control. */
#define         pm_replay_ic_haz   44           /* Replay request cycles stalled by IMI CAM hazard. */
#define         pm_replay_pc_haz   43           /* Replay request cycles stalled by Pipe CAM hazard. */
#define        pm_replay_req_cyc   42           /* Replay request cycles count at PARB head. */
#define           pm_fill_fc_haz   41           /* Fill request cycles stalled by flow control. */
#define           pm_fill_ic_haz   40           /* Fill request cycles stalled by IMI CAM hazard. */
#define           pm_fill_pc_haz   39           /* Fill request cycles stalled by Pipe CAM hazard. */
#define          pm_fill_req_cyc   38           /* Fill request cycles count at PARB head. */
#define            pm_snp_fc_haz   37           /* Snoop request cycles stalled by flow control. */
#define            pm_snp_ic_haz   36           /* Snoop request cycles stalled by IMI CAM hazard. */
#define            pm_snp_pc_haz   35           /* Snoop request cycles stalled by Pipe CAM hazard. */
#define           pm_snp_req_cyc   34           /* Snoop request cycles count at PARB head. */
#define            pm_wbstoi_req   33           /* Sampled WbStoI requests count. */
#define        pm_wbstoi_latency   32           /* Sampled WbStoI requests latency. Divide by pm_wbstoi_req to get average latency (in hclks). */
#define            pm_wbmtoi_req   31           /* Sampled WbMtoI requests count.. */
#define        pm_wbmtoi_latency   30           /* Sampled WbMtoI requests latency. Divide by pm_wbmtoi_req to get average latency (in hclks). */
#define         pm_mempushwr_req   29           /* Sampled MemPushWr requests count. . */
#define     pm_mempushwr_latency   28           /* Sampled MemPushWr requests latency. Divide by pm_mempushwr_req to get average latency (in hclks). */
#define            pm_rdcurr_req   27           /* Sampled RdCurr requests count. Enabled by latency_ctl. */
#define        pm_rdcurr_latency   26           /* Sampled RdCurr requests latency. Divide by pm_rdcurr_req to get average latency (in hclks). Enabled by latency_ctl. */
#define               pm_drd_req   25           /* Sampled DRd_Opt requests count. Enabled by latency_ctl. */
#define           pm_drd_latency   24           /* Sampled DRd_Opt requests latency. Divide by pm_drd_req to get average latency (in hclks). Enabled by latency_ctl. */
#define               pm_rfo_req   23           /* Sampled RFO requests count. Enabled by latency_ctl. */
#define           pm_rfo_latency   22           /* Sampled RFO requests latency. Divide by pm_rfo_req to get average latency (in hclks). Enabled by latency_ctl. */
#define          pm_specitom_req   21           /* Sampled SpecItoM requests count. */
#define      pm_specitom_latency   20           /* Sampled SpecItoM requests latency. Divide by pm_specitom_req to get average latency (in hclks). */
#define              pm_itom_req   19           /* Sampled ItoM requests count. */
#define          pm_itom_latency   18           /* Sampled ItoM requests latency. Divide by pm_itom_req to get average latency (in hclks). */
#define           pm_snp_dc_dhit   17           /* Snoop Request Hit with Data Forward Count. */
#define            pm_snp_dc_hit   16           /* Snoop Request Hit Count. */
#define            pm_snp_dc_req   15           /* Snoop Request Count. */
#define            pm_fid_dc_hit   14           /* Flow ID based Request Hit Count. Enabled by fid_cnt_id/fid_cnt_msk */
#define            pm_fid_dc_req   13           /* Flow ID based Request Count. Enabled by fid_cnt_id/fid_cnt_msk */
#define         pm_atomic_dc_hit   12           /* ATOMIC opcode Request Hit Count. Enabled byalloc_opcode_ena */
#define         pm_atomic_dc_req   11           /* ATOMIC opcode Request Count. Enabled by alloc_opcode_ena */
#define            pm_put_dc_hit   10           /* PUT opcode Dcache Requests Hit Count. Enabled by alloc_opcode_ena */
#define            pm_put_dc_req   9            /* PUT opcode Request Count. Enabled by alloc_opcode_ena */
#define            pm_get_dc_hit   8            /* GET opcode Request Hit Count. Enabled by alloc_opcode_ena */
#define            pm_get_dc_req   7            /* GET opcode Request Count. Enabled by alloc_opcode_ena */
#define       pm_alloc_dc_devict   6            /* Allocating Request w/ Data Eviction Count. */
#define        pm_alloc_dc_evict   5            /* Allocating Request w/ line Eviction Count. */
#define          pm_alloc_dc_hit   4            /* Allocating Request Hit Count. */
#define          pm_alloc_dc_req   3            /* Allocating Request Count. */
#define            pm_all_dc_hit   2            /* All Request Hit Count. */
#define            pm_all_dc_req   1            /* All Request Count. */
#define               pm_mperiod   0             /* Measurement Period. May be used by SW to calculate rates associated with other count values. */

#endif



#endif 		/* DEF_FXR_LOCA_SW_DEF */
