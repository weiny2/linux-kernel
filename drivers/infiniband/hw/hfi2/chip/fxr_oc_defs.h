/*
*------------------------------------------------------------------------------
*                                                                              
*  INTEL CONFIDENTIAL                                                          
*                                                                              
*  Copyright 2016 Intel Corporation All Rights Reserved.                 
*                                                                              
*  The source code contained or described herein and all documents related     
*  to the source code ("Material") are owned by Intel Corporation or its    
*  suppliers or licensors. Title to the Material remains with Intel            
*  Corporation or its suppliers and licensors. The Material contains trade     
*  secrets and proprietary and confidential information of Intel or its        
*  suppliers and licensors. The Material is protected by worldwide copyright   
*  and trade secret laws and treaty provisions. No part of the Material may    
*  be used, copied, reproduced, modified, published, uploaded, posted,         
*  transmitted, distributed, or disclosed in any way without Intel's prior     
*  express written permission.                                                 
*                                                                              
*  No license under any patent, copyright, trade secret or other intellectual  
*  property right is granted to or conferred upon you by disclosure or         
*  delivery of the Materials, either expressly, by implication, inducement,    
*  estoppel or otherwise. Any license under such intellectual property rights  
*  must be express and approved by Intel in writing.                           
*                                                                              
*------------------------------------------------------------------------------
*  Auto-generated by /nfs/sc/disks/slx_0108/pvesv/fxr_autogen/i_csrs.pl
*  i_csrs.pl Version 1.5 last modified on Monday 12/19/16 11:42:34
*  /nfs/sc/disks/slx_0108/pvesv/fxr_autogen/i_csrs.pl -C -RVREGS -ST fxr_oc -o /nfs/sc/disks/slx_0108/pvesv/fxr_autogen/fxr /nfs/sc/disks/slx_0108/pvesv/fxr_autogen/repo_xml/300_Memory_Map.xml /nfs/sc/disks/slx_0108/pvesv/fxr_autogen/repo_xml/363_Memory_Map_OC_LCB.xml /nfs/sc/disks/slx_0108/pvesv/fxr_autogen/repo_xml/364_Memory_Map_CRK_LCB.xml
*------------------------------------------------------------------------------
*/

#ifndef DEF_FXR_OC_SW_DEF
#define DEF_FXR_OC_SW_DEF

#ifndef OC_LCB_CSRS
#define OC_LCB_CSRS									FXR_CRK_LCB_CSRS
#endif
#define FXR_NUM_CONTEXTS								256
#define FXR_NUM_PIDS									4096
#define FXR_MAX_CONTEXT									255
#define FXR_TX_CONTEXT_ENTRIES								128
#define FXR_TX_CONTEXT_MAX								127
#define FXR_RX_CONTEXT_ENTRIES								16
#define FXR_RX_CONTEXT_MAX								15
#define FXR_NUM_SL									32
#define FXR_MAX_SL									31
#define CRK_LCB_CSRS_BASE								256
#define CRK_LCB_CFG_OFFSET								256
#define CRK_LCB_DBG_OFFSET								768
#define CRK_LCB_ERR_FLG_OFFSET								1152
#define CRK_LCB_ERR_INFO_OFFSET								1280
#define CRK_LCB_PRF_OFFSET								1792
#define CRK_LCB_STS_OFFSET								1920
#define CRK_LCB_PG_OFFSET								2176
#define DOWN										1
#define INIT										2
#define ARM										3
#define ACTIVE										4
/*
* Table #3 of fxr_top - OC_CFG_TX_FIFOS_RADR
* This register provides the read address reset value for the tx 
* fifo.
*/
#define OC_CFG_TX_FIFOS_RADR								(OC_LCB_CSRS + 0x000000000000)
#define OC_CFG_TX_FIFOS_RADR_RESETCSR							0x0000000000000006ull
#define OC_CFG_TX_FIFOS_RADR_UNUSED_63_5_SHIFT						5
#define OC_CFG_TX_FIFOS_RADR_UNUSED_63_5_MASK						0x7FFFFFFFFFFFFFFull
#define OC_CFG_TX_FIFOS_RADR_UNUSED_63_5_SMASK						0xFFFFFFFFFFFFFFE0ull
#define OC_CFG_TX_FIFOS_RADR_ON_REINIT_SHIFT						4
#define OC_CFG_TX_FIFOS_RADR_ON_REINIT_MASK						0x1ull
#define OC_CFG_TX_FIFOS_RADR_ON_REINIT_SMASK						0x10ull
#define OC_CFG_TX_FIFOS_RADR_UNUSED_3_SHIFT						3
#define OC_CFG_TX_FIFOS_RADR_UNUSED_3_MASK						0x1ull
#define OC_CFG_TX_FIFOS_RADR_UNUSED_3_SMASK						0x8ull
#define OC_CFG_TX_FIFOS_RADR_RST_VAL_SHIFT						0
#define OC_CFG_TX_FIFOS_RADR_RST_VAL_MASK						0x7ull
#define OC_CFG_TX_FIFOS_RADR_RST_VAL_SMASK						0x7ull
/*
* Table #4 of fxr_top - OC_CFG_RX_FIFOS_RADR
* This register provides the read address reset value for the rx 
* fifo.
*/
#define OC_CFG_RX_FIFOS_RADR								(OC_LCB_CSRS + 0x000000000008)
#define OC_CFG_RX_FIFOS_RADR_RESETCSR							0x0000000000000CBBull
#define OC_CFG_RX_FIFOS_RADR_UNUSED_63_12_SHIFT						12
#define OC_CFG_RX_FIFOS_RADR_UNUSED_63_12_MASK						0xFFFFFFFFFFFFFull
#define OC_CFG_RX_FIFOS_RADR_UNUSED_63_12_SMASK						0xFFFFFFFFFFFFF000ull
#define OC_CFG_RX_FIFOS_RADR_DO_NOT_JUMP_VAL_SHIFT					8
#define OC_CFG_RX_FIFOS_RADR_DO_NOT_JUMP_VAL_MASK					0xFull
#define OC_CFG_RX_FIFOS_RADR_DO_NOT_JUMP_VAL_SMASK					0xF00ull
#define OC_CFG_RX_FIFOS_RADR_OK_TO_JUMP_VAL_SHIFT					4
#define OC_CFG_RX_FIFOS_RADR_OK_TO_JUMP_VAL_MASK					0xFull
#define OC_CFG_RX_FIFOS_RADR_OK_TO_JUMP_VAL_SMASK					0xF0ull
#define OC_CFG_RX_FIFOS_RADR_RST_VAL_SHIFT						0
#define OC_CFG_RX_FIFOS_RADR_RST_VAL_MASK						0xFull
#define OC_CFG_RX_FIFOS_RADR_RST_VAL_SMASK						0xFull
/*
* Table #5 of fxr_top - OC_CFG_LM_MUXSEL_0
* Logic monitor mux select for OC.
*/
#define OC_CFG_LM_MUXSEL_0								(OC_LCB_CSRS + 0x000000000010)
#define OC_CFG_LM_MUXSEL_0_RESETCSR							0x0000000000000000ull
#define OC_CFG_LM_MUXSEL_0_UNUSED_63_20_SHIFT						20
#define OC_CFG_LM_MUXSEL_0_UNUSED_63_20_MASK						0xFFFFFFFFFFFull
#define OC_CFG_LM_MUXSEL_0_UNUSED_63_20_SMASK						0xFFFFFFFFFFF00000ull
#define OC_CFG_LM_MUXSEL_0_LCB_SELECT_SHIFT						16
#define OC_CFG_LM_MUXSEL_0_LCB_SELECT_MASK						0xFull
#define OC_CFG_LM_MUXSEL_0_LCB_SELECT_SMASK						0xF0000ull
#define OC_CFG_LM_MUXSEL_0_CRK8051_SELECT_SHIFT						13
#define OC_CFG_LM_MUXSEL_0_CRK8051_SELECT_MASK						0x7ull
#define OC_CFG_LM_MUXSEL_0_CRK8051_SELECT_SMASK						0xE000ull
#define OC_CFG_LM_MUXSEL_0_BCC_INST_SELECT_SHIFT					11
#define OC_CFG_LM_MUXSEL_0_BCC_INST_SELECT_MASK						0x3ull
#define OC_CFG_LM_MUXSEL_0_BCC_INST_SELECT_SMASK					0x1800ull
#define OC_CFG_LM_MUXSEL_0_BCC_SELECT_SHIFT						7
#define OC_CFG_LM_MUXSEL_0_BCC_SELECT_MASK						0xFull
#define OC_CFG_LM_MUXSEL_0_BCC_SELECT_SMASK						0x780ull
#define OC_CFG_LM_MUXSEL_0_CSR_CHAIN_SELECT_SHIFT					4
#define OC_CFG_LM_MUXSEL_0_CSR_CHAIN_SELECT_MASK					0x7ull
#define OC_CFG_LM_MUXSEL_0_CSR_CHAIN_SELECT_SMASK					0x70ull
#define OC_CFG_LM_MUXSEL_0_OC_SELECT_SHIFT						1
#define OC_CFG_LM_MUXSEL_0_OC_SELECT_MASK						0x7ull
#define OC_CFG_LM_MUXSEL_0_OC_SELECT_SMASK						0xEull
#define OC_CFG_LM_MUXSEL_0_SELECT_SHIFT							0
#define OC_CFG_LM_MUXSEL_0_SELECT_MASK							0x1ull
#define OC_CFG_LM_MUXSEL_0_SELECT_SMASK							0x1ull
/*
* Table #6 of fxr_top - OC_CFG_LM_MUXSEL_1
* Logic monitor mux select for OC.
*/
#define OC_CFG_LM_MUXSEL_1								(OC_LCB_CSRS + 0x000000000018)
#define OC_CFG_LM_MUXSEL_1_RESETCSR							0x0000000000000000ull
#define OC_CFG_LM_MUXSEL_1_UNUSED_63_20_SHIFT						20
#define OC_CFG_LM_MUXSEL_1_UNUSED_63_20_MASK						0xFFFFFFFFFFFull
#define OC_CFG_LM_MUXSEL_1_UNUSED_63_20_SMASK						0xFFFFFFFFFFF00000ull
#define OC_CFG_LM_MUXSEL_1_LCB_SELECT_SHIFT						16
#define OC_CFG_LM_MUXSEL_1_LCB_SELECT_MASK						0xFull
#define OC_CFG_LM_MUXSEL_1_LCB_SELECT_SMASK						0xF0000ull
#define OC_CFG_LM_MUXSEL_1_CRK8051_SELECT_SHIFT						13
#define OC_CFG_LM_MUXSEL_1_CRK8051_SELECT_MASK						0x7ull
#define OC_CFG_LM_MUXSEL_1_CRK8051_SELECT_SMASK						0xE000ull
#define OC_CFG_LM_MUXSEL_1_BCC_INST_SELECT_SHIFT					11
#define OC_CFG_LM_MUXSEL_1_BCC_INST_SELECT_MASK						0x3ull
#define OC_CFG_LM_MUXSEL_1_BCC_INST_SELECT_SMASK					0x1800ull
#define OC_CFG_LM_MUXSEL_1_BCC_SELECT_SHIFT						7
#define OC_CFG_LM_MUXSEL_1_BCC_SELECT_MASK						0xFull
#define OC_CFG_LM_MUXSEL_1_BCC_SELECT_SMASK						0x780ull
#define OC_CFG_LM_MUXSEL_1_CSR_CHAIN_SELECT_SHIFT					4
#define OC_CFG_LM_MUXSEL_1_CSR_CHAIN_SELECT_MASK					0x7ull
#define OC_CFG_LM_MUXSEL_1_CSR_CHAIN_SELECT_SMASK					0x70ull
#define OC_CFG_LM_MUXSEL_1_OC_SELECT_SHIFT						1
#define OC_CFG_LM_MUXSEL_1_OC_SELECT_MASK						0x7ull
#define OC_CFG_LM_MUXSEL_1_OC_SELECT_SMASK						0xEull
#define OC_CFG_LM_MUXSEL_1_SELECT_SHIFT							0
#define OC_CFG_LM_MUXSEL_1_SELECT_MASK							0x1ull
#define OC_CFG_LM_MUXSEL_1_SELECT_SMASK							0x1ull
/*
* Table #7 of fxr_top - OC_LCB_CFG_LWEG_MODE
* Define whether or not OC is in LWEG mode.
*/
#define OC_LCB_CFG_LWEG_MODE								(OC_LCB_CSRS + 0x000000000020)
#define OC_LCB_CFG_LWEG_MODE_RESETCSR							0x0000000000000000ull
#define OC_LCB_CFG_LWEG_MODE_UNUSED_63_9_SHIFT						9
#define OC_LCB_CFG_LWEG_MODE_UNUSED_63_9_MASK						0x7FFFFFFFFFFFFFull
#define OC_LCB_CFG_LWEG_MODE_UNUSED_63_9_SMASK						0xFFFFFFFFFFFFFE00ull
#define OC_LCB_CFG_LWEG_MODE_RESET_RX_SHIFT						8
#define OC_LCB_CFG_LWEG_MODE_RESET_RX_MASK						0x1ull
#define OC_LCB_CFG_LWEG_MODE_RESET_RX_SMASK						0x100ull
#define OC_LCB_CFG_LWEG_MODE_UNUSED_7_5_SHIFT						5
#define OC_LCB_CFG_LWEG_MODE_UNUSED_7_5_MASK						0x7ull
#define OC_LCB_CFG_LWEG_MODE_UNUSED_7_5_SMASK						0xE0ull
#define OC_LCB_CFG_LWEG_MODE_RESET_TX_SHIFT						4
#define OC_LCB_CFG_LWEG_MODE_RESET_TX_MASK						0x1ull
#define OC_LCB_CFG_LWEG_MODE_RESET_TX_SMASK						0x10ull
#define OC_LCB_CFG_LWEG_MODE_UNUSED_3_1_SHIFT						1
#define OC_LCB_CFG_LWEG_MODE_UNUSED_3_1_MASK						0x7ull
#define OC_LCB_CFG_LWEG_MODE_UNUSED_3_1_SMASK						0xEull
#define OC_LCB_CFG_LWEG_MODE_EN_SHIFT							0
#define OC_LCB_CFG_LWEG_MODE_EN_MASK							0x1ull
#define OC_LCB_CFG_LWEG_MODE_EN_SMASK							0x1ull
/*
* Table #8 of fxr_top - OC_LCB_CFG_BCC_RESET
* Set this to reset everything in the BCC.
*/
#define OC_LCB_CFG_BCC_RESET								(OC_LCB_CSRS + 0x000000000028)
#define OC_LCB_CFG_BCC_RESET_RESETCSR							0x0000000000000000ull
#define OC_LCB_CFG_BCC_RESET_UNUSED_63_1_SHIFT						1
#define OC_LCB_CFG_BCC_RESET_UNUSED_63_1_MASK						0x7FFFFFFFFFFFFFFFull
#define OC_LCB_CFG_BCC_RESET_UNUSED_63_1_SMASK						0xFFFFFFFFFFFFFFFEull
#define OC_LCB_CFG_BCC_RESET_EN_SHIFT							0
#define OC_LCB_CFG_BCC_RESET_EN_MASK							0x1ull
#define OC_LCB_CFG_BCC_RESET_EN_SMASK							0x1ull
/*
* Table #9 of fxr_top - OC_LCB_CFG_8051_RESET
* Set this to reset everything in the 8051.
*/
#define OC_LCB_CFG_8051_RESET								(OC_LCB_CSRS + 0x000000000030)
#define OC_LCB_CFG_8051_RESET_RESETCSR							0x0000000000000000ull
#define OC_LCB_CFG_8051_RESET_UNUSED_63_1_SHIFT						1
#define OC_LCB_CFG_8051_RESET_UNUSED_63_1_MASK						0x7FFFFFFFFFFFFFFFull
#define OC_LCB_CFG_8051_RESET_UNUSED_63_1_SMASK						0xFFFFFFFFFFFFFFFEull
#define OC_LCB_CFG_8051_RESET_EN_SHIFT							0
#define OC_LCB_CFG_8051_RESET_EN_MASK							0x1ull
#define OC_LCB_CFG_8051_RESET_EN_SMASK							0x1ull
/*
* Table #10 of fxr_top - OC_LCB_CFG_PUSH
* Set the direction for the push serial chain from OC to Cport.
*/
#define OC_LCB_CFG_PUSH									(OC_LCB_CSRS + 0x000000000038)
#define OC_LCB_CFG_PUSH_RESETCSR							0x0000000000000000ull
#define OC_LCB_CFG_PUSH_UNUSED_63_1_SHIFT						1
#define OC_LCB_CFG_PUSH_UNUSED_63_1_MASK						0x7FFFFFFFFFFFFFFFull
#define OC_LCB_CFG_PUSH_UNUSED_63_1_SMASK						0xFFFFFFFFFFFFFFFEull
#define OC_LCB_CFG_PUSH_DIR_SHIFT							0
#define OC_LCB_CFG_PUSH_DIR_MASK							0x1ull
#define OC_LCB_CFG_PUSH_DIR_SMASK							0x1ull
/*
* Table #11 of fxr_top - OC_LCB_CFG_BCC_MODE
* Configure the LCB support for the BCC to use the Tx and Rx FIFOs and the Tx 
* and Rx gated clocks.
*/
#define OC_LCB_CFG_BCC_MODE								(OC_LCB_CSRS + 0x000000000040)
#define OC_LCB_CFG_BCC_MODE_RESETCSR							0x0000000000000000ull
#define OC_LCB_CFG_BCC_MODE_UNUSED_63_9_SHIFT						9
#define OC_LCB_CFG_BCC_MODE_UNUSED_63_9_MASK						0x7FFFFFFFFFFFFFull
#define OC_LCB_CFG_BCC_MODE_UNUSED_63_9_SMASK						0xFFFFFFFFFFFFFE00ull
#define OC_LCB_CFG_BCC_MODE_RESET_RX_SHIFT						8
#define OC_LCB_CFG_BCC_MODE_RESET_RX_MASK						0x1ull
#define OC_LCB_CFG_BCC_MODE_RESET_RX_SMASK						0x100ull
#define OC_LCB_CFG_BCC_MODE_UNUSED_7_5_SHIFT						5
#define OC_LCB_CFG_BCC_MODE_UNUSED_7_5_MASK						0x7ull
#define OC_LCB_CFG_BCC_MODE_UNUSED_7_5_SMASK						0xE0ull
#define OC_LCB_CFG_BCC_MODE_RESET_TX_SHIFT						4
#define OC_LCB_CFG_BCC_MODE_RESET_TX_MASK						0x1ull
#define OC_LCB_CFG_BCC_MODE_RESET_TX_SMASK						0x10ull
#define OC_LCB_CFG_BCC_MODE_UNUSED_3_1_SHIFT						1
#define OC_LCB_CFG_BCC_MODE_UNUSED_3_1_MASK						0x7ull
#define OC_LCB_CFG_BCC_MODE_UNUSED_3_1_SMASK						0xEull
#define OC_LCB_CFG_BCC_MODE_VAL_SHIFT							0
#define OC_LCB_CFG_BCC_MODE_VAL_MASK							0x1ull
#define OC_LCB_CFG_BCC_MODE_VAL_SMASK							0x1ull
/*
* Table #12 of fxr_top - OC_LCB_CSR_CHAIN_ERR_STATUS
* When an error (either parity error, read/write timeout, or read/write miss) 
* occurs to CSR chain request, the CSR chain endpoint should capture the address 
* associated with the read or write access request.
*/
#define OC_LCB_CSR_CHAIN_ERR_STATUS							(OC_LCB_CSRS + 0x000000000058)
#define OC_LCB_CSR_CHAIN_ERR_STATUS_RESETCSR						0x0000000000000000ull
#define OC_LCB_CSR_CHAIN_ERR_STATUS_UNUSED_63_30_SHIFT					30
#define OC_LCB_CSR_CHAIN_ERR_STATUS_UNUSED_63_30_MASK					0x3FFFFFFFFull
#define OC_LCB_CSR_CHAIN_ERR_STATUS_UNUSED_63_30_SMASK					0xFFFFFFFFC0000000ull
#define OC_LCB_CSR_CHAIN_ERR_STATUS_ERROR_ADDRESS_SHIFT					8
#define OC_LCB_CSR_CHAIN_ERR_STATUS_ERROR_ADDRESS_MASK					0x3FFFFFull
#define OC_LCB_CSR_CHAIN_ERR_STATUS_ERROR_ADDRESS_SMASK					0x3FFFFF00ull
#define OC_LCB_CSR_CHAIN_ERR_STATUS_RESERVED_7_6_SHIFT					6
#define OC_LCB_CSR_CHAIN_ERR_STATUS_RESERVED_7_6_MASK					0x3ull
#define OC_LCB_CSR_CHAIN_ERR_STATUS_RESERVED_7_6_SMASK					0xC0ull
#define OC_LCB_CSR_CHAIN_ERR_STATUS_BUF_OVERFLOW_SHIFT					5
#define OC_LCB_CSR_CHAIN_ERR_STATUS_BUF_OVERFLOW_MASK					0x1ull
#define OC_LCB_CSR_CHAIN_ERR_STATUS_BUF_OVERFLOW_SMASK					0x20ull
#define OC_LCB_CSR_CHAIN_ERR_STATUS_WRITE_MISS_SHIFT					4
#define OC_LCB_CSR_CHAIN_ERR_STATUS_WRITE_MISS_MASK					0x1ull
#define OC_LCB_CSR_CHAIN_ERR_STATUS_WRITE_MISS_SMASK					0x10ull
#define OC_LCB_CSR_CHAIN_ERR_STATUS_READ_MISS_SHIFT					3
#define OC_LCB_CSR_CHAIN_ERR_STATUS_READ_MISS_MASK					0x1ull
#define OC_LCB_CSR_CHAIN_ERR_STATUS_READ_MISS_SMASK					0x8ull
#define OC_LCB_CSR_CHAIN_ERR_STATUS_WRITE_TIMEOUT_SHIFT					2
#define OC_LCB_CSR_CHAIN_ERR_STATUS_WRITE_TIMEOUT_MASK					0x1ull
#define OC_LCB_CSR_CHAIN_ERR_STATUS_WRITE_TIMEOUT_SMASK					0x4ull
#define OC_LCB_CSR_CHAIN_ERR_STATUS_READ_TIMEOUT_SHIFT					1
#define OC_LCB_CSR_CHAIN_ERR_STATUS_READ_TIMEOUT_MASK					0x1ull
#define OC_LCB_CSR_CHAIN_ERR_STATUS_READ_TIMEOUT_SMASK					0x2ull
#define OC_LCB_CSR_CHAIN_ERR_STATUS_PARITY_ERROR_SHIFT					0
#define OC_LCB_CSR_CHAIN_ERR_STATUS_PARITY_ERROR_MASK					0x1ull
#define OC_LCB_CSR_CHAIN_ERR_STATUS_PARITY_ERROR_SMASK					0x1ull
/*
* Table #13 of fxr_top - OC_LCB_SCRATCH
* scratch area for val. 
*/
#define OC_LCB_SCRATCH									(OC_LCB_CSRS + 0x000000000060)
#define OC_LCB_SCRATCH_RESETCSR								0x0000000000000000ull
#define OC_LCB_SCRATCH_SCRATCH_SHIFT							0
#define OC_LCB_SCRATCH_SCRATCH_MASK							0xFFFFFFFFFFFFFFFFull
#define OC_LCB_SCRATCH_SCRATCH_SMASK							0xFFFFFFFFFFFFFFFFull
/*
* Table #1 of oc_lcb_csrs - LCB_CFG_RESET_FROM_CSR
* Set this to reset everything in the LCB.
*/
#define OC_LCB_CFG_RESET_FROM_CSR							(OC_LCB_CSRS + 0x000000000100)
#define OC_LCB_CFG_RESET_FROM_CSR_RESETCSR						0x0000000000000000ull
#define OC_LCB_CFG_RESET_FROM_CSR_UNUSED_63_1_SHIFT					1
#define OC_LCB_CFG_RESET_FROM_CSR_UNUSED_63_1_MASK					0x7FFFFFFFFFFFFFFFull
#define OC_LCB_CFG_RESET_FROM_CSR_UNUSED_63_1_SMASK					0xFFFFFFFFFFFFFFFEull
#define OC_LCB_CFG_RESET_FROM_CSR_EN_SHIFT						0
#define OC_LCB_CFG_RESET_FROM_CSR_EN_MASK						0x1ull
#define OC_LCB_CFG_RESET_FROM_CSR_EN_SMASK						0x1ull
/*
* Table #2 of oc_lcb_csrs - LCB_CFG_RUN
* Set this to turn on the LCB.
*/
#define OC_LCB_CFG_RUN									(OC_LCB_CSRS + 0x000000000108)
#define OC_LCB_CFG_RUN_RESETCSR								0x0000000000000000ull
#define OC_LCB_CFG_RUN_UNUSED_63_1_SHIFT						1
#define OC_LCB_CFG_RUN_UNUSED_63_1_MASK							0x7FFFFFFFFFFFFFFFull
#define OC_LCB_CFG_RUN_UNUSED_63_1_SMASK						0xFFFFFFFFFFFFFFFEull
#define OC_LCB_CFG_RUN_EN_SHIFT								0
#define OC_LCB_CFG_RUN_EN_MASK								0x1ull
#define OC_LCB_CFG_RUN_EN_SMASK								0x1ull
/*
* Table #3 of oc_lcb_csrs - LCB_CFG_TX_FIFOS_RESET
* This resets the tx fifo read and write pointers. It should be cleared after 
* the lane equalization is complete and the lane fifo clocks are stable and at 
* their final frequency. It is anticipated that firmware agents will do the 
* reset release on both sides of the link at the end of the LNI 
* process.
*/
#define OC_LCB_CFG_TX_FIFOS_RESET							(OC_LCB_CSRS + 0x000000000110)
#define OC_LCB_CFG_TX_FIFOS_RESET_RESETCSR						0x0000000000000001ull
#define OC_LCB_CFG_TX_FIFOS_RESET_UNUSED_63_1_SHIFT					1
#define OC_LCB_CFG_TX_FIFOS_RESET_UNUSED_63_1_MASK					0x7FFFFFFFFFFFFFFFull
#define OC_LCB_CFG_TX_FIFOS_RESET_UNUSED_63_1_SMASK					0xFFFFFFFFFFFFFFFEull
#define OC_LCB_CFG_TX_FIFOS_RESET_VAL_SHIFT						0
#define OC_LCB_CFG_TX_FIFOS_RESET_VAL_MASK						0x1ull
#define OC_LCB_CFG_TX_FIFOS_RESET_VAL_SMASK						0x1ull
/*
* Table #4 of oc_lcb_csrs - LCB_CFG_PORT
* This configures the port link state.
*/
#define OC_LCB_CFG_PORT									(OC_LCB_CSRS + 0x000000000118)
#define OC_LCB_CFG_PORT_RESETCSR							0x0000000000000001ull
#define OC_LCB_CFG_PORT_UNUSED_63_13_SHIFT						13
#define OC_LCB_CFG_PORT_UNUSED_63_13_MASK						0x7FFFFFFFFFFFFull
#define OC_LCB_CFG_PORT_UNUSED_63_13_SMASK						0xFFFFFFFFFFFFE000ull
#define OC_LCB_CFG_PORT_NEIGHBOR_NORMAL_SHIFT						12
#define OC_LCB_CFG_PORT_NEIGHBOR_NORMAL_MASK						0x1ull
#define OC_LCB_CFG_PORT_NEIGHBOR_NORMAL_SMASK						0x1000ull
#define OC_LCB_CFG_PORT_UNUSED_11_9_SHIFT						9
#define OC_LCB_CFG_PORT_UNUSED_11_9_MASK						0x7ull
#define OC_LCB_CFG_PORT_UNUSED_11_9_SMASK						0xE00ull
#define OC_LCB_CFG_PORT_SEND_IN_ARM_EN_SHIFT						8
#define OC_LCB_CFG_PORT_SEND_IN_ARM_EN_MASK						0x1ull
#define OC_LCB_CFG_PORT_SEND_IN_ARM_EN_SMASK						0x100ull
#define OC_LCB_CFG_PORT_UNUSED_7_5_SHIFT						5
#define OC_LCB_CFG_PORT_UNUSED_7_5_MASK							0x7ull
#define OC_LCB_CFG_PORT_UNUSED_7_5_SMASK						0xE0ull
#define OC_LCB_CFG_PORT_DISABLE_AUTO_ARM_ACTIVE_SHIFT					4
#define OC_LCB_CFG_PORT_DISABLE_AUTO_ARM_ACTIVE_MASK					0x1ull
#define OC_LCB_CFG_PORT_DISABLE_AUTO_ARM_ACTIVE_SMASK					0x10ull
#define OC_LCB_CFG_PORT_UNUSED_3_SHIFT							3
#define OC_LCB_CFG_PORT_UNUSED_3_MASK							0x1ull
#define OC_LCB_CFG_PORT_UNUSED_3_SMASK							0x8ull
#define OC_LCB_CFG_PORT_LINK_STATE_SHIFT						0
#define OC_LCB_CFG_PORT_LINK_STATE_MASK							0x7ull
#define OC_LCB_CFG_PORT_LINK_STATE_SMASK						0x7ull
/*
* Table #5 of oc_lcb_csrs - LCB_CFG_IGNORE_LOST_RCLK
* This configures the logic to ignore a lost receive clock. Useful only in pre 
* silicon validation.
*/
#define OC_LCB_CFG_IGNORE_LOST_RCLK							(OC_LCB_CSRS + 0x000000000120)
#define OC_LCB_CFG_IGNORE_LOST_RCLK_RESETCSR						0x0000000000000000ull
#define OC_LCB_CFG_IGNORE_LOST_RCLK_UNUSED_63_1_SHIFT					1
#define OC_LCB_CFG_IGNORE_LOST_RCLK_UNUSED_63_1_MASK					0x7FFFFFFFFFFFFFFFull
#define OC_LCB_CFG_IGNORE_LOST_RCLK_UNUSED_63_1_SMASK					0xFFFFFFFFFFFFFFFEull
#define OC_LCB_CFG_IGNORE_LOST_RCLK_EN_SHIFT						0
#define OC_LCB_CFG_IGNORE_LOST_RCLK_EN_MASK						0x1ull
#define OC_LCB_CFG_IGNORE_LOST_RCLK_EN_SMASK						0x1ull
/*
* Table #6 of oc_lcb_csrs - LCB_CFG_REINIT_PAUSE
* This register controls the ability to pause the re-initialization recovery 
* sequence. See also LCB_STS_LINK_PAUSE_ACTIVE, LCB_CFG_REINIT_AS_SLAVE and 
* LCB_CFG_FORCE_RECOVER_SEQUENCE.
*/
#define OC_LCB_CFG_REINIT_PAUSE								(OC_LCB_CSRS + 0x000000000128)
#define OC_LCB_CFG_REINIT_PAUSE_RESETCSR						0x0000000000000000ull
#define OC_LCB_CFG_REINIT_PAUSE_UNUSED_63_9_SHIFT					9
#define OC_LCB_CFG_REINIT_PAUSE_UNUSED_63_9_MASK					0x7FFFFFFFFFFFFFull
#define OC_LCB_CFG_REINIT_PAUSE_UNUSED_63_9_SMASK					0xFFFFFFFFFFFFFE00ull
#define OC_LCB_CFG_REINIT_PAUSE_ON_REINIT_SHIFT						8
#define OC_LCB_CFG_REINIT_PAUSE_ON_REINIT_MASK						0x1ull
#define OC_LCB_CFG_REINIT_PAUSE_ON_REINIT_SMASK						0x100ull
#define OC_LCB_CFG_REINIT_PAUSE_UNUSED_7_5_SHIFT					5
#define OC_LCB_CFG_REINIT_PAUSE_UNUSED_7_5_MASK						0x7ull
#define OC_LCB_CFG_REINIT_PAUSE_UNUSED_7_5_SMASK					0xE0ull
#define OC_LCB_CFG_REINIT_PAUSE_TX_MODE_SHIFT						4
#define OC_LCB_CFG_REINIT_PAUSE_TX_MODE_MASK						0x1ull
#define OC_LCB_CFG_REINIT_PAUSE_TX_MODE_SMASK						0x10ull
#define OC_LCB_CFG_REINIT_PAUSE_UNUSED_3_2_SHIFT					2
#define OC_LCB_CFG_REINIT_PAUSE_UNUSED_3_2_MASK						0x3ull
#define OC_LCB_CFG_REINIT_PAUSE_UNUSED_3_2_SMASK					0xCull
#define OC_LCB_CFG_REINIT_PAUSE_RX_MODE_SHIFT						0
#define OC_LCB_CFG_REINIT_PAUSE_RX_MODE_MASK						0x3ull
#define OC_LCB_CFG_REINIT_PAUSE_RX_MODE_SMASK						0x3ull
/*
* Table #7 of oc_lcb_csrs - LCB_CFG_REINIT_AS_SLAVE
* This register is used to allow a link pause controlled entirely from HFI LCB 
* CSRs. A switch LCB connected to a HFI LCB will perform as a slave LCB to the 
* HFI master LCB. This will needed for OPIO re-center during which the link will 
* be paused under generation 2 HFI control connected to a generation 1 switch. 
* If two HFI are connected together in a testing configuration only one should 
* be the slave. The OPIO re-center can be performed on both simultaneously. See 
* also LCB_STS_LINK_PAUSE_ACTIVE, LCB_CFG_REINIT_PAUSE_TX_MODE and 
* LCB_CFG_FORCE_RECOVER_SEQUENCE.
*/
#define OC_LCB_CFG_REINIT_AS_SLAVE							(OC_LCB_CSRS + 0x000000000130)
#define OC_LCB_CFG_REINIT_AS_SLAVE_RESETCSR						0x0000000000000000ull
#define OC_LCB_CFG_REINIT_AS_SLAVE_UNUSED_63_1_SHIFT					1
#define OC_LCB_CFG_REINIT_AS_SLAVE_UNUSED_63_1_MASK					0x7FFFFFFFFFFFFFFFull
#define OC_LCB_CFG_REINIT_AS_SLAVE_UNUSED_63_1_SMASK					0xFFFFFFFFFFFFFFFEull
#define OC_LCB_CFG_REINIT_AS_SLAVE_VAL_SHIFT						0
#define OC_LCB_CFG_REINIT_AS_SLAVE_VAL_MASK						0x1ull
#define OC_LCB_CFG_REINIT_AS_SLAVE_VAL_SMASK						0x1ull
/*
* Table #8 of oc_lcb_csrs - LCB_CFG_FORCE_RECOVER_SEQUENCE
* This register forces a recovery re-initialization sequence.
*/
#define OC_LCB_CFG_FORCE_RECOVER_SEQUENCE						(OC_LCB_CSRS + 0x000000000138)
#define OC_LCB_CFG_FORCE_RECOVER_SEQUENCE_RESETCSR					0x0000000000000000ull
#define OC_LCB_CFG_FORCE_RECOVER_SEQUENCE_UNUSED_63_1_SHIFT				1
#define OC_LCB_CFG_FORCE_RECOVER_SEQUENCE_UNUSED_63_1_MASK				0x7FFFFFFFFFFFFFFFull
#define OC_LCB_CFG_FORCE_RECOVER_SEQUENCE_UNUSED_63_1_SMASK				0xFFFFFFFFFFFFFFFEull
#define OC_LCB_CFG_FORCE_RECOVER_SEQUENCE_EN_SHIFT					0
#define OC_LCB_CFG_FORCE_RECOVER_SEQUENCE_EN_MASK					0x1ull
#define OC_LCB_CFG_FORCE_RECOVER_SEQUENCE_EN_SMASK					0x1ull
/*
* Table #9 of oc_lcb_csrs - LCB_CFG_CNT_FOR_SKIP_STALL
* This configures the skip stall counts for various ppm values.
*/
#define OC_LCB_CFG_CNT_FOR_SKIP_STALL							(OC_LCB_CSRS + 0x000000000140)
#define OC_LCB_CFG_CNT_FOR_SKIP_STALL_RESETCSR						0x0000000000001110ull
#define OC_LCB_CFG_CNT_FOR_SKIP_STALL_UNUSED_63_13_SHIFT				13
#define OC_LCB_CFG_CNT_FOR_SKIP_STALL_UNUSED_63_13_MASK					0x7FFFFFFFFFFFFull
#define OC_LCB_CFG_CNT_FOR_SKIP_STALL_UNUSED_63_13_SMASK				0xFFFFFFFFFFFFE000ull
#define OC_LCB_CFG_CNT_FOR_SKIP_STALL_DISABLE_INIT_SHIFT				12
#define OC_LCB_CFG_CNT_FOR_SKIP_STALL_DISABLE_INIT_MASK					0x1ull
#define OC_LCB_CFG_CNT_FOR_SKIP_STALL_DISABLE_INIT_SMASK				0x1000ull
#define OC_LCB_CFG_CNT_FOR_SKIP_STALL_UNUSED_11_9_SHIFT					9
#define OC_LCB_CFG_CNT_FOR_SKIP_STALL_UNUSED_11_9_MASK					0x7ull
#define OC_LCB_CFG_CNT_FOR_SKIP_STALL_UNUSED_11_9_SMASK					0xE00ull
#define OC_LCB_CFG_CNT_FOR_SKIP_STALL_DISABLE_RX_SHIFT					8
#define OC_LCB_CFG_CNT_FOR_SKIP_STALL_DISABLE_RX_MASK					0x1ull
#define OC_LCB_CFG_CNT_FOR_SKIP_STALL_DISABLE_RX_SMASK					0x100ull
#define OC_LCB_CFG_CNT_FOR_SKIP_STALL_UNUSED_7_5_SHIFT					5
#define OC_LCB_CFG_CNT_FOR_SKIP_STALL_UNUSED_7_5_MASK					0x7ull
#define OC_LCB_CFG_CNT_FOR_SKIP_STALL_UNUSED_7_5_SMASK					0xE0ull
#define OC_LCB_CFG_CNT_FOR_SKIP_STALL_DISABLE_TX_SHIFT					4
#define OC_LCB_CFG_CNT_FOR_SKIP_STALL_DISABLE_TX_MASK					0x1ull
#define OC_LCB_CFG_CNT_FOR_SKIP_STALL_DISABLE_TX_SMASK					0x10ull
#define OC_LCB_CFG_CNT_FOR_SKIP_STALL_UNUSED_3_2_SHIFT					2
#define OC_LCB_CFG_CNT_FOR_SKIP_STALL_UNUSED_3_2_MASK					0x3ull
#define OC_LCB_CFG_CNT_FOR_SKIP_STALL_UNUSED_3_2_SMASK					0xCull
#define OC_LCB_CFG_CNT_FOR_SKIP_STALL_PPM_SELECT_SHIFT					0
#define OC_LCB_CFG_CNT_FOR_SKIP_STALL_PPM_SELECT_MASK					0x3ull
#define OC_LCB_CFG_CNT_FOR_SKIP_STALL_PPM_SELECT_SMASK					0x3ull
/*
* Table #10 of oc_lcb_csrs - LCB_CFG_TX_FSS
* This register enables the Tx side synchronous scrambler.
*/
#define OC_LCB_CFG_TX_FSS								(OC_LCB_CSRS + 0x000000000148)
#define OC_LCB_CFG_TX_FSS_RESETCSR							0x0000000000000001ull
#define OC_LCB_CFG_TX_FSS_UNUSED_63_1_SHIFT						1
#define OC_LCB_CFG_TX_FSS_UNUSED_63_1_MASK						0x7FFFFFFFFFFFFFFFull
#define OC_LCB_CFG_TX_FSS_UNUSED_63_1_SMASK						0xFFFFFFFFFFFFFFFEull
#define OC_LCB_CFG_TX_FSS_EN_SHIFT							0
#define OC_LCB_CFG_TX_FSS_EN_MASK							0x1ull
#define OC_LCB_CFG_TX_FSS_EN_SMASK							0x1ull
/*
* Table #11 of oc_lcb_csrs - LCB_CFG_RX_FSS
* This register enables the Rx side synchronous scrambler.
*/
#define OC_LCB_CFG_RX_FSS								(OC_LCB_CSRS + 0x000000000150)
#define OC_LCB_CFG_RX_FSS_RESETCSR							0x0000000000000001ull
#define OC_LCB_CFG_RX_FSS_UNUSED_63_1_SHIFT						1
#define OC_LCB_CFG_RX_FSS_UNUSED_63_1_MASK						0x7FFFFFFFFFFFFFFFull
#define OC_LCB_CFG_RX_FSS_UNUSED_63_1_SMASK						0xFFFFFFFFFFFFFFFEull
#define OC_LCB_CFG_RX_FSS_EN_SHIFT							0
#define OC_LCB_CFG_RX_FSS_EN_MASK							0x1ull
#define OC_LCB_CFG_RX_FSS_EN_SMASK							0x1ull
/*
* Table #12 of oc_lcb_csrs - LCB_CFG_CRC_MODE
* This register sets the CRC mode on the Tx side of the link. The Rx side is 
* informed via the initialization training pattern. Different CRC modes can be 
* set for each of the two link directions. There is a fall back capability to 
* use a configuration value on the Rx side instead of the value delivered in the 
* training pattern.
*/
#define OC_LCB_CFG_CRC_MODE								(OC_LCB_CSRS + 0x000000000158)
#define OC_LCB_CFG_CRC_MODE_RESETCSR							0x0000000000000101ull
#define OC_LCB_CFG_CRC_MODE_UNUSED_63_13_SHIFT						13
#define OC_LCB_CFG_CRC_MODE_UNUSED_63_13_MASK						0x7FFFFFFFFFFFFull
#define OC_LCB_CFG_CRC_MODE_UNUSED_63_13_SMASK						0xFFFFFFFFFFFFE000ull
#define OC_LCB_CFG_CRC_MODE_DISABLE_CRC_CHK_SHIFT					12
#define OC_LCB_CFG_CRC_MODE_DISABLE_CRC_CHK_MASK					0x1ull
#define OC_LCB_CFG_CRC_MODE_DISABLE_CRC_CHK_SMASK					0x1000ull
#define OC_LCB_CFG_CRC_MODE_UNUSED_11_10_SHIFT						10
#define OC_LCB_CFG_CRC_MODE_UNUSED_11_10_MASK						0x3ull
#define OC_LCB_CFG_CRC_MODE_UNUSED_11_10_SMASK						0xC00ull
#define OC_LCB_CFG_CRC_MODE_RX_VAL_SHIFT						8
#define OC_LCB_CFG_CRC_MODE_RX_VAL_MASK							0x3ull
#define OC_LCB_CFG_CRC_MODE_RX_VAL_SMASK						0x300ull
#define OC_LCB_CFG_CRC_MODE_UNUSED_7_5_SHIFT						5
#define OC_LCB_CFG_CRC_MODE_UNUSED_7_5_MASK						0x7ull
#define OC_LCB_CFG_CRC_MODE_UNUSED_7_5_SMASK						0xE0ull
#define OC_LCB_CFG_CRC_MODE_USE_RX_CFG_VAL_SHIFT					4
#define OC_LCB_CFG_CRC_MODE_USE_RX_CFG_VAL_MASK						0x1ull
#define OC_LCB_CFG_CRC_MODE_USE_RX_CFG_VAL_SMASK					0x10ull
#define OC_LCB_CFG_CRC_MODE_UNUSED_3_2_SHIFT						2
#define OC_LCB_CFG_CRC_MODE_UNUSED_3_2_MASK						0x3ull
#define OC_LCB_CFG_CRC_MODE_UNUSED_3_2_SMASK						0xCull
#define OC_LCB_CFG_CRC_MODE_TX_VAL_SHIFT						0
#define OC_LCB_CFG_CRC_MODE_TX_VAL_MASK							0x3ull
#define OC_LCB_CFG_CRC_MODE_TX_VAL_SMASK						0x3ull
/*
* Table #13 of oc_lcb_csrs - LCB_CFG_LN_DCLK
* The feature that this register supports is not required in the Gen2 design, 
* and as a result has been disabled. In Gen2, cclk and dclk are generated from 
* different reference oscillators, and toggle at different frequencies, so the 
* consistent edge sampling described, cannot occur. The Tx SerDes clocking 
* methodology used in Gen2, renders this feature unusable, since an inverted 
* dclk creates a 1/2 clock period path from the tx_fifo to the SerDes. This 
* register allows for the dclk sampling to occur on a inverted dclk. 
* 
*/
#define OC_LCB_CFG_LN_DCLK								(OC_LCB_CSRS + 0x000000000160)
#define OC_LCB_CFG_LN_DCLK_RESETCSR							0x0000000000000000ull
#define OC_LCB_CFG_LN_DCLK_UNUSED_63_1_SHIFT						1
#define OC_LCB_CFG_LN_DCLK_UNUSED_63_1_MASK						0x7FFFFFFFFFFFFFFFull
#define OC_LCB_CFG_LN_DCLK_UNUSED_63_1_SMASK						0xFFFFFFFFFFFFFFFEull
#define OC_LCB_CFG_LN_DCLK_INVERT_SAMPLE_SHIFT						0
#define OC_LCB_CFG_LN_DCLK_INVERT_SAMPLE_MASK						0x1ull
#define OC_LCB_CFG_LN_DCLK_INVERT_SAMPLE_SMASK						0x1ull
/*
* Table #14 of oc_lcb_csrs - LCB_CFG_LN_TEST_TIME_TO_PASS
* This register sets the time for remaining lanes to align, frame, exchange lane 
* ID's, and pass testing after a first lane completes testing. If a lane does 
* not pass testing within the timeout interval it is dropped unless forced to 
* participate via lcb_cfg_misc.force_ln_en. If the first lane to complete 
* testing did not pass, it is dropped. In cases where no lanes pass the 
* lcb_err_sts.all_lns_failed_reinit_flag is set.
*/
#define OC_LCB_CFG_LN_TEST_TIME_TO_PASS							(OC_LCB_CSRS + 0x000000000168)
#define OC_LCB_CFG_LN_TEST_TIME_TO_PASS_RESETCSR					0x0000000000000400ull
#define OC_LCB_CFG_LN_TEST_TIME_TO_PASS_UNUSED_63_12_SHIFT				12
#define OC_LCB_CFG_LN_TEST_TIME_TO_PASS_UNUSED_63_12_MASK				0xFFFFFFFFFFFFFull
#define OC_LCB_CFG_LN_TEST_TIME_TO_PASS_UNUSED_63_12_SMASK				0xFFFFFFFFFFFFF000ull
#define OC_LCB_CFG_LN_TEST_TIME_TO_PASS_VAL_SHIFT					0
#define OC_LCB_CFG_LN_TEST_TIME_TO_PASS_VAL_MASK					0xFFFull
#define OC_LCB_CFG_LN_TEST_TIME_TO_PASS_VAL_SMASK					0xFFFull
/*
* Table #15 of oc_lcb_csrs - LCB_CFG_LN_TEST_REQ_PASS_CNT
* This register sets the number of matches (out of a total of 256) required for 
* the lane to pass testing during a reinit sequence.
*/
#define OC_LCB_CFG_LN_TEST_REQ_PASS_CNT							(OC_LCB_CSRS + 0x000000000170)
#define OC_LCB_CFG_LN_TEST_REQ_PASS_CNT_RESETCSR					0x0000000000000015ull
#define OC_LCB_CFG_LN_TEST_REQ_PASS_CNT_UNUSED_63_5_SHIFT				5
#define OC_LCB_CFG_LN_TEST_REQ_PASS_CNT_UNUSED_63_5_MASK				0x7FFFFFFFFFFFFFFull
#define OC_LCB_CFG_LN_TEST_REQ_PASS_CNT_UNUSED_63_5_SMASK				0xFFFFFFFFFFFFFFE0ull
#define OC_LCB_CFG_LN_TEST_REQ_PASS_CNT_DISABLE_REINIT_TEST_SHIFT			4
#define OC_LCB_CFG_LN_TEST_REQ_PASS_CNT_DISABLE_REINIT_TEST_MASK			0x1ull
#define OC_LCB_CFG_LN_TEST_REQ_PASS_CNT_DISABLE_REINIT_TEST_SMASK			0x10ull
#define OC_LCB_CFG_LN_TEST_REQ_PASS_CNT_UNUSED_3_SHIFT					3
#define OC_LCB_CFG_LN_TEST_REQ_PASS_CNT_UNUSED_3_MASK					0x1ull
#define OC_LCB_CFG_LN_TEST_REQ_PASS_CNT_UNUSED_3_SMASK					0x8ull
#define OC_LCB_CFG_LN_TEST_REQ_PASS_CNT_VAL_SHIFT					0
#define OC_LCB_CFG_LN_TEST_REQ_PASS_CNT_VAL_MASK					0x7ull
#define OC_LCB_CFG_LN_TEST_REQ_PASS_CNT_VAL_SMASK					0x7ull
/*
* Table #16 of oc_lcb_csrs - LCB_CFG_LN_RE_ENABLE
* This register configures the ability to re-enable a lane during a reinit 
* sequence.
*/
#define OC_LCB_CFG_LN_RE_ENABLE								(OC_LCB_CSRS + 0x000000000178)
#define OC_LCB_CFG_LN_RE_ENABLE_RESETCSR						0x0000000000000002ull
#define OC_LCB_CFG_LN_RE_ENABLE_UNUSED_63_3_SHIFT					3
#define OC_LCB_CFG_LN_RE_ENABLE_UNUSED_63_3_MASK					0x1FFFFFFFFFFFFFFFull
#define OC_LCB_CFG_LN_RE_ENABLE_UNUSED_63_3_SMASK					0xFFFFFFFFFFFFFFF8ull
#define OC_LCB_CFG_LN_RE_ENABLE_LTO_DEGRADE_SHIFT					2
#define OC_LCB_CFG_LN_RE_ENABLE_LTO_DEGRADE_MASK					0x1ull
#define OC_LCB_CFG_LN_RE_ENABLE_LTO_DEGRADE_SMASK					0x4ull
#define OC_LCB_CFG_LN_RE_ENABLE_LTO_REINIT_SHIFT					1
#define OC_LCB_CFG_LN_RE_ENABLE_LTO_REINIT_MASK						0x1ull
#define OC_LCB_CFG_LN_RE_ENABLE_LTO_REINIT_SMASK					0x2ull
#define OC_LCB_CFG_LN_RE_ENABLE_ON_REINIT_SHIFT						0
#define OC_LCB_CFG_LN_RE_ENABLE_ON_REINIT_MASK						0x1ull
#define OC_LCB_CFG_LN_RE_ENABLE_ON_REINIT_SMASK						0x1ull
/*
* Table #17 of oc_lcb_csrs - LCB_CFG_RX_LN_EN
* This register sets the Rx side enable for each physical lane.
*/
#define OC_LCB_CFG_RX_LN_EN								(OC_LCB_CSRS + 0x000000000180)
#define OC_LCB_CFG_RX_LN_EN_RESETCSR							0x000000000000000Full
#define OC_LCB_CFG_RX_LN_EN_UNUSED_63_4_SHIFT						4
#define OC_LCB_CFG_RX_LN_EN_UNUSED_63_4_MASK						0xFFFFFFFFFFFFFFFull
#define OC_LCB_CFG_RX_LN_EN_UNUSED_63_4_SMASK						0xFFFFFFFFFFFFFFF0ull
#define OC_LCB_CFG_RX_LN_EN_VAL_SHIFT							0
#define OC_LCB_CFG_RX_LN_EN_VAL_MASK							0xFull
#define OC_LCB_CFG_RX_LN_EN_VAL_SMASK							0xFull
/*
* Table #18 of oc_lcb_csrs - LCB_CFG_NULLS_REQUIRED_BASE
* This register sets the base value for the number of nulls that need to be 
* inserted on each cycle through the replay buffer.
*/
#define OC_LCB_CFG_NULLS_REQUIRED_BASE							(OC_LCB_CSRS + 0x000000000188)
#define OC_LCB_CFG_NULLS_REQUIRED_BASE_RESETCSR						0x0000080F53333333ull
#define OC_LCB_CFG_NULLS_REQUIRED_BASE_UNUSED_63_44_SHIFT				44
#define OC_LCB_CFG_NULLS_REQUIRED_BASE_UNUSED_63_44_MASK				0xFFFFFull
#define OC_LCB_CFG_NULLS_REQUIRED_BASE_UNUSED_63_44_SMASK				0xFFFFF00000000000ull
#define OC_LCB_CFG_NULLS_REQUIRED_BASE_BIG_FEC_SHIFT					40
#define OC_LCB_CFG_NULLS_REQUIRED_BASE_BIG_FEC_MASK					0xFull
#define OC_LCB_CFG_NULLS_REQUIRED_BASE_BIG_FEC_SMASK					0xF0000000000ull
#define OC_LCB_CFG_NULLS_REQUIRED_BASE_SMALL_FEC_SHIFT					36
#define OC_LCB_CFG_NULLS_REQUIRED_BASE_SMALL_FEC_MASK					0xFull
#define OC_LCB_CFG_NULLS_REQUIRED_BASE_SMALL_FEC_SMASK					0xF000000000ull
#define OC_LCB_CFG_NULLS_REQUIRED_BASE_VAL8_SHIFT					32
#define OC_LCB_CFG_NULLS_REQUIRED_BASE_VAL8_MASK					0xFull
#define OC_LCB_CFG_NULLS_REQUIRED_BASE_VAL8_SMASK					0xF00000000ull
#define OC_LCB_CFG_NULLS_REQUIRED_BASE_VAL7_SHIFT					28
#define OC_LCB_CFG_NULLS_REQUIRED_BASE_VAL7_MASK					0xFull
#define OC_LCB_CFG_NULLS_REQUIRED_BASE_VAL7_SMASK					0xF0000000ull
#define OC_LCB_CFG_NULLS_REQUIRED_BASE_VAL6_SHIFT					24
#define OC_LCB_CFG_NULLS_REQUIRED_BASE_VAL6_MASK					0xFull
#define OC_LCB_CFG_NULLS_REQUIRED_BASE_VAL6_SMASK					0xF000000ull
#define OC_LCB_CFG_NULLS_REQUIRED_BASE_VAL5_SHIFT					20
#define OC_LCB_CFG_NULLS_REQUIRED_BASE_VAL5_MASK					0xFull
#define OC_LCB_CFG_NULLS_REQUIRED_BASE_VAL5_SMASK					0xF00000ull
#define OC_LCB_CFG_NULLS_REQUIRED_BASE_VAL4_SHIFT					16
#define OC_LCB_CFG_NULLS_REQUIRED_BASE_VAL4_MASK					0xFull
#define OC_LCB_CFG_NULLS_REQUIRED_BASE_VAL4_SMASK					0xF0000ull
#define OC_LCB_CFG_NULLS_REQUIRED_BASE_VAL3_SHIFT					12
#define OC_LCB_CFG_NULLS_REQUIRED_BASE_VAL3_MASK					0xFull
#define OC_LCB_CFG_NULLS_REQUIRED_BASE_VAL3_SMASK					0xF000ull
#define OC_LCB_CFG_NULLS_REQUIRED_BASE_VAL2_SHIFT					8
#define OC_LCB_CFG_NULLS_REQUIRED_BASE_VAL2_MASK					0xFull
#define OC_LCB_CFG_NULLS_REQUIRED_BASE_VAL2_SMASK					0xF00ull
#define OC_LCB_CFG_NULLS_REQUIRED_BASE_VAL1_SHIFT					4
#define OC_LCB_CFG_NULLS_REQUIRED_BASE_VAL1_MASK					0xFull
#define OC_LCB_CFG_NULLS_REQUIRED_BASE_VAL1_SMASK					0xF0ull
#define OC_LCB_CFG_NULLS_REQUIRED_BASE_VAL0_SHIFT					0
#define OC_LCB_CFG_NULLS_REQUIRED_BASE_VAL0_MASK					0xFull
#define OC_LCB_CFG_NULLS_REQUIRED_BASE_VAL0_SMASK					0xFull
/*
* Table #19 of oc_lcb_csrs - LCB_CFG_REINITS_BEFORE_LINK_LOW
* This register sets the number of last ditch reinit attempts before the link 
* goes down. These are triggered when the link times (see LCB_CFG_LINK_TIMER_MAX) 
* out or an incomplete round trip occurs. The corresponding error flags are set. 
* If set to 0x0, no REINIT attempts are allowed when the link times 
* out.
*/
#define OC_LCB_CFG_REINITS_BEFORE_LINK_LOW						(OC_LCB_CSRS + 0x000000000190)
#define OC_LCB_CFG_REINITS_BEFORE_LINK_LOW_RESETCSR					0x0000000000000001ull
#define OC_LCB_CFG_REINITS_BEFORE_LINK_LOW_UNUSED_63_2_SHIFT				2
#define OC_LCB_CFG_REINITS_BEFORE_LINK_LOW_UNUSED_63_2_MASK				0x3FFFFFFFFFFFFFFFull
#define OC_LCB_CFG_REINITS_BEFORE_LINK_LOW_UNUSED_63_2_SMASK				0xFFFFFFFFFFFFFFFCull
#define OC_LCB_CFG_REINITS_BEFORE_LINK_LOW_VAL_SHIFT					0
#define OC_LCB_CFG_REINITS_BEFORE_LINK_LOW_VAL_MASK					0x3ull
#define OC_LCB_CFG_REINITS_BEFORE_LINK_LOW_VAL_SMASK					0x3ull
/*
* Table #20 of oc_lcb_csrs - LCB_CFG_REMOVE_RANDOM_NULLS
* This register is used to remove the random data present in the reserved bits 
* of Null LTPs. Presently, unused fields in null LTP's are stuffed with random 
* data. To facilitate debug, the random data can be replaced with static values 
* (0's) for easier waveform tracing.
*/
#define OC_LCB_CFG_REMOVE_RANDOM_NULLS							(OC_LCB_CSRS + 0x000000000198)
#define OC_LCB_CFG_REMOVE_RANDOM_NULLS_RESETCSR						0x0000000000000000ull
#define OC_LCB_CFG_REMOVE_RANDOM_NULLS_UNUSED_63_1_SHIFT				1
#define OC_LCB_CFG_REMOVE_RANDOM_NULLS_UNUSED_63_1_MASK					0x7FFFFFFFFFFFFFFFull
#define OC_LCB_CFG_REMOVE_RANDOM_NULLS_UNUSED_63_1_SMASK				0xFFFFFFFFFFFFFFFEull
#define OC_LCB_CFG_REMOVE_RANDOM_NULLS_VAL_SHIFT					0
#define OC_LCB_CFG_REMOVE_RANDOM_NULLS_VAL_MASK						0x1ull
#define OC_LCB_CFG_REMOVE_RANDOM_NULLS_VAL_SMASK					0x1ull
/*
* Table #21 of oc_lcb_csrs - LCB_CFG_REPLAY_BUF_MAX_LTP
* This register sets the maximum replay buffer LTP number sent to the peer Rx to 
* inform it of the replay buffer size on the Tx side of the link.
*/
#define OC_LCB_CFG_REPLAY_BUF_MAX_LTP							(OC_LCB_CSRS + 0x0000000001A0)
#define OC_LCB_CFG_REPLAY_BUF_MAX_LTP_RESETCSR						0x00000000000000FFull
#define OC_LCB_CFG_REPLAY_BUF_MAX_LTP_UNUSED_63_15_SHIFT				15
#define OC_LCB_CFG_REPLAY_BUF_MAX_LTP_UNUSED_63_15_MASK					0x1FFFFFFFFFFFFull
#define OC_LCB_CFG_REPLAY_BUF_MAX_LTP_UNUSED_63_15_SMASK				0xFFFFFFFFFFFF8000ull
#define OC_LCB_CFG_REPLAY_BUF_MAX_LTP_NUM_SHIFT						0
#define OC_LCB_CFG_REPLAY_BUF_MAX_LTP_NUM_MASK						0x7FFFull
#define OC_LCB_CFG_REPLAY_BUF_MAX_LTP_NUM_SMASK						0x7FFFull
/*
* Table #22 of oc_lcb_csrs - LCB_CFG_THROTTLE_TX_FLITS
* This register is used to throttle the tx flit stream by forcing idles in 
* specific LTP flit locations. This can be used without the one shot feature to 
* emulate 1,2,3 lanes active for L0p power reduction experiments.
*/
#define OC_LCB_CFG_THROTTLE_TX_FLITS							(OC_LCB_CSRS + 0x0000000001A8)
#define OC_LCB_CFG_THROTTLE_TX_FLITS_RESETCSR						0x0000000000000000ull
#define OC_LCB_CFG_THROTTLE_TX_FLITS_UNUSED_63_17_SHIFT					17
#define OC_LCB_CFG_THROTTLE_TX_FLITS_UNUSED_63_17_MASK					0x7FFFFFFFFFFFull
#define OC_LCB_CFG_THROTTLE_TX_FLITS_UNUSED_63_17_SMASK					0xFFFFFFFFFFFE0000ull
#define OC_LCB_CFG_THROTTLE_TX_FLITS_AFIOW_RX_SHIFT					16
#define OC_LCB_CFG_THROTTLE_TX_FLITS_AFIOW_RX_MASK					0x1ull
#define OC_LCB_CFG_THROTTLE_TX_FLITS_AFIOW_RX_SMASK					0x10000ull
#define OC_LCB_CFG_THROTTLE_TX_FLITS_UNUSED_15_13_SHIFT					13
#define OC_LCB_CFG_THROTTLE_TX_FLITS_UNUSED_15_13_MASK					0x7ull
#define OC_LCB_CFG_THROTTLE_TX_FLITS_UNUSED_15_13_SMASK					0xE000ull
#define OC_LCB_CFG_THROTTLE_TX_FLITS_AFIOW_TX_SHIFT					12
#define OC_LCB_CFG_THROTTLE_TX_FLITS_AFIOW_TX_MASK					0x1ull
#define OC_LCB_CFG_THROTTLE_TX_FLITS_AFIOW_TX_SMASK					0x1000ull
#define OC_LCB_CFG_THROTTLE_TX_FLITS_UNUSED_11_9_SHIFT					9
#define OC_LCB_CFG_THROTTLE_TX_FLITS_UNUSED_11_9_MASK					0x7ull
#define OC_LCB_CFG_THROTTLE_TX_FLITS_UNUSED_11_9_SMASK					0xE00ull
#define OC_LCB_CFG_THROTTLE_TX_FLITS_ONE_SHOT_SHIFT					8
#define OC_LCB_CFG_THROTTLE_TX_FLITS_ONE_SHOT_MASK					0x1ull
#define OC_LCB_CFG_THROTTLE_TX_FLITS_ONE_SHOT_SMASK					0x100ull
#define OC_LCB_CFG_THROTTLE_TX_FLITS_EN_SHIFT						0
#define OC_LCB_CFG_THROTTLE_TX_FLITS_EN_MASK						0xFFull
#define OC_LCB_CFG_THROTTLE_TX_FLITS_EN_SMASK						0xFFull
/*
* Table #23 of oc_lcb_csrs - LCB_CFG_SEND_SMA_MSG
* This register is used by the subnet management agent (SMA) to send a message 
* to the peer SMA. There is no hardware mechanism provided on the Tx side to 
* indicate if the message has been sent. This must be accomplished by polling 
* the LCB_STS_RCV_SMA_MSG by the peer SMA.
*/
#define OC_LCB_CFG_SEND_SMA_MSG								(OC_LCB_CSRS + 0x0000000001B0)
#define OC_LCB_CFG_SEND_SMA_MSG_RESETCSR						0x0000000000000000ull
#define OC_LCB_CFG_SEND_SMA_MSG_UNUSED_63_48_SHIFT					48
#define OC_LCB_CFG_SEND_SMA_MSG_UNUSED_63_48_MASK					0xFFFFull
#define OC_LCB_CFG_SEND_SMA_MSG_UNUSED_63_48_SMASK					0xFFFF000000000000ull
#define OC_LCB_CFG_SEND_SMA_MSG_VAL_SHIFT						0
#define OC_LCB_CFG_SEND_SMA_MSG_VAL_MASK						0xFFFFFFFFFFFFull
#define OC_LCB_CFG_SEND_SMA_MSG_VAL_SMASK						0xFFFFFFFFFFFFull
/*
* Table #24 of oc_lcb_csrs - LCB_CFG_INCOMPLT_RND_TRIP_DISABLE
* This register can be used to disable the incomplete round trip error handling. 
* The incomplete round trip interrupt asserts when a round trip marker is not 
* received from the peer during a replay.
*/
#define OC_LCB_CFG_INCOMPLT_RND_TRIP_DISABLE						(OC_LCB_CSRS + 0x0000000001B8)
#define OC_LCB_CFG_INCOMPLT_RND_TRIP_DISABLE_RESETCSR					0x0000000000000000ull
#define OC_LCB_CFG_INCOMPLT_RND_TRIP_DISABLE_UNUSED_63_1_SHIFT				1
#define OC_LCB_CFG_INCOMPLT_RND_TRIP_DISABLE_UNUSED_63_1_MASK				0x7FFFFFFFFFFFFFFFull
#define OC_LCB_CFG_INCOMPLT_RND_TRIP_DISABLE_UNUSED_63_1_SMASK				0xFFFFFFFFFFFFFFFEull
#define OC_LCB_CFG_INCOMPLT_RND_TRIP_DISABLE_VAL_SHIFT					0
#define OC_LCB_CFG_INCOMPLT_RND_TRIP_DISABLE_VAL_MASK					0x1ull
#define OC_LCB_CFG_INCOMPLT_RND_TRIP_DISABLE_VAL_SMASK					0x1ull
/*
* Table #25 of oc_lcb_csrs - LCB_CFG_RND_TRIP_MAX
* This register can be used to set the value at which the RST_FOR_INCOMPLT_RND_TRIP 
* error flag is triggered.
*/
#define OC_LCB_CFG_RND_TRIP_MAX								(OC_LCB_CSRS + 0x0000000001C0)
#define OC_LCB_CFG_RND_TRIP_MAX_RESETCSR						0x000000000000FFFFull
#define OC_LCB_CFG_RND_TRIP_MAX_UNUSED_63_16_SHIFT					16
#define OC_LCB_CFG_RND_TRIP_MAX_UNUSED_63_16_MASK					0xFFFFFFFFFFFFull
#define OC_LCB_CFG_RND_TRIP_MAX_UNUSED_63_16_SMASK					0xFFFFFFFFFFFF0000ull
#define OC_LCB_CFG_RND_TRIP_MAX_VAL_SHIFT						0
#define OC_LCB_CFG_RND_TRIP_MAX_VAL_MASK						0xFFFFull
#define OC_LCB_CFG_RND_TRIP_MAX_VAL_SMASK						0xFFFFull
/*
* Table #26 of oc_lcb_csrs - LCB_CFG_LINK_TIMER_DISABLE
* This register can be used to disable the link transfer timer. A simulation 
* field, that prevents the LCB from transitioning to Link Down, in the presence 
* of high error rates. Allows the LCB to continuously attempt forward 
* progress.
*/
#define OC_LCB_CFG_LINK_TIMER_DISABLE							(OC_LCB_CSRS + 0x0000000001C8)
#define OC_LCB_CFG_LINK_TIMER_DISABLE_RESETCSR						0x0000000000000000ull
#define OC_LCB_CFG_LINK_TIMER_DISABLE_UNUSED_63_1_SHIFT					1
#define OC_LCB_CFG_LINK_TIMER_DISABLE_UNUSED_63_1_MASK					0x7FFFFFFFFFFFFFFFull
#define OC_LCB_CFG_LINK_TIMER_DISABLE_UNUSED_63_1_SMASK					0xFFFFFFFFFFFFFFFEull
#define OC_LCB_CFG_LINK_TIMER_DISABLE_VAL_SHIFT						0
#define OC_LCB_CFG_LINK_TIMER_DISABLE_VAL_MASK						0x1ull
#define OC_LCB_CFG_LINK_TIMER_DISABLE_VAL_SMASK						0x1ull
/*
* Table #27 of oc_lcb_csrs - LCB_CFG_LINK_TIMER_MAX
* This register sets the link transfer active timer maximum value. Lack of 
* forward progress or exit from the Rx Tossing State initiates a series of 
* REINIT attempts (LCB_CFG_REINITS_BEFORE_LINK_LOW). Each expiration of the link 
* timer decrements the REINIT counter, resets the link timer to LINK_TIMER_MAX, 
* and begins a new REINIT cycle. Link transfer active is taken low if the REINIT 
* attempts are exhausted. If lcb_cfg_reinits_before_low is set to '0, link 
* transfer active is cleared without additional REINITs.
*/
#define OC_LCB_CFG_LINK_TIMER_MAX							(OC_LCB_CSRS + 0x0000000001D0)
#define OC_LCB_CFG_LINK_TIMER_MAX_RESETCSR						0x00000000000FFFFFull
#define OC_LCB_CFG_LINK_TIMER_MAX_UNUSED_63_32_SHIFT					32
#define OC_LCB_CFG_LINK_TIMER_MAX_UNUSED_63_32_MASK					0xFFFFFFFFull
#define OC_LCB_CFG_LINK_TIMER_MAX_UNUSED_63_32_SMASK					0xFFFFFFFF00000000ull
#define OC_LCB_CFG_LINK_TIMER_MAX_VAL_SHIFT						0
#define OC_LCB_CFG_LINK_TIMER_MAX_VAL_MASK						0xFFFFFFFFull
#define OC_LCB_CFG_LINK_TIMER_MAX_VAL_SMASK						0xFFFFFFFFull
/*
* Table #28 of oc_lcb_csrs - LCB_CFG_DESKEW
* This register can be used to disable deskew altogether or just the deskew 
* timer. If the deskew time to complete threshold is reached, LCB_ERR_STS.rst_for_failed_deskew 
* is set, and a Reinit reset is executed.
*/
#define OC_LCB_CFG_DESKEW								(OC_LCB_CSRS + 0x0000000001D8)
#define OC_LCB_CFG_DESKEW_RESETCSR							0x00000000000007FFull
#define OC_LCB_CFG_DESKEW_UNUSED_63_36_SHIFT						36
#define OC_LCB_CFG_DESKEW_UNUSED_63_36_MASK						0xFFFFFFFull
#define OC_LCB_CFG_DESKEW_UNUSED_63_36_SMASK						0xFFFFFFF000000000ull
#define OC_LCB_CFG_DESKEW_FRAMED_DELAY_SHIFT						24
#define OC_LCB_CFG_DESKEW_FRAMED_DELAY_MASK						0xFFFull
#define OC_LCB_CFG_DESKEW_FRAMED_DELAY_SMASK						0xFFF000000ull
#define OC_LCB_CFG_DESKEW_UNUSED_23_21_SHIFT						21
#define OC_LCB_CFG_DESKEW_UNUSED_23_21_MASK						0x7ull
#define OC_LCB_CFG_DESKEW_UNUSED_23_21_SMASK						0xE00000ull
#define OC_LCB_CFG_DESKEW_TIMER_DISABLE_SHIFT						20
#define OC_LCB_CFG_DESKEW_TIMER_DISABLE_MASK						0x1ull
#define OC_LCB_CFG_DESKEW_TIMER_DISABLE_SMASK						0x100000ull
#define OC_LCB_CFG_DESKEW_UNUSED_19_17_SHIFT						17
#define OC_LCB_CFG_DESKEW_UNUSED_19_17_MASK						0x7ull
#define OC_LCB_CFG_DESKEW_UNUSED_19_17_SMASK						0xE0000ull
#define OC_LCB_CFG_DESKEW_ALL_DISABLE_SHIFT						16
#define OC_LCB_CFG_DESKEW_ALL_DISABLE_MASK						0x1ull
#define OC_LCB_CFG_DESKEW_ALL_DISABLE_SMASK						0x10000ull
#define OC_LCB_CFG_DESKEW_TIME_TO_COMPLETE_SHIFT					0
#define OC_LCB_CFG_DESKEW_TIME_TO_COMPLETE_MASK						0xFFFFull
#define OC_LCB_CFG_DESKEW_TIME_TO_COMPLETE_SMASK					0xFFFFull
/*
* Table #29 of oc_lcb_csrs - LCB_CFG_LN_DEGRADE
* This register is used to configure the lane degrade removal mechanism. All 
* fields should be configured prior to booting the LCB. If any fields need to be 
* changed after a LCB boot RESET_SETTINGS needs to be used.
*/
#define OC_LCB_CFG_LN_DEGRADE								(OC_LCB_CSRS + 0x0000000001E0)
#define OC_LCB_CFG_LN_DEGRADE_RESETCSR							0x0000000000002731ull
#define OC_LCB_CFG_LN_DEGRADE_UNUSED_63_21_SHIFT					21
#define OC_LCB_CFG_LN_DEGRADE_UNUSED_63_21_MASK						0x7FFFFFFFFFFull
#define OC_LCB_CFG_LN_DEGRADE_UNUSED_63_21_SMASK					0xFFFFFFFFFFE00000ull
#define OC_LCB_CFG_LN_DEGRADE_RESET_DEGRADE_LN_EN_SHIFT					20
#define OC_LCB_CFG_LN_DEGRADE_RESET_DEGRADE_LN_EN_MASK					0x1ull
#define OC_LCB_CFG_LN_DEGRADE_RESET_DEGRADE_LN_EN_SMASK					0x100000ull
#define OC_LCB_CFG_LN_DEGRADE_UNUSED_19_17_SHIFT					17
#define OC_LCB_CFG_LN_DEGRADE_UNUSED_19_17_MASK						0x7ull
#define OC_LCB_CFG_LN_DEGRADE_UNUSED_19_17_SMASK					0xE0000ull
#define OC_LCB_CFG_LN_DEGRADE_RESET_SETTINGS_SHIFT					16
#define OC_LCB_CFG_LN_DEGRADE_RESET_SETTINGS_MASK					0x1ull
#define OC_LCB_CFG_LN_DEGRADE_RESET_SETTINGS_SMASK					0x10000ull
#define OC_LCB_CFG_LN_DEGRADE_UNUSED_15_SHIFT						15
#define OC_LCB_CFG_LN_DEGRADE_UNUSED_15_MASK						0x1ull
#define OC_LCB_CFG_LN_DEGRADE_UNUSED_15_SMASK						0x8000ull
#define OC_LCB_CFG_LN_DEGRADE_EVENTS_TO_TRIGGER_SHIFT					12
#define OC_LCB_CFG_LN_DEGRADE_EVENTS_TO_TRIGGER_MASK					0x7ull
#define OC_LCB_CFG_LN_DEGRADE_EVENTS_TO_TRIGGER_SMASK					0x7000ull
#define OC_LCB_CFG_LN_DEGRADE_UNUSED_11_SHIFT						11
#define OC_LCB_CFG_LN_DEGRADE_UNUSED_11_MASK						0x1ull
#define OC_LCB_CFG_LN_DEGRADE_UNUSED_11_SMASK						0x800ull
#define OC_LCB_CFG_LN_DEGRADE_DURATION_SELECT_SHIFT					8
#define OC_LCB_CFG_LN_DEGRADE_DURATION_SELECT_MASK					0x7ull
#define OC_LCB_CFG_LN_DEGRADE_DURATION_SELECT_SMASK					0x700ull
#define OC_LCB_CFG_LN_DEGRADE_UNUSED_7_6_SHIFT						6
#define OC_LCB_CFG_LN_DEGRADE_UNUSED_7_6_MASK						0x3ull
#define OC_LCB_CFG_LN_DEGRADE_UNUSED_7_6_SMASK						0xC0ull
#define OC_LCB_CFG_LN_DEGRADE_NUM_ALLOWED_SHIFT						4
#define OC_LCB_CFG_LN_DEGRADE_NUM_ALLOWED_MASK						0x3ull
#define OC_LCB_CFG_LN_DEGRADE_NUM_ALLOWED_SMASK						0x30ull
#define OC_LCB_CFG_LN_DEGRADE_UNUSED_3_1_SHIFT						1
#define OC_LCB_CFG_LN_DEGRADE_UNUSED_3_1_MASK						0x7ull
#define OC_LCB_CFG_LN_DEGRADE_UNUSED_3_1_SMASK						0xEull
#define OC_LCB_CFG_LN_DEGRADE_EN_SHIFT							0
#define OC_LCB_CFG_LN_DEGRADE_EN_MASK							0x1ull
#define OC_LCB_CFG_LN_DEGRADE_EN_SMASK							0x1ull
/*
* Table #30 of oc_lcb_csrs - LCB_CFG_CRC_INTERRUPT
* This register is used to configure which CRC error counter(s) is used to 
* monitor for a potential interrupt condition. The interrupt occurs when the 
* monitored error counter(s) reaches the number of errors in the ERR_CNT 
* field.
*/
#define OC_LCB_CFG_CRC_INTERRUPT							(OC_LCB_CSRS + 0x0000000001E8)
#define OC_LCB_CFG_CRC_INTERRUPT_RESETCSR						0x0000000000000004ull
#define OC_LCB_CFG_CRC_INTERRUPT_UNUSED_63_38_SHIFT					38
#define OC_LCB_CFG_CRC_INTERRUPT_UNUSED_63_38_MASK					0x3FFFFFFull
#define OC_LCB_CFG_CRC_INTERRUPT_UNUSED_63_38_SMASK					0xFFFFFFC000000000ull
#define OC_LCB_CFG_CRC_INTERRUPT_MATCH_EN_SHIFT						32
#define OC_LCB_CFG_CRC_INTERRUPT_MATCH_EN_MASK						0x3Full
#define OC_LCB_CFG_CRC_INTERRUPT_MATCH_EN_SMASK						0x3F00000000ull
#define OC_LCB_CFG_CRC_INTERRUPT_ERR_CNT_SHIFT						0
#define OC_LCB_CFG_CRC_INTERRUPT_ERR_CNT_MASK						0xFFFFFFFFull
#define OC_LCB_CFG_CRC_INTERRUPT_ERR_CNT_SMASK						0xFFFFFFFFull
/*
* Table #31 of oc_lcb_csrs - LCB_CFG_CLK_DURING_RESET
* 
*/
#define OC_LCB_CFG_CLK_DURING_RESET							(OC_LCB_CSRS + 0x0000000001F0)
#define OC_LCB_CFG_CLK_DURING_RESET_RESETCSR						0x0000000000000000ull
#define OC_LCB_CFG_CLK_DURING_RESET_UNUSED_63_1_SHIFT					1
#define OC_LCB_CFG_CLK_DURING_RESET_UNUSED_63_1_MASK					0x7FFFFFFFFFFFFFFFull
#define OC_LCB_CFG_CLK_DURING_RESET_UNUSED_63_1_SMASK					0xFFFFFFFFFFFFFFFEull
#define OC_LCB_CFG_CLK_DURING_RESET_VAL_SHIFT						0
#define OC_LCB_CFG_CLK_DURING_RESET_VAL_MASK						0x1ull
#define OC_LCB_CFG_CLK_DURING_RESET_VAL_SMASK						0x1ull
/*
* Table #32 of oc_lcb_csrs - LCB_CFG_LOOPBACK
* This is use to set the loopback mode.
*/
#define OC_LCB_CFG_LOOPBACK								(OC_LCB_CSRS + 0x0000000001F8)
#define OC_LCB_CFG_LOOPBACK_RESETCSR							0x0000000000000000ull
#define OC_LCB_CFG_LOOPBACK_UNUSED_63_2_SHIFT						2
#define OC_LCB_CFG_LOOPBACK_UNUSED_63_2_MASK						0x3FFFFFFFFFFFFFFFull
#define OC_LCB_CFG_LOOPBACK_UNUSED_63_2_SMASK						0xFFFFFFFFFFFFFFFCull
#define OC_LCB_CFG_LOOPBACK_VAL_SHIFT							0
#define OC_LCB_CFG_LOOPBACK_VAL_MASK							0x3ull
#define OC_LCB_CFG_LOOPBACK_VAL_SMASK							0x3ull
/*
* Table #33 of oc_lcb_csrs - LCB_CFG_MISC
* This register is used to set miscellaneous configuration setting that are 
* unlikely to be needed. This can serve as a catch all for configuration needs 
* that arise late in the design process without adding a completely new 
* CSR.
*/
#define OC_LCB_CFG_MISC									(OC_LCB_CSRS + 0x000000000200)
#define OC_LCB_CFG_MISC_RESETCSR							0x0000080011917000ull
#define OC_LCB_CFG_MISC_UNUSED_63_44_SHIFT						44
#define OC_LCB_CFG_MISC_UNUSED_63_44_MASK						0xFFFFFull
#define OC_LCB_CFG_MISC_UNUSED_63_44_SMASK						0xFFFFF00000000000ull
#define OC_LCB_CFG_MISC_CORRECT_NSYMBOLS_SHIFT						40
#define OC_LCB_CFG_MISC_CORRECT_NSYMBOLS_MASK						0xFull
#define OC_LCB_CFG_MISC_CORRECT_NSYMBOLS_SMASK						0xF0000000000ull
#define OC_LCB_CFG_MISC_UNUSED_39_37_SHIFT						37
#define OC_LCB_CFG_MISC_UNUSED_39_37_MASK						0x7ull
#define OC_LCB_CFG_MISC_UNUSED_39_37_SMASK						0xE000000000ull
#define OC_LCB_CFG_MISC_FEC_Q_FULL_STOP_Q_SHIFT						36
#define OC_LCB_CFG_MISC_FEC_Q_FULL_STOP_Q_MASK						0x1ull
#define OC_LCB_CFG_MISC_FEC_Q_FULL_STOP_Q_SMASK						0x1000000000ull
#define OC_LCB_CFG_MISC_UNUSED_35_33_SHIFT						33
#define OC_LCB_CFG_MISC_UNUSED_35_33_MASK						0x7ull
#define OC_LCB_CFG_MISC_UNUSED_35_33_SMASK						0xE00000000ull
#define OC_LCB_CFG_MISC_HOLD_FEC_LTP_MODE_SHIFT						32
#define OC_LCB_CFG_MISC_HOLD_FEC_LTP_MODE_MASK						0x1ull
#define OC_LCB_CFG_MISC_HOLD_FEC_LTP_MODE_SMASK						0x100000000ull
#define OC_LCB_CFG_MISC_UNUSED_31_29_SHIFT						29
#define OC_LCB_CFG_MISC_UNUSED_31_29_MASK						0x7ull
#define OC_LCB_CFG_MISC_UNUSED_31_29_SMASK						0xE0000000ull
#define OC_LCB_CFG_MISC_CORRECT_1SYMBOL_SHIFT						28
#define OC_LCB_CFG_MISC_CORRECT_1SYMBOL_MASK						0x1ull
#define OC_LCB_CFG_MISC_CORRECT_1SYMBOL_SMASK						0x10000000ull
#define OC_LCB_CFG_MISC_UNUSED_27_25_SHIFT						25
#define OC_LCB_CFG_MISC_UNUSED_27_25_MASK						0x7ull
#define OC_LCB_CFG_MISC_UNUSED_27_25_SMASK						0xE000000ull
#define OC_LCB_CFG_MISC_REQUIRED_STALL_CNT_SHIFT					20
#define OC_LCB_CFG_MISC_REQUIRED_STALL_CNT_MASK						0x1Full
#define OC_LCB_CFG_MISC_REQUIRED_STALL_CNT_SMASK					0x1F00000ull
#define OC_LCB_CFG_MISC_UNUSED_19_17_SHIFT						17
#define OC_LCB_CFG_MISC_UNUSED_19_17_MASK						0x7ull
#define OC_LCB_CFG_MISC_UNUSED_19_17_SMASK						0xE0000ull
#define OC_LCB_CFG_MISC_REQUIRED_TOS_CNT_SHIFT						12
#define OC_LCB_CFG_MISC_REQUIRED_TOS_CNT_MASK						0x1Full
#define OC_LCB_CFG_MISC_REQUIRED_TOS_CNT_SMASK						0x1F000ull
#define OC_LCB_CFG_MISC_UNUSED_11_10_SHIFT						10
#define OC_LCB_CFG_MISC_UNUSED_11_10_MASK						0x3ull
#define OC_LCB_CFG_MISC_UNUSED_11_10_SMASK						0xC00ull
#define OC_LCB_CFG_MISC_RX_CLK_SEL_PRIORITY_SHIFT					8
#define OC_LCB_CFG_MISC_RX_CLK_SEL_PRIORITY_MASK					0x3ull
#define OC_LCB_CFG_MISC_RX_CLK_SEL_PRIORITY_SMASK					0x300ull
#define OC_LCB_CFG_MISC_UNUSED_7_6_SHIFT						6
#define OC_LCB_CFG_MISC_UNUSED_7_6_MASK							0x3ull
#define OC_LCB_CFG_MISC_UNUSED_7_6_SMASK						0xC0ull
#define OC_LCB_CFG_MISC_BCK_CH_SEL_PRIORITY_SHIFT					4
#define OC_LCB_CFG_MISC_BCK_CH_SEL_PRIORITY_MASK					0x3ull
#define OC_LCB_CFG_MISC_BCK_CH_SEL_PRIORITY_SMASK					0x30ull
#define OC_LCB_CFG_MISC_FORCE_LN_EN_SHIFT						0
#define OC_LCB_CFG_MISC_FORCE_LN_EN_MASK						0xFull
#define OC_LCB_CFG_MISC_FORCE_LN_EN_SMASK						0xFull
/*
* Table #34 of oc_lcb_csrs - LCB_CFG_CLK_CNTR
* This register is used to select the clk that is monitored by the PRF_CLK_CNTR 
* and sent to the o_clk_observe output.
*/
#define OC_LCB_CFG_CLK_CNTR								(OC_LCB_CSRS + 0x000000000208)
#define OC_LCB_CFG_CLK_CNTR_RESETCSR							0x0000000000000001ull
#define OC_LCB_CFG_CLK_CNTR_UNUSED_63_9_SHIFT						9
#define OC_LCB_CFG_CLK_CNTR_UNUSED_63_9_MASK						0x7FFFFFFFFFFFFFull
#define OC_LCB_CFG_CLK_CNTR_UNUSED_63_9_SMASK						0xFFFFFFFFFFFFFE00ull
#define OC_LCB_CFG_CLK_CNTR_STROBE_ON_CCLK_CNTR_SHIFT					8
#define OC_LCB_CFG_CLK_CNTR_STROBE_ON_CCLK_CNTR_MASK					0x1ull
#define OC_LCB_CFG_CLK_CNTR_STROBE_ON_CCLK_CNTR_SMASK					0x100ull
#define OC_LCB_CFG_CLK_CNTR_UNUSED_7_5_SHIFT						5
#define OC_LCB_CFG_CLK_CNTR_UNUSED_7_5_MASK						0x7ull
#define OC_LCB_CFG_CLK_CNTR_UNUSED_7_5_SMASK						0xE0ull
#define OC_LCB_CFG_CLK_CNTR_SELECT_SHIFT						0
#define OC_LCB_CFG_CLK_CNTR_SELECT_MASK							0x1Full
#define OC_LCB_CFG_CLK_CNTR_SELECT_SMASK						0x1Full
/*
* Table #35 of oc_lcb_csrs - LCB_CFG_CRC_CNTR_RESET
* This register is used to hold and reset the CRC error counters.
*/
#define OC_LCB_CFG_CRC_CNTR_RESET							(OC_LCB_CSRS + 0x000000000210)
#define OC_LCB_CFG_CRC_CNTR_RESET_RESETCSR						0x0000000000000000ull
#define OC_LCB_CFG_CRC_CNTR_RESET_UNUSED_63_17_SHIFT					17
#define OC_LCB_CFG_CRC_CNTR_RESET_UNUSED_63_17_MASK					0x7FFFFFFFFFFFull
#define OC_LCB_CFG_CRC_CNTR_RESET_UNUSED_63_17_SMASK					0xFFFFFFFFFFFE0000ull
#define OC_LCB_CFG_CRC_CNTR_RESET_HOLD_FEC_ERR_CNTRS_SHIFT				16
#define OC_LCB_CFG_CRC_CNTR_RESET_HOLD_FEC_ERR_CNTRS_MASK				0x1ull
#define OC_LCB_CFG_CRC_CNTR_RESET_HOLD_FEC_ERR_CNTRS_SMASK				0x10000ull
#define OC_LCB_CFG_CRC_CNTR_RESET_UNUSED_15_13_SHIFT					13
#define OC_LCB_CFG_CRC_CNTR_RESET_UNUSED_15_13_MASK					0x7ull
#define OC_LCB_CFG_CRC_CNTR_RESET_UNUSED_15_13_SMASK					0xE000ull
#define OC_LCB_CFG_CRC_CNTR_RESET_CLR_FEC_ERR_CNTRS_SHIFT				12
#define OC_LCB_CFG_CRC_CNTR_RESET_CLR_FEC_ERR_CNTRS_MASK				0x1ull
#define OC_LCB_CFG_CRC_CNTR_RESET_CLR_FEC_ERR_CNTRS_SMASK				0x1000ull
#define OC_LCB_CFG_CRC_CNTR_RESET_UNUSED_11_9_SHIFT					9
#define OC_LCB_CFG_CRC_CNTR_RESET_UNUSED_11_9_MASK					0x7ull
#define OC_LCB_CFG_CRC_CNTR_RESET_UNUSED_11_9_SMASK					0xE00ull
#define OC_LCB_CFG_CRC_CNTR_RESET_CLR_SEQ_CRC_ERR_CNTRS_SHIFT				8
#define OC_LCB_CFG_CRC_CNTR_RESET_CLR_SEQ_CRC_ERR_CNTRS_MASK				0x1ull
#define OC_LCB_CFG_CRC_CNTR_RESET_CLR_SEQ_CRC_ERR_CNTRS_SMASK				0x100ull
#define OC_LCB_CFG_CRC_CNTR_RESET_UNUSED_7_5_SHIFT					5
#define OC_LCB_CFG_CRC_CNTR_RESET_UNUSED_7_5_MASK					0x7ull
#define OC_LCB_CFG_CRC_CNTR_RESET_UNUSED_7_5_SMASK					0xE0ull
#define OC_LCB_CFG_CRC_CNTR_RESET_HOLD_CRC_ERR_CNTRS_SHIFT				4
#define OC_LCB_CFG_CRC_CNTR_RESET_HOLD_CRC_ERR_CNTRS_MASK				0x1ull
#define OC_LCB_CFG_CRC_CNTR_RESET_HOLD_CRC_ERR_CNTRS_SMASK				0x10ull
#define OC_LCB_CFG_CRC_CNTR_RESET_UNUSED_3_1_SHIFT					1
#define OC_LCB_CFG_CRC_CNTR_RESET_UNUSED_3_1_MASK					0x7ull
#define OC_LCB_CFG_CRC_CNTR_RESET_UNUSED_3_1_SMASK					0xEull
#define OC_LCB_CFG_CRC_CNTR_RESET_CLR_CRC_ERR_CNTRS_SHIFT				0
#define OC_LCB_CFG_CRC_CNTR_RESET_CLR_CRC_ERR_CNTRS_MASK				0x1ull
#define OC_LCB_CFG_CRC_CNTR_RESET_CLR_CRC_ERR_CNTRS_SMASK				0x1ull
/*
* Table #36 of oc_lcb_csrs - LCB_CFG_LINK_KILL_EN
* This register controls whether a particular error condition will take the link 
* down. It has a 1:1 correspondence with the error flags. See #%%#Section 
* 30.28.50, 'LCB_ERR_STS'#%%# for error flag definitions.
*/
#define OC_LCB_CFG_LINK_KILL_EN								(OC_LCB_CSRS + 0x000000000218)
#define OC_LCB_CFG_LINK_KILL_EN_RESETCSR						0x000000000B14DE00ull
#define OC_LCB_CFG_LINK_KILL_EN_UNUSED_63_33_SHIFT					33
#define OC_LCB_CFG_LINK_KILL_EN_UNUSED_63_33_MASK					0x7FFFFFFFull
#define OC_LCB_CFG_LINK_KILL_EN_UNUSED_63_33_SMASK					0xFFFFFFFE00000000ull
#define OC_LCB_CFG_LINK_KILL_EN_FEC_ERR_CNT_HIT_LIMIT_SHIFT				32
#define OC_LCB_CFG_LINK_KILL_EN_FEC_ERR_CNT_HIT_LIMIT_MASK				0x1ull
#define OC_LCB_CFG_LINK_KILL_EN_FEC_ERR_CNT_HIT_LIMIT_SMASK				0x100000000ull
#define OC_LCB_CFG_LINK_KILL_EN_PM_SBE_SHIFT						31
#define OC_LCB_CFG_LINK_KILL_EN_PM_SBE_MASK						0x1ull
#define OC_LCB_CFG_LINK_KILL_EN_PM_SBE_SMASK						0x80000000ull
#define OC_LCB_CFG_LINK_KILL_EN_PM_MBE_SHIFT						30
#define OC_LCB_CFG_LINK_KILL_EN_PM_MBE_MASK						0x1ull
#define OC_LCB_CFG_LINK_KILL_EN_PM_MBE_SMASK						0x40000000ull
#define OC_LCB_CFG_LINK_KILL_EN_CSR_CPORT_ADDRESS_MISS_SHIFT				29
#define OC_LCB_CFG_LINK_KILL_EN_CSR_CPORT_ADDRESS_MISS_MASK				0x1ull
#define OC_LCB_CFG_LINK_KILL_EN_CSR_CPORT_ADDRESS_MISS_SMASK				0x20000000ull
#define OC_LCB_CFG_LINK_KILL_EN_CSR_CHAIN_PARITY_ERR_SHIFT				28
#define OC_LCB_CFG_LINK_KILL_EN_CSR_CHAIN_PARITY_ERR_MASK				0x1ull
#define OC_LCB_CFG_LINK_KILL_EN_CSR_CHAIN_PARITY_ERR_SMASK				0x10000000ull
#define OC_LCB_CFG_LINK_KILL_EN_QUARANTINE_SHIFT					27
#define OC_LCB_CFG_LINK_KILL_EN_QUARANTINE_MASK						0x1ull
#define OC_LCB_CFG_LINK_KILL_EN_QUARANTINE_SMASK					0x8000000ull
#define OC_LCB_CFG_LINK_KILL_EN_UNEXPECTED_MASTER_TIME_FLIT_SHIFT			26
#define OC_LCB_CFG_LINK_KILL_EN_UNEXPECTED_MASTER_TIME_FLIT_MASK			0x1ull
#define OC_LCB_CFG_LINK_KILL_EN_UNEXPECTED_MASTER_TIME_FLIT_SMASK			0x4000000ull
#define OC_LCB_CFG_LINK_KILL_EN_NEG_EDGE_LINK_TRANSFER_ACTIVE_SHIFT			25
#define OC_LCB_CFG_LINK_KILL_EN_NEG_EDGE_LINK_TRANSFER_ACTIVE_MASK			0x1ull
#define OC_LCB_CFG_LINK_KILL_EN_NEG_EDGE_LINK_TRANSFER_ACTIVE_SMASK			0x2000000ull
#define OC_LCB_CFG_LINK_KILL_EN_HOLD_REINIT_SHIFT					24
#define OC_LCB_CFG_LINK_KILL_EN_HOLD_REINIT_MASK					0x1ull
#define OC_LCB_CFG_LINK_KILL_EN_HOLD_REINIT_SMASK					0x1000000ull
#define OC_LCB_CFG_LINK_KILL_EN_RST_FOR_INCOMPLT_RND_TRIP_SHIFT				23
#define OC_LCB_CFG_LINK_KILL_EN_RST_FOR_INCOMPLT_RND_TRIP_MASK				0x1ull
#define OC_LCB_CFG_LINK_KILL_EN_RST_FOR_INCOMPLT_RND_TRIP_SMASK				0x800000ull
#define OC_LCB_CFG_LINK_KILL_EN_RST_FOR_LINK_TIMEOUT_SHIFT				22
#define OC_LCB_CFG_LINK_KILL_EN_RST_FOR_LINK_TIMEOUT_MASK				0x1ull
#define OC_LCB_CFG_LINK_KILL_EN_RST_FOR_LINK_TIMEOUT_SMASK				0x400000ull
#define OC_LCB_CFG_LINK_KILL_EN_REPLAY_BUF_SBE_SHIFT					21
#define OC_LCB_CFG_LINK_KILL_EN_REPLAY_BUF_SBE_MASK					0x1ull
#define OC_LCB_CFG_LINK_KILL_EN_REPLAY_BUF_SBE_SMASK					0x200000ull
#define OC_LCB_CFG_LINK_KILL_EN_REPLAY_BUF_MBE_SHIFT					20
#define OC_LCB_CFG_LINK_KILL_EN_REPLAY_BUF_MBE_MASK					0x1ull
#define OC_LCB_CFG_LINK_KILL_EN_REPLAY_BUF_MBE_SMASK					0x100000ull
#define OC_LCB_CFG_LINK_KILL_EN_FLIT_INPUT_BUF_SBE_SHIFT				19
#define OC_LCB_CFG_LINK_KILL_EN_FLIT_INPUT_BUF_SBE_MASK					0x1ull
#define OC_LCB_CFG_LINK_KILL_EN_FLIT_INPUT_BUF_SBE_SMASK				0x80000ull
#define OC_LCB_CFG_LINK_KILL_EN_FLIT_INPUT_BUF_MBE_SHIFT				18
#define OC_LCB_CFG_LINK_KILL_EN_FLIT_INPUT_BUF_MBE_MASK					0x1ull
#define OC_LCB_CFG_LINK_KILL_EN_FLIT_INPUT_BUF_MBE_SMASK				0x40000ull
#define OC_LCB_CFG_LINK_KILL_EN_VL_ACK_INPUT_WRONG_CRC_MODE_SHIFT			17
#define OC_LCB_CFG_LINK_KILL_EN_VL_ACK_INPUT_WRONG_CRC_MODE_MASK			0x1ull
#define OC_LCB_CFG_LINK_KILL_EN_VL_ACK_INPUT_WRONG_CRC_MODE_SMASK			0x20000ull
#define OC_LCB_CFG_LINK_KILL_EN_VL_ACK_INPUT_PARITY_ERR_SHIFT				16
#define OC_LCB_CFG_LINK_KILL_EN_VL_ACK_INPUT_PARITY_ERR_MASK				0x1ull
#define OC_LCB_CFG_LINK_KILL_EN_VL_ACK_INPUT_PARITY_ERR_SMASK				0x10000ull
#define OC_LCB_CFG_LINK_KILL_EN_VL_ACK_INPUT_BUF_OFLW_SHIFT				15
#define OC_LCB_CFG_LINK_KILL_EN_VL_ACK_INPUT_BUF_OFLW_MASK				0x1ull
#define OC_LCB_CFG_LINK_KILL_EN_VL_ACK_INPUT_BUF_OFLW_SMASK				0x8000ull
#define OC_LCB_CFG_LINK_KILL_EN_FLIT_INPUT_BUF_OFLW_SHIFT				14
#define OC_LCB_CFG_LINK_KILL_EN_FLIT_INPUT_BUF_OFLW_MASK				0x1ull
#define OC_LCB_CFG_LINK_KILL_EN_FLIT_INPUT_BUF_OFLW_SMASK				0x4000ull
#define OC_LCB_CFG_LINK_KILL_EN_ILLEGAL_FLIT_ENCODING_SHIFT				13
#define OC_LCB_CFG_LINK_KILL_EN_ILLEGAL_FLIT_ENCODING_MASK				0x1ull
#define OC_LCB_CFG_LINK_KILL_EN_ILLEGAL_FLIT_ENCODING_SMASK				0x2000ull
#define OC_LCB_CFG_LINK_KILL_EN_ILLEGAL_NULL_LTP_SHIFT					12
#define OC_LCB_CFG_LINK_KILL_EN_ILLEGAL_NULL_LTP_MASK					0x1ull
#define OC_LCB_CFG_LINK_KILL_EN_ILLEGAL_NULL_LTP_SMASK					0x1000ull
#define OC_LCB_CFG_LINK_KILL_EN_UNEXPECTED_ROUND_TRIP_MARKER_SHIFT			11
#define OC_LCB_CFG_LINK_KILL_EN_UNEXPECTED_ROUND_TRIP_MARKER_MASK			0x1ull
#define OC_LCB_CFG_LINK_KILL_EN_UNEXPECTED_ROUND_TRIP_MARKER_SMASK			0x800ull
#define OC_LCB_CFG_LINK_KILL_EN_UNEXPECTED_REPLAY_MARKER_SHIFT				10
#define OC_LCB_CFG_LINK_KILL_EN_UNEXPECTED_REPLAY_MARKER_MASK				0x1ull
#define OC_LCB_CFG_LINK_KILL_EN_UNEXPECTED_REPLAY_MARKER_SMASK				0x400ull
#define OC_LCB_CFG_LINK_KILL_EN_RCLK_STOPPED_SHIFT					9
#define OC_LCB_CFG_LINK_KILL_EN_RCLK_STOPPED_MASK					0x1ull
#define OC_LCB_CFG_LINK_KILL_EN_RCLK_STOPPED_SMASK					0x200ull
#define OC_LCB_CFG_LINK_KILL_EN_CRC_ERR_CNT_HIT_LIMIT_SHIFT				8
#define OC_LCB_CFG_LINK_KILL_EN_CRC_ERR_CNT_HIT_LIMIT_MASK				0x1ull
#define OC_LCB_CFG_LINK_KILL_EN_CRC_ERR_CNT_HIT_LIMIT_SMASK				0x100ull
#define OC_LCB_CFG_LINK_KILL_EN_REINIT_FOR_LN_DEGRADE_SHIFT				7
#define OC_LCB_CFG_LINK_KILL_EN_REINIT_FOR_LN_DEGRADE_MASK				0x1ull
#define OC_LCB_CFG_LINK_KILL_EN_REINIT_FOR_LN_DEGRADE_SMASK				0x80ull
#define OC_LCB_CFG_LINK_KILL_EN_REINIT_FROM_PEER_SHIFT					6
#define OC_LCB_CFG_LINK_KILL_EN_REINIT_FROM_PEER_MASK					0x1ull
#define OC_LCB_CFG_LINK_KILL_EN_REINIT_FROM_PEER_SMASK					0x40ull
#define OC_LCB_CFG_LINK_KILL_EN_SEQ_CRC_ERR_SHIFT					5
#define OC_LCB_CFG_LINK_KILL_EN_SEQ_CRC_ERR_MASK					0x1ull
#define OC_LCB_CFG_LINK_KILL_EN_SEQ_CRC_ERR_SMASK					0x20ull
#define OC_LCB_CFG_LINK_KILL_EN_RX_LESS_THAN_FOUR_LNS_SHIFT				4
#define OC_LCB_CFG_LINK_KILL_EN_RX_LESS_THAN_FOUR_LNS_MASK				0x1ull
#define OC_LCB_CFG_LINK_KILL_EN_RX_LESS_THAN_FOUR_LNS_SMASK				0x10ull
#define OC_LCB_CFG_LINK_KILL_EN_TX_LESS_THAN_FOUR_LNS_SHIFT				3
#define OC_LCB_CFG_LINK_KILL_EN_TX_LESS_THAN_FOUR_LNS_MASK				0x1ull
#define OC_LCB_CFG_LINK_KILL_EN_TX_LESS_THAN_FOUR_LNS_SMASK				0x8ull
#define OC_LCB_CFG_LINK_KILL_EN_LOST_REINIT_STALL_OR_TOS_SHIFT				2
#define OC_LCB_CFG_LINK_KILL_EN_LOST_REINIT_STALL_OR_TOS_MASK				0x1ull
#define OC_LCB_CFG_LINK_KILL_EN_LOST_REINIT_STALL_OR_TOS_SMASK				0x4ull
#define OC_LCB_CFG_LINK_KILL_EN_ALL_LNS_FAILED_REINIT_TEST_SHIFT			1
#define OC_LCB_CFG_LINK_KILL_EN_ALL_LNS_FAILED_REINIT_TEST_MASK				0x1ull
#define OC_LCB_CFG_LINK_KILL_EN_ALL_LNS_FAILED_REINIT_TEST_SMASK			0x2ull
#define OC_LCB_CFG_LINK_KILL_EN_RST_FOR_FAILED_DESKEW_SHIFT				0
#define OC_LCB_CFG_LINK_KILL_EN_RST_FOR_FAILED_DESKEW_MASK				0x1ull
#define OC_LCB_CFG_LINK_KILL_EN_RST_FOR_FAILED_DESKEW_SMASK				0x1ull
/*
* Table #37 of oc_lcb_csrs - LCB_CFG_ALLOW_LINK_UP
* The 8051 will set this when it receives a link transfer active back channel 
* idle message from the peer. This is used by the logic that generates the 
* o_lcb_fpe_link_pair_active signal. o_lcb_fpe_link_pair_active = 
* lcb_sts_link_transfer_active_val && lcb_cfg_allow_link_up_val.
*/
#define OC_LCB_CFG_ALLOW_LINK_UP							(OC_LCB_CSRS + 0x000000000220)
#define OC_LCB_CFG_ALLOW_LINK_UP_RESETCSR						0x0000000000000000ull
#define OC_LCB_CFG_ALLOW_LINK_UP_UNUSED_63_1_SHIFT					1
#define OC_LCB_CFG_ALLOW_LINK_UP_UNUSED_63_1_MASK					0x7FFFFFFFFFFFFFFFull
#define OC_LCB_CFG_ALLOW_LINK_UP_UNUSED_63_1_SMASK					0xFFFFFFFFFFFFFFFEull
#define OC_LCB_CFG_ALLOW_LINK_UP_VAL_SHIFT						0
#define OC_LCB_CFG_ALLOW_LINK_UP_VAL_MASK						0x1ull
#define OC_LCB_CFG_ALLOW_LINK_UP_VAL_SMASK						0x1ull
/*
* Table #38 of oc_lcb_csrs - LCB_CFG_LED
* This register controls the port LED. The rate in which the LED blinks can be 
* controlled via hardware or 
*/
#define OC_LCB_CFG_LED									(OC_LCB_CSRS + 0x000000000228)
#define OC_LCB_CFG_LED_RESETCSR								0x000000000000001Full
#define OC_LCB_CFG_LED_UNUSED_63_9_SHIFT						9
#define OC_LCB_CFG_LED_UNUSED_63_9_MASK							0x7FFFFFFFFFFFFFull
#define OC_LCB_CFG_LED_UNUSED_63_9_SMASK						0xFFFFFFFFFFFFFE00ull
#define OC_LCB_CFG_LED_INVERT_POLARITY_SHIFT						8
#define OC_LCB_CFG_LED_INVERT_POLARITY_MASK						0x1ull
#define OC_LCB_CFG_LED_INVERT_POLARITY_SMASK						0x100ull
#define OC_LCB_CFG_LED_UNUSED_7_5_SHIFT							5
#define OC_LCB_CFG_LED_UNUSED_7_5_MASK							0x7ull
#define OC_LCB_CFG_LED_UNUSED_7_5_SMASK							0xE0ull
#define OC_LCB_CFG_LED_CNTRL_SHIFT							4
#define OC_LCB_CFG_LED_CNTRL_MASK							0x1ull
#define OC_LCB_CFG_LED_CNTRL_SMASK							0x10ull
#define OC_LCB_CFG_LED_SW_BLINK_RATE_SHIFT						0
#define OC_LCB_CFG_LED_SW_BLINK_RATE_MASK						0xFull
#define OC_LCB_CFG_LED_SW_BLINK_RATE_SMASK						0xFull
/*
* Table #39 of oc_lcb_csrs - LCB_CFG_LINK_PARTNER_GEN
* This register is used to select whether the link partner is Gen1 vs 
* Gen2.
*/
#define OC_LCB_CFG_LINK_PARTNER_GEN							(OC_LCB_CSRS + 0x000000000230)
#define OC_LCB_CFG_LINK_PARTNER_GEN_RESETCSR						0x0000000000011111ull
#define OC_LCB_CFG_LINK_PARTNER_GEN_UNUSED_63_17_SHIFT					17
#define OC_LCB_CFG_LINK_PARTNER_GEN_UNUSED_63_17_MASK					0x7FFFFFFFFFFFull
#define OC_LCB_CFG_LINK_PARTNER_GEN_UNUSED_63_17_SMASK					0xFFFFFFFFFFFE0000ull
#define OC_LCB_CFG_LINK_PARTNER_GEN_GRAY_SHIFT						16
#define OC_LCB_CFG_LINK_PARTNER_GEN_GRAY_MASK						0x1ull
#define OC_LCB_CFG_LINK_PARTNER_GEN_GRAY_SMASK						0x10000ull
#define OC_LCB_CFG_LINK_PARTNER_GEN_UNUSED_15_13_SHIFT					13
#define OC_LCB_CFG_LINK_PARTNER_GEN_UNUSED_15_13_MASK					0x7ull
#define OC_LCB_CFG_LINK_PARTNER_GEN_UNUSED_15_13_SMASK					0xE000ull
#define OC_LCB_CFG_LINK_PARTNER_GEN_PRQS_SHIFT						12
#define OC_LCB_CFG_LINK_PARTNER_GEN_PRQS_MASK						0x1ull
#define OC_LCB_CFG_LINK_PARTNER_GEN_PRQS_SMASK						0x1000ull
#define OC_LCB_CFG_LINK_PARTNER_GEN_UNUSED_11_9_SHIFT					9
#define OC_LCB_CFG_LINK_PARTNER_GEN_UNUSED_11_9_MASK					0x7ull
#define OC_LCB_CFG_LINK_PARTNER_GEN_UNUSED_11_9_SMASK					0xE00ull
#define OC_LCB_CFG_LINK_PARTNER_GEN_PAT2_SHIFT						8
#define OC_LCB_CFG_LINK_PARTNER_GEN_PAT2_MASK						0x1ull
#define OC_LCB_CFG_LINK_PARTNER_GEN_PAT2_SMASK						0x100ull
#define OC_LCB_CFG_LINK_PARTNER_GEN_UNUSED_7_5_SHIFT					5
#define OC_LCB_CFG_LINK_PARTNER_GEN_UNUSED_7_5_MASK					0x7ull
#define OC_LCB_CFG_LINK_PARTNER_GEN_UNUSED_7_5_SMASK					0xE0ull
#define OC_LCB_CFG_LINK_PARTNER_GEN_SCR_SHIFT						4
#define OC_LCB_CFG_LINK_PARTNER_GEN_SCR_MASK						0x1ull
#define OC_LCB_CFG_LINK_PARTNER_GEN_SCR_SMASK						0x10ull
#define OC_LCB_CFG_LINK_PARTNER_GEN_UNUSED_3_1_SHIFT					1
#define OC_LCB_CFG_LINK_PARTNER_GEN_UNUSED_3_1_MASK					0x7ull
#define OC_LCB_CFG_LINK_PARTNER_GEN_UNUSED_3_1_SMASK					0xEull
#define OC_LCB_CFG_LINK_PARTNER_GEN_GEN2_SHIFT						0
#define OC_LCB_CFG_LINK_PARTNER_GEN_GEN2_MASK						0x1ull
#define OC_LCB_CFG_LINK_PARTNER_GEN_GEN2_SMASK						0x1ull
/*
* Table #40 of oc_lcb_csrs - LCB_CFG_REPLAY_PROTOCOL
* This register is used to select the Gen1 vs. Gen2 replay protocol.
*/
#define OC_LCB_CFG_REPLAY_PROTOCOL							(OC_LCB_CSRS + 0x000000000238)
#define OC_LCB_CFG_REPLAY_PROTOCOL_RESETCSR						0x0000000000004401ull
#define OC_LCB_CFG_REPLAY_PROTOCOL_UNUSED_63_16_SHIFT					16
#define OC_LCB_CFG_REPLAY_PROTOCOL_UNUSED_63_16_MASK					0xFFFFFFFFFFFFull
#define OC_LCB_CFG_REPLAY_PROTOCOL_UNUSED_63_16_SMASK					0xFFFFFFFFFFFF0000ull
#define OC_LCB_CFG_REPLAY_PROTOCOL_UNUSED_15_SHIFT					15
#define OC_LCB_CFG_REPLAY_PROTOCOL_UNUSED_15_MASK					0x1ull
#define OC_LCB_CFG_REPLAY_PROTOCOL_UNUSED_15_SMASK					0x8000ull
#define OC_LCB_CFG_REPLAY_PROTOCOL_REINIT_NULL_CNT_MAX_SHIFT				12
#define OC_LCB_CFG_REPLAY_PROTOCOL_REINIT_NULL_CNT_MAX_MASK				0x7ull
#define OC_LCB_CFG_REPLAY_PROTOCOL_REINIT_NULL_CNT_MAX_SMASK				0x7000ull
#define OC_LCB_CFG_REPLAY_PROTOCOL_UNUSED_11_SHIFT					11
#define OC_LCB_CFG_REPLAY_PROTOCOL_UNUSED_11_MASK					0x1ull
#define OC_LCB_CFG_REPLAY_PROTOCOL_UNUSED_11_SMASK					0x800ull
#define OC_LCB_CFG_REPLAY_PROTOCOL_RESYNC_NULL_CNT_MAX_SHIFT				8
#define OC_LCB_CFG_REPLAY_PROTOCOL_RESYNC_NULL_CNT_MAX_MASK				0x7ull
#define OC_LCB_CFG_REPLAY_PROTOCOL_RESYNC_NULL_CNT_MAX_SMASK				0x700ull
#define OC_LCB_CFG_REPLAY_PROTOCOL_UNUSED_7_5_SHIFT					5
#define OC_LCB_CFG_REPLAY_PROTOCOL_UNUSED_7_5_MASK					0x7ull
#define OC_LCB_CFG_REPLAY_PROTOCOL_UNUSED_7_5_SMASK					0xE0ull
#define OC_LCB_CFG_REPLAY_PROTOCOL_USE_RETRYSEQNUM_SHIFT				4
#define OC_LCB_CFG_REPLAY_PROTOCOL_USE_RETRYSEQNUM_MASK					0x1ull
#define OC_LCB_CFG_REPLAY_PROTOCOL_USE_RETRYSEQNUM_SMASK				0x10ull
#define OC_LCB_CFG_REPLAY_PROTOCOL_UNUSED_3_1_SHIFT					1
#define OC_LCB_CFG_REPLAY_PROTOCOL_UNUSED_3_1_MASK					0x7ull
#define OC_LCB_CFG_REPLAY_PROTOCOL_UNUSED_3_1_SMASK					0xEull
#define OC_LCB_CFG_REPLAY_PROTOCOL_GEN2_SHIFT						0
#define OC_LCB_CFG_REPLAY_PROTOCOL_GEN2_MASK						0x1ull
#define OC_LCB_CFG_REPLAY_PROTOCOL_GEN2_SMASK						0x1ull
/*
* Table #41 of oc_lcb_csrs - LCB_CFG_PORT_MIRROR
* Configure the port mirror function.
*/
#define OC_LCB_CFG_PORT_MIRROR								(OC_LCB_CSRS + 0x000000000240)
#define OC_LCB_CFG_PORT_MIRROR_RESETCSR							0x0000000000000000ull
#define OC_LCB_CFG_PORT_MIRROR_UNUSED_63_10_SHIFT					10
#define OC_LCB_CFG_PORT_MIRROR_UNUSED_63_10_MASK					0x3FFFFFFFFFFFFFull
#define OC_LCB_CFG_PORT_MIRROR_UNUSED_63_10_SMASK					0xFFFFFFFFFFFFFC00ull
#define OC_LCB_CFG_PORT_MIRROR_UP_MIRROR_SW_SHIFT					9
#define OC_LCB_CFG_PORT_MIRROR_UP_MIRROR_SW_MASK					0x1ull
#define OC_LCB_CFG_PORT_MIRROR_UP_MIRROR_SW_SMASK					0x200ull
#define OC_LCB_CFG_PORT_MIRROR_UP_MIRROR_NE_SHIFT					8
#define OC_LCB_CFG_PORT_MIRROR_UP_MIRROR_NE_MASK					0x1ull
#define OC_LCB_CFG_PORT_MIRROR_UP_MIRROR_NE_SMASK					0x100ull
#define OC_LCB_CFG_PORT_MIRROR_UNUSED_7_6_SHIFT						6
#define OC_LCB_CFG_PORT_MIRROR_UNUSED_7_6_MASK						0x3ull
#define OC_LCB_CFG_PORT_MIRROR_UNUSED_7_6_SMASK						0xC0ull
#define OC_LCB_CFG_PORT_MIRROR_DN_MIRROR_SW_SHIFT					5
#define OC_LCB_CFG_PORT_MIRROR_DN_MIRROR_SW_MASK					0x1ull
#define OC_LCB_CFG_PORT_MIRROR_DN_MIRROR_SW_SMASK					0x20ull
#define OC_LCB_CFG_PORT_MIRROR_DN_MIRROR_NE_SHIFT					4
#define OC_LCB_CFG_PORT_MIRROR_DN_MIRROR_NE_MASK					0x1ull
#define OC_LCB_CFG_PORT_MIRROR_DN_MIRROR_NE_SMASK					0x10ull
#define OC_LCB_CFG_PORT_MIRROR_RX_LUT_NE_SHIFT						3
#define OC_LCB_CFG_PORT_MIRROR_RX_LUT_NE_MASK						0x1ull
#define OC_LCB_CFG_PORT_MIRROR_RX_LUT_NE_SMASK						0x8ull
#define OC_LCB_CFG_PORT_MIRROR_TX_LUT_SW_SHIFT						2
#define OC_LCB_CFG_PORT_MIRROR_TX_LUT_SW_MASK						0x1ull
#define OC_LCB_CFG_PORT_MIRROR_TX_LUT_SW_SMASK						0x4ull
#define OC_LCB_CFG_PORT_MIRROR_RX_LUT_SW_SHIFT						1
#define OC_LCB_CFG_PORT_MIRROR_RX_LUT_SW_MASK						0x1ull
#define OC_LCB_CFG_PORT_MIRROR_RX_LUT_SW_SMASK						0x2ull
#define OC_LCB_CFG_PORT_MIRROR_TX_LUT_NE_SHIFT						0
#define OC_LCB_CFG_PORT_MIRROR_TX_LUT_NE_MASK						0x1ull
#define OC_LCB_CFG_PORT_MIRROR_TX_LUT_NE_SMASK						0x1ull
/*
* Table #42 of oc_lcb_csrs - LCB_CFG_TIME_SYNC_0
* Configure the time sync function. See #%%#Section 30.28.41, 'LCB_CFG_PORT_MIRROR'#%%# 
* for a description of how the mirror buses are connected to each 
* port.
*/
#define OC_LCB_CFG_TIME_SYNC_0								(OC_LCB_CSRS + 0x000000000248)
#define OC_LCB_CFG_TIME_SYNC_0_RESETCSR							0x0000000000100072ull
#define OC_LCB_CFG_TIME_SYNC_0_UNUSED_63_53_SHIFT					53
#define OC_LCB_CFG_TIME_SYNC_0_UNUSED_63_53_MASK					0x7FFull
#define OC_LCB_CFG_TIME_SYNC_0_UNUSED_63_53_SMASK					0xFFE0000000000000ull
#define OC_LCB_CFG_TIME_SYNC_0_RST_ART_CNTR_SHIFT					52
#define OC_LCB_CFG_TIME_SYNC_0_RST_ART_CNTR_MASK					0x1ull
#define OC_LCB_CFG_TIME_SYNC_0_RST_ART_CNTR_SMASK					0x10000000000000ull
#define OC_LCB_CFG_TIME_SYNC_0_UNUSED_51_49_SHIFT					49
#define OC_LCB_CFG_TIME_SYNC_0_UNUSED_51_49_MASK					0x7ull
#define OC_LCB_CFG_TIME_SYNC_0_UNUSED_51_49_SMASK					0xE000000000000ull
#define OC_LCB_CFG_TIME_SYNC_0_RST_LCL_CNTR_SHIFT					48
#define OC_LCB_CFG_TIME_SYNC_0_RST_LCL_CNTR_MASK					0x1ull
#define OC_LCB_CFG_TIME_SYNC_0_RST_LCL_CNTR_SMASK					0x1000000000000ull
#define OC_LCB_CFG_TIME_SYNC_0_SNAP_NOW_SHIFT						44
#define OC_LCB_CFG_TIME_SYNC_0_SNAP_NOW_MASK						0xFull
#define OC_LCB_CFG_TIME_SYNC_0_SNAP_NOW_SMASK						0xF00000000000ull
#define OC_LCB_CFG_TIME_SYNC_0_DISABLE_SNAPS_SHIFT					40
#define OC_LCB_CFG_TIME_SYNC_0_DISABLE_SNAPS_MASK					0xFull
#define OC_LCB_CFG_TIME_SYNC_0_DISABLE_SNAPS_SMASK					0xF0000000000ull
#define OC_LCB_CFG_TIME_SYNC_0_NE_DN_TREE_EN_SHIFT					36
#define OC_LCB_CFG_TIME_SYNC_0_NE_DN_TREE_EN_MASK					0xFull
#define OC_LCB_CFG_TIME_SYNC_0_NE_DN_TREE_EN_SMASK					0xF000000000ull
#define OC_LCB_CFG_TIME_SYNC_0_SW_DN_TREE_EN_SHIFT					32
#define OC_LCB_CFG_TIME_SYNC_0_SW_DN_TREE_EN_MASK					0xFull
#define OC_LCB_CFG_TIME_SYNC_0_SW_DN_TREE_EN_SMASK					0xF00000000ull
#define OC_LCB_CFG_TIME_SYNC_0_MASTER_DN_TREE_EN_SHIFT					28
#define OC_LCB_CFG_TIME_SYNC_0_MASTER_DN_TREE_EN_MASK					0xFull
#define OC_LCB_CFG_TIME_SYNC_0_MASTER_DN_TREE_EN_SMASK					0xF0000000ull
#define OC_LCB_CFG_TIME_SYNC_0_UP_TREE_EN_SHIFT						24
#define OC_LCB_CFG_TIME_SYNC_0_UP_TREE_EN_MASK						0xFull
#define OC_LCB_CFG_TIME_SYNC_0_UP_TREE_EN_SMASK						0xF000000ull
#define OC_LCB_CFG_TIME_SYNC_0_UNUSED_23_21_SHIFT					21
#define OC_LCB_CFG_TIME_SYNC_0_UNUSED_23_21_MASK					0x7ull
#define OC_LCB_CFG_TIME_SYNC_0_UNUSED_23_21_SMASK					0xE00000ull
#define OC_LCB_CFG_TIME_SYNC_0_MASTER_CAPABLE_SHIFT					20
#define OC_LCB_CFG_TIME_SYNC_0_MASTER_CAPABLE_MASK					0x1ull
#define OC_LCB_CFG_TIME_SYNC_0_MASTER_CAPABLE_SMASK					0x100000ull
#define OC_LCB_CFG_TIME_SYNC_0_UNUSED_19_17_SHIFT					17
#define OC_LCB_CFG_TIME_SYNC_0_UNUSED_19_17_MASK					0x7ull
#define OC_LCB_CFG_TIME_SYNC_0_UNUSED_19_17_SMASK					0xE0000ull
#define OC_LCB_CFG_TIME_SYNC_0_MASTER_ACTIVE_SHIFT					16
#define OC_LCB_CFG_TIME_SYNC_0_MASTER_ACTIVE_MASK					0x1ull
#define OC_LCB_CFG_TIME_SYNC_0_MASTER_ACTIVE_SMASK					0x10000ull
#define OC_LCB_CFG_TIME_SYNC_0_UNUSED_15_14_SHIFT					14
#define OC_LCB_CFG_TIME_SYNC_0_UNUSED_15_14_MASK					0x3ull
#define OC_LCB_CFG_TIME_SYNC_0_UNUSED_15_14_SMASK					0xC000ull
#define OC_LCB_CFG_TIME_SYNC_0_MASTER_ID_SHIFT						12
#define OC_LCB_CFG_TIME_SYNC_0_MASTER_ID_MASK						0x3ull
#define OC_LCB_CFG_TIME_SYNC_0_MASTER_ID_SMASK						0x3000ull
#define OC_LCB_CFG_TIME_SYNC_0_FLIT_GEN_PERIOD_SHIFT					0
#define OC_LCB_CFG_TIME_SYNC_0_FLIT_GEN_PERIOD_MASK					0xFFFull
#define OC_LCB_CFG_TIME_SYNC_0_FLIT_GEN_PERIOD_SMASK					0xFFFull
/*
* Table #43 of oc_lcb_csrs - LCB_CFG_TIME_SYNC_1
* Configure the time sync increment function. The local time tsyn_time is 
* advanced each clock, as defined in the following algorithm:
*/
#define OC_LCB_CFG_TIME_SYNC_1								(OC_LCB_CSRS + 0x000000000250)
#define OC_LCB_CFG_TIME_SYNC_1_RESETCSR							0x00000000D5555555ull
#define OC_LCB_CFG_TIME_SYNC_1_UNUSED_63_38_SHIFT					38
#define OC_LCB_CFG_TIME_SYNC_1_UNUSED_63_38_MASK					0x3FFFFFFull
#define OC_LCB_CFG_TIME_SYNC_1_UNUSED_63_38_SMASK					0xFFFFFFC000000000ull
#define OC_LCB_CFG_TIME_SYNC_1_TSYN_INC_SHIFT						0
#define OC_LCB_CFG_TIME_SYNC_1_TSYN_INC_MASK						0x3FFFFFFFFFull
#define OC_LCB_CFG_TIME_SYNC_1_TSYN_INC_SMASK						0x3FFFFFFFFFull
/*
* Table #44 of oc_lcb_csrs - LCB_CFG_TIME_SYNC_2
* Configure the time sync fine frequency adjust function.
*/
#define OC_LCB_CFG_TIME_SYNC_2								(OC_LCB_CSRS + 0x000000000258)
#define OC_LCB_CFG_TIME_SYNC_2_RESETCSR							0x0000000000000000ull
#define OC_LCB_CFG_TIME_SYNC_2_UNUSED_63_48_SHIFT					48
#define OC_LCB_CFG_TIME_SYNC_2_UNUSED_63_48_MASK					0xFFFFull
#define OC_LCB_CFG_TIME_SYNC_2_UNUSED_63_48_SMASK					0xFFFF000000000000ull
#define OC_LCB_CFG_TIME_SYNC_2_TSYN_ADJ_CNT_SHIFT					32
#define OC_LCB_CFG_TIME_SYNC_2_TSYN_ADJ_CNT_MASK					0xFFFFull
#define OC_LCB_CFG_TIME_SYNC_2_TSYN_ADJ_CNT_SMASK					0xFFFF00000000ull
#define OC_LCB_CFG_TIME_SYNC_2_TSYN_ADJ_SHIFT						0
#define OC_LCB_CFG_TIME_SYNC_2_TSYN_ADJ_MASK						0xFFFFFFFFull
#define OC_LCB_CFG_TIME_SYNC_2_TSYN_ADJ_SMASK						0xFFFFFFFFull
/*
* Table #45 of oc_lcb_csrs - LCB_CFG_BUBBLE_SQUASHING
* Enable for bubble squashing. Bubble squashing is disabled during 
* BIST(pat_gen_test) or when LCB_PG_CFG_RUN.EN = 1'b1. Bubble squashing must 
* also be disabled whenever a Gen1 port is the link partner.
*/
#define OC_LCB_CFG_BUBBLE_SQUASHING							(OC_LCB_CSRS + 0x000000000260)
#define OC_LCB_CFG_BUBBLE_SQUASHING_RESETCSR						0x0000000000000000ull
#define OC_LCB_CFG_BUBBLE_SQUASHING_UNUSED_63_1_SHIFT					1
#define OC_LCB_CFG_BUBBLE_SQUASHING_UNUSED_63_1_MASK					0x7FFFFFFFFFFFFFFFull
#define OC_LCB_CFG_BUBBLE_SQUASHING_UNUSED_63_1_SMASK					0xFFFFFFFFFFFFFFFEull
#define OC_LCB_CFG_BUBBLE_SQUASHING_EN_SHIFT						0
#define OC_LCB_CFG_BUBBLE_SQUASHING_EN_MASK						0x1ull
#define OC_LCB_CFG_BUBBLE_SQUASHING_EN_SMASK						0x1ull
/*
* Table #46 of oc_lcb_csrs - LCB_CFG_FEC_MODE
* This register sets the forward error correction (FEC) mode on the Tx side of 
* the link. The Rx side is informed via the initialization training pattern. 
* Different FEC modes can be set for each of the two link directions. There is a 
* fall back capability to use a configuration value on the Rx side instead of 
* the value delivered in the training pattern.
*/
#define OC_LCB_CFG_FEC_MODE								(OC_LCB_CSRS + 0x000000000268)
#define OC_LCB_CFG_FEC_MODE_RESETCSR							0x0000000000000000ull
#define OC_LCB_CFG_FEC_MODE_UNUSED_63_17_SHIFT						17
#define OC_LCB_CFG_FEC_MODE_UNUSED_63_17_MASK						0x7FFFFFFFFFFFull
#define OC_LCB_CFG_FEC_MODE_UNUSED_63_17_SMASK						0xFFFFFFFFFFFE0000ull
#define OC_LCB_CFG_FEC_MODE_UCERR_FEC_CTRS_SHIFT					16
#define OC_LCB_CFG_FEC_MODE_UCERR_FEC_CTRS_MASK						0x1ull
#define OC_LCB_CFG_FEC_MODE_UCERR_FEC_CTRS_SMASK					0x10000ull
#define OC_LCB_CFG_FEC_MODE_UNUSED_15_13_SHIFT						13
#define OC_LCB_CFG_FEC_MODE_UNUSED_15_13_MASK						0x7ull
#define OC_LCB_CFG_FEC_MODE_UNUSED_15_13_SMASK						0xE000ull
#define OC_LCB_CFG_FEC_MODE_DISABLE_DEC_ERR_SHIFT					12
#define OC_LCB_CFG_FEC_MODE_DISABLE_DEC_ERR_MASK					0x1ull
#define OC_LCB_CFG_FEC_MODE_DISABLE_DEC_ERR_SMASK					0x1000ull
#define OC_LCB_CFG_FEC_MODE_UNUSED_11_10_SHIFT						10
#define OC_LCB_CFG_FEC_MODE_UNUSED_11_10_MASK						0x3ull
#define OC_LCB_CFG_FEC_MODE_UNUSED_11_10_SMASK						0xC00ull
#define OC_LCB_CFG_FEC_MODE_RX_VAL_SHIFT						8
#define OC_LCB_CFG_FEC_MODE_RX_VAL_MASK							0x3ull
#define OC_LCB_CFG_FEC_MODE_RX_VAL_SMASK						0x300ull
#define OC_LCB_CFG_FEC_MODE_UNUSED_7_5_SHIFT						5
#define OC_LCB_CFG_FEC_MODE_UNUSED_7_5_MASK						0x7ull
#define OC_LCB_CFG_FEC_MODE_UNUSED_7_5_SMASK						0xE0ull
#define OC_LCB_CFG_FEC_MODE_USE_RX_CFG_VAL_SHIFT					4
#define OC_LCB_CFG_FEC_MODE_USE_RX_CFG_VAL_MASK						0x1ull
#define OC_LCB_CFG_FEC_MODE_USE_RX_CFG_VAL_SMASK					0x10ull
#define OC_LCB_CFG_FEC_MODE_UNUSED_3_2_SHIFT						2
#define OC_LCB_CFG_FEC_MODE_UNUSED_3_2_MASK						0x3ull
#define OC_LCB_CFG_FEC_MODE_UNUSED_3_2_SMASK						0xCull
#define OC_LCB_CFG_FEC_MODE_TX_VAL_SHIFT						0
#define OC_LCB_CFG_FEC_MODE_TX_VAL_MASK							0x3ull
#define OC_LCB_CFG_FEC_MODE_TX_VAL_SMASK						0x3ull
/*
* Table #47 of oc_lcb_csrs - LCB_CFG_FEC_INTERRUPT
* This register is used to configure which FEC error counter(s) is used to 
* monitor for a potential interrupt condition. The interrupt occurs when the 
* monitored error counter(s) reaches the number of errors in the ERR_CNT 
* field.
*/
#define OC_LCB_CFG_FEC_INTERRUPT							(OC_LCB_CSRS + 0x000000000270)
#define OC_LCB_CFG_FEC_INTERRUPT_RESETCSR						0x0000000000000064ull
#define OC_LCB_CFG_FEC_INTERRUPT_UNUSED_63_62_SHIFT					62
#define OC_LCB_CFG_FEC_INTERRUPT_UNUSED_63_62_MASK					0x3ull
#define OC_LCB_CFG_FEC_INTERRUPT_UNUSED_63_62_SMASK					0xC000000000000000ull
#define OC_LCB_CFG_FEC_INTERRUPT_MATCH_EN_SHIFT						48
#define OC_LCB_CFG_FEC_INTERRUPT_MATCH_EN_MASK						0x3FFFull
#define OC_LCB_CFG_FEC_INTERRUPT_MATCH_EN_SMASK						0x3FFF000000000000ull
#define OC_LCB_CFG_FEC_INTERRUPT_ERR_CNT_SHIFT						0
#define OC_LCB_CFG_FEC_INTERRUPT_ERR_CNT_MASK						0xFFFFFFFFFFFFull
#define OC_LCB_CFG_FEC_INTERRUPT_ERR_CNT_SMASK						0xFFFFFFFFFFFFull
/*
* Table #48 of oc_lcb_csrs - LCB_CFG_FEC_LN_DEGRADE
* This register is used to configure lane degrade(s) that can be triggered by 
* the FEC per lane error event counters. 
*/
#define OC_LCB_CFG_FEC_LN_DEGRADE							(OC_LCB_CSRS + 0x000000000278)
#define OC_LCB_CFG_FEC_LN_DEGRADE_RESETCSR						0x00004000100000D2ull
#define OC_LCB_CFG_FEC_LN_DEGRADE_WIN_LIM_SHIFT						32
#define OC_LCB_CFG_FEC_LN_DEGRADE_WIN_LIM_MASK						0xFFFFFFFFull
#define OC_LCB_CFG_FEC_LN_DEGRADE_WIN_LIM_SMASK						0xFFFFFFFF00000000ull
#define OC_LCB_CFG_FEC_LN_DEGRADE_DEGRADE_LIM_SHIFT					28
#define OC_LCB_CFG_FEC_LN_DEGRADE_DEGRADE_LIM_MASK					0xFull
#define OC_LCB_CFG_FEC_LN_DEGRADE_DEGRADE_LIM_SMASK					0xF0000000ull
#define OC_LCB_CFG_FEC_LN_DEGRADE_ERR_LIM_SHIFT						4
#define OC_LCB_CFG_FEC_LN_DEGRADE_ERR_LIM_MASK						0xFFFFFFull
#define OC_LCB_CFG_FEC_LN_DEGRADE_ERR_LIM_SMASK						0xFFFFFF0ull
#define OC_LCB_CFG_FEC_LN_DEGRADE_UNUSED_3_2_SHIFT					2
#define OC_LCB_CFG_FEC_LN_DEGRADE_UNUSED_3_2_MASK					0x3ull
#define OC_LCB_CFG_FEC_LN_DEGRADE_UNUSED_3_2_SMASK					0xCull
#define OC_LCB_CFG_FEC_LN_DEGRADE_SEQ_SHIFT						1
#define OC_LCB_CFG_FEC_LN_DEGRADE_SEQ_MASK						0x1ull
#define OC_LCB_CFG_FEC_LN_DEGRADE_SEQ_SMASK						0x2ull
#define OC_LCB_CFG_FEC_LN_DEGRADE_EN_SHIFT						0
#define OC_LCB_CFG_FEC_LN_DEGRADE_EN_MASK						0x1ull
#define OC_LCB_CFG_FEC_LN_DEGRADE_EN_SMASK						0x1ull
/*
* Table #49 of oc_lcb_csrs - LCB_CFG_MISCA
* This register is used to set miscellaneous configuration setting that are 
* unlikely to be needed. This can serve as a catch all for configuration needs 
* that arise late in the design process without adding a completely new 
* CSR.
*/
#define OC_LCB_CFG_MISCA								(OC_LCB_CSRS + 0x000000000280)
#define OC_LCB_CFG_MISCA_RESETCSR							0x000000A1050A0C08ull
#define OC_LCB_CFG_MISCA_UNUSED_63_41_SHIFT						41
#define OC_LCB_CFG_MISCA_UNUSED_63_41_MASK						0x7FFFFFull
#define OC_LCB_CFG_MISCA_UNUSED_63_41_SMASK						0xFFFFFE0000000000ull
#define OC_LCB_CFG_MISCA_REQUIRED_STALL_KILL_CNT_SHIFT					36
#define OC_LCB_CFG_MISCA_REQUIRED_STALL_KILL_CNT_MASK					0x1Full
#define OC_LCB_CFG_MISCA_REQUIRED_STALL_KILL_CNT_SMASK					0x1F000000000ull
#define OC_LCB_CFG_MISCA_UNUSED_35_33_SHIFT						33
#define OC_LCB_CFG_MISCA_UNUSED_35_33_MASK						0x7ull
#define OC_LCB_CFG_MISCA_UNUSED_35_33_SMASK						0xE00000000ull
#define OC_LCB_CFG_MISCA_LENIENT_FRAMING_SHIFT						32
#define OC_LCB_CFG_MISCA_LENIENT_FRAMING_MASK						0x1ull
#define OC_LCB_CFG_MISCA_LENIENT_FRAMING_SMASK						0x100000000ull
#define OC_LCB_CFG_MISCA_UNUSED_31_29_SHIFT						29
#define OC_LCB_CFG_MISCA_UNUSED_31_29_MASK						0x7ull
#define OC_LCB_CFG_MISCA_UNUSED_31_29_SMASK						0xE0000000ull
#define OC_LCB_CFG_MISCA_LANE_ID_DET_GEN2_SHIFT						24
#define OC_LCB_CFG_MISCA_LANE_ID_DET_GEN2_MASK						0x1Full
#define OC_LCB_CFG_MISCA_LANE_ID_DET_GEN2_SMASK						0x1F000000ull
#define OC_LCB_CFG_MISCA_UNUSED_23_21_SHIFT						21
#define OC_LCB_CFG_MISCA_UNUSED_23_21_MASK						0x7ull
#define OC_LCB_CFG_MISCA_UNUSED_23_21_SMASK						0xE00000ull
#define OC_LCB_CFG_MISCA_LANE_ID_DET_GEN1_SHIFT						16
#define OC_LCB_CFG_MISCA_LANE_ID_DET_GEN1_MASK						0x1Full
#define OC_LCB_CFG_MISCA_LANE_ID_DET_GEN1_SMASK						0x1F0000ull
#define OC_LCB_CFG_MISCA_UNUSED_15_13_SHIFT						13
#define OC_LCB_CFG_MISCA_UNUSED_15_13_MASK						0x7ull
#define OC_LCB_CFG_MISCA_UNUSED_15_13_SMASK						0xE000ull
#define OC_LCB_CFG_MISCA_REQUIRED_KILL_CNT_SHIFT					8
#define OC_LCB_CFG_MISCA_REQUIRED_KILL_CNT_MASK						0x1Full
#define OC_LCB_CFG_MISCA_REQUIRED_KILL_CNT_SMASK					0x1F00ull
#define OC_LCB_CFG_MISCA_UNUSED_7_6_SHIFT						6
#define OC_LCB_CFG_MISCA_UNUSED_7_6_MASK						0x3ull
#define OC_LCB_CFG_MISCA_UNUSED_7_6_SMASK						0xC0ull
#define OC_LCB_CFG_MISCA_REQUIRED_MODE_CNT_SHIFT					0
#define OC_LCB_CFG_MISCA_REQUIRED_MODE_CNT_MASK						0x3Full
#define OC_LCB_CFG_MISCA_REQUIRED_MODE_CNT_SMASK					0x3Full
/*
* Table #50 of oc_lcb_csrs - LCB_ERR_STS
* This is the error flag CSR.
*/
#define OC_LCB_ERR_STS									(OC_LCB_CSRS + 0x000000000480)
#define OC_LCB_ERR_STS_RESETCSR								0x0000000000000000ull
#define OC_LCB_ERR_STS_UNUSED_63_33_SHIFT						33
#define OC_LCB_ERR_STS_UNUSED_63_33_MASK						0x7FFFFFFFull
#define OC_LCB_ERR_STS_UNUSED_63_33_SMASK						0xFFFFFFFE00000000ull
#define OC_LCB_ERR_STS_FEC_ERR_CNT_HIT_LIMIT_SHIFT					32
#define OC_LCB_ERR_STS_FEC_ERR_CNT_HIT_LIMIT_MASK					0x1ull
#define OC_LCB_ERR_STS_FEC_ERR_CNT_HIT_LIMIT_SMASK					0x100000000ull
#define OC_LCB_ERR_STS_PM_SBE_SHIFT							31
#define OC_LCB_ERR_STS_PM_SBE_MASK							0x1ull
#define OC_LCB_ERR_STS_PM_SBE_SMASK							0x80000000ull
#define OC_LCB_ERR_STS_PM_MBE_SHIFT							30
#define OC_LCB_ERR_STS_PM_MBE_MASK							0x1ull
#define OC_LCB_ERR_STS_PM_MBE_SMASK							0x40000000ull
#define OC_LCB_ERR_STS_CSR_CPORT_ADDRESS_MISS_SHIFT					29
#define OC_LCB_ERR_STS_CSR_CPORT_ADDRESS_MISS_MASK					0x1ull
#define OC_LCB_ERR_STS_CSR_CPORT_ADDRESS_MISS_SMASK					0x20000000ull
#define OC_LCB_ERR_STS_CSR_CHAIN_PARITY_ERR_SHIFT					28
#define OC_LCB_ERR_STS_CSR_CHAIN_PARITY_ERR_MASK					0x1ull
#define OC_LCB_ERR_STS_CSR_CHAIN_PARITY_ERR_SMASK					0x10000000ull
#define OC_LCB_ERR_STS_QUARANTINE_SHIFT							27
#define OC_LCB_ERR_STS_QUARANTINE_MASK							0x1ull
#define OC_LCB_ERR_STS_QUARANTINE_SMASK							0x8000000ull
#define OC_LCB_ERR_STS_UNEXPECTED_MASTER_TIME_FLIT_SHIFT				26
#define OC_LCB_ERR_STS_UNEXPECTED_MASTER_TIME_FLIT_MASK					0x1ull
#define OC_LCB_ERR_STS_UNEXPECTED_MASTER_TIME_FLIT_SMASK				0x4000000ull
#define OC_LCB_ERR_STS_NEG_EDGE_LINK_TRANSFER_ACTIVE_SHIFT				25
#define OC_LCB_ERR_STS_NEG_EDGE_LINK_TRANSFER_ACTIVE_MASK				0x1ull
#define OC_LCB_ERR_STS_NEG_EDGE_LINK_TRANSFER_ACTIVE_SMASK				0x2000000ull
#define OC_LCB_ERR_STS_HOLD_REINIT_SHIFT						24
#define OC_LCB_ERR_STS_HOLD_REINIT_MASK							0x1ull
#define OC_LCB_ERR_STS_HOLD_REINIT_SMASK						0x1000000ull
#define OC_LCB_ERR_STS_RST_FOR_INCOMPLT_RND_TRIP_SHIFT					23
#define OC_LCB_ERR_STS_RST_FOR_INCOMPLT_RND_TRIP_MASK					0x1ull
#define OC_LCB_ERR_STS_RST_FOR_INCOMPLT_RND_TRIP_SMASK					0x800000ull
#define OC_LCB_ERR_STS_RST_FOR_LINK_TIMEOUT_SHIFT					22
#define OC_LCB_ERR_STS_RST_FOR_LINK_TIMEOUT_MASK					0x1ull
#define OC_LCB_ERR_STS_RST_FOR_LINK_TIMEOUT_SMASK					0x400000ull
#define OC_LCB_ERR_STS_REPLAY_BUF_SBE_SHIFT						21
#define OC_LCB_ERR_STS_REPLAY_BUF_SBE_MASK						0x1ull
#define OC_LCB_ERR_STS_REPLAY_BUF_SBE_SMASK						0x200000ull
#define OC_LCB_ERR_STS_REPLAY_BUF_MBE_SHIFT						20
#define OC_LCB_ERR_STS_REPLAY_BUF_MBE_MASK						0x1ull
#define OC_LCB_ERR_STS_REPLAY_BUF_MBE_SMASK						0x100000ull
#define OC_LCB_ERR_STS_FLIT_INPUT_BUF_SBE_SHIFT						19
#define OC_LCB_ERR_STS_FLIT_INPUT_BUF_SBE_MASK						0x1ull
#define OC_LCB_ERR_STS_FLIT_INPUT_BUF_SBE_SMASK						0x80000ull
#define OC_LCB_ERR_STS_FLIT_INPUT_BUF_MBE_SHIFT						18
#define OC_LCB_ERR_STS_FLIT_INPUT_BUF_MBE_MASK						0x1ull
#define OC_LCB_ERR_STS_FLIT_INPUT_BUF_MBE_SMASK						0x40000ull
#define OC_LCB_ERR_STS_VL_ACK_INPUT_WRONG_CRC_MODE_SHIFT				17
#define OC_LCB_ERR_STS_VL_ACK_INPUT_WRONG_CRC_MODE_MASK					0x1ull
#define OC_LCB_ERR_STS_VL_ACK_INPUT_WRONG_CRC_MODE_SMASK				0x20000ull
#define OC_LCB_ERR_STS_VL_ACK_INPUT_PARITY_ERR_SHIFT					16
#define OC_LCB_ERR_STS_VL_ACK_INPUT_PARITY_ERR_MASK					0x1ull
#define OC_LCB_ERR_STS_VL_ACK_INPUT_PARITY_ERR_SMASK					0x10000ull
#define OC_LCB_ERR_STS_VL_ACK_INPUT_BUF_OFLW_SHIFT					15
#define OC_LCB_ERR_STS_VL_ACK_INPUT_BUF_OFLW_MASK					0x1ull
#define OC_LCB_ERR_STS_VL_ACK_INPUT_BUF_OFLW_SMASK					0x8000ull
#define OC_LCB_ERR_STS_FLIT_INPUT_BUF_OFLW_SHIFT					14
#define OC_LCB_ERR_STS_FLIT_INPUT_BUF_OFLW_MASK						0x1ull
#define OC_LCB_ERR_STS_FLIT_INPUT_BUF_OFLW_SMASK					0x4000ull
#define OC_LCB_ERR_STS_ILLEGAL_FLIT_ENCODING_SHIFT					13
#define OC_LCB_ERR_STS_ILLEGAL_FLIT_ENCODING_MASK					0x1ull
#define OC_LCB_ERR_STS_ILLEGAL_FLIT_ENCODING_SMASK					0x2000ull
#define OC_LCB_ERR_STS_ILLEGAL_NULL_LTP_SHIFT						12
#define OC_LCB_ERR_STS_ILLEGAL_NULL_LTP_MASK						0x1ull
#define OC_LCB_ERR_STS_ILLEGAL_NULL_LTP_SMASK						0x1000ull
#define OC_LCB_ERR_STS_UNEXPECTED_ROUND_TRIP_MARKER_SHIFT				11
#define OC_LCB_ERR_STS_UNEXPECTED_ROUND_TRIP_MARKER_MASK				0x1ull
#define OC_LCB_ERR_STS_UNEXPECTED_ROUND_TRIP_MARKER_SMASK				0x800ull
#define OC_LCB_ERR_STS_UNEXPECTED_REPLAY_MARKER_SHIFT					10
#define OC_LCB_ERR_STS_UNEXPECTED_REPLAY_MARKER_MASK					0x1ull
#define OC_LCB_ERR_STS_UNEXPECTED_REPLAY_MARKER_SMASK					0x400ull
#define OC_LCB_ERR_STS_RCLK_STOPPED_SHIFT						9
#define OC_LCB_ERR_STS_RCLK_STOPPED_MASK						0x1ull
#define OC_LCB_ERR_STS_RCLK_STOPPED_SMASK						0x200ull
#define OC_LCB_ERR_STS_CRC_ERR_CNT_HIT_LIMIT_SHIFT					8
#define OC_LCB_ERR_STS_CRC_ERR_CNT_HIT_LIMIT_MASK					0x1ull
#define OC_LCB_ERR_STS_CRC_ERR_CNT_HIT_LIMIT_SMASK					0x100ull
#define OC_LCB_ERR_STS_REINIT_FOR_LN_DEGRADE_SHIFT					7
#define OC_LCB_ERR_STS_REINIT_FOR_LN_DEGRADE_MASK					0x1ull
#define OC_LCB_ERR_STS_REINIT_FOR_LN_DEGRADE_SMASK					0x80ull
#define OC_LCB_ERR_STS_REINIT_FROM_PEER_SHIFT						6
#define OC_LCB_ERR_STS_REINIT_FROM_PEER_MASK						0x1ull
#define OC_LCB_ERR_STS_REINIT_FROM_PEER_SMASK						0x40ull
#define OC_LCB_ERR_STS_SEQ_CRC_ERR_SHIFT						5
#define OC_LCB_ERR_STS_SEQ_CRC_ERR_MASK							0x1ull
#define OC_LCB_ERR_STS_SEQ_CRC_ERR_SMASK						0x20ull
#define OC_LCB_ERR_STS_RX_LESS_THAN_FOUR_LNS_SHIFT					4
#define OC_LCB_ERR_STS_RX_LESS_THAN_FOUR_LNS_MASK					0x1ull
#define OC_LCB_ERR_STS_RX_LESS_THAN_FOUR_LNS_SMASK					0x10ull
#define OC_LCB_ERR_STS_TX_LESS_THAN_FOUR_LNS_SHIFT					3
#define OC_LCB_ERR_STS_TX_LESS_THAN_FOUR_LNS_MASK					0x1ull
#define OC_LCB_ERR_STS_TX_LESS_THAN_FOUR_LNS_SMASK					0x8ull
#define OC_LCB_ERR_STS_LOST_REINIT_STALL_OR_TOS_SHIFT					2
#define OC_LCB_ERR_STS_LOST_REINIT_STALL_OR_TOS_MASK					0x1ull
#define OC_LCB_ERR_STS_LOST_REINIT_STALL_OR_TOS_SMASK					0x4ull
#define OC_LCB_ERR_STS_ALL_LNS_FAILED_REINIT_TEST_SHIFT					1
#define OC_LCB_ERR_STS_ALL_LNS_FAILED_REINIT_TEST_MASK					0x1ull
#define OC_LCB_ERR_STS_ALL_LNS_FAILED_REINIT_TEST_SMASK					0x2ull
#define OC_LCB_ERR_STS_RST_FOR_FAILED_DESKEW_SHIFT					0
#define OC_LCB_ERR_STS_RST_FOR_FAILED_DESKEW_MASK					0x1ull
#define OC_LCB_ERR_STS_RST_FOR_FAILED_DESKEW_SMASK					0x1ull
/*
* Table #51 of oc_lcb_csrs - LCB_ERR_CLR
* 
*/
#define OC_LCB_ERR_CLR									(OC_LCB_CSRS + 0x000000000488)
#define OC_LCB_ERR_CLR_RESETCSR								0x0000000000000000ull
#define OC_LCB_ERR_CLR_UNUSED_63_33_SHIFT						33
#define OC_LCB_ERR_CLR_UNUSED_63_33_MASK						0x7FFFFFFFull
#define OC_LCB_ERR_CLR_UNUSED_63_33_SMASK						0xFFFFFFFE00000000ull
#define OC_LCB_ERR_CLR_FEC_ERR_CNT_HIT_LIMIT_SHIFT					32
#define OC_LCB_ERR_CLR_FEC_ERR_CNT_HIT_LIMIT_MASK					0x1ull
#define OC_LCB_ERR_CLR_FEC_ERR_CNT_HIT_LIMIT_SMASK					0x100000000ull
#define OC_LCB_ERR_CLR_PM_SBE_SHIFT							31
#define OC_LCB_ERR_CLR_PM_SBE_MASK							0x1ull
#define OC_LCB_ERR_CLR_PM_SBE_SMASK							0x80000000ull
#define OC_LCB_ERR_CLR_PM_MBE_SHIFT							30
#define OC_LCB_ERR_CLR_PM_MBE_MASK							0x1ull
#define OC_LCB_ERR_CLR_PM_MBE_SMASK							0x40000000ull
#define OC_LCB_ERR_CLR_CSR_CPORT_ADDRESS_MISS_SHIFT					29
#define OC_LCB_ERR_CLR_CSR_CPORT_ADDRESS_MISS_MASK					0x1ull
#define OC_LCB_ERR_CLR_CSR_CPORT_ADDRESS_MISS_SMASK					0x20000000ull
#define OC_LCB_ERR_CLR_CSR_CHAIN_PARITY_ERR_SHIFT					28
#define OC_LCB_ERR_CLR_CSR_CHAIN_PARITY_ERR_MASK					0x1ull
#define OC_LCB_ERR_CLR_CSR_CHAIN_PARITY_ERR_SMASK					0x10000000ull
#define OC_LCB_ERR_CLR_QUARANTINE_SHIFT							27
#define OC_LCB_ERR_CLR_QUARANTINE_MASK							0x1ull
#define OC_LCB_ERR_CLR_QUARANTINE_SMASK							0x8000000ull
#define OC_LCB_ERR_CLR_UNEXPECTED_MASTER_TIME_FLIT_SHIFT				26
#define OC_LCB_ERR_CLR_UNEXPECTED_MASTER_TIME_FLIT_MASK					0x1ull
#define OC_LCB_ERR_CLR_UNEXPECTED_MASTER_TIME_FLIT_SMASK				0x4000000ull
#define OC_LCB_ERR_CLR_NEG_EDGE_LINK_TRANSFER_ACTIVE_SHIFT				25
#define OC_LCB_ERR_CLR_NEG_EDGE_LINK_TRANSFER_ACTIVE_MASK				0x1ull
#define OC_LCB_ERR_CLR_NEG_EDGE_LINK_TRANSFER_ACTIVE_SMASK				0x2000000ull
#define OC_LCB_ERR_CLR_HOLD_REINIT_SHIFT						24
#define OC_LCB_ERR_CLR_HOLD_REINIT_MASK							0x1ull
#define OC_LCB_ERR_CLR_HOLD_REINIT_SMASK						0x1000000ull
#define OC_LCB_ERR_CLR_RST_FOR_INCOMPLT_RND_TRIP_SHIFT					23
#define OC_LCB_ERR_CLR_RST_FOR_INCOMPLT_RND_TRIP_MASK					0x1ull
#define OC_LCB_ERR_CLR_RST_FOR_INCOMPLT_RND_TRIP_SMASK					0x800000ull
#define OC_LCB_ERR_CLR_RST_FOR_LINK_TIMEOUT_SHIFT					22
#define OC_LCB_ERR_CLR_RST_FOR_LINK_TIMEOUT_MASK					0x1ull
#define OC_LCB_ERR_CLR_RST_FOR_LINK_TIMEOUT_SMASK					0x400000ull
#define OC_LCB_ERR_CLR_REPLAY_BUF_SBE_SHIFT						21
#define OC_LCB_ERR_CLR_REPLAY_BUF_SBE_MASK						0x1ull
#define OC_LCB_ERR_CLR_REPLAY_BUF_SBE_SMASK						0x200000ull
#define OC_LCB_ERR_CLR_REPLAY_BUF_MBE_SHIFT						20
#define OC_LCB_ERR_CLR_REPLAY_BUF_MBE_MASK						0x1ull
#define OC_LCB_ERR_CLR_REPLAY_BUF_MBE_SMASK						0x100000ull
#define OC_LCB_ERR_CLR_FLIT_INPUT_BUF_SBE_SHIFT						19
#define OC_LCB_ERR_CLR_FLIT_INPUT_BUF_SBE_MASK						0x1ull
#define OC_LCB_ERR_CLR_FLIT_INPUT_BUF_SBE_SMASK						0x80000ull
#define OC_LCB_ERR_CLR_FLIT_INPUT_BUF_MBE_SHIFT						18
#define OC_LCB_ERR_CLR_FLIT_INPUT_BUF_MBE_MASK						0x1ull
#define OC_LCB_ERR_CLR_FLIT_INPUT_BUF_MBE_SMASK						0x40000ull
#define OC_LCB_ERR_CLR_VL_ACK_INPUT_WRONG_CRC_MODE_SHIFT				17
#define OC_LCB_ERR_CLR_VL_ACK_INPUT_WRONG_CRC_MODE_MASK					0x1ull
#define OC_LCB_ERR_CLR_VL_ACK_INPUT_WRONG_CRC_MODE_SMASK				0x20000ull
#define OC_LCB_ERR_CLR_VL_ACK_INPUT_PARITY_ERR_SHIFT					16
#define OC_LCB_ERR_CLR_VL_ACK_INPUT_PARITY_ERR_MASK					0x1ull
#define OC_LCB_ERR_CLR_VL_ACK_INPUT_PARITY_ERR_SMASK					0x10000ull
#define OC_LCB_ERR_CLR_VL_ACK_INPUT_BUF_OFLW_SHIFT					15
#define OC_LCB_ERR_CLR_VL_ACK_INPUT_BUF_OFLW_MASK					0x1ull
#define OC_LCB_ERR_CLR_VL_ACK_INPUT_BUF_OFLW_SMASK					0x8000ull
#define OC_LCB_ERR_CLR_FLIT_INPUT_BUF_OFLW_SHIFT					14
#define OC_LCB_ERR_CLR_FLIT_INPUT_BUF_OFLW_MASK						0x1ull
#define OC_LCB_ERR_CLR_FLIT_INPUT_BUF_OFLW_SMASK					0x4000ull
#define OC_LCB_ERR_CLR_ILLEGAL_FLIT_ENCODING_SHIFT					13
#define OC_LCB_ERR_CLR_ILLEGAL_FLIT_ENCODING_MASK					0x1ull
#define OC_LCB_ERR_CLR_ILLEGAL_FLIT_ENCODING_SMASK					0x2000ull
#define OC_LCB_ERR_CLR_ILLEGAL_NULL_LTP_SHIFT						12
#define OC_LCB_ERR_CLR_ILLEGAL_NULL_LTP_MASK						0x1ull
#define OC_LCB_ERR_CLR_ILLEGAL_NULL_LTP_SMASK						0x1000ull
#define OC_LCB_ERR_CLR_UNEXPECTED_ROUND_TRIP_MARKER_SHIFT				11
#define OC_LCB_ERR_CLR_UNEXPECTED_ROUND_TRIP_MARKER_MASK				0x1ull
#define OC_LCB_ERR_CLR_UNEXPECTED_ROUND_TRIP_MARKER_SMASK				0x800ull
#define OC_LCB_ERR_CLR_UNEXPECTED_REPLAY_MARKER_SHIFT					10
#define OC_LCB_ERR_CLR_UNEXPECTED_REPLAY_MARKER_MASK					0x1ull
#define OC_LCB_ERR_CLR_UNEXPECTED_REPLAY_MARKER_SMASK					0x400ull
#define OC_LCB_ERR_CLR_RCLK_STOPPED_SHIFT						9
#define OC_LCB_ERR_CLR_RCLK_STOPPED_MASK						0x1ull
#define OC_LCB_ERR_CLR_RCLK_STOPPED_SMASK						0x200ull
#define OC_LCB_ERR_CLR_CRC_ERR_CNT_HIT_LIMIT_SHIFT					8
#define OC_LCB_ERR_CLR_CRC_ERR_CNT_HIT_LIMIT_MASK					0x1ull
#define OC_LCB_ERR_CLR_CRC_ERR_CNT_HIT_LIMIT_SMASK					0x100ull
#define OC_LCB_ERR_CLR_REINIT_FOR_LN_DEGRADE_SHIFT					7
#define OC_LCB_ERR_CLR_REINIT_FOR_LN_DEGRADE_MASK					0x1ull
#define OC_LCB_ERR_CLR_REINIT_FOR_LN_DEGRADE_SMASK					0x80ull
#define OC_LCB_ERR_CLR_REINIT_FROM_PEER_SHIFT						6
#define OC_LCB_ERR_CLR_REINIT_FROM_PEER_MASK						0x1ull
#define OC_LCB_ERR_CLR_REINIT_FROM_PEER_SMASK						0x40ull
#define OC_LCB_ERR_CLR_SEQ_CRC_ERR_SHIFT						5
#define OC_LCB_ERR_CLR_SEQ_CRC_ERR_MASK							0x1ull
#define OC_LCB_ERR_CLR_SEQ_CRC_ERR_SMASK						0x20ull
#define OC_LCB_ERR_CLR_RX_LESS_THAN_FOUR_LNS_SHIFT					4
#define OC_LCB_ERR_CLR_RX_LESS_THAN_FOUR_LNS_MASK					0x1ull
#define OC_LCB_ERR_CLR_RX_LESS_THAN_FOUR_LNS_SMASK					0x10ull
#define OC_LCB_ERR_CLR_TX_LESS_THAN_FOUR_LNS_SHIFT					3
#define OC_LCB_ERR_CLR_TX_LESS_THAN_FOUR_LNS_MASK					0x1ull
#define OC_LCB_ERR_CLR_TX_LESS_THAN_FOUR_LNS_SMASK					0x8ull
#define OC_LCB_ERR_CLR_LOST_REINIT_STALL_OR_TOS_SHIFT					2
#define OC_LCB_ERR_CLR_LOST_REINIT_STALL_OR_TOS_MASK					0x1ull
#define OC_LCB_ERR_CLR_LOST_REINIT_STALL_OR_TOS_SMASK					0x4ull
#define OC_LCB_ERR_CLR_ALL_LNS_FAILED_REINIT_TEST_SHIFT					1
#define OC_LCB_ERR_CLR_ALL_LNS_FAILED_REINIT_TEST_MASK					0x1ull
#define OC_LCB_ERR_CLR_ALL_LNS_FAILED_REINIT_TEST_SMASK					0x2ull
#define OC_LCB_ERR_CLR_RST_FOR_FAILED_DESKEW_SHIFT					0
#define OC_LCB_ERR_CLR_RST_FOR_FAILED_DESKEW_MASK					0x1ull
#define OC_LCB_ERR_CLR_RST_FOR_FAILED_DESKEW_SMASK					0x1ull
/*
* Table #52 of oc_lcb_csrs - LCB_ERR_FRC
* 
*/
#define OC_LCB_ERR_FRC									(OC_LCB_CSRS + 0x000000000490)
#define OC_LCB_ERR_FRC_RESETCSR								0x0000000000000000ull
#define OC_LCB_ERR_FRC_UNUSED_63_33_SHIFT						33
#define OC_LCB_ERR_FRC_UNUSED_63_33_MASK						0x7FFFFFFFull
#define OC_LCB_ERR_FRC_UNUSED_63_33_SMASK						0xFFFFFFFE00000000ull
#define OC_LCB_ERR_FRC_FEC_ERR_CNT_HIT_LIMIT_SHIFT					32
#define OC_LCB_ERR_FRC_FEC_ERR_CNT_HIT_LIMIT_MASK					0x1ull
#define OC_LCB_ERR_FRC_FEC_ERR_CNT_HIT_LIMIT_SMASK					0x100000000ull
#define OC_LCB_ERR_FRC_PM_SBE_SHIFT							31
#define OC_LCB_ERR_FRC_PM_SBE_MASK							0x1ull
#define OC_LCB_ERR_FRC_PM_SBE_SMASK							0x80000000ull
#define OC_LCB_ERR_FRC_PM_MBE_SHIFT							30
#define OC_LCB_ERR_FRC_PM_MBE_MASK							0x1ull
#define OC_LCB_ERR_FRC_PM_MBE_SMASK							0x40000000ull
#define OC_LCB_ERR_FRC_CSR_CPORT_ADDRESS_MISS_SHIFT					29
#define OC_LCB_ERR_FRC_CSR_CPORT_ADDRESS_MISS_MASK					0x1ull
#define OC_LCB_ERR_FRC_CSR_CPORT_ADDRESS_MISS_SMASK					0x20000000ull
#define OC_LCB_ERR_FRC_CSR_CHAIN_PARITY_ERR_SHIFT					28
#define OC_LCB_ERR_FRC_CSR_CHAIN_PARITY_ERR_MASK					0x1ull
#define OC_LCB_ERR_FRC_CSR_CHAIN_PARITY_ERR_SMASK					0x10000000ull
#define OC_LCB_ERR_FRC_QUARANTINE_SHIFT							27
#define OC_LCB_ERR_FRC_QUARANTINE_MASK							0x1ull
#define OC_LCB_ERR_FRC_QUARANTINE_SMASK							0x8000000ull
#define OC_LCB_ERR_FRC_UNEXPECTED_MASTER_TIME_FLIT_SHIFT				26
#define OC_LCB_ERR_FRC_UNEXPECTED_MASTER_TIME_FLIT_MASK					0x1ull
#define OC_LCB_ERR_FRC_UNEXPECTED_MASTER_TIME_FLIT_SMASK				0x4000000ull
#define OC_LCB_ERR_FRC_NEG_EDGE_LINK_TRANSFER_ACTIVE_SHIFT				25
#define OC_LCB_ERR_FRC_NEG_EDGE_LINK_TRANSFER_ACTIVE_MASK				0x1ull
#define OC_LCB_ERR_FRC_NEG_EDGE_LINK_TRANSFER_ACTIVE_SMASK				0x2000000ull
#define OC_LCB_ERR_FRC_HOLD_REINIT_SHIFT						24
#define OC_LCB_ERR_FRC_HOLD_REINIT_MASK							0x1ull
#define OC_LCB_ERR_FRC_HOLD_REINIT_SMASK						0x1000000ull
#define OC_LCB_ERR_FRC_RST_FOR_INCOMPLT_RND_TRIP_SHIFT					23
#define OC_LCB_ERR_FRC_RST_FOR_INCOMPLT_RND_TRIP_MASK					0x1ull
#define OC_LCB_ERR_FRC_RST_FOR_INCOMPLT_RND_TRIP_SMASK					0x800000ull
#define OC_LCB_ERR_FRC_RST_FOR_LINK_TIMEOUT_SHIFT					22
#define OC_LCB_ERR_FRC_RST_FOR_LINK_TIMEOUT_MASK					0x1ull
#define OC_LCB_ERR_FRC_RST_FOR_LINK_TIMEOUT_SMASK					0x400000ull
#define OC_LCB_ERR_FRC_REPLAY_BUF_SBE_SHIFT						21
#define OC_LCB_ERR_FRC_REPLAY_BUF_SBE_MASK						0x1ull
#define OC_LCB_ERR_FRC_REPLAY_BUF_SBE_SMASK						0x200000ull
#define OC_LCB_ERR_FRC_REPLAY_BUF_MBE_SHIFT						20
#define OC_LCB_ERR_FRC_REPLAY_BUF_MBE_MASK						0x1ull
#define OC_LCB_ERR_FRC_REPLAY_BUF_MBE_SMASK						0x100000ull
#define OC_LCB_ERR_FRC_FLIT_INPUT_BUF_SBE_SHIFT						19
#define OC_LCB_ERR_FRC_FLIT_INPUT_BUF_SBE_MASK						0x1ull
#define OC_LCB_ERR_FRC_FLIT_INPUT_BUF_SBE_SMASK						0x80000ull
#define OC_LCB_ERR_FRC_FLIT_INPUT_BUF_MBE_SHIFT						18
#define OC_LCB_ERR_FRC_FLIT_INPUT_BUF_MBE_MASK						0x1ull
#define OC_LCB_ERR_FRC_FLIT_INPUT_BUF_MBE_SMASK						0x40000ull
#define OC_LCB_ERR_FRC_VL_ACK_INPUT_WRONG_CRC_MODE_SHIFT				17
#define OC_LCB_ERR_FRC_VL_ACK_INPUT_WRONG_CRC_MODE_MASK					0x1ull
#define OC_LCB_ERR_FRC_VL_ACK_INPUT_WRONG_CRC_MODE_SMASK				0x20000ull
#define OC_LCB_ERR_FRC_VL_ACK_INPUT_PARITY_ERR_SHIFT					16
#define OC_LCB_ERR_FRC_VL_ACK_INPUT_PARITY_ERR_MASK					0x1ull
#define OC_LCB_ERR_FRC_VL_ACK_INPUT_PARITY_ERR_SMASK					0x10000ull
#define OC_LCB_ERR_FRC_VL_ACK_INPUT_BUF_OFLW_SHIFT					15
#define OC_LCB_ERR_FRC_VL_ACK_INPUT_BUF_OFLW_MASK					0x1ull
#define OC_LCB_ERR_FRC_VL_ACK_INPUT_BUF_OFLW_SMASK					0x8000ull
#define OC_LCB_ERR_FRC_FLIT_INPUT_BUF_OFLW_SHIFT					14
#define OC_LCB_ERR_FRC_FLIT_INPUT_BUF_OFLW_MASK						0x1ull
#define OC_LCB_ERR_FRC_FLIT_INPUT_BUF_OFLW_SMASK					0x4000ull
#define OC_LCB_ERR_FRC_ILLEGAL_FLIT_ENCODING_SHIFT					13
#define OC_LCB_ERR_FRC_ILLEGAL_FLIT_ENCODING_MASK					0x1ull
#define OC_LCB_ERR_FRC_ILLEGAL_FLIT_ENCODING_SMASK					0x2000ull
#define OC_LCB_ERR_FRC_ILLEGAL_NULL_LTP_SHIFT						12
#define OC_LCB_ERR_FRC_ILLEGAL_NULL_LTP_MASK						0x1ull
#define OC_LCB_ERR_FRC_ILLEGAL_NULL_LTP_SMASK						0x1000ull
#define OC_LCB_ERR_FRC_UNEXPECTED_ROUND_TRIP_MARKER_SHIFT				11
#define OC_LCB_ERR_FRC_UNEXPECTED_ROUND_TRIP_MARKER_MASK				0x1ull
#define OC_LCB_ERR_FRC_UNEXPECTED_ROUND_TRIP_MARKER_SMASK				0x800ull
#define OC_LCB_ERR_FRC_UNEXPECTED_REPLAY_MARKER_SHIFT					10
#define OC_LCB_ERR_FRC_UNEXPECTED_REPLAY_MARKER_MASK					0x1ull
#define OC_LCB_ERR_FRC_UNEXPECTED_REPLAY_MARKER_SMASK					0x400ull
#define OC_LCB_ERR_FRC_RCLK_STOPPED_SHIFT						9
#define OC_LCB_ERR_FRC_RCLK_STOPPED_MASK						0x1ull
#define OC_LCB_ERR_FRC_RCLK_STOPPED_SMASK						0x200ull
#define OC_LCB_ERR_FRC_CRC_ERR_CNT_HIT_LIMIT_SHIFT					8
#define OC_LCB_ERR_FRC_CRC_ERR_CNT_HIT_LIMIT_MASK					0x1ull
#define OC_LCB_ERR_FRC_CRC_ERR_CNT_HIT_LIMIT_SMASK					0x100ull
#define OC_LCB_ERR_FRC_REINIT_FOR_LN_DEGRADE_SHIFT					7
#define OC_LCB_ERR_FRC_REINIT_FOR_LN_DEGRADE_MASK					0x1ull
#define OC_LCB_ERR_FRC_REINIT_FOR_LN_DEGRADE_SMASK					0x80ull
#define OC_LCB_ERR_FRC_REINIT_FROM_PEER_SHIFT						6
#define OC_LCB_ERR_FRC_REINIT_FROM_PEER_MASK						0x1ull
#define OC_LCB_ERR_FRC_REINIT_FROM_PEER_SMASK						0x40ull
#define OC_LCB_ERR_FRC_SEQ_CRC_ERR_SHIFT						5
#define OC_LCB_ERR_FRC_SEQ_CRC_ERR_MASK							0x1ull
#define OC_LCB_ERR_FRC_SEQ_CRC_ERR_SMASK						0x20ull
#define OC_LCB_ERR_FRC_RX_LESS_THAN_FOUR_LNS_SHIFT					4
#define OC_LCB_ERR_FRC_RX_LESS_THAN_FOUR_LNS_MASK					0x1ull
#define OC_LCB_ERR_FRC_RX_LESS_THAN_FOUR_LNS_SMASK					0x10ull
#define OC_LCB_ERR_FRC_TX_LESS_THAN_FOUR_LNS_SHIFT					3
#define OC_LCB_ERR_FRC_TX_LESS_THAN_FOUR_LNS_MASK					0x1ull
#define OC_LCB_ERR_FRC_TX_LESS_THAN_FOUR_LNS_SMASK					0x8ull
#define OC_LCB_ERR_FRC_LOST_REINIT_STALL_OR_TOS_SHIFT					2
#define OC_LCB_ERR_FRC_LOST_REINIT_STALL_OR_TOS_MASK					0x1ull
#define OC_LCB_ERR_FRC_LOST_REINIT_STALL_OR_TOS_SMASK					0x4ull
#define OC_LCB_ERR_FRC_ALL_LNS_FAILED_REINIT_TEST_SHIFT					1
#define OC_LCB_ERR_FRC_ALL_LNS_FAILED_REINIT_TEST_MASK					0x1ull
#define OC_LCB_ERR_FRC_ALL_LNS_FAILED_REINIT_TEST_SMASK					0x2ull
#define OC_LCB_ERR_FRC_RST_FOR_FAILED_DESKEW_SHIFT					0
#define OC_LCB_ERR_FRC_RST_FOR_FAILED_DESKEW_MASK					0x1ull
#define OC_LCB_ERR_FRC_RST_FOR_FAILED_DESKEW_SMASK					0x1ull
/*
* Table #53 of oc_lcb_csrs - LCB_ERR_EN_HOST
* This register is used to enable interrupts for the associated error flag. See 
* #%%#Section 30.28.50, 'LCB_ERR_STS'#%%# for error flag definitions.
*/
#define OC_LCB_ERR_EN_HOST								(OC_LCB_CSRS + 0x000000000498)
#define OC_LCB_ERR_EN_HOST_RESETCSR							0x0000000000000000ull
#define OC_LCB_ERR_EN_HOST_UNUSED_63_33_SHIFT						33
#define OC_LCB_ERR_EN_HOST_UNUSED_63_33_MASK						0x7FFFFFFFull
#define OC_LCB_ERR_EN_HOST_UNUSED_63_33_SMASK						0xFFFFFFFE00000000ull
#define OC_LCB_ERR_EN_HOST_FEC_ERR_CNT_HIT_LIMIT_SHIFT					32
#define OC_LCB_ERR_EN_HOST_FEC_ERR_CNT_HIT_LIMIT_MASK					0x1ull
#define OC_LCB_ERR_EN_HOST_FEC_ERR_CNT_HIT_LIMIT_SMASK					0x100000000ull
#define OC_LCB_ERR_EN_HOST_PM_SBE_SHIFT							31
#define OC_LCB_ERR_EN_HOST_PM_SBE_MASK							0x1ull
#define OC_LCB_ERR_EN_HOST_PM_SBE_SMASK							0x80000000ull
#define OC_LCB_ERR_EN_HOST_PM_MBE_SHIFT							30
#define OC_LCB_ERR_EN_HOST_PM_MBE_MASK							0x1ull
#define OC_LCB_ERR_EN_HOST_PM_MBE_SMASK							0x40000000ull
#define OC_LCB_ERR_EN_HOST_CSR_CPORT_ADDRESS_MISS_SHIFT					29
#define OC_LCB_ERR_EN_HOST_CSR_CPORT_ADDRESS_MISS_MASK					0x1ull
#define OC_LCB_ERR_EN_HOST_CSR_CPORT_ADDRESS_MISS_SMASK					0x20000000ull
#define OC_LCB_ERR_EN_HOST_CSR_CHAIN_PARITY_ERR_SHIFT					28
#define OC_LCB_ERR_EN_HOST_CSR_CHAIN_PARITY_ERR_MASK					0x1ull
#define OC_LCB_ERR_EN_HOST_CSR_CHAIN_PARITY_ERR_SMASK					0x10000000ull
#define OC_LCB_ERR_EN_HOST_QUARANTINE_SHIFT						27
#define OC_LCB_ERR_EN_HOST_QUARANTINE_MASK						0x1ull
#define OC_LCB_ERR_EN_HOST_QUARANTINE_SMASK						0x8000000ull
#define OC_LCB_ERR_EN_HOST_UNEXPECTED_MASTER_TIME_FLIT_SHIFT				26
#define OC_LCB_ERR_EN_HOST_UNEXPECTED_MASTER_TIME_FLIT_MASK				0x1ull
#define OC_LCB_ERR_EN_HOST_UNEXPECTED_MASTER_TIME_FLIT_SMASK				0x4000000ull
#define OC_LCB_ERR_EN_HOST_NEG_EDGE_LINK_TRANSFER_ACTIVE_SHIFT				25
#define OC_LCB_ERR_EN_HOST_NEG_EDGE_LINK_TRANSFER_ACTIVE_MASK				0x1ull
#define OC_LCB_ERR_EN_HOST_NEG_EDGE_LINK_TRANSFER_ACTIVE_SMASK				0x2000000ull
#define OC_LCB_ERR_EN_HOST_HOLD_REINIT_SHIFT						24
#define OC_LCB_ERR_EN_HOST_HOLD_REINIT_MASK						0x1ull
#define OC_LCB_ERR_EN_HOST_HOLD_REINIT_SMASK						0x1000000ull
#define OC_LCB_ERR_EN_HOST_RST_FOR_INCOMPLT_RND_TRIP_SHIFT				23
#define OC_LCB_ERR_EN_HOST_RST_FOR_INCOMPLT_RND_TRIP_MASK				0x1ull
#define OC_LCB_ERR_EN_HOST_RST_FOR_INCOMPLT_RND_TRIP_SMASK				0x800000ull
#define OC_LCB_ERR_EN_HOST_RST_FOR_LINK_TIMEOUT_SHIFT					22
#define OC_LCB_ERR_EN_HOST_RST_FOR_LINK_TIMEOUT_MASK					0x1ull
#define OC_LCB_ERR_EN_HOST_RST_FOR_LINK_TIMEOUT_SMASK					0x400000ull
#define OC_LCB_ERR_EN_HOST_REPLAY_BUF_SBE_SHIFT						21
#define OC_LCB_ERR_EN_HOST_REPLAY_BUF_SBE_MASK						0x1ull
#define OC_LCB_ERR_EN_HOST_REPLAY_BUF_SBE_SMASK						0x200000ull
#define OC_LCB_ERR_EN_HOST_REPLAY_BUF_MBE_SHIFT						20
#define OC_LCB_ERR_EN_HOST_REPLAY_BUF_MBE_MASK						0x1ull
#define OC_LCB_ERR_EN_HOST_REPLAY_BUF_MBE_SMASK						0x100000ull
#define OC_LCB_ERR_EN_HOST_FLIT_INPUT_BUF_SBE_SHIFT					19
#define OC_LCB_ERR_EN_HOST_FLIT_INPUT_BUF_SBE_MASK					0x1ull
#define OC_LCB_ERR_EN_HOST_FLIT_INPUT_BUF_SBE_SMASK					0x80000ull
#define OC_LCB_ERR_EN_HOST_FLIT_INPUT_BUF_MBE_SHIFT					18
#define OC_LCB_ERR_EN_HOST_FLIT_INPUT_BUF_MBE_MASK					0x1ull
#define OC_LCB_ERR_EN_HOST_FLIT_INPUT_BUF_MBE_SMASK					0x40000ull
#define OC_LCB_ERR_EN_HOST_VL_ACK_INPUT_WRONG_CRC_MODE_SHIFT				17
#define OC_LCB_ERR_EN_HOST_VL_ACK_INPUT_WRONG_CRC_MODE_MASK				0x1ull
#define OC_LCB_ERR_EN_HOST_VL_ACK_INPUT_WRONG_CRC_MODE_SMASK				0x20000ull
#define OC_LCB_ERR_EN_HOST_VL_ACK_INPUT_PARITY_ERR_SHIFT				16
#define OC_LCB_ERR_EN_HOST_VL_ACK_INPUT_PARITY_ERR_MASK					0x1ull
#define OC_LCB_ERR_EN_HOST_VL_ACK_INPUT_PARITY_ERR_SMASK				0x10000ull
#define OC_LCB_ERR_EN_HOST_VL_ACK_INPUT_BUF_OFLW_SHIFT					15
#define OC_LCB_ERR_EN_HOST_VL_ACK_INPUT_BUF_OFLW_MASK					0x1ull
#define OC_LCB_ERR_EN_HOST_VL_ACK_INPUT_BUF_OFLW_SMASK					0x8000ull
#define OC_LCB_ERR_EN_HOST_FLIT_INPUT_BUF_OFLW_SHIFT					14
#define OC_LCB_ERR_EN_HOST_FLIT_INPUT_BUF_OFLW_MASK					0x1ull
#define OC_LCB_ERR_EN_HOST_FLIT_INPUT_BUF_OFLW_SMASK					0x4000ull
#define OC_LCB_ERR_EN_HOST_ILLEGAL_FLIT_ENCODING_SHIFT					13
#define OC_LCB_ERR_EN_HOST_ILLEGAL_FLIT_ENCODING_MASK					0x1ull
#define OC_LCB_ERR_EN_HOST_ILLEGAL_FLIT_ENCODING_SMASK					0x2000ull
#define OC_LCB_ERR_EN_HOST_ILLEGAL_NULL_LTP_SHIFT					12
#define OC_LCB_ERR_EN_HOST_ILLEGAL_NULL_LTP_MASK					0x1ull
#define OC_LCB_ERR_EN_HOST_ILLEGAL_NULL_LTP_SMASK					0x1000ull
#define OC_LCB_ERR_EN_HOST_UNEXPECTED_ROUND_TRIP_MARKER_SHIFT				11
#define OC_LCB_ERR_EN_HOST_UNEXPECTED_ROUND_TRIP_MARKER_MASK				0x1ull
#define OC_LCB_ERR_EN_HOST_UNEXPECTED_ROUND_TRIP_MARKER_SMASK				0x800ull
#define OC_LCB_ERR_EN_HOST_UNEXPECTED_REPLAY_MARKER_SHIFT				10
#define OC_LCB_ERR_EN_HOST_UNEXPECTED_REPLAY_MARKER_MASK				0x1ull
#define OC_LCB_ERR_EN_HOST_UNEXPECTED_REPLAY_MARKER_SMASK				0x400ull
#define OC_LCB_ERR_EN_HOST_RCLK_STOPPED_SHIFT						9
#define OC_LCB_ERR_EN_HOST_RCLK_STOPPED_MASK						0x1ull
#define OC_LCB_ERR_EN_HOST_RCLK_STOPPED_SMASK						0x200ull
#define OC_LCB_ERR_EN_HOST_CRC_ERR_CNT_HIT_LIMIT_SHIFT					8
#define OC_LCB_ERR_EN_HOST_CRC_ERR_CNT_HIT_LIMIT_MASK					0x1ull
#define OC_LCB_ERR_EN_HOST_CRC_ERR_CNT_HIT_LIMIT_SMASK					0x100ull
#define OC_LCB_ERR_EN_HOST_REINIT_FOR_LN_DEGRADE_SHIFT					7
#define OC_LCB_ERR_EN_HOST_REINIT_FOR_LN_DEGRADE_MASK					0x1ull
#define OC_LCB_ERR_EN_HOST_REINIT_FOR_LN_DEGRADE_SMASK					0x80ull
#define OC_LCB_ERR_EN_HOST_REINIT_FROM_PEER_SHIFT					6
#define OC_LCB_ERR_EN_HOST_REINIT_FROM_PEER_MASK					0x1ull
#define OC_LCB_ERR_EN_HOST_REINIT_FROM_PEER_SMASK					0x40ull
#define OC_LCB_ERR_EN_HOST_SEQ_CRC_ERR_SHIFT						5
#define OC_LCB_ERR_EN_HOST_SEQ_CRC_ERR_MASK						0x1ull
#define OC_LCB_ERR_EN_HOST_SEQ_CRC_ERR_SMASK						0x20ull
#define OC_LCB_ERR_EN_HOST_RX_LESS_THAN_FOUR_LNS_SHIFT					4
#define OC_LCB_ERR_EN_HOST_RX_LESS_THAN_FOUR_LNS_MASK					0x1ull
#define OC_LCB_ERR_EN_HOST_RX_LESS_THAN_FOUR_LNS_SMASK					0x10ull
#define OC_LCB_ERR_EN_HOST_TX_LESS_THAN_FOUR_LNS_SHIFT					3
#define OC_LCB_ERR_EN_HOST_TX_LESS_THAN_FOUR_LNS_MASK					0x1ull
#define OC_LCB_ERR_EN_HOST_TX_LESS_THAN_FOUR_LNS_SMASK					0x8ull
#define OC_LCB_ERR_EN_HOST_LOST_REINIT_STALL_OR_TOS_SHIFT				2
#define OC_LCB_ERR_EN_HOST_LOST_REINIT_STALL_OR_TOS_MASK				0x1ull
#define OC_LCB_ERR_EN_HOST_LOST_REINIT_STALL_OR_TOS_SMASK				0x4ull
#define OC_LCB_ERR_EN_HOST_ALL_LNS_FAILED_REINIT_TEST_SHIFT				1
#define OC_LCB_ERR_EN_HOST_ALL_LNS_FAILED_REINIT_TEST_MASK				0x1ull
#define OC_LCB_ERR_EN_HOST_ALL_LNS_FAILED_REINIT_TEST_SMASK				0x2ull
#define OC_LCB_ERR_EN_HOST_RST_FOR_FAILED_DESKEW_SHIFT					0
#define OC_LCB_ERR_EN_HOST_RST_FOR_FAILED_DESKEW_MASK					0x1ull
#define OC_LCB_ERR_EN_HOST_RST_FOR_FAILED_DESKEW_SMASK					0x1ull
/*
* Table #54 of oc_lcb_csrs - LCB_ERR_FIRST_HOST
* This is a CSR description. See #%%#Section 30.28.50, 'LCB_ERR_STS'#%%# for 
* error flag definitions. The first error to occur will set the appropriate 
* field in this register, if it was interrupt enabled via LCB_ERR_EN_HOST.
*/
#define OC_LCB_ERR_FIRST_HOST								(OC_LCB_CSRS + 0x0000000004A0)
#define OC_LCB_ERR_FIRST_HOST_RESETCSR							0x0000000000000000ull
#define OC_LCB_ERR_FIRST_HOST_UNUSED_63_33_SHIFT					33
#define OC_LCB_ERR_FIRST_HOST_UNUSED_63_33_MASK						0x7FFFFFFFull
#define OC_LCB_ERR_FIRST_HOST_UNUSED_63_33_SMASK					0xFFFFFFFE00000000ull
#define OC_LCB_ERR_FIRST_HOST_FEC_ERR_CNT_HIT_LIMIT_SHIFT				32
#define OC_LCB_ERR_FIRST_HOST_FEC_ERR_CNT_HIT_LIMIT_MASK				0x1ull
#define OC_LCB_ERR_FIRST_HOST_FEC_ERR_CNT_HIT_LIMIT_SMASK				0x100000000ull
#define OC_LCB_ERR_FIRST_HOST_PM_SBE_SHIFT						31
#define OC_LCB_ERR_FIRST_HOST_PM_SBE_MASK						0x1ull
#define OC_LCB_ERR_FIRST_HOST_PM_SBE_SMASK						0x80000000ull
#define OC_LCB_ERR_FIRST_HOST_PM_MBE_SHIFT						30
#define OC_LCB_ERR_FIRST_HOST_PM_MBE_MASK						0x1ull
#define OC_LCB_ERR_FIRST_HOST_PM_MBE_SMASK						0x40000000ull
#define OC_LCB_ERR_FIRST_HOST_CSR_CPORT_ADDRESS_MISS_SHIFT				29
#define OC_LCB_ERR_FIRST_HOST_CSR_CPORT_ADDRESS_MISS_MASK				0x1ull
#define OC_LCB_ERR_FIRST_HOST_CSR_CPORT_ADDRESS_MISS_SMASK				0x20000000ull
#define OC_LCB_ERR_FIRST_HOST_CSR_CHAIN_PARITY_ERR_SHIFT				28
#define OC_LCB_ERR_FIRST_HOST_CSR_CHAIN_PARITY_ERR_MASK					0x1ull
#define OC_LCB_ERR_FIRST_HOST_CSR_CHAIN_PARITY_ERR_SMASK				0x10000000ull
#define OC_LCB_ERR_FIRST_HOST_QUARANTINE_SHIFT						27
#define OC_LCB_ERR_FIRST_HOST_QUARANTINE_MASK						0x1ull
#define OC_LCB_ERR_FIRST_HOST_QUARANTINE_SMASK						0x8000000ull
#define OC_LCB_ERR_FIRST_HOST_UNEXPECTED_MASTER_TIME_FLIT_SHIFT				26
#define OC_LCB_ERR_FIRST_HOST_UNEXPECTED_MASTER_TIME_FLIT_MASK				0x1ull
#define OC_LCB_ERR_FIRST_HOST_UNEXPECTED_MASTER_TIME_FLIT_SMASK				0x4000000ull
#define OC_LCB_ERR_FIRST_HOST_NEG_EDGE_LINK_TRANSFER_ACTIVE_SHIFT			25
#define OC_LCB_ERR_FIRST_HOST_NEG_EDGE_LINK_TRANSFER_ACTIVE_MASK			0x1ull
#define OC_LCB_ERR_FIRST_HOST_NEG_EDGE_LINK_TRANSFER_ACTIVE_SMASK			0x2000000ull
#define OC_LCB_ERR_FIRST_HOST_HOLD_REINIT_SHIFT						24
#define OC_LCB_ERR_FIRST_HOST_HOLD_REINIT_MASK						0x1ull
#define OC_LCB_ERR_FIRST_HOST_HOLD_REINIT_SMASK						0x1000000ull
#define OC_LCB_ERR_FIRST_HOST_RST_FOR_INCOMPLT_RND_TRIP_SHIFT				23
#define OC_LCB_ERR_FIRST_HOST_RST_FOR_INCOMPLT_RND_TRIP_MASK				0x1ull
#define OC_LCB_ERR_FIRST_HOST_RST_FOR_INCOMPLT_RND_TRIP_SMASK				0x800000ull
#define OC_LCB_ERR_FIRST_HOST_RST_FOR_LINK_TIMEOUT_SHIFT				22
#define OC_LCB_ERR_FIRST_HOST_RST_FOR_LINK_TIMEOUT_MASK					0x1ull
#define OC_LCB_ERR_FIRST_HOST_RST_FOR_LINK_TIMEOUT_SMASK				0x400000ull
#define OC_LCB_ERR_FIRST_HOST_REPLAY_BUF_SBE_SHIFT					21
#define OC_LCB_ERR_FIRST_HOST_REPLAY_BUF_SBE_MASK					0x1ull
#define OC_LCB_ERR_FIRST_HOST_REPLAY_BUF_SBE_SMASK					0x200000ull
#define OC_LCB_ERR_FIRST_HOST_REPLAY_BUF_MBE_SHIFT					20
#define OC_LCB_ERR_FIRST_HOST_REPLAY_BUF_MBE_MASK					0x1ull
#define OC_LCB_ERR_FIRST_HOST_REPLAY_BUF_MBE_SMASK					0x100000ull
#define OC_LCB_ERR_FIRST_HOST_FLIT_INPUT_BUF_SBE_SHIFT					19
#define OC_LCB_ERR_FIRST_HOST_FLIT_INPUT_BUF_SBE_MASK					0x1ull
#define OC_LCB_ERR_FIRST_HOST_FLIT_INPUT_BUF_SBE_SMASK					0x80000ull
#define OC_LCB_ERR_FIRST_HOST_FLIT_INPUT_BUF_MBE_SHIFT					18
#define OC_LCB_ERR_FIRST_HOST_FLIT_INPUT_BUF_MBE_MASK					0x1ull
#define OC_LCB_ERR_FIRST_HOST_FLIT_INPUT_BUF_MBE_SMASK					0x40000ull
#define OC_LCB_ERR_FIRST_HOST_VL_ACK_INPUT_WRONG_CRC_MODE_SHIFT				17
#define OC_LCB_ERR_FIRST_HOST_VL_ACK_INPUT_WRONG_CRC_MODE_MASK				0x1ull
#define OC_LCB_ERR_FIRST_HOST_VL_ACK_INPUT_WRONG_CRC_MODE_SMASK				0x20000ull
#define OC_LCB_ERR_FIRST_HOST_VL_ACK_INPUT_PARITY_ERR_SHIFT				16
#define OC_LCB_ERR_FIRST_HOST_VL_ACK_INPUT_PARITY_ERR_MASK				0x1ull
#define OC_LCB_ERR_FIRST_HOST_VL_ACK_INPUT_PARITY_ERR_SMASK				0x10000ull
#define OC_LCB_ERR_FIRST_HOST_VL_ACK_INPUT_BUF_OFLW_SHIFT				15
#define OC_LCB_ERR_FIRST_HOST_VL_ACK_INPUT_BUF_OFLW_MASK				0x1ull
#define OC_LCB_ERR_FIRST_HOST_VL_ACK_INPUT_BUF_OFLW_SMASK				0x8000ull
#define OC_LCB_ERR_FIRST_HOST_FLIT_INPUT_BUF_OFLW_SHIFT					14
#define OC_LCB_ERR_FIRST_HOST_FLIT_INPUT_BUF_OFLW_MASK					0x1ull
#define OC_LCB_ERR_FIRST_HOST_FLIT_INPUT_BUF_OFLW_SMASK					0x4000ull
#define OC_LCB_ERR_FIRST_HOST_ILLEGAL_FLIT_ENCODING_SHIFT				13
#define OC_LCB_ERR_FIRST_HOST_ILLEGAL_FLIT_ENCODING_MASK				0x1ull
#define OC_LCB_ERR_FIRST_HOST_ILLEGAL_FLIT_ENCODING_SMASK				0x2000ull
#define OC_LCB_ERR_FIRST_HOST_ILLEGAL_NULL_LTP_SHIFT					12
#define OC_LCB_ERR_FIRST_HOST_ILLEGAL_NULL_LTP_MASK					0x1ull
#define OC_LCB_ERR_FIRST_HOST_ILLEGAL_NULL_LTP_SMASK					0x1000ull
#define OC_LCB_ERR_FIRST_HOST_UNEXPECTED_ROUND_TRIP_MARKER_SHIFT			11
#define OC_LCB_ERR_FIRST_HOST_UNEXPECTED_ROUND_TRIP_MARKER_MASK				0x1ull
#define OC_LCB_ERR_FIRST_HOST_UNEXPECTED_ROUND_TRIP_MARKER_SMASK			0x800ull
#define OC_LCB_ERR_FIRST_HOST_UNEXPECTED_REPLAY_MARKER_SHIFT				10
#define OC_LCB_ERR_FIRST_HOST_UNEXPECTED_REPLAY_MARKER_MASK				0x1ull
#define OC_LCB_ERR_FIRST_HOST_UNEXPECTED_REPLAY_MARKER_SMASK				0x400ull
#define OC_LCB_ERR_FIRST_HOST_RCLK_STOPPED_SHIFT					9
#define OC_LCB_ERR_FIRST_HOST_RCLK_STOPPED_MASK						0x1ull
#define OC_LCB_ERR_FIRST_HOST_RCLK_STOPPED_SMASK					0x200ull
#define OC_LCB_ERR_FIRST_HOST_CRC_ERR_CNT_HIT_LIMIT_SHIFT				8
#define OC_LCB_ERR_FIRST_HOST_CRC_ERR_CNT_HIT_LIMIT_MASK				0x1ull
#define OC_LCB_ERR_FIRST_HOST_CRC_ERR_CNT_HIT_LIMIT_SMASK				0x100ull
#define OC_LCB_ERR_FIRST_HOST_REINIT_FOR_LN_DEGRADE_SHIFT				7
#define OC_LCB_ERR_FIRST_HOST_REINIT_FOR_LN_DEGRADE_MASK				0x1ull
#define OC_LCB_ERR_FIRST_HOST_REINIT_FOR_LN_DEGRADE_SMASK				0x80ull
#define OC_LCB_ERR_FIRST_HOST_REINIT_FROM_PEER_SHIFT					6
#define OC_LCB_ERR_FIRST_HOST_REINIT_FROM_PEER_MASK					0x1ull
#define OC_LCB_ERR_FIRST_HOST_REINIT_FROM_PEER_SMASK					0x40ull
#define OC_LCB_ERR_FIRST_HOST_SEQ_CRC_ERR_SHIFT						5
#define OC_LCB_ERR_FIRST_HOST_SEQ_CRC_ERR_MASK						0x1ull
#define OC_LCB_ERR_FIRST_HOST_SEQ_CRC_ERR_SMASK						0x20ull
#define OC_LCB_ERR_FIRST_HOST_RX_LESS_THAN_FOUR_LNS_SHIFT				4
#define OC_LCB_ERR_FIRST_HOST_RX_LESS_THAN_FOUR_LNS_MASK				0x1ull
#define OC_LCB_ERR_FIRST_HOST_RX_LESS_THAN_FOUR_LNS_SMASK				0x10ull
#define OC_LCB_ERR_FIRST_HOST_TX_LESS_THAN_FOUR_LNS_SHIFT				3
#define OC_LCB_ERR_FIRST_HOST_TX_LESS_THAN_FOUR_LNS_MASK				0x1ull
#define OC_LCB_ERR_FIRST_HOST_TX_LESS_THAN_FOUR_LNS_SMASK				0x8ull
#define OC_LCB_ERR_FIRST_HOST_LOST_REINIT_STALL_OR_TOS_SHIFT				2
#define OC_LCB_ERR_FIRST_HOST_LOST_REINIT_STALL_OR_TOS_MASK				0x1ull
#define OC_LCB_ERR_FIRST_HOST_LOST_REINIT_STALL_OR_TOS_SMASK				0x4ull
#define OC_LCB_ERR_FIRST_HOST_ALL_LNS_FAILED_REINIT_TEST_SHIFT				1
#define OC_LCB_ERR_FIRST_HOST_ALL_LNS_FAILED_REINIT_TEST_MASK				0x1ull
#define OC_LCB_ERR_FIRST_HOST_ALL_LNS_FAILED_REINIT_TEST_SMASK				0x2ull
#define OC_LCB_ERR_FIRST_HOST_RST_FOR_FAILED_DESKEW_SHIFT				0
#define OC_LCB_ERR_FIRST_HOST_RST_FOR_FAILED_DESKEW_MASK				0x1ull
#define OC_LCB_ERR_FIRST_HOST_RST_FOR_FAILED_DESKEW_SMASK				0x1ull
/*
* Table #55 of oc_lcb_csrs - LCB_DBG_ERRINJ_CRC_0
* This register is used to provide CRC error injection stimulus for 
* debug.
*/
#define OC_LCB_DBG_ERRINJ_CRC_0								(OC_LCB_CSRS + 0x000000000300)
#define OC_LCB_DBG_ERRINJ_CRC_0_RESETCSR						0x000001F3FFFFFFFFull
#define OC_LCB_DBG_ERRINJ_CRC_0_UNUSED_63_57_SHIFT					57
#define OC_LCB_DBG_ERRINJ_CRC_0_UNUSED_63_57_MASK					0x7Full
#define OC_LCB_DBG_ERRINJ_CRC_0_UNUSED_63_57_SMASK					0xFE00000000000000ull
#define OC_LCB_DBG_ERRINJ_CRC_0_DISABLE_SEQUENTIAL_ERR_SHIFT				56
#define OC_LCB_DBG_ERRINJ_CRC_0_DISABLE_SEQUENTIAL_ERR_MASK				0x1ull
#define OC_LCB_DBG_ERRINJ_CRC_0_DISABLE_SEQUENTIAL_ERR_SMASK				0x100000000000000ull
#define OC_LCB_DBG_ERRINJ_CRC_0_CRC_ERR_PROBABILITY_SHIFT				52
#define OC_LCB_DBG_ERRINJ_CRC_0_CRC_ERR_PROBABILITY_MASK				0xFull
#define OC_LCB_DBG_ERRINJ_CRC_0_CRC_ERR_PROBABILITY_SMASK				0xF0000000000000ull
#define OC_LCB_DBG_ERRINJ_CRC_0_NUM_CRC_LTP_ERRS_SHIFT					48
#define OC_LCB_DBG_ERRINJ_CRC_0_NUM_CRC_LTP_ERRS_MASK					0xFull
#define OC_LCB_DBG_ERRINJ_CRC_0_NUM_CRC_LTP_ERRS_SMASK					0xF000000000000ull
#define OC_LCB_DBG_ERRINJ_CRC_0_UNUSED_47_46_SHIFT					46
#define OC_LCB_DBG_ERRINJ_CRC_0_UNUSED_47_46_MASK					0x3ull
#define OC_LCB_DBG_ERRINJ_CRC_0_UNUSED_47_46_SMASK					0xC00000000000ull
#define OC_LCB_DBG_ERRINJ_CRC_0_LTP_CNT_MAX_SELECT_SHIFT				44
#define OC_LCB_DBG_ERRINJ_CRC_0_LTP_CNT_MAX_SELECT_MASK					0x3ull
#define OC_LCB_DBG_ERRINJ_CRC_0_LTP_CNT_MAX_SELECT_SMASK				0x300000000000ull
#define OC_LCB_DBG_ERRINJ_CRC_0_UNUSED_43_41_SHIFT					41
#define OC_LCB_DBG_ERRINJ_CRC_0_UNUSED_43_41_MASK					0x7ull
#define OC_LCB_DBG_ERRINJ_CRC_0_UNUSED_43_41_SMASK					0xE0000000000ull
#define OC_LCB_DBG_ERRINJ_CRC_0_RANDOM_XFR_ERR_SHIFT					40
#define OC_LCB_DBG_ERRINJ_CRC_0_RANDOM_XFR_ERR_MASK					0x1ull
#define OC_LCB_DBG_ERRINJ_CRC_0_RANDOM_XFR_ERR_SMASK					0x10000000000ull
#define OC_LCB_DBG_ERRINJ_CRC_0_CRC_ERR_LN_EN_SHIFT					36
#define OC_LCB_DBG_ERRINJ_CRC_0_CRC_ERR_LN_EN_MASK					0xFull
#define OC_LCB_DBG_ERRINJ_CRC_0_CRC_ERR_LN_EN_SMASK					0xF000000000ull
#define OC_LCB_DBG_ERRINJ_CRC_0_UNUSED_35_34_SHIFT					34
#define OC_LCB_DBG_ERRINJ_CRC_0_UNUSED_35_34_MASK					0x3ull
#define OC_LCB_DBG_ERRINJ_CRC_0_UNUSED_35_34_SMASK					0xC00000000ull
#define OC_LCB_DBG_ERRINJ_CRC_0_CRC_ERR_XFR_EN_SHIFT					0
#define OC_LCB_DBG_ERRINJ_CRC_0_CRC_ERR_XFR_EN_MASK					0x3FFFFFFFFull
#define OC_LCB_DBG_ERRINJ_CRC_0_CRC_ERR_XFR_EN_SMASK					0x3FFFFFFFFull
/*
* Table #56 of oc_lcb_csrs - LCB_DBG_ERRINJ_CRC_1
* This register is used to provide CRC error injection stimulus for 
* debug.
*/
#define OC_LCB_DBG_ERRINJ_CRC_1								(OC_LCB_CSRS + 0x000000000308)
#define OC_LCB_DBG_ERRINJ_CRC_1_RESETCSR						0x7FFFF001FFFFFFFFull
#define OC_LCB_DBG_ERRINJ_CRC_1_UNUSED_63_SHIFT						63
#define OC_LCB_DBG_ERRINJ_CRC_1_UNUSED_63_MASK						0x1ull
#define OC_LCB_DBG_ERRINJ_CRC_1_UNUSED_63_SMASK						0x8000000000000000ull
#define OC_LCB_DBG_ERRINJ_CRC_1_SEED_SHIFT						32
#define OC_LCB_DBG_ERRINJ_CRC_1_SEED_MASK						0x7FFFFFFFull
#define OC_LCB_DBG_ERRINJ_CRC_1_SEED_SMASK						0x7FFFFFFF00000000ull
#define OC_LCB_DBG_ERRINJ_CRC_1_CRC_ERR_BIT_EN_SHIFT					0
#define OC_LCB_DBG_ERRINJ_CRC_1_CRC_ERR_BIT_EN_MASK					0xFFFFFFFFull
#define OC_LCB_DBG_ERRINJ_CRC_1_CRC_ERR_BIT_EN_SMASK					0xFFFFFFFFull
/*
* Table #57 of oc_lcb_csrs - LCB_DBG_ERRINJ_ECC
* This register is used to provide ECC error injection stimulus for 
* debug.
*/
#define OC_LCB_DBG_ERRINJ_ECC								(OC_LCB_CSRS + 0x000000000310)
#define OC_LCB_DBG_ERRINJ_ECC_RESETCSR							0x0000000000000000ull
#define OC_LCB_DBG_ERRINJ_ECC_UNUSED_63_57_SHIFT					57
#define OC_LCB_DBG_ERRINJ_ECC_UNUSED_63_57_MASK						0x7Full
#define OC_LCB_DBG_ERRINJ_ECC_UNUSED_63_57_SMASK					0xFE00000000000000ull
#define OC_LCB_DBG_ERRINJ_ECC_CLR_ECC_ERR_CNTS_SHIFT					56
#define OC_LCB_DBG_ERRINJ_ECC_CLR_ECC_ERR_CNTS_MASK					0x1ull
#define OC_LCB_DBG_ERRINJ_ECC_CLR_ECC_ERR_CNTS_SMASK					0x100000000000000ull
#define OC_LCB_DBG_ERRINJ_ECC_UNUSED_55_53_SHIFT					53
#define OC_LCB_DBG_ERRINJ_ECC_UNUSED_55_53_MASK						0x7ull
#define OC_LCB_DBG_ERRINJ_ECC_UNUSED_55_53_SMASK					0xE0000000000000ull
#define OC_LCB_DBG_ERRINJ_ECC_REPLAY_BUF_ADDRESS_SHIFT					44
#define OC_LCB_DBG_ERRINJ_ECC_REPLAY_BUF_ADDRESS_MASK					0x1FFull
#define OC_LCB_DBG_ERRINJ_ECC_REPLAY_BUF_ADDRESS_SMASK					0x1FF00000000000ull
#define OC_LCB_DBG_ERRINJ_ECC_UNUSED_43_41_SHIFT					41
#define OC_LCB_DBG_ERRINJ_ECC_UNUSED_43_41_MASK						0x7ull
#define OC_LCB_DBG_ERRINJ_ECC_UNUSED_43_41_SMASK					0xE0000000000ull
#define OC_LCB_DBG_ERRINJ_ECC_INPUT_BUF_ADDRESS_SHIFT					36
#define OC_LCB_DBG_ERRINJ_ECC_INPUT_BUF_ADDRESS_MASK					0x1Full
#define OC_LCB_DBG_ERRINJ_ECC_INPUT_BUF_ADDRESS_SMASK					0x1F000000000ull
#define OC_LCB_DBG_ERRINJ_ECC_CHECKBYTE_SHIFT						28
#define OC_LCB_DBG_ERRINJ_ECC_CHECKBYTE_MASK						0xFFull
#define OC_LCB_DBG_ERRINJ_ECC_CHECKBYTE_SMASK						0xFF0000000ull
#define OC_LCB_DBG_ERRINJ_ECC_UNUSED_27_25_SHIFT					25
#define OC_LCB_DBG_ERRINJ_ECC_UNUSED_27_25_MASK						0x7ull
#define OC_LCB_DBG_ERRINJ_ECC_UNUSED_27_25_SMASK					0xE000000ull
#define OC_LCB_DBG_ERRINJ_ECC_RAMSELECT_SHIFT						8
#define OC_LCB_DBG_ERRINJ_ECC_RAMSELECT_MASK						0x1FFFFull
#define OC_LCB_DBG_ERRINJ_ECC_RAMSELECT_SMASK						0x1FFFF00ull
#define OC_LCB_DBG_ERRINJ_ECC_UNUSED_7_6_SHIFT						6
#define OC_LCB_DBG_ERRINJ_ECC_UNUSED_7_6_MASK						0x3ull
#define OC_LCB_DBG_ERRINJ_ECC_UNUSED_7_6_SMASK						0xC0ull
#define OC_LCB_DBG_ERRINJ_ECC_MODE_SHIFT						4
#define OC_LCB_DBG_ERRINJ_ECC_MODE_MASK							0x3ull
#define OC_LCB_DBG_ERRINJ_ECC_MODE_SMASK						0x30ull
#define OC_LCB_DBG_ERRINJ_ECC_UNUSED_3_1_SHIFT						1
#define OC_LCB_DBG_ERRINJ_ECC_UNUSED_3_1_MASK						0x7ull
#define OC_LCB_DBG_ERRINJ_ECC_UNUSED_3_1_SMASK						0xEull
#define OC_LCB_DBG_ERRINJ_ECC_EN_SHIFT							0
#define OC_LCB_DBG_ERRINJ_ECC_EN_MASK							0x1ull
#define OC_LCB_DBG_ERRINJ_ECC_EN_SMASK							0x1ull
/*
* Table #58 of oc_lcb_csrs - LCB_DBG_ERRINJ_MISC
* This register is used to provide miscellaneous error injection stimulus for 
* debug.
*/
#define OC_LCB_DBG_ERRINJ_MISC								(OC_LCB_CSRS + 0x000000000318)
#define OC_LCB_DBG_ERRINJ_MISC_RESETCSR							0x0000000000000000ull
#define OC_LCB_DBG_ERRINJ_MISC_UNUSED_63_21_SHIFT					21
#define OC_LCB_DBG_ERRINJ_MISC_UNUSED_63_21_MASK					0x7FFFFFFFFFFull
#define OC_LCB_DBG_ERRINJ_MISC_UNUSED_63_21_SMASK					0xFFFFFFFFFFE00000ull
#define OC_LCB_DBG_ERRINJ_MISC_FORCE_VL_ACK_INPUT_PBE_SHIFT				20
#define OC_LCB_DBG_ERRINJ_MISC_FORCE_VL_ACK_INPUT_PBE_MASK				0x1ull
#define OC_LCB_DBG_ERRINJ_MISC_FORCE_VL_ACK_INPUT_PBE_SMASK				0x100000ull
#define OC_LCB_DBG_ERRINJ_MISC_UNUSED_19_17_SHIFT					17
#define OC_LCB_DBG_ERRINJ_MISC_UNUSED_19_17_MASK					0x7ull
#define OC_LCB_DBG_ERRINJ_MISC_UNUSED_19_17_SMASK					0xE0000ull
#define OC_LCB_DBG_ERRINJ_MISC_FORCE_REPLAY_SHIFT					16
#define OC_LCB_DBG_ERRINJ_MISC_FORCE_REPLAY_MASK					0x1ull
#define OC_LCB_DBG_ERRINJ_MISC_FORCE_REPLAY_SMASK					0x10000ull
#define OC_LCB_DBG_ERRINJ_MISC_UNUSED_15_13_SHIFT					13
#define OC_LCB_DBG_ERRINJ_MISC_UNUSED_15_13_MASK					0x7ull
#define OC_LCB_DBG_ERRINJ_MISC_UNUSED_15_13_SMASK					0xE000ull
#define OC_LCB_DBG_ERRINJ_MISC_FORCE_BAD_CRC_REINIT_SHIFT				12
#define OC_LCB_DBG_ERRINJ_MISC_FORCE_BAD_CRC_REINIT_MASK				0x1ull
#define OC_LCB_DBG_ERRINJ_MISC_FORCE_BAD_CRC_REINIT_SMASK				0x1000ull
#define OC_LCB_DBG_ERRINJ_MISC_UNUSED_11_9_SHIFT					9
#define OC_LCB_DBG_ERRINJ_MISC_UNUSED_11_9_MASK						0x7ull
#define OC_LCB_DBG_ERRINJ_MISC_UNUSED_11_9_SMASK					0xE00ull
#define OC_LCB_DBG_ERRINJ_MISC_FORCE_LOST_FLIT_ACK_SHIFT				8
#define OC_LCB_DBG_ERRINJ_MISC_FORCE_LOST_FLIT_ACK_MASK					0x1ull
#define OC_LCB_DBG_ERRINJ_MISC_FORCE_LOST_FLIT_ACK_SMASK				0x100ull
#define OC_LCB_DBG_ERRINJ_MISC_UNUSED_7_5_SHIFT						5
#define OC_LCB_DBG_ERRINJ_MISC_UNUSED_7_5_MASK						0x7ull
#define OC_LCB_DBG_ERRINJ_MISC_UNUSED_7_5_SMASK						0xE0ull
#define OC_LCB_DBG_ERRINJ_MISC_FORCE_EXTRA_FLIT_ACK_SHIFT				4
#define OC_LCB_DBG_ERRINJ_MISC_FORCE_EXTRA_FLIT_ACK_MASK				0x1ull
#define OC_LCB_DBG_ERRINJ_MISC_FORCE_EXTRA_FLIT_ACK_SMASK				0x10ull
#define OC_LCB_DBG_ERRINJ_MISC_UNUSED_3_1_SHIFT						1
#define OC_LCB_DBG_ERRINJ_MISC_UNUSED_3_1_MASK						0x7ull
#define OC_LCB_DBG_ERRINJ_MISC_UNUSED_3_1_SMASK						0xEull
#define OC_LCB_DBG_ERRINJ_MISC_FORCE_MISCOMPARE_SHIFT					0
#define OC_LCB_DBG_ERRINJ_MISC_FORCE_MISCOMPARE_MASK					0x1ull
#define OC_LCB_DBG_ERRINJ_MISC_FORCE_MISCOMPARE_SMASK					0x1ull
/*
* Table #59 of oc_lcb_csrs - LCB_DBG_INIT_STATE_0
* This register is used to report various initialization status 
* indications.
*/
#define OC_LCB_DBG_INIT_STATE_0								(OC_LCB_CSRS + 0x000000000320)
#define OC_LCB_DBG_INIT_STATE_0_RESETCSR						0x0000000000000000ull
#define OC_LCB_DBG_INIT_STATE_0_UNUSED_63_52_SHIFT					52
#define OC_LCB_DBG_INIT_STATE_0_UNUSED_63_52_MASK					0xFFFull
#define OC_LCB_DBG_INIT_STATE_0_UNUSED_63_52_SMASK					0xFFF0000000000000ull
#define OC_LCB_DBG_INIT_STATE_0_UNUSED_51_SHIFT						51
#define OC_LCB_DBG_INIT_STATE_0_UNUSED_51_MASK						0x1ull
#define OC_LCB_DBG_INIT_STATE_0_UNUSED_51_SMASK						0x8000000000000ull
#define OC_LCB_DBG_INIT_STATE_0_CORSE_ALIGN_PTR3_SHIFT					48
#define OC_LCB_DBG_INIT_STATE_0_CORSE_ALIGN_PTR3_MASK					0x7ull
#define OC_LCB_DBG_INIT_STATE_0_CORSE_ALIGN_PTR3_SMASK					0x7000000000000ull
#define OC_LCB_DBG_INIT_STATE_0_UNUSED_47_46_SHIFT					46
#define OC_LCB_DBG_INIT_STATE_0_UNUSED_47_46_MASK					0x3ull
#define OC_LCB_DBG_INIT_STATE_0_UNUSED_47_46_SMASK					0xC00000000000ull
#define OC_LCB_DBG_INIT_STATE_0_FINE_ALIGN_PTR3_SHIFT					44
#define OC_LCB_DBG_INIT_STATE_0_FINE_ALIGN_PTR3_MASK					0x3ull
#define OC_LCB_DBG_INIT_STATE_0_FINE_ALIGN_PTR3_SMASK					0x300000000000ull
#define OC_LCB_DBG_INIT_STATE_0_UNUSED_43_SHIFT						43
#define OC_LCB_DBG_INIT_STATE_0_UNUSED_43_MASK						0x1ull
#define OC_LCB_DBG_INIT_STATE_0_UNUSED_43_SMASK						0x80000000000ull
#define OC_LCB_DBG_INIT_STATE_0_CORSE_ALIGN_PTR2_SHIFT					40
#define OC_LCB_DBG_INIT_STATE_0_CORSE_ALIGN_PTR2_MASK					0x7ull
#define OC_LCB_DBG_INIT_STATE_0_CORSE_ALIGN_PTR2_SMASK					0x70000000000ull
#define OC_LCB_DBG_INIT_STATE_0_UNUSED_39_38_SHIFT					38
#define OC_LCB_DBG_INIT_STATE_0_UNUSED_39_38_MASK					0x3ull
#define OC_LCB_DBG_INIT_STATE_0_UNUSED_39_38_SMASK					0xC000000000ull
#define OC_LCB_DBG_INIT_STATE_0_FINE_ALIGN_PTR2_SHIFT					36
#define OC_LCB_DBG_INIT_STATE_0_FINE_ALIGN_PTR2_MASK					0x3ull
#define OC_LCB_DBG_INIT_STATE_0_FINE_ALIGN_PTR2_SMASK					0x3000000000ull
#define OC_LCB_DBG_INIT_STATE_0_UNUSED_35_SHIFT						35
#define OC_LCB_DBG_INIT_STATE_0_UNUSED_35_MASK						0x1ull
#define OC_LCB_DBG_INIT_STATE_0_UNUSED_35_SMASK						0x800000000ull
#define OC_LCB_DBG_INIT_STATE_0_CORSE_ALIGN_PTR1_SHIFT					32
#define OC_LCB_DBG_INIT_STATE_0_CORSE_ALIGN_PTR1_MASK					0x7ull
#define OC_LCB_DBG_INIT_STATE_0_CORSE_ALIGN_PTR1_SMASK					0x700000000ull
#define OC_LCB_DBG_INIT_STATE_0_UNUSED_31_30_SHIFT					30
#define OC_LCB_DBG_INIT_STATE_0_UNUSED_31_30_MASK					0x3ull
#define OC_LCB_DBG_INIT_STATE_0_UNUSED_31_30_SMASK					0xC0000000ull
#define OC_LCB_DBG_INIT_STATE_0_FINE_ALIGN_PTR1_SHIFT					28
#define OC_LCB_DBG_INIT_STATE_0_FINE_ALIGN_PTR1_MASK					0x3ull
#define OC_LCB_DBG_INIT_STATE_0_FINE_ALIGN_PTR1_SMASK					0x30000000ull
#define OC_LCB_DBG_INIT_STATE_0_UNUSED_27_SHIFT						27
#define OC_LCB_DBG_INIT_STATE_0_UNUSED_27_MASK						0x1ull
#define OC_LCB_DBG_INIT_STATE_0_UNUSED_27_SMASK						0x8000000ull
#define OC_LCB_DBG_INIT_STATE_0_CORSE_ALIGN_PTR0_SHIFT					24
#define OC_LCB_DBG_INIT_STATE_0_CORSE_ALIGN_PTR0_MASK					0x7ull
#define OC_LCB_DBG_INIT_STATE_0_CORSE_ALIGN_PTR0_SMASK					0x7000000ull
#define OC_LCB_DBG_INIT_STATE_0_UNUSED_23_22_SHIFT					22
#define OC_LCB_DBG_INIT_STATE_0_UNUSED_23_22_MASK					0x3ull
#define OC_LCB_DBG_INIT_STATE_0_UNUSED_23_22_SMASK					0xC00000ull
#define OC_LCB_DBG_INIT_STATE_0_FINE_ALIGN_PTR0_SHIFT					20
#define OC_LCB_DBG_INIT_STATE_0_FINE_ALIGN_PTR0_MASK					0x3ull
#define OC_LCB_DBG_INIT_STATE_0_FINE_ALIGN_PTR0_SMASK					0x300000ull
#define OC_LCB_DBG_INIT_STATE_0_FRAMING1_COMPLETE_SHIFT					16
#define OC_LCB_DBG_INIT_STATE_0_FRAMING1_COMPLETE_MASK					0xFull
#define OC_LCB_DBG_INIT_STATE_0_FRAMING1_COMPLETE_SMASK					0xF0000ull
#define OC_LCB_DBG_INIT_STATE_0_LOGICAL_ID_COMPLETE_SHIFT				12
#define OC_LCB_DBG_INIT_STATE_0_LOGICAL_ID_COMPLETE_MASK				0xFull
#define OC_LCB_DBG_INIT_STATE_0_LOGICAL_ID_COMPLETE_SMASK				0xF000ull
#define OC_LCB_DBG_INIT_STATE_0_POLARITY_SHIFT						8
#define OC_LCB_DBG_INIT_STATE_0_POLARITY_MASK						0xFull
#define OC_LCB_DBG_INIT_STATE_0_POLARITY_SMASK						0xF00ull
#define OC_LCB_DBG_INIT_STATE_0_POLARITY_COMPLETE_SHIFT					4
#define OC_LCB_DBG_INIT_STATE_0_POLARITY_COMPLETE_MASK					0xFull
#define OC_LCB_DBG_INIT_STATE_0_POLARITY_COMPLETE_SMASK					0xF0ull
#define OC_LCB_DBG_INIT_STATE_0_ALIGN_COMPLETE_SHIFT					0
#define OC_LCB_DBG_INIT_STATE_0_ALIGN_COMPLETE_MASK					0xFull
#define OC_LCB_DBG_INIT_STATE_0_ALIGN_COMPLETE_SMASK					0xFull
/*
* Table #60 of oc_lcb_csrs - LCB_DBG_INIT_STATE_1
* This register is used to report various initialization status 
* indications.
*/
#define OC_LCB_DBG_INIT_STATE_1								(OC_LCB_CSRS + 0x000000000328)
#define OC_LCB_DBG_INIT_STATE_1_RESETCSR						0x0000000000000000ull
#define OC_LCB_DBG_INIT_STATE_1_UNUSED_63_57_SHIFT					57
#define OC_LCB_DBG_INIT_STATE_1_UNUSED_63_57_MASK					0x7Full
#define OC_LCB_DBG_INIT_STATE_1_UNUSED_63_57_SMASK					0xFE00000000000000ull
#define OC_LCB_DBG_INIT_STATE_1_LN_TEST_TIMER_COMPLETE_SHIFT				56
#define OC_LCB_DBG_INIT_STATE_1_LN_TEST_TIMER_COMPLETE_MASK				0x1ull
#define OC_LCB_DBG_INIT_STATE_1_LN_TEST_TIMER_COMPLETE_SMASK				0x100000000000000ull
#define OC_LCB_DBG_INIT_STATE_1_LN_PASSED_TESTING_SHIFT					52
#define OC_LCB_DBG_INIT_STATE_1_LN_PASSED_TESTING_MASK					0xFull
#define OC_LCB_DBG_INIT_STATE_1_LN_PASSED_TESTING_SMASK					0xF0000000000000ull
#define OC_LCB_DBG_INIT_STATE_1_UNUSED_51_49_SHIFT					49
#define OC_LCB_DBG_INIT_STATE_1_UNUSED_51_49_MASK					0x7ull
#define OC_LCB_DBG_INIT_STATE_1_UNUSED_51_49_SMASK					0xE000000000000ull
#define OC_LCB_DBG_INIT_STATE_1_PASS_CNT_LN3_SHIFT					40
#define OC_LCB_DBG_INIT_STATE_1_PASS_CNT_LN3_MASK					0x1FFull
#define OC_LCB_DBG_INIT_STATE_1_PASS_CNT_LN3_SMASK					0x1FF0000000000ull
#define OC_LCB_DBG_INIT_STATE_1_UNUSED_39_37_SHIFT					37
#define OC_LCB_DBG_INIT_STATE_1_UNUSED_39_37_MASK					0x7ull
#define OC_LCB_DBG_INIT_STATE_1_UNUSED_39_37_SMASK					0xE000000000ull
#define OC_LCB_DBG_INIT_STATE_1_PASS_CNT_LN2_SHIFT					28
#define OC_LCB_DBG_INIT_STATE_1_PASS_CNT_LN2_MASK					0x1FFull
#define OC_LCB_DBG_INIT_STATE_1_PASS_CNT_LN2_SMASK					0x1FF0000000ull
#define OC_LCB_DBG_INIT_STATE_1_UNUSED_27_25_SHIFT					25
#define OC_LCB_DBG_INIT_STATE_1_UNUSED_27_25_MASK					0x7ull
#define OC_LCB_DBG_INIT_STATE_1_UNUSED_27_25_SMASK					0xE000000ull
#define OC_LCB_DBG_INIT_STATE_1_PASS_CNT_LN1_SHIFT					16
#define OC_LCB_DBG_INIT_STATE_1_PASS_CNT_LN1_MASK					0x1FFull
#define OC_LCB_DBG_INIT_STATE_1_PASS_CNT_LN1_SMASK					0x1FF0000ull
#define OC_LCB_DBG_INIT_STATE_1_UNUSED_15_13_SHIFT					13
#define OC_LCB_DBG_INIT_STATE_1_UNUSED_15_13_MASK					0x7ull
#define OC_LCB_DBG_INIT_STATE_1_UNUSED_15_13_SMASK					0xE000ull
#define OC_LCB_DBG_INIT_STATE_1_PASS_CNT_LN0_SHIFT					4
#define OC_LCB_DBG_INIT_STATE_1_PASS_CNT_LN0_MASK					0x1FFull
#define OC_LCB_DBG_INIT_STATE_1_PASS_CNT_LN0_SMASK					0x1FF0ull
#define OC_LCB_DBG_INIT_STATE_1_LN_TESTING_COMPLETE_SHIFT				0
#define OC_LCB_DBG_INIT_STATE_1_LN_TESTING_COMPLETE_MASK				0xFull
#define OC_LCB_DBG_INIT_STATE_1_LN_TESTING_COMPLETE_SMASK				0xFull
/*
* Table #61 of oc_lcb_csrs - LCB_DBG_INIT_STATE_2
* This register is used to report various initialization status 
* indications.
*/
#define OC_LCB_DBG_INIT_STATE_2								(OC_LCB_CSRS + 0x000000000330)
#define OC_LCB_DBG_INIT_STATE_2_RESETCSR						0x0000000000000000ull
#define OC_LCB_DBG_INIT_STATE_2_UNUSED_63_60_SHIFT					60
#define OC_LCB_DBG_INIT_STATE_2_UNUSED_63_60_MASK					0xFull
#define OC_LCB_DBG_INIT_STATE_2_UNUSED_63_60_SMASK					0xF000000000000000ull
#define OC_LCB_DBG_INIT_STATE_2_PHASE_ALIGN_COMPL_SHIFT					56
#define OC_LCB_DBG_INIT_STATE_2_PHASE_ALIGN_COMPL_MASK					0xFull
#define OC_LCB_DBG_INIT_STATE_2_PHASE_ALIGN_COMPL_SMASK					0xF00000000000000ull
#define OC_LCB_DBG_INIT_STATE_2_PHASE_ALIGNED_SHIFT					52
#define OC_LCB_DBG_INIT_STATE_2_PHASE_ALIGNED_MASK					0xFull
#define OC_LCB_DBG_INIT_STATE_2_PHASE_ALIGNED_SMASK					0xF0000000000000ull
#define OC_LCB_DBG_INIT_STATE_2_UNUSED_51_49_SHIFT					49
#define OC_LCB_DBG_INIT_STATE_2_UNUSED_51_49_MASK					0x7ull
#define OC_LCB_DBG_INIT_STATE_2_UNUSED_51_49_SMASK					0xE000000000000ull
#define OC_LCB_DBG_INIT_STATE_2_TX_TON_SIG_SHIFT					48
#define OC_LCB_DBG_INIT_STATE_2_TX_TON_SIG_MASK						0x1ull
#define OC_LCB_DBG_INIT_STATE_2_TX_TON_SIG_SMASK					0x1000000000000ull
#define OC_LCB_DBG_INIT_STATE_2_UNUSED_47_45_SHIFT					45
#define OC_LCB_DBG_INIT_STATE_2_UNUSED_47_45_MASK					0x7ull
#define OC_LCB_DBG_INIT_STATE_2_UNUSED_47_45_SMASK					0xE00000000000ull
#define OC_LCB_DBG_INIT_STATE_2_PEER_LN_EN_DETECTED_SHIFT				44
#define OC_LCB_DBG_INIT_STATE_2_PEER_LN_EN_DETECTED_MASK				0x1ull
#define OC_LCB_DBG_INIT_STATE_2_PEER_LN_EN_DETECTED_SMASK				0x100000000000ull
#define OC_LCB_DBG_INIT_STATE_2_UNUSED_43_42_SHIFT					42
#define OC_LCB_DBG_INIT_STATE_2_UNUSED_43_42_MASK					0x3ull
#define OC_LCB_DBG_INIT_STATE_2_UNUSED_43_42_SMASK					0xC0000000000ull
#define OC_LCB_DBG_INIT_STATE_2_RCLK_SAMPLING_LN_SHIFT					40
#define OC_LCB_DBG_INIT_STATE_2_RCLK_SAMPLING_LN_MASK					0x3ull
#define OC_LCB_DBG_INIT_STATE_2_RCLK_SAMPLING_LN_SMASK					0x30000000000ull
#define OC_LCB_DBG_INIT_STATE_2_UNUSED_39_38_SHIFT					38
#define OC_LCB_DBG_INIT_STATE_2_UNUSED_39_38_MASK					0x3ull
#define OC_LCB_DBG_INIT_STATE_2_UNUSED_39_38_SMASK					0xC000000000ull
#define OC_LCB_DBG_INIT_STATE_2_BACK_CHAN_REPORTING_LN_SHIFT				36
#define OC_LCB_DBG_INIT_STATE_2_BACK_CHAN_REPORTING_LN_MASK				0x3ull
#define OC_LCB_DBG_INIT_STATE_2_BACK_CHAN_REPORTING_LN_SMASK				0x3000000000ull
#define OC_LCB_DBG_INIT_STATE_2_RADR_SKIP4DESKEW_CNT_LN3_SHIFT				32
#define OC_LCB_DBG_INIT_STATE_2_RADR_SKIP4DESKEW_CNT_LN3_MASK				0xFull
#define OC_LCB_DBG_INIT_STATE_2_RADR_SKIP4DESKEW_CNT_LN3_SMASK				0xF00000000ull
#define OC_LCB_DBG_INIT_STATE_2_RADR_SKIP4DESKEW_CNT_LN2_SHIFT				28
#define OC_LCB_DBG_INIT_STATE_2_RADR_SKIP4DESKEW_CNT_LN2_MASK				0xFull
#define OC_LCB_DBG_INIT_STATE_2_RADR_SKIP4DESKEW_CNT_LN2_SMASK				0xF0000000ull
#define OC_LCB_DBG_INIT_STATE_2_RADR_SKIP4DESKEW_CNT_LN1_SHIFT				24
#define OC_LCB_DBG_INIT_STATE_2_RADR_SKIP4DESKEW_CNT_LN1_MASK				0xFull
#define OC_LCB_DBG_INIT_STATE_2_RADR_SKIP4DESKEW_CNT_LN1_SMASK				0xF000000ull
#define OC_LCB_DBG_INIT_STATE_2_RADR_SKIP4DESKEW_CNT_LN0_SHIFT				20
#define OC_LCB_DBG_INIT_STATE_2_RADR_SKIP4DESKEW_CNT_LN0_MASK				0xFull
#define OC_LCB_DBG_INIT_STATE_2_RADR_SKIP4DESKEW_CNT_LN0_SMASK				0xF00000ull
#define OC_LCB_DBG_INIT_STATE_2_UNUSED_19_SHIFT						19
#define OC_LCB_DBG_INIT_STATE_2_UNUSED_19_MASK						0x1ull
#define OC_LCB_DBG_INIT_STATE_2_UNUSED_19_SMASK						0x80000ull
#define OC_LCB_DBG_INIT_STATE_2_FAILED_TEST_CNT_LN3_SHIFT				16
#define OC_LCB_DBG_INIT_STATE_2_FAILED_TEST_CNT_LN3_MASK				0x7ull
#define OC_LCB_DBG_INIT_STATE_2_FAILED_TEST_CNT_LN3_SMASK				0x70000ull
#define OC_LCB_DBG_INIT_STATE_2_UNUSED_15_SHIFT						15
#define OC_LCB_DBG_INIT_STATE_2_UNUSED_15_MASK						0x1ull
#define OC_LCB_DBG_INIT_STATE_2_UNUSED_15_SMASK						0x8000ull
#define OC_LCB_DBG_INIT_STATE_2_FAILED_TEST_CNT_LN2_SHIFT				12
#define OC_LCB_DBG_INIT_STATE_2_FAILED_TEST_CNT_LN2_MASK				0x7ull
#define OC_LCB_DBG_INIT_STATE_2_FAILED_TEST_CNT_LN2_SMASK				0x7000ull
#define OC_LCB_DBG_INIT_STATE_2_UNUSED_11_SHIFT						11
#define OC_LCB_DBG_INIT_STATE_2_UNUSED_11_MASK						0x1ull
#define OC_LCB_DBG_INIT_STATE_2_UNUSED_11_SMASK						0x800ull
#define OC_LCB_DBG_INIT_STATE_2_FAILED_TEST_CNT_LN1_SHIFT				8
#define OC_LCB_DBG_INIT_STATE_2_FAILED_TEST_CNT_LN1_MASK				0x7ull
#define OC_LCB_DBG_INIT_STATE_2_FAILED_TEST_CNT_LN1_SMASK				0x700ull
#define OC_LCB_DBG_INIT_STATE_2_UNUSED_7_SHIFT						7
#define OC_LCB_DBG_INIT_STATE_2_UNUSED_7_MASK						0x1ull
#define OC_LCB_DBG_INIT_STATE_2_UNUSED_7_SMASK						0x80ull
#define OC_LCB_DBG_INIT_STATE_2_FAILED_TEST_CNT_LN0_SHIFT				4
#define OC_LCB_DBG_INIT_STATE_2_FAILED_TEST_CNT_LN0_MASK				0x7ull
#define OC_LCB_DBG_INIT_STATE_2_FAILED_TEST_CNT_LN0_SMASK				0x70ull
#define OC_LCB_DBG_INIT_STATE_2_UNUSED_3_1_SHIFT					1
#define OC_LCB_DBG_INIT_STATE_2_UNUSED_3_1_MASK						0x7ull
#define OC_LCB_DBG_INIT_STATE_2_UNUSED_3_1_SMASK					0xEull
#define OC_LCB_DBG_INIT_STATE_2_DESKEW_COMPLETE_SHIFT					0
#define OC_LCB_DBG_INIT_STATE_2_DESKEW_COMPLETE_MASK					0x1ull
#define OC_LCB_DBG_INIT_STATE_2_DESKEW_COMPLETE_SMASK					0x1ull
/*
* Table #62 of oc_lcb_csrs - LCB_DBG_CFG_GOOD_BAD_DATA
* This register is used to control the good, bad and scrambled LTP data. This 
* feature is supported in four lane mode only for CRC-16/48. When used with the 
* state tables in the Otter Creek MAS, this feature allows capture of bad LTPs, 
* and the replayed version of that same LTP. Comparing the bits of the 'good' 
* and 'bad' LTPs, produces the error pattern detected by the channel receiver. 
* The captured scrambled data is the actual transmitted data pattern on the wire 
* that experienced the error. The captured scrambled data is valid in CRC-only 
* modes. When FEC is enabled valid good/bad data captures are not aligned with 
* the captured scrambled data.
*/
#define OC_LCB_DBG_CFG_GOOD_BAD_DATA							(OC_LCB_CSRS + 0x000000000338)
#define OC_LCB_DBG_CFG_GOOD_BAD_DATA_RESETCSR						0x00000000F0000030ull
#define OC_LCB_DBG_CFG_GOOD_BAD_DATA_UNUSED_63_37_SHIFT					37
#define OC_LCB_DBG_CFG_GOOD_BAD_DATA_UNUSED_63_37_MASK					0x7FFFFFFull
#define OC_LCB_DBG_CFG_GOOD_BAD_DATA_UNUSED_63_37_SMASK					0xFFFFFFE000000000ull
#define OC_LCB_DBG_CFG_GOOD_BAD_DATA_RAW_REQUIRED_ERR_CNT_SHIFT				32
#define OC_LCB_DBG_CFG_GOOD_BAD_DATA_RAW_REQUIRED_ERR_CNT_MASK				0x1Full
#define OC_LCB_DBG_CFG_GOOD_BAD_DATA_RAW_REQUIRED_ERR_CNT_SMASK				0x1F00000000ull
#define OC_LCB_DBG_CFG_GOOD_BAD_DATA_SHIFTED_LN_ERR_CNT_EN_SHIFT			28
#define OC_LCB_DBG_CFG_GOOD_BAD_DATA_SHIFTED_LN_ERR_CNT_EN_MASK				0xFull
#define OC_LCB_DBG_CFG_GOOD_BAD_DATA_SHIFTED_LN_ERR_CNT_EN_SMASK			0xF0000000ull
#define OC_LCB_DBG_CFG_GOOD_BAD_DATA_UNUSED_27_25_SHIFT					25
#define OC_LCB_DBG_CFG_GOOD_BAD_DATA_UNUSED_27_25_MASK					0x7ull
#define OC_LCB_DBG_CFG_GOOD_BAD_DATA_UNUSED_27_25_SMASK					0xE000000ull
#define OC_LCB_DBG_CFG_GOOD_BAD_DATA_ERR_STAT_MODE_SHIFT				24
#define OC_LCB_DBG_CFG_GOOD_BAD_DATA_ERR_STAT_MODE_MASK					0x1ull
#define OC_LCB_DBG_CFG_GOOD_BAD_DATA_ERR_STAT_MODE_SMASK				0x1000000ull
#define OC_LCB_DBG_CFG_GOOD_BAD_DATA_UNUSED_23_21_SHIFT					21
#define OC_LCB_DBG_CFG_GOOD_BAD_DATA_UNUSED_23_21_MASK					0x7ull
#define OC_LCB_DBG_CFG_GOOD_BAD_DATA_UNUSED_23_21_SMASK					0xE00000ull
#define OC_LCB_DBG_CFG_GOOD_BAD_DATA_SAVE_ALL_SHIFT					20
#define OC_LCB_DBG_CFG_GOOD_BAD_DATA_SAVE_ALL_MASK					0x1ull
#define OC_LCB_DBG_CFG_GOOD_BAD_DATA_SAVE_ALL_SMASK					0x100000ull
#define OC_LCB_DBG_CFG_GOOD_BAD_DATA_UNUSED_19_SHIFT					19
#define OC_LCB_DBG_CFG_GOOD_BAD_DATA_UNUSED_19_MASK					0x1ull
#define OC_LCB_DBG_CFG_GOOD_BAD_DATA_UNUSED_19_SMASK					0x80000ull
#define OC_LCB_DBG_CFG_GOOD_BAD_DATA_SAVE_ESCAPE_ONLY_SHIFT				16
#define OC_LCB_DBG_CFG_GOOD_BAD_DATA_SAVE_ESCAPE_ONLY_MASK				0x7ull
#define OC_LCB_DBG_CFG_GOOD_BAD_DATA_SAVE_ESCAPE_ONLY_SMASK				0x70000ull
#define OC_LCB_DBG_CFG_GOOD_BAD_DATA_UNUSED_15_13_SHIFT					13
#define OC_LCB_DBG_CFG_GOOD_BAD_DATA_UNUSED_15_13_MASK					0x7ull
#define OC_LCB_DBG_CFG_GOOD_BAD_DATA_UNUSED_15_13_SMASK					0xE000ull
#define OC_LCB_DBG_CFG_GOOD_BAD_DATA_SAVE_MULTIPLE_ONLY_SHIFT				12
#define OC_LCB_DBG_CFG_GOOD_BAD_DATA_SAVE_MULTIPLE_ONLY_MASK				0x1ull
#define OC_LCB_DBG_CFG_GOOD_BAD_DATA_SAVE_MULTIPLE_ONLY_SMASK				0x1000ull
#define OC_LCB_DBG_CFG_GOOD_BAD_DATA_UNUSED_11_SHIFT					11
#define OC_LCB_DBG_CFG_GOOD_BAD_DATA_UNUSED_11_MASK					0x1ull
#define OC_LCB_DBG_CFG_GOOD_BAD_DATA_UNUSED_11_SMASK					0x800ull
#define OC_LCB_DBG_CFG_GOOD_BAD_DATA_ADDR_SHIFT						8
#define OC_LCB_DBG_CFG_GOOD_BAD_DATA_ADDR_MASK						0x7ull
#define OC_LCB_DBG_CFG_GOOD_BAD_DATA_ADDR_SMASK						0x700ull
#define OC_LCB_DBG_CFG_GOOD_BAD_DATA_UNUSED_7_6_SHIFT					6
#define OC_LCB_DBG_CFG_GOOD_BAD_DATA_UNUSED_7_6_MASK					0x3ull
#define OC_LCB_DBG_CFG_GOOD_BAD_DATA_UNUSED_7_6_SMASK					0xC0ull
#define OC_LCB_DBG_CFG_GOOD_BAD_DATA_SELECT_SHIFT					4
#define OC_LCB_DBG_CFG_GOOD_BAD_DATA_SELECT_MASK					0x3ull
#define OC_LCB_DBG_CFG_GOOD_BAD_DATA_SELECT_SMASK					0x30ull
#define OC_LCB_DBG_CFG_GOOD_BAD_DATA_UNUSED_3_1_SHIFT					1
#define OC_LCB_DBG_CFG_GOOD_BAD_DATA_UNUSED_3_1_MASK					0x7ull
#define OC_LCB_DBG_CFG_GOOD_BAD_DATA_UNUSED_3_1_SMASK					0xEull
#define OC_LCB_DBG_CFG_GOOD_BAD_DATA_ARM_SHIFT						0
#define OC_LCB_DBG_CFG_GOOD_BAD_DATA_ARM_MASK						0x1ull
#define OC_LCB_DBG_CFG_GOOD_BAD_DATA_ARM_SMASK						0x1ull
/*
* Table #63 of oc_lcb_csrs - LCB_DBG_STS_GOOD_BAD_DATA
* This register is used to observe status associated with the good, bad and 
* scrambled LTP data. Each captured LTP has a number or type that represents how 
* it is formated in memory. Each LTP number is defined in the Good Bad Replay 
* state tables, in the OC MAS. Firmware can use the formated data to extract LTP 
* payload, flits, CRC field, and lane XFR units.
*/
#define OC_LCB_DBG_STS_GOOD_BAD_DATA							(OC_LCB_CSRS + 0x000000000340)
#define OC_LCB_DBG_STS_GOOD_BAD_DATA_RESETCSR						0x0000000000000000ull
#define OC_LCB_DBG_STS_GOOD_BAD_DATA_UNUSED_63_17_SHIFT					17
#define OC_LCB_DBG_STS_GOOD_BAD_DATA_UNUSED_63_17_MASK					0x7FFFFFFFFFFFull
#define OC_LCB_DBG_STS_GOOD_BAD_DATA_UNUSED_63_17_SMASK					0xFFFFFFFFFFFE0000ull
#define OC_LCB_DBG_STS_GOOD_BAD_DATA_TOT_BAD_XFR_SHIFT					12
#define OC_LCB_DBG_STS_GOOD_BAD_DATA_TOT_BAD_XFR_MASK					0x1Full
#define OC_LCB_DBG_STS_GOOD_BAD_DATA_TOT_BAD_XFR_SMASK					0x1F000ull
#define OC_LCB_DBG_STS_GOOD_BAD_DATA_UNUSED_11_SHIFT					11
#define OC_LCB_DBG_STS_GOOD_BAD_DATA_UNUSED_11_MASK					0x1ull
#define OC_LCB_DBG_STS_GOOD_BAD_DATA_UNUSED_11_SMASK					0x800ull
#define OC_LCB_DBG_STS_GOOD_BAD_DATA_LTP_CNT_BAD_SHIFT					8
#define OC_LCB_DBG_STS_GOOD_BAD_DATA_LTP_CNT_BAD_MASK					0x7ull
#define OC_LCB_DBG_STS_GOOD_BAD_DATA_LTP_CNT_BAD_SMASK					0x700ull
#define OC_LCB_DBG_STS_GOOD_BAD_DATA_UNUSED_7_SHIFT					7
#define OC_LCB_DBG_STS_GOOD_BAD_DATA_UNUSED_7_MASK					0x1ull
#define OC_LCB_DBG_STS_GOOD_BAD_DATA_UNUSED_7_SMASK					0x80ull
#define OC_LCB_DBG_STS_GOOD_BAD_DATA_LTP_CNT_GOOD_SHIFT					4
#define OC_LCB_DBG_STS_GOOD_BAD_DATA_LTP_CNT_GOOD_MASK					0x7ull
#define OC_LCB_DBG_STS_GOOD_BAD_DATA_LTP_CNT_GOOD_SMASK					0x70ull
#define OC_LCB_DBG_STS_GOOD_BAD_DATA_UNUSED_3_1_SHIFT					1
#define OC_LCB_DBG_STS_GOOD_BAD_DATA_UNUSED_3_1_MASK					0x7ull
#define OC_LCB_DBG_STS_GOOD_BAD_DATA_UNUSED_3_1_SMASK					0xEull
#define OC_LCB_DBG_STS_GOOD_BAD_DATA_READY_SHIFT					0
#define OC_LCB_DBG_STS_GOOD_BAD_DATA_READY_MASK						0x1ull
#define OC_LCB_DBG_STS_GOOD_BAD_DATA_READY_SMASK					0x1ull
/*
* Table #64 of oc_lcb_csrs - LCB_DBG_STS_GOOD_BAD_DAT0
* This register is used to observe the good, bad and scrambled LTP 
* data.
*/
#define OC_LCB_DBG_STS_GOOD_BAD_DAT0							(OC_LCB_CSRS + 0x000000000348)
#define OC_LCB_DBG_STS_GOOD_BAD_DAT0_RESETCSR						0x0000000000000000ull
#define OC_LCB_DBG_STS_GOOD_BAD_DAT0_VAL_SHIFT						0
#define OC_LCB_DBG_STS_GOOD_BAD_DAT0_VAL_MASK						0xFFFFFFFFFFFFFFFFull
#define OC_LCB_DBG_STS_GOOD_BAD_DAT0_VAL_SMASK						0xFFFFFFFFFFFFFFFFull
/*
* Table #65 of oc_lcb_csrs - LCB_DBG_STS_GOOD_BAD_DAT1
* This register is used to observe the good, bad and scrambled LTP 
* data.
*/
#define OC_LCB_DBG_STS_GOOD_BAD_DAT1							(OC_LCB_CSRS + 0x000000000350)
#define OC_LCB_DBG_STS_GOOD_BAD_DAT1_RESETCSR						0x0000000000000000ull
#define OC_LCB_DBG_STS_GOOD_BAD_DAT1_VAL_SHIFT						0
#define OC_LCB_DBG_STS_GOOD_BAD_DAT1_VAL_MASK						0xFFFFFFFFFFFFFFFFull
#define OC_LCB_DBG_STS_GOOD_BAD_DAT1_VAL_SMASK						0xFFFFFFFFFFFFFFFFull
/*
* Table #66 of oc_lcb_csrs - LCB_DBG_STS_GOOD_BAD_DAT2
* This register is used to observe the good, bad and scrambled LTP 
* data.
*/
#define OC_LCB_DBG_STS_GOOD_BAD_DAT2							(OC_LCB_CSRS + 0x000000000358)
#define OC_LCB_DBG_STS_GOOD_BAD_DAT2_RESETCSR						0x0000000000000000ull
#define OC_LCB_DBG_STS_GOOD_BAD_DAT2_VAL_SHIFT						0
#define OC_LCB_DBG_STS_GOOD_BAD_DAT2_VAL_MASK						0xFFFFFFFFFFFFFFFFull
#define OC_LCB_DBG_STS_GOOD_BAD_DAT2_VAL_SMASK						0xFFFFFFFFFFFFFFFFull
/*
* Table #67 of oc_lcb_csrs - LCB_DBG_STS_GOOD_BAD_DAT3
* This register is used to observe the good, bad and scrambled LTP 
* data.
*/
#define OC_LCB_DBG_STS_GOOD_BAD_DAT3							(OC_LCB_CSRS + 0x000000000360)
#define OC_LCB_DBG_STS_GOOD_BAD_DAT3_RESETCSR						0x0000000000000000ull
#define OC_LCB_DBG_STS_GOOD_BAD_DAT3_VAL_SHIFT						0
#define OC_LCB_DBG_STS_GOOD_BAD_DAT3_VAL_MASK						0xFFFFFFFFFFFFFFFFull
#define OC_LCB_DBG_STS_GOOD_BAD_DAT3_VAL_SMASK						0xFFFFFFFFFFFFFFFFull
/*
* Table #68 of oc_lcb_csrs - LCB_DBG_STS_XFR_ERR_STATS
* This register is used to cnt LTPs with xfr errs within a LTP with a bad 
* CRC.
*/
#define OC_LCB_DBG_STS_XFR_ERR_STATS							(OC_LCB_CSRS + 0x000000000368)
#define OC_LCB_DBG_STS_XFR_ERR_STATS_RESETCSR						0x0000000000000000ull
#define OC_LCB_DBG_STS_XFR_ERR_STATS_XFR_4BAD_SHIFT					58
#define OC_LCB_DBG_STS_XFR_ERR_STATS_XFR_4BAD_MASK					0x3Full
#define OC_LCB_DBG_STS_XFR_ERR_STATS_XFR_4BAD_SMASK					0xFC00000000000000ull
#define OC_LCB_DBG_STS_XFR_ERR_STATS_XFR_3BAD_SHIFT					48
#define OC_LCB_DBG_STS_XFR_ERR_STATS_XFR_3BAD_MASK					0x3FFull
#define OC_LCB_DBG_STS_XFR_ERR_STATS_XFR_3BAD_SMASK					0x3FF000000000000ull
#define OC_LCB_DBG_STS_XFR_ERR_STATS_XFR_2BAD_SHIFT					32
#define OC_LCB_DBG_STS_XFR_ERR_STATS_XFR_2BAD_MASK					0xFFFFull
#define OC_LCB_DBG_STS_XFR_ERR_STATS_XFR_2BAD_SMASK					0xFFFF00000000ull
#define OC_LCB_DBG_STS_XFR_ERR_STATS_XFR_1BAD_SHIFT					0
#define OC_LCB_DBG_STS_XFR_ERR_STATS_XFR_1BAD_MASK					0xFFFFFFFFull
#define OC_LCB_DBG_STS_XFR_ERR_STATS_XFR_1BAD_SMASK					0xFFFFFFFFull
/*
* Table #69 of oc_lcb_csrs - LCB_DBG_CFG_FEC_LN_0
* Used to configure error injection into transmit lane 0
*/
#define OC_LCB_DBG_CFG_FEC_LN_0								(OC_LCB_CSRS + 0x000000000370)
#define OC_LCB_DBG_CFG_FEC_LN_0_RESETCSR						0x1800000000000000ull
#define OC_LCB_DBG_CFG_FEC_LN_0_UNUSED_63_62_SHIFT					62
#define OC_LCB_DBG_CFG_FEC_LN_0_UNUSED_63_62_MASK					0x3ull
#define OC_LCB_DBG_CFG_FEC_LN_0_UNUSED_63_62_SMASK					0xC000000000000000ull
#define OC_LCB_DBG_CFG_FEC_LN_0_LFSR_SEED_SHIFT						59
#define OC_LCB_DBG_CFG_FEC_LN_0_LFSR_SEED_MASK						0x7ull
#define OC_LCB_DBG_CFG_FEC_LN_0_LFSR_SEED_SMASK						0x3800000000000000ull
#define OC_LCB_DBG_CFG_FEC_LN_0_INJ_RATE_SHIFT						54
#define OC_LCB_DBG_CFG_FEC_LN_0_INJ_RATE_MASK						0x1Full
#define OC_LCB_DBG_CFG_FEC_LN_0_INJ_RATE_SMASK						0x7C0000000000000ull
#define OC_LCB_DBG_CFG_FEC_LN_0_RAN_ERR_SHIFT						53
#define OC_LCB_DBG_CFG_FEC_LN_0_RAN_ERR_MASK						0x1ull
#define OC_LCB_DBG_CFG_FEC_LN_0_RAN_ERR_SMASK						0x20000000000000ull
#define OC_LCB_DBG_CFG_FEC_LN_0_SYM_SHIFT_SHIFT						52
#define OC_LCB_DBG_CFG_FEC_LN_0_SYM_SHIFT_MASK						0x1ull
#define OC_LCB_DBG_CFG_FEC_LN_0_SYM_SHIFT_SMASK						0x10000000000000ull
#define OC_LCB_DBG_CFG_FEC_LN_0_ERR_SHIFT						42
#define OC_LCB_DBG_CFG_FEC_LN_0_ERR_MASK						0x3FFull
#define OC_LCB_DBG_CFG_FEC_LN_0_ERR_SMASK						0xFFC0000000000ull
#define OC_LCB_DBG_CFG_FEC_LN_0_SYM_SHIFT						34
#define OC_LCB_DBG_CFG_FEC_LN_0_SYM_MASK						0xFFull
#define OC_LCB_DBG_CFG_FEC_LN_0_SYM_SMASK						0x3FC00000000ull
#define OC_LCB_DBG_CFG_FEC_LN_0_ROW_SHIFT_SHIFT						33
#define OC_LCB_DBG_CFG_FEC_LN_0_ROW_SHIFT_MASK						0x1ull
#define OC_LCB_DBG_CFG_FEC_LN_0_ROW_SHIFT_SMASK						0x200000000ull
#define OC_LCB_DBG_CFG_FEC_LN_0_ROW_SHIFT						0
#define OC_LCB_DBG_CFG_FEC_LN_0_ROW_MASK						0x1FFFFFFFFull
#define OC_LCB_DBG_CFG_FEC_LN_0_ROW_SMASK						0x1FFFFFFFFull
/*
* Table #70 of oc_lcb_csrs - LCB_DBG_CFG_FEC_LN_1
* Used to configure error injection into transmit lane 1
*/
#define OC_LCB_DBG_CFG_FEC_LN_1								(OC_LCB_CSRS + 0x000000000378)
#define OC_LCB_DBG_CFG_FEC_LN_1_RESETCSR						0x2800000000000000ull
#define OC_LCB_DBG_CFG_FEC_LN_1_UNUSED_63_62_SHIFT					62
#define OC_LCB_DBG_CFG_FEC_LN_1_UNUSED_63_62_MASK					0x3ull
#define OC_LCB_DBG_CFG_FEC_LN_1_UNUSED_63_62_SMASK					0xC000000000000000ull
#define OC_LCB_DBG_CFG_FEC_LN_1_LFSR_SEED_SHIFT						59
#define OC_LCB_DBG_CFG_FEC_LN_1_LFSR_SEED_MASK						0x7ull
#define OC_LCB_DBG_CFG_FEC_LN_1_LFSR_SEED_SMASK						0x3800000000000000ull
#define OC_LCB_DBG_CFG_FEC_LN_1_INJ_RATE_SHIFT						54
#define OC_LCB_DBG_CFG_FEC_LN_1_INJ_RATE_MASK						0x1Full
#define OC_LCB_DBG_CFG_FEC_LN_1_INJ_RATE_SMASK						0x7C0000000000000ull
#define OC_LCB_DBG_CFG_FEC_LN_1_RAN_ERR_SHIFT						53
#define OC_LCB_DBG_CFG_FEC_LN_1_RAN_ERR_MASK						0x1ull
#define OC_LCB_DBG_CFG_FEC_LN_1_RAN_ERR_SMASK						0x20000000000000ull
#define OC_LCB_DBG_CFG_FEC_LN_1_SYM_SHIFT_SHIFT						52
#define OC_LCB_DBG_CFG_FEC_LN_1_SYM_SHIFT_MASK						0x1ull
#define OC_LCB_DBG_CFG_FEC_LN_1_SYM_SHIFT_SMASK						0x10000000000000ull
#define OC_LCB_DBG_CFG_FEC_LN_1_ERR_SHIFT						42
#define OC_LCB_DBG_CFG_FEC_LN_1_ERR_MASK						0x3FFull
#define OC_LCB_DBG_CFG_FEC_LN_1_ERR_SMASK						0xFFC0000000000ull
#define OC_LCB_DBG_CFG_FEC_LN_1_SYM_SHIFT						34
#define OC_LCB_DBG_CFG_FEC_LN_1_SYM_MASK						0xFFull
#define OC_LCB_DBG_CFG_FEC_LN_1_SYM_SMASK						0x3FC00000000ull
#define OC_LCB_DBG_CFG_FEC_LN_1_ROW_SHIFT_SHIFT						33
#define OC_LCB_DBG_CFG_FEC_LN_1_ROW_SHIFT_MASK						0x1ull
#define OC_LCB_DBG_CFG_FEC_LN_1_ROW_SHIFT_SMASK						0x200000000ull
#define OC_LCB_DBG_CFG_FEC_LN_1_ROW_SHIFT						0
#define OC_LCB_DBG_CFG_FEC_LN_1_ROW_MASK						0x1FFFFFFFFull
#define OC_LCB_DBG_CFG_FEC_LN_1_ROW_SMASK						0x1FFFFFFFFull
/*
* Table #71 of oc_lcb_csrs - LCB_DBG_CFG_FEC_LN_2
* Used to configure error injection into transmit lane 2
*/
#define OC_LCB_DBG_CFG_FEC_LN_2								(OC_LCB_CSRS + 0x000000000380)
#define OC_LCB_DBG_CFG_FEC_LN_2_RESETCSR						0x3000000000000000ull
#define OC_LCB_DBG_CFG_FEC_LN_2_UNUSED_63_62_SHIFT					62
#define OC_LCB_DBG_CFG_FEC_LN_2_UNUSED_63_62_MASK					0x3ull
#define OC_LCB_DBG_CFG_FEC_LN_2_UNUSED_63_62_SMASK					0xC000000000000000ull
#define OC_LCB_DBG_CFG_FEC_LN_2_LFSR_SEED_SHIFT						59
#define OC_LCB_DBG_CFG_FEC_LN_2_LFSR_SEED_MASK						0x7ull
#define OC_LCB_DBG_CFG_FEC_LN_2_LFSR_SEED_SMASK						0x3800000000000000ull
#define OC_LCB_DBG_CFG_FEC_LN_2_INJ_RATE_SHIFT						54
#define OC_LCB_DBG_CFG_FEC_LN_2_INJ_RATE_MASK						0x1Full
#define OC_LCB_DBG_CFG_FEC_LN_2_INJ_RATE_SMASK						0x7C0000000000000ull
#define OC_LCB_DBG_CFG_FEC_LN_2_RAN_ERR_SHIFT						53
#define OC_LCB_DBG_CFG_FEC_LN_2_RAN_ERR_MASK						0x1ull
#define OC_LCB_DBG_CFG_FEC_LN_2_RAN_ERR_SMASK						0x20000000000000ull
#define OC_LCB_DBG_CFG_FEC_LN_2_SYM_SHIFT_SHIFT						52
#define OC_LCB_DBG_CFG_FEC_LN_2_SYM_SHIFT_MASK						0x1ull
#define OC_LCB_DBG_CFG_FEC_LN_2_SYM_SHIFT_SMASK						0x10000000000000ull
#define OC_LCB_DBG_CFG_FEC_LN_2_ERR_SHIFT						42
#define OC_LCB_DBG_CFG_FEC_LN_2_ERR_MASK						0x3FFull
#define OC_LCB_DBG_CFG_FEC_LN_2_ERR_SMASK						0xFFC0000000000ull
#define OC_LCB_DBG_CFG_FEC_LN_2_SYM_SHIFT						34
#define OC_LCB_DBG_CFG_FEC_LN_2_SYM_MASK						0xFFull
#define OC_LCB_DBG_CFG_FEC_LN_2_SYM_SMASK						0x3FC00000000ull
#define OC_LCB_DBG_CFG_FEC_LN_2_ROW_SHIFT_SHIFT						33
#define OC_LCB_DBG_CFG_FEC_LN_2_ROW_SHIFT_MASK						0x1ull
#define OC_LCB_DBG_CFG_FEC_LN_2_ROW_SHIFT_SMASK						0x200000000ull
#define OC_LCB_DBG_CFG_FEC_LN_2_ROW_SHIFT						0
#define OC_LCB_DBG_CFG_FEC_LN_2_ROW_MASK						0x1FFFFFFFFull
#define OC_LCB_DBG_CFG_FEC_LN_2_ROW_SMASK						0x1FFFFFFFFull
/*
* Table #72 of oc_lcb_csrs - LCB_DBG_CFG_FEC_LN_3
* Used to configure error injection into transmit lane 3
*/
#define OC_LCB_DBG_CFG_FEC_LN_3								(OC_LCB_CSRS + 0x000000000388)
#define OC_LCB_DBG_CFG_FEC_LN_3_RESETCSR						0x3800000000000000ull
#define OC_LCB_DBG_CFG_FEC_LN_3_UNUSED_63_62_SHIFT					62
#define OC_LCB_DBG_CFG_FEC_LN_3_UNUSED_63_62_MASK					0x3ull
#define OC_LCB_DBG_CFG_FEC_LN_3_UNUSED_63_62_SMASK					0xC000000000000000ull
#define OC_LCB_DBG_CFG_FEC_LN_3_LFSR_SEED_SHIFT						59
#define OC_LCB_DBG_CFG_FEC_LN_3_LFSR_SEED_MASK						0x7ull
#define OC_LCB_DBG_CFG_FEC_LN_3_LFSR_SEED_SMASK						0x3800000000000000ull
#define OC_LCB_DBG_CFG_FEC_LN_3_INJ_RATE_SHIFT						54
#define OC_LCB_DBG_CFG_FEC_LN_3_INJ_RATE_MASK						0x1Full
#define OC_LCB_DBG_CFG_FEC_LN_3_INJ_RATE_SMASK						0x7C0000000000000ull
#define OC_LCB_DBG_CFG_FEC_LN_3_RAN_ERR_SHIFT						53
#define OC_LCB_DBG_CFG_FEC_LN_3_RAN_ERR_MASK						0x1ull
#define OC_LCB_DBG_CFG_FEC_LN_3_RAN_ERR_SMASK						0x20000000000000ull
#define OC_LCB_DBG_CFG_FEC_LN_3_SYM_SHIFT_SHIFT						52
#define OC_LCB_DBG_CFG_FEC_LN_3_SYM_SHIFT_MASK						0x1ull
#define OC_LCB_DBG_CFG_FEC_LN_3_SYM_SHIFT_SMASK						0x10000000000000ull
#define OC_LCB_DBG_CFG_FEC_LN_3_ERR_SHIFT						42
#define OC_LCB_DBG_CFG_FEC_LN_3_ERR_MASK						0x3FFull
#define OC_LCB_DBG_CFG_FEC_LN_3_ERR_SMASK						0xFFC0000000000ull
#define OC_LCB_DBG_CFG_FEC_LN_3_SYM_SHIFT						34
#define OC_LCB_DBG_CFG_FEC_LN_3_SYM_MASK						0xFFull
#define OC_LCB_DBG_CFG_FEC_LN_3_SYM_SMASK						0x3FC00000000ull
#define OC_LCB_DBG_CFG_FEC_LN_3_ROW_SHIFT_SHIFT						33
#define OC_LCB_DBG_CFG_FEC_LN_3_ROW_SHIFT_MASK						0x1ull
#define OC_LCB_DBG_CFG_FEC_LN_3_ROW_SHIFT_SMASK						0x200000000ull
#define OC_LCB_DBG_CFG_FEC_LN_3_ROW_SHIFT						0
#define OC_LCB_DBG_CFG_FEC_LN_3_ROW_MASK						0x1FFFFFFFFull
#define OC_LCB_DBG_CFG_FEC_LN_3_ROW_SMASK						0x1FFFFFFFFull
/*
* Table #73 of oc_lcb_csrs - LCB_DBG_CFG_ERRINJ_FEC
* This register is used to enable FEC error injection on a per lane and per 
* codeword basis. When used with the FEC symbol map tables available in the 
* Volume 1 architecture specification, errors can be precisely injected into 
* codewords, to systemically test error correction and detection capability. The 
* four lane symbol map tables directly correlate with the row and column 
* organization of the configuration registers. Degraded lane modes are not fully 
* supported, however, the symbol map tables can be used to provide limited 
* testing.
*/
#define OC_LCB_DBG_CFG_ERRINJ_FEC							(OC_LCB_CSRS + 0x000000000390)
#define OC_LCB_DBG_CFG_ERRINJ_FEC_RESETCSR						0x0000000000000000ull
#define OC_LCB_DBG_CFG_ERRINJ_FEC_UNUSED_63_4_SHIFT					4
#define OC_LCB_DBG_CFG_ERRINJ_FEC_UNUSED_63_4_MASK					0xFFFFFFFFFFFFFFFull
#define OC_LCB_DBG_CFG_ERRINJ_FEC_UNUSED_63_4_SMASK					0xFFFFFFFFFFFFFFF0ull
#define OC_LCB_DBG_CFG_ERRINJ_FEC_LANE_EN3_SHIFT					3
#define OC_LCB_DBG_CFG_ERRINJ_FEC_LANE_EN3_MASK						0x1ull
#define OC_LCB_DBG_CFG_ERRINJ_FEC_LANE_EN3_SMASK					0x8ull
#define OC_LCB_DBG_CFG_ERRINJ_FEC_LANE_EN2_SHIFT					2
#define OC_LCB_DBG_CFG_ERRINJ_FEC_LANE_EN2_MASK						0x1ull
#define OC_LCB_DBG_CFG_ERRINJ_FEC_LANE_EN2_SMASK					0x4ull
#define OC_LCB_DBG_CFG_ERRINJ_FEC_LANE_EN1_SHIFT					1
#define OC_LCB_DBG_CFG_ERRINJ_FEC_LANE_EN1_MASK						0x1ull
#define OC_LCB_DBG_CFG_ERRINJ_FEC_LANE_EN1_SMASK					0x2ull
#define OC_LCB_DBG_CFG_ERRINJ_FEC_LANE_EN0_SHIFT					0
#define OC_LCB_DBG_CFG_ERRINJ_FEC_LANE_EN0_MASK						0x1ull
#define OC_LCB_DBG_CFG_ERRINJ_FEC_LANE_EN0_SMASK					0x1ull
/*
* Table #74 of oc_lcb_csrs - LCB_DBG_ERRINJ_CRC_2
* This register is used to provide CRC error injection stimulus for 
* debug.
*/
#define OC_LCB_DBG_ERRINJ_CRC_2								(OC_LCB_CSRS + 0x000000000398)
#define OC_LCB_DBG_ERRINJ_CRC_2_RESETCSR						0x00000000FFFFFFFFull
#define OC_LCB_DBG_ERRINJ_CRC_2_UNUSED_63_32_SHIFT					32
#define OC_LCB_DBG_ERRINJ_CRC_2_UNUSED_63_32_MASK					0xFFFFFFFFull
#define OC_LCB_DBG_ERRINJ_CRC_2_UNUSED_63_32_SMASK					0xFFFFFFFF00000000ull
#define OC_LCB_DBG_ERRINJ_CRC_2_CRC_ERR_BIT_EN_SHIFT					0
#define OC_LCB_DBG_ERRINJ_CRC_2_CRC_ERR_BIT_EN_MASK					0xFFFFFFFFull
#define OC_LCB_DBG_ERRINJ_CRC_2_CRC_ERR_BIT_EN_SMASK					0xFFFFFFFFull
/*
* Table #75 of oc_lcb_csrs - LCB_ERR_INFO_TOTAL_CRC_ERR
* This register is used to report the total number of Rx side LTPs with a CRC 
* error.
*/
#define OC_LCB_ERR_INFO_TOTAL_CRC_ERR							(OC_LCB_CSRS + 0x000000000500)
#define OC_LCB_ERR_INFO_TOTAL_CRC_ERR_RESETCSR						0x0000000000000000ull
#define OC_LCB_ERR_INFO_TOTAL_CRC_ERR_CNT_SHIFT						0
#define OC_LCB_ERR_INFO_TOTAL_CRC_ERR_CNT_MASK						0xFFFFFFFFFFFFFFFFull
#define OC_LCB_ERR_INFO_TOTAL_CRC_ERR_CNT_SMASK						0xFFFFFFFFFFFFFFFFull
/*
* Table #76 of oc_lcb_csrs - LCB_ERR_INFO_CRC_ERR_LN0
* This register is used to report the total number of Rx side LTPs with a CRC 
* error with lane 0 identified as the culprit.
*/
#define OC_LCB_ERR_INFO_CRC_ERR_LN0							(OC_LCB_CSRS + 0x000000000508)
#define OC_LCB_ERR_INFO_CRC_ERR_LN0_RESETCSR						0x0000000000000000ull
#define OC_LCB_ERR_INFO_CRC_ERR_LN0_CNT_SHIFT						0
#define OC_LCB_ERR_INFO_CRC_ERR_LN0_CNT_MASK						0xFFFFFFFFFFFFFFFFull
#define OC_LCB_ERR_INFO_CRC_ERR_LN0_CNT_SMASK						0xFFFFFFFFFFFFFFFFull
/*
* Table #77 of oc_lcb_csrs - LCB_ERR_INFO_CRC_ERR_LN1
* This register is used to report the total number of Rx side LTPs with a CRC 
* error with lane 1 identified as the culprit.
*/
#define OC_LCB_ERR_INFO_CRC_ERR_LN1							(OC_LCB_CSRS + 0x000000000510)
#define OC_LCB_ERR_INFO_CRC_ERR_LN1_RESETCSR						0x0000000000000000ull
#define OC_LCB_ERR_INFO_CRC_ERR_LN1_CNT_SHIFT						0
#define OC_LCB_ERR_INFO_CRC_ERR_LN1_CNT_MASK						0xFFFFFFFFFFFFFFFFull
#define OC_LCB_ERR_INFO_CRC_ERR_LN1_CNT_SMASK						0xFFFFFFFFFFFFFFFFull
/*
* Table #78 of oc_lcb_csrs - LCB_ERR_INFO_CRC_ERR_LN2
* This register is used to report the total number of Rx side LTPs with a CRC 
* error with lane 2 identified as the culprit.
*/
#define OC_LCB_ERR_INFO_CRC_ERR_LN2							(OC_LCB_CSRS + 0x000000000518)
#define OC_LCB_ERR_INFO_CRC_ERR_LN2_RESETCSR						0x0000000000000000ull
#define OC_LCB_ERR_INFO_CRC_ERR_LN2_CNT_SHIFT						0
#define OC_LCB_ERR_INFO_CRC_ERR_LN2_CNT_MASK						0xFFFFFFFFFFFFFFFFull
#define OC_LCB_ERR_INFO_CRC_ERR_LN2_CNT_SMASK						0xFFFFFFFFFFFFFFFFull
/*
* Table #79 of oc_lcb_csrs - LCB_ERR_INFO_CRC_ERR_LN3
* This register is used to report the total number of Rx side LTPs with a CRC 
* error with lane 3 identified as the culprit.
*/
#define OC_LCB_ERR_INFO_CRC_ERR_LN3							(OC_LCB_CSRS + 0x000000000520)
#define OC_LCB_ERR_INFO_CRC_ERR_LN3_RESETCSR						0x0000000000000000ull
#define OC_LCB_ERR_INFO_CRC_ERR_LN3_CNT_SHIFT						0
#define OC_LCB_ERR_INFO_CRC_ERR_LN3_CNT_MASK						0xFFFFFFFFFFFFFFFFull
#define OC_LCB_ERR_INFO_CRC_ERR_LN3_CNT_SMASK						0xFFFFFFFFFFFFFFFFull
/*
* Table #80 of oc_lcb_csrs - LCB_ERR_INFO_CRC_ERR_MULTI_LN
* This register is used to report the total number of Rx side LTPs with a CRC 
* error with more than one lane identified as the culprit.
*/
#define OC_LCB_ERR_INFO_CRC_ERR_MULTI_LN						(OC_LCB_CSRS + 0x000000000528)
#define OC_LCB_ERR_INFO_CRC_ERR_MULTI_LN_RESETCSR					0x0000000000000000ull
#define OC_LCB_ERR_INFO_CRC_ERR_MULTI_LN_UNUSED_63_20_SHIFT				20
#define OC_LCB_ERR_INFO_CRC_ERR_MULTI_LN_UNUSED_63_20_MASK				0xFFFFFFFFFFFull
#define OC_LCB_ERR_INFO_CRC_ERR_MULTI_LN_UNUSED_63_20_SMASK				0xFFFFFFFFFFF00000ull
#define OC_LCB_ERR_INFO_CRC_ERR_MULTI_LN_CNT_SHIFT					0
#define OC_LCB_ERR_INFO_CRC_ERR_MULTI_LN_CNT_MASK					0xFFFFFull
#define OC_LCB_ERR_INFO_CRC_ERR_MULTI_LN_CNT_SMASK					0xFFFFFull
/*
* Table #81 of oc_lcb_csrs - LCB_ERR_INFO_TX_REPLAY_CNT
* This register is used to report the total number of Tx side retransmission 
* sequences. Each time the Tx enters the replay state this counter is 
* incremented.
*/
#define OC_LCB_ERR_INFO_TX_REPLAY_CNT							(OC_LCB_CSRS + 0x000000000530)
#define OC_LCB_ERR_INFO_TX_REPLAY_CNT_RESETCSR						0x0000000000000000ull
#define OC_LCB_ERR_INFO_TX_REPLAY_CNT_VAL_SHIFT						0
#define OC_LCB_ERR_INFO_TX_REPLAY_CNT_VAL_MASK						0xFFFFFFFFFFFFFFFFull
#define OC_LCB_ERR_INFO_TX_REPLAY_CNT_VAL_SMASK						0xFFFFFFFFFFFFFFFFull
/*
* Table #82 of oc_lcb_csrs - LCB_ERR_INFO_RX_REPLAY_CNT
* This register is used to report the total number of Rx side retransmission 
* sequences. Each time the Rx sends a RetryReqLTP this counter 
* increments.
*/
#define OC_LCB_ERR_INFO_RX_REPLAY_CNT							(OC_LCB_CSRS + 0x000000000538)
#define OC_LCB_ERR_INFO_RX_REPLAY_CNT_RESETCSR						0x0000000000000000ull
#define OC_LCB_ERR_INFO_RX_REPLAY_CNT_VAL_SHIFT						0
#define OC_LCB_ERR_INFO_RX_REPLAY_CNT_VAL_MASK						0xFFFFFFFFFFFFFFFFull
#define OC_LCB_ERR_INFO_RX_REPLAY_CNT_VAL_SMASK						0xFFFFFFFFFFFFFFFFull
/*
* Table #83 of oc_lcb_csrs - LCB_ERR_INFO_SEQ_CRC_CNT
* This register is used to report the total number of Rx side sequential CRC 
* error count.
*/
#define OC_LCB_ERR_INFO_SEQ_CRC_CNT							(OC_LCB_CSRS + 0x000000000540)
#define OC_LCB_ERR_INFO_SEQ_CRC_CNT_RESETCSR						0x0000000000000000ull
#define OC_LCB_ERR_INFO_SEQ_CRC_CNT_UNUSED_63_32_SHIFT					32
#define OC_LCB_ERR_INFO_SEQ_CRC_CNT_UNUSED_63_32_MASK					0xFFFFFFFFull
#define OC_LCB_ERR_INFO_SEQ_CRC_CNT_UNUSED_63_32_SMASK					0xFFFFFFFF00000000ull
#define OC_LCB_ERR_INFO_SEQ_CRC_CNT_VAL_SHIFT						0
#define OC_LCB_ERR_INFO_SEQ_CRC_CNT_VAL_MASK						0xFFFFFFFFull
#define OC_LCB_ERR_INFO_SEQ_CRC_CNT_VAL_SMASK						0xFFFFFFFFull
/*
* Table #84 of oc_lcb_csrs - LCB_ERR_INFO_ESCAPE_0_ONLY_CNT
* This register is used to report the total number of poly 0 only false positive 
* 12 bit CRC checks in 48 bit CRC mode when four lanes are active.
*/
#define OC_LCB_ERR_INFO_ESCAPE_0_ONLY_CNT						(OC_LCB_CSRS + 0x000000000548)
#define OC_LCB_ERR_INFO_ESCAPE_0_ONLY_CNT_RESETCSR					0x0000000000000000ull
#define OC_LCB_ERR_INFO_ESCAPE_0_ONLY_CNT_UNUSED_63_32_SHIFT				32
#define OC_LCB_ERR_INFO_ESCAPE_0_ONLY_CNT_UNUSED_63_32_MASK				0xFFFFFFFFull
#define OC_LCB_ERR_INFO_ESCAPE_0_ONLY_CNT_UNUSED_63_32_SMASK				0xFFFFFFFF00000000ull
#define OC_LCB_ERR_INFO_ESCAPE_0_ONLY_CNT_VAL_SHIFT					0
#define OC_LCB_ERR_INFO_ESCAPE_0_ONLY_CNT_VAL_MASK					0xFFFFFFFFull
#define OC_LCB_ERR_INFO_ESCAPE_0_ONLY_CNT_VAL_SMASK					0xFFFFFFFFull
/*
* Table #85 of oc_lcb_csrs - LCB_ERR_INFO_ESCAPE_0_PLUS1_CNT
* This register is used to report the total number of simultaneous poly 0 and 
* any of the other 3 polys (just 1) false positive 12 bit CRC checks in 48 bit 
* CRC mode when four lanes are active.
*/
#define OC_LCB_ERR_INFO_ESCAPE_0_PLUS1_CNT						(OC_LCB_CSRS + 0x000000000550)
#define OC_LCB_ERR_INFO_ESCAPE_0_PLUS1_CNT_RESETCSR					0x0000000000000000ull
#define OC_LCB_ERR_INFO_ESCAPE_0_PLUS1_CNT_UNUSED_63_32_SHIFT				32
#define OC_LCB_ERR_INFO_ESCAPE_0_PLUS1_CNT_UNUSED_63_32_MASK				0xFFFFFFFFull
#define OC_LCB_ERR_INFO_ESCAPE_0_PLUS1_CNT_UNUSED_63_32_SMASK				0xFFFFFFFF00000000ull
#define OC_LCB_ERR_INFO_ESCAPE_0_PLUS1_CNT_VAL_SHIFT					0
#define OC_LCB_ERR_INFO_ESCAPE_0_PLUS1_CNT_VAL_MASK					0xFFFFFFFFull
#define OC_LCB_ERR_INFO_ESCAPE_0_PLUS1_CNT_VAL_SMASK					0xFFFFFFFFull
/*
* Table #86 of oc_lcb_csrs - LCB_ERR_INFO_ESCAPE_0_PLUS2_CNT
* This register is used to report the total number of simultaneous poly 0 and 
* any two of the other 3 polys (just 2) false positive 12 bit CRC checks in 48 
* bit CRC mode when four lanes are active.
*/
#define OC_LCB_ERR_INFO_ESCAPE_0_PLUS2_CNT						(OC_LCB_CSRS + 0x000000000558)
#define OC_LCB_ERR_INFO_ESCAPE_0_PLUS2_CNT_RESETCSR					0x0000000000000000ull
#define OC_LCB_ERR_INFO_ESCAPE_0_PLUS2_CNT_UNUSED_63_16_SHIFT				16
#define OC_LCB_ERR_INFO_ESCAPE_0_PLUS2_CNT_UNUSED_63_16_MASK				0xFFFFFFFFFFFFull
#define OC_LCB_ERR_INFO_ESCAPE_0_PLUS2_CNT_UNUSED_63_16_SMASK				0xFFFFFFFFFFFF0000ull
#define OC_LCB_ERR_INFO_ESCAPE_0_PLUS2_CNT_VAL_SHIFT					0
#define OC_LCB_ERR_INFO_ESCAPE_0_PLUS2_CNT_VAL_MASK					0xFFFFull
#define OC_LCB_ERR_INFO_ESCAPE_0_PLUS2_CNT_VAL_SMASK					0xFFFFull
/*
* Table #87 of oc_lcb_csrs - LCB_ERR_INFO_REINIT_FROM_PEER_CNT
* This register is used to report the total number of reinit sequences triggered 
* from the peer.
*/
#define OC_LCB_ERR_INFO_REINIT_FROM_PEER_CNT						(OC_LCB_CSRS + 0x000000000560)
#define OC_LCB_ERR_INFO_REINIT_FROM_PEER_CNT_RESETCSR					0x0000000000000000ull
#define OC_LCB_ERR_INFO_REINIT_FROM_PEER_CNT_UNUSED_63_32_SHIFT				32
#define OC_LCB_ERR_INFO_REINIT_FROM_PEER_CNT_UNUSED_63_32_MASK				0xFFFFFFFFull
#define OC_LCB_ERR_INFO_REINIT_FROM_PEER_CNT_UNUSED_63_32_SMASK				0xFFFFFFFF00000000ull
#define OC_LCB_ERR_INFO_REINIT_FROM_PEER_CNT_VAL_SHIFT					0
#define OC_LCB_ERR_INFO_REINIT_FROM_PEER_CNT_VAL_MASK					0xFFFFFFFFull
#define OC_LCB_ERR_INFO_REINIT_FROM_PEER_CNT_VAL_SMASK					0xFFFFFFFFull
/*
* Table #88 of oc_lcb_csrs - LCB_ERR_INFO_SBE_CNT
* This register is used to count ECC SBE errors in the input buffer and replay 
* buffer.
*/
#define OC_LCB_ERR_INFO_SBE_CNT								(OC_LCB_CSRS + 0x000000000568)
#define OC_LCB_ERR_INFO_SBE_CNT_RESETCSR						0x0000000000000000ull
#define OC_LCB_ERR_INFO_SBE_CNT_UNUSED_63_40_SHIFT					40
#define OC_LCB_ERR_INFO_SBE_CNT_UNUSED_63_40_MASK					0xFFFFFFull
#define OC_LCB_ERR_INFO_SBE_CNT_UNUSED_63_40_SMASK					0xFFFFFF0000000000ull
#define OC_LCB_ERR_INFO_SBE_CNT_PM_TIME_FLITS_SHIFT					32
#define OC_LCB_ERR_INFO_SBE_CNT_PM_TIME_FLITS_MASK					0xFFull
#define OC_LCB_ERR_INFO_SBE_CNT_PM_TIME_FLITS_SMASK					0xFF00000000ull
#define OC_LCB_ERR_INFO_SBE_CNT_REPLAY_BUFFER_SIDE_SHIFT				24
#define OC_LCB_ERR_INFO_SBE_CNT_REPLAY_BUFFER_SIDE_MASK					0xFFull
#define OC_LCB_ERR_INFO_SBE_CNT_REPLAY_BUFFER_SIDE_SMASK				0xFF000000ull
#define OC_LCB_ERR_INFO_SBE_CNT_REPLAY_BUFFER1_SHIFT					16
#define OC_LCB_ERR_INFO_SBE_CNT_REPLAY_BUFFER1_MASK					0xFFull
#define OC_LCB_ERR_INFO_SBE_CNT_REPLAY_BUFFER1_SMASK					0xFF0000ull
#define OC_LCB_ERR_INFO_SBE_CNT_REPLAY_BUFFER0_SHIFT					8
#define OC_LCB_ERR_INFO_SBE_CNT_REPLAY_BUFFER0_MASK					0xFFull
#define OC_LCB_ERR_INFO_SBE_CNT_REPLAY_BUFFER0_SMASK					0xFF00ull
#define OC_LCB_ERR_INFO_SBE_CNT_INPUT_BUFFER_SHIFT					0
#define OC_LCB_ERR_INFO_SBE_CNT_INPUT_BUFFER_MASK					0xFFull
#define OC_LCB_ERR_INFO_SBE_CNT_INPUT_BUFFER_SMASK					0xFFull
/*
* Table #89 of oc_lcb_csrs - LCB_ERR_INFO_MISC_FLG_CNT
* This register is used to count error flag events that are informational and 
* not necessarily catastrophic and would tend to occur only at very high BER. 
* The logic attempts to ride through these events.
*/
#define OC_LCB_ERR_INFO_MISC_FLG_CNT							(OC_LCB_CSRS + 0x000000000570)
#define OC_LCB_ERR_INFO_MISC_FLG_CNT_RESETCSR						0x0000000000000000ull
#define OC_LCB_ERR_INFO_MISC_FLG_CNT_UNUSED_63_32_SHIFT					32
#define OC_LCB_ERR_INFO_MISC_FLG_CNT_UNUSED_63_32_MASK					0xFFFFFFFFull
#define OC_LCB_ERR_INFO_MISC_FLG_CNT_UNUSED_63_32_SMASK					0xFFFFFFFF00000000ull
#define OC_LCB_ERR_INFO_MISC_FLG_CNT_RST_FOR_INCOMPLT_RND_TRIP_SHIFT			24
#define OC_LCB_ERR_INFO_MISC_FLG_CNT_RST_FOR_INCOMPLT_RND_TRIP_MASK			0xFFull
#define OC_LCB_ERR_INFO_MISC_FLG_CNT_RST_FOR_INCOMPLT_RND_TRIP_SMASK			0xFF000000ull
#define OC_LCB_ERR_INFO_MISC_FLG_CNT_RST_FOR_LINK_TIMEOUT_SHIFT				16
#define OC_LCB_ERR_INFO_MISC_FLG_CNT_RST_FOR_LINK_TIMEOUT_MASK				0xFFull
#define OC_LCB_ERR_INFO_MISC_FLG_CNT_RST_FOR_LINK_TIMEOUT_SMASK				0xFF0000ull
#define OC_LCB_ERR_INFO_MISC_FLG_CNT_ALL_LNS_FAILED_REINIT_TEST_SHIFT			8
#define OC_LCB_ERR_INFO_MISC_FLG_CNT_ALL_LNS_FAILED_REINIT_TEST_MASK			0xFFull
#define OC_LCB_ERR_INFO_MISC_FLG_CNT_ALL_LNS_FAILED_REINIT_TEST_SMASK			0xFF00ull
#define OC_LCB_ERR_INFO_MISC_FLG_CNT_RST_FOR_FAILED_DESKEW_SHIFT			0
#define OC_LCB_ERR_INFO_MISC_FLG_CNT_RST_FOR_FAILED_DESKEW_MASK				0xFFull
#define OC_LCB_ERR_INFO_MISC_FLG_CNT_RST_FOR_FAILED_DESKEW_SMASK			0xFFull
/*
* Table #90 of oc_lcb_csrs - LCB_ERR_INFO_ECC_INPUT_BUF
* This register is used to report ECC errors in the input buffer 
* RAMs.
*/
#define OC_LCB_ERR_INFO_ECC_INPUT_BUF							(OC_LCB_CSRS + 0x000000000578)
#define OC_LCB_ERR_INFO_ECC_INPUT_BUF_RESETCSR						0x0000000000000000ull
#define OC_LCB_ERR_INFO_ECC_INPUT_BUF_UNUSED_63_21_SHIFT				21
#define OC_LCB_ERR_INFO_ECC_INPUT_BUF_UNUSED_63_21_MASK					0x7FFFFFFFFFFull
#define OC_LCB_ERR_INFO_ECC_INPUT_BUF_UNUSED_63_21_SMASK				0xFFFFFFFFFFE00000ull
#define OC_LCB_ERR_INFO_ECC_INPUT_BUF_CSR_CREATED_SHIFT					20
#define OC_LCB_ERR_INFO_ECC_INPUT_BUF_CSR_CREATED_MASK					0x1ull
#define OC_LCB_ERR_INFO_ECC_INPUT_BUF_CSR_CREATED_SMASK					0x100000ull
#define OC_LCB_ERR_INFO_ECC_INPUT_BUF_UNUSED_19_SHIFT					19
#define OC_LCB_ERR_INFO_ECC_INPUT_BUF_UNUSED_19_MASK					0x1ull
#define OC_LCB_ERR_INFO_ECC_INPUT_BUF_UNUSED_19_SMASK					0x80000ull
#define OC_LCB_ERR_INFO_ECC_INPUT_BUF_LOCATION_SHIFT					16
#define OC_LCB_ERR_INFO_ECC_INPUT_BUF_LOCATION_MASK					0x7ull
#define OC_LCB_ERR_INFO_ECC_INPUT_BUF_LOCATION_SMASK					0x70000ull
#define OC_LCB_ERR_INFO_ECC_INPUT_BUF_SYNDROME_SHIFT					8
#define OC_LCB_ERR_INFO_ECC_INPUT_BUF_SYNDROME_MASK					0xFFull
#define OC_LCB_ERR_INFO_ECC_INPUT_BUF_SYNDROME_SMASK					0xFF00ull
#define OC_LCB_ERR_INFO_ECC_INPUT_BUF_CHK_SHIFT						0
#define OC_LCB_ERR_INFO_ECC_INPUT_BUF_CHK_MASK						0xFFull
#define OC_LCB_ERR_INFO_ECC_INPUT_BUF_CHK_SMASK						0xFFull
/*
* Table #91 of oc_lcb_csrs - LCB_ERR_INFO_ECC_INPUT_BUF_FLIT_DATA_UPPER_33BITS
* This register is used to report ECC errors in the input buffer 
* RAMs.
*/
#define OC_LCB_ERR_INFO_ECC_INPUT_BUF_FLIT_DATA_UPPER_33BITS				(OC_LCB_CSRS + 0x000000000580)
#define OC_LCB_ERR_INFO_ECC_INPUT_BUF_FLIT_DATA_UPPER_33BITS_RESETCSR			0x0000000000000000ull
#define OC_LCB_ERR_INFO_ECC_INPUT_BUF_FLIT_DATA_UPPER_33BITS_UNUSED_63_33_SHIFT		33
#define OC_LCB_ERR_INFO_ECC_INPUT_BUF_FLIT_DATA_UPPER_33BITS_UNUSED_63_33_MASK		0x7FFFFFFFull
#define OC_LCB_ERR_INFO_ECC_INPUT_BUF_FLIT_DATA_UPPER_33BITS_UNUSED_63_33_SMASK		0xFFFFFFFE00000000ull
#define OC_LCB_ERR_INFO_ECC_INPUT_BUF_FLIT_DATA_UPPER_33BITS_DATA_SHIFT			0
#define OC_LCB_ERR_INFO_ECC_INPUT_BUF_FLIT_DATA_UPPER_33BITS_DATA_MASK			0x1FFFFFFFFull
#define OC_LCB_ERR_INFO_ECC_INPUT_BUF_FLIT_DATA_UPPER_33BITS_DATA_SMASK			0x1FFFFFFFFull
/*
* Table #92 of oc_lcb_csrs - LCB_ERR_INFO_ECC_INPUT_BUF_FLIT_DATA_LOWER_32BITS
* This register is used to report ECC errors in the input buffer 
* RAMs.
*/
#define OC_LCB_ERR_INFO_ECC_INPUT_BUF_FLIT_DATA_LOWER_32BITS				(OC_LCB_CSRS + 0x000000000588)
#define OC_LCB_ERR_INFO_ECC_INPUT_BUF_FLIT_DATA_LOWER_32BITS_RESETCSR			0x0000000000000000ull
#define OC_LCB_ERR_INFO_ECC_INPUT_BUF_FLIT_DATA_LOWER_32BITS_UNUSED_63_32_SHIFT		32
#define OC_LCB_ERR_INFO_ECC_INPUT_BUF_FLIT_DATA_LOWER_32BITS_UNUSED_63_32_MASK		0xFFFFFFFFull
#define OC_LCB_ERR_INFO_ECC_INPUT_BUF_FLIT_DATA_LOWER_32BITS_UNUSED_63_32_SMASK		0xFFFFFFFF00000000ull
#define OC_LCB_ERR_INFO_ECC_INPUT_BUF_FLIT_DATA_LOWER_32BITS_DATA_SHIFT			0
#define OC_LCB_ERR_INFO_ECC_INPUT_BUF_FLIT_DATA_LOWER_32BITS_DATA_MASK			0xFFFFFFFFull
#define OC_LCB_ERR_INFO_ECC_INPUT_BUF_FLIT_DATA_LOWER_32BITS_DATA_SMASK			0xFFFFFFFFull
/*
* Table #93 of oc_lcb_csrs - LCB_ERR_INFO_ECC_REPLAY_BUF
* This register is used to report ECC errors in the replay buffer 
* RAMs.
*/
#define OC_LCB_ERR_INFO_ECC_REPLAY_BUF							(OC_LCB_CSRS + 0x000000000590)
#define OC_LCB_ERR_INFO_ECC_REPLAY_BUF_RESETCSR						0x0000000000000000ull
#define OC_LCB_ERR_INFO_ECC_REPLAY_BUF_UNUSED_63_25_SHIFT				25
#define OC_LCB_ERR_INFO_ECC_REPLAY_BUF_UNUSED_63_25_MASK				0x7FFFFFFFFFull
#define OC_LCB_ERR_INFO_ECC_REPLAY_BUF_UNUSED_63_25_SMASK				0xFFFFFFFFFE000000ull
#define OC_LCB_ERR_INFO_ECC_REPLAY_BUF_CSR_CREATED_SHIFT				24
#define OC_LCB_ERR_INFO_ECC_REPLAY_BUF_CSR_CREATED_MASK					0x1ull
#define OC_LCB_ERR_INFO_ECC_REPLAY_BUF_CSR_CREATED_SMASK				0x1000000ull
#define OC_LCB_ERR_INFO_ECC_REPLAY_BUF_UNUSED_23_21_SHIFT				21
#define OC_LCB_ERR_INFO_ECC_REPLAY_BUF_UNUSED_23_21_MASK				0x7ull
#define OC_LCB_ERR_INFO_ECC_REPLAY_BUF_UNUSED_23_21_SMASK				0xE00000ull
#define OC_LCB_ERR_INFO_ECC_REPLAY_BUF_LOCATION_SHIFT					16
#define OC_LCB_ERR_INFO_ECC_REPLAY_BUF_LOCATION_MASK					0x1Full
#define OC_LCB_ERR_INFO_ECC_REPLAY_BUF_LOCATION_SMASK					0x1F0000ull
#define OC_LCB_ERR_INFO_ECC_REPLAY_BUF_SYNDROME_SHIFT					8
#define OC_LCB_ERR_INFO_ECC_REPLAY_BUF_SYNDROME_MASK					0xFFull
#define OC_LCB_ERR_INFO_ECC_REPLAY_BUF_SYNDROME_SMASK					0xFF00ull
#define OC_LCB_ERR_INFO_ECC_REPLAY_BUF_CHK_SHIFT					0
#define OC_LCB_ERR_INFO_ECC_REPLAY_BUF_CHK_MASK						0xFFull
#define OC_LCB_ERR_INFO_ECC_REPLAY_BUF_CHK_SMASK					0xFFull
/*
* Table #94 of oc_lcb_csrs - LCB_ERR_INFO_ECC_REPLAY_BUF_FLIT_DATA_UPPER_33BITS
* This register is used to report ECC errors in the replay buffer 
* RAMs.
*/
#define OC_LCB_ERR_INFO_ECC_REPLAY_BUF_FLIT_DATA_UPPER_33BITS				(OC_LCB_CSRS + 0x000000000598)
#define OC_LCB_ERR_INFO_ECC_REPLAY_BUF_FLIT_DATA_UPPER_33BITS_RESETCSR			0x0000000000000000ull
#define OC_LCB_ERR_INFO_ECC_REPLAY_BUF_FLIT_DATA_UPPER_33BITS_UNUSED_63_33_SHIFT	33
#define OC_LCB_ERR_INFO_ECC_REPLAY_BUF_FLIT_DATA_UPPER_33BITS_UNUSED_63_33_MASK		0x7FFFFFFFull
#define OC_LCB_ERR_INFO_ECC_REPLAY_BUF_FLIT_DATA_UPPER_33BITS_UNUSED_63_33_SMASK	0xFFFFFFFE00000000ull
#define OC_LCB_ERR_INFO_ECC_REPLAY_BUF_FLIT_DATA_UPPER_33BITS_DATA_SHIFT		0
#define OC_LCB_ERR_INFO_ECC_REPLAY_BUF_FLIT_DATA_UPPER_33BITS_DATA_MASK			0x1FFFFFFFFull
#define OC_LCB_ERR_INFO_ECC_REPLAY_BUF_FLIT_DATA_UPPER_33BITS_DATA_SMASK		0x1FFFFFFFFull
/*
* Table #95 of oc_lcb_csrs - LCB_ERR_INFO_ECC_REPLAY_BUF_FLIT_DATA_LOWER_32BITS
* This register is used to report ECC errors in the replay buffer 
* RAMs.
*/
#define OC_LCB_ERR_INFO_ECC_REPLAY_BUF_FLIT_DATA_LOWER_32BITS				(OC_LCB_CSRS + 0x0000000005A0)
#define OC_LCB_ERR_INFO_ECC_REPLAY_BUF_FLIT_DATA_LOWER_32BITS_RESETCSR			0x0000000000000000ull
#define OC_LCB_ERR_INFO_ECC_REPLAY_BUF_FLIT_DATA_LOWER_32BITS_UNUSED_63_32_SHIFT	32
#define OC_LCB_ERR_INFO_ECC_REPLAY_BUF_FLIT_DATA_LOWER_32BITS_UNUSED_63_32_MASK		0xFFFFFFFFull
#define OC_LCB_ERR_INFO_ECC_REPLAY_BUF_FLIT_DATA_LOWER_32BITS_UNUSED_63_32_SMASK	0xFFFFFFFF00000000ull
#define OC_LCB_ERR_INFO_ECC_REPLAY_BUF_FLIT_DATA_LOWER_32BITS_DATA_SHIFT		0
#define OC_LCB_ERR_INFO_ECC_REPLAY_BUF_FLIT_DATA_LOWER_32BITS_DATA_MASK			0xFFFFFFFFull
#define OC_LCB_ERR_INFO_ECC_REPLAY_BUF_FLIT_DATA_LOWER_32BITS_DATA_SMASK		0xFFFFFFFFull
/*
* Table #96 of oc_lcb_csrs - LCB_ERR_INFO_ECC_PM_TIME
* This register is used to report ECC errors in the replay buffer 
* RAMs.
*/
#define OC_LCB_ERR_INFO_ECC_PM_TIME							(OC_LCB_CSRS + 0x0000000005A8)
#define OC_LCB_ERR_INFO_ECC_PM_TIME_RESETCSR						0x0000000000000000ull
#define OC_LCB_ERR_INFO_ECC_PM_TIME_UNUSED_63_25_SHIFT					25
#define OC_LCB_ERR_INFO_ECC_PM_TIME_UNUSED_63_25_MASK					0x7FFFFFFFFFull
#define OC_LCB_ERR_INFO_ECC_PM_TIME_UNUSED_63_25_SMASK					0xFFFFFFFFFE000000ull
#define OC_LCB_ERR_INFO_ECC_PM_TIME_CSR_CREATED_SHIFT					24
#define OC_LCB_ERR_INFO_ECC_PM_TIME_CSR_CREATED_MASK					0x1ull
#define OC_LCB_ERR_INFO_ECC_PM_TIME_CSR_CREATED_SMASK					0x1000000ull
#define OC_LCB_ERR_INFO_ECC_PM_TIME_LOCATION_SHIFT					16
#define OC_LCB_ERR_INFO_ECC_PM_TIME_LOCATION_MASK					0xFFull
#define OC_LCB_ERR_INFO_ECC_PM_TIME_LOCATION_SMASK					0xFF0000ull
#define OC_LCB_ERR_INFO_ECC_PM_TIME_SYNDROME_SHIFT					8
#define OC_LCB_ERR_INFO_ECC_PM_TIME_SYNDROME_MASK					0xFFull
#define OC_LCB_ERR_INFO_ECC_PM_TIME_SYNDROME_SMASK					0xFF00ull
#define OC_LCB_ERR_INFO_ECC_PM_TIME_CHK_SHIFT						0
#define OC_LCB_ERR_INFO_ECC_PM_TIME_CHK_MASK						0xFFull
#define OC_LCB_ERR_INFO_ECC_PM_TIME_CHK_SMASK						0xFFull
/*
* Table #97 of oc_lcb_csrs - LCB_ERR_INFO_ECC_PM_TIME_FLIT_DATA_UPPER_33BITS
* This register is used to report ECC errors in the replay buffer 
* RAMs.
*/
#define OC_LCB_ERR_INFO_ECC_PM_TIME_FLIT_DATA_UPPER_33BITS				(OC_LCB_CSRS + 0x0000000005B0)
#define OC_LCB_ERR_INFO_ECC_PM_TIME_FLIT_DATA_UPPER_33BITS_RESETCSR			0x0000000000000000ull
#define OC_LCB_ERR_INFO_ECC_PM_TIME_FLIT_DATA_UPPER_33BITS_UNUSED_63_33_SHIFT		33
#define OC_LCB_ERR_INFO_ECC_PM_TIME_FLIT_DATA_UPPER_33BITS_UNUSED_63_33_MASK		0x7FFFFFFFull
#define OC_LCB_ERR_INFO_ECC_PM_TIME_FLIT_DATA_UPPER_33BITS_UNUSED_63_33_SMASK		0xFFFFFFFE00000000ull
#define OC_LCB_ERR_INFO_ECC_PM_TIME_FLIT_DATA_UPPER_33BITS_DATA_SHIFT			0
#define OC_LCB_ERR_INFO_ECC_PM_TIME_FLIT_DATA_UPPER_33BITS_DATA_MASK			0x1FFFFFFFFull
#define OC_LCB_ERR_INFO_ECC_PM_TIME_FLIT_DATA_UPPER_33BITS_DATA_SMASK			0x1FFFFFFFFull
/*
* Table #98 of oc_lcb_csrs - LCB_ERR_INFO_ECC_PM_TIME_FLIT_DATA_LOWER_32BITS
* This register is used to report ECC errors in high priority MasterTime sync 
* flits when sending off of port mirror bus and onto the wire. These high 
* priority flits bypass the FIFO and are sent directly to the physical layer 
* transmitter.
*/
#define OC_LCB_ERR_INFO_ECC_PM_TIME_FLIT_DATA_LOWER_32BITS				(OC_LCB_CSRS + 0x0000000005B8)
#define OC_LCB_ERR_INFO_ECC_PM_TIME_FLIT_DATA_LOWER_32BITS_RESETCSR			0x0000000000000000ull
#define OC_LCB_ERR_INFO_ECC_PM_TIME_FLIT_DATA_LOWER_32BITS_UNUSED_63_32_SHIFT		32
#define OC_LCB_ERR_INFO_ECC_PM_TIME_FLIT_DATA_LOWER_32BITS_UNUSED_63_32_MASK		0xFFFFFFFFull
#define OC_LCB_ERR_INFO_ECC_PM_TIME_FLIT_DATA_LOWER_32BITS_UNUSED_63_32_SMASK		0xFFFFFFFF00000000ull
#define OC_LCB_ERR_INFO_ECC_PM_TIME_FLIT_DATA_LOWER_32BITS_DATA_SHIFT			0
#define OC_LCB_ERR_INFO_ECC_PM_TIME_FLIT_DATA_LOWER_32BITS_DATA_MASK			0xFFFFFFFFull
#define OC_LCB_ERR_INFO_ECC_PM_TIME_FLIT_DATA_LOWER_32BITS_DATA_SMASK			0xFFFFFFFFull
/*
* Table #99 of oc_lcb_csrs - LCB_ERR_INFO_FEC_CERR_CNT_1
* This register is one of an eight register set that counts corrected symbol 
* errors in each received code word. If one symbol error is corrected in a 
* received code word this register increments. This register is active for both 
* RS(132,128) and RS(528,512).
*/
#define OC_LCB_ERR_INFO_FEC_CERR_CNT_1							(OC_LCB_CSRS + 0x0000000005C0)
#define OC_LCB_ERR_INFO_FEC_CERR_CNT_1_RESETCSR						0x0000000000000000ull
#define OC_LCB_ERR_INFO_FEC_CERR_CNT_1_UNUSED_63_48_SHIFT				48
#define OC_LCB_ERR_INFO_FEC_CERR_CNT_1_UNUSED_63_48_MASK				0xFFFFull
#define OC_LCB_ERR_INFO_FEC_CERR_CNT_1_UNUSED_63_48_SMASK				0xFFFF000000000000ull
#define OC_LCB_ERR_INFO_FEC_CERR_CNT_1_DATA_SHIFT					0
#define OC_LCB_ERR_INFO_FEC_CERR_CNT_1_DATA_MASK					0xFFFFFFFFFFFFull
#define OC_LCB_ERR_INFO_FEC_CERR_CNT_1_DATA_SMASK					0xFFFFFFFFFFFFull
/*
* Table #100 of oc_lcb_csrs - LCB_ERR_INFO_FEC_CERR_CNT_2
* This register is one of an eight register set that counts corrected symbol 
* errors in each received code word. If two symbol errors are corrected in a 
* received code word this register increments. This register is active for both 
* RS(132,128) and RS(528,512).
*/
#define OC_LCB_ERR_INFO_FEC_CERR_CNT_2							(OC_LCB_CSRS + 0x0000000005C8)
#define OC_LCB_ERR_INFO_FEC_CERR_CNT_2_RESETCSR						0x0000000000000000ull
#define OC_LCB_ERR_INFO_FEC_CERR_CNT_2_UNUSED_63_48_SHIFT				48
#define OC_LCB_ERR_INFO_FEC_CERR_CNT_2_UNUSED_63_48_MASK				0xFFFFull
#define OC_LCB_ERR_INFO_FEC_CERR_CNT_2_UNUSED_63_48_SMASK				0xFFFF000000000000ull
#define OC_LCB_ERR_INFO_FEC_CERR_CNT_2_DATA_SHIFT					0
#define OC_LCB_ERR_INFO_FEC_CERR_CNT_2_DATA_MASK					0xFFFFFFFFFFFFull
#define OC_LCB_ERR_INFO_FEC_CERR_CNT_2_DATA_SMASK					0xFFFFFFFFFFFFull
/*
* Table #101 of oc_lcb_csrs - LCB_ERR_INFO_FEC_CERR_CNT_3
* This register is one of an eight register set that counts corrected symbol 
* errors in each received code word. If three symbol errors are corrected in a 
* received code word this register increments. This register is active for 
* RS(528,512).
*/
#define OC_LCB_ERR_INFO_FEC_CERR_CNT_3							(OC_LCB_CSRS + 0x0000000005D0)
#define OC_LCB_ERR_INFO_FEC_CERR_CNT_3_RESETCSR						0x0000000000000000ull
#define OC_LCB_ERR_INFO_FEC_CERR_CNT_3_UNUSED_63_48_SHIFT				48
#define OC_LCB_ERR_INFO_FEC_CERR_CNT_3_UNUSED_63_48_MASK				0xFFFFull
#define OC_LCB_ERR_INFO_FEC_CERR_CNT_3_UNUSED_63_48_SMASK				0xFFFF000000000000ull
#define OC_LCB_ERR_INFO_FEC_CERR_CNT_3_DATA_SHIFT					0
#define OC_LCB_ERR_INFO_FEC_CERR_CNT_3_DATA_MASK					0xFFFFFFFFFFFFull
#define OC_LCB_ERR_INFO_FEC_CERR_CNT_3_DATA_SMASK					0xFFFFFFFFFFFFull
/*
* Table #102 of oc_lcb_csrs - LCB_ERR_INFO_FEC_CERR_CNT_4
* This register is one of an eight register set that counts corrected symbol 
* errors in each received code word. If four symbol errors are corrected in a 
* received code word this register increments. This register is active for 
* RS(528,512).
*/
#define OC_LCB_ERR_INFO_FEC_CERR_CNT_4							(OC_LCB_CSRS + 0x0000000005D8)
#define OC_LCB_ERR_INFO_FEC_CERR_CNT_4_RESETCSR						0x0000000000000000ull
#define OC_LCB_ERR_INFO_FEC_CERR_CNT_4_UNUSED_63_48_SHIFT				48
#define OC_LCB_ERR_INFO_FEC_CERR_CNT_4_UNUSED_63_48_MASK				0xFFFFull
#define OC_LCB_ERR_INFO_FEC_CERR_CNT_4_UNUSED_63_48_SMASK				0xFFFF000000000000ull
#define OC_LCB_ERR_INFO_FEC_CERR_CNT_4_DATA_SHIFT					0
#define OC_LCB_ERR_INFO_FEC_CERR_CNT_4_DATA_MASK					0xFFFFFFFFFFFFull
#define OC_LCB_ERR_INFO_FEC_CERR_CNT_4_DATA_SMASK					0xFFFFFFFFFFFFull
/*
* Table #103 of oc_lcb_csrs - LCB_ERR_INFO_FEC_CERR_CNT_5
* This register is one of an eight register set that counts corrected symbol 
* errors in each received code word. If five symbol errors are corrected in a 
* received code word this register increments. This register is active for 
* RS(528,512).
*/
#define OC_LCB_ERR_INFO_FEC_CERR_CNT_5							(OC_LCB_CSRS + 0x0000000005E0)
#define OC_LCB_ERR_INFO_FEC_CERR_CNT_5_RESETCSR						0x0000000000000000ull
#define OC_LCB_ERR_INFO_FEC_CERR_CNT_5_UNUSED_63_32_SHIFT				32
#define OC_LCB_ERR_INFO_FEC_CERR_CNT_5_UNUSED_63_32_MASK				0xFFFFFFFFull
#define OC_LCB_ERR_INFO_FEC_CERR_CNT_5_UNUSED_63_32_SMASK				0xFFFFFFFF00000000ull
#define OC_LCB_ERR_INFO_FEC_CERR_CNT_5_DATA_SHIFT					0
#define OC_LCB_ERR_INFO_FEC_CERR_CNT_5_DATA_MASK					0xFFFFFFFFull
#define OC_LCB_ERR_INFO_FEC_CERR_CNT_5_DATA_SMASK					0xFFFFFFFFull
/*
* Table #104 of oc_lcb_csrs - LCB_ERR_INFO_FEC_CERR_CNT_6
* This register is one of an eight register set that counts corrected symbol 
* errors in each received code word. If six symbol errors are corrected in a 
* received code word this register increments. This register is active for 
* RS(528,512).
*/
#define OC_LCB_ERR_INFO_FEC_CERR_CNT_6							(OC_LCB_CSRS + 0x0000000005E8)
#define OC_LCB_ERR_INFO_FEC_CERR_CNT_6_RESETCSR						0x0000000000000000ull
#define OC_LCB_ERR_INFO_FEC_CERR_CNT_6_UNUSED_63_32_SHIFT				32
#define OC_LCB_ERR_INFO_FEC_CERR_CNT_6_UNUSED_63_32_MASK				0xFFFFFFFFull
#define OC_LCB_ERR_INFO_FEC_CERR_CNT_6_UNUSED_63_32_SMASK				0xFFFFFFFF00000000ull
#define OC_LCB_ERR_INFO_FEC_CERR_CNT_6_DATA_SHIFT					0
#define OC_LCB_ERR_INFO_FEC_CERR_CNT_6_DATA_MASK					0xFFFFFFFFull
#define OC_LCB_ERR_INFO_FEC_CERR_CNT_6_DATA_SMASK					0xFFFFFFFFull
/*
* Table #105 of oc_lcb_csrs - LCB_ERR_INFO_FEC_CERR_CNT_7
* This register is one of an eight register set that counts corrected symbol 
* errors in each received code word. If seven symbol errors are corrected in a 
* received code word this register increments. This register is active for 
* RS(528,512).
*/
#define OC_LCB_ERR_INFO_FEC_CERR_CNT_7							(OC_LCB_CSRS + 0x0000000005F0)
#define OC_LCB_ERR_INFO_FEC_CERR_CNT_7_RESETCSR						0x0000000000000000ull
#define OC_LCB_ERR_INFO_FEC_CERR_CNT_7_UNUSED_63_32_SHIFT				32
#define OC_LCB_ERR_INFO_FEC_CERR_CNT_7_UNUSED_63_32_MASK				0xFFFFFFFFull
#define OC_LCB_ERR_INFO_FEC_CERR_CNT_7_UNUSED_63_32_SMASK				0xFFFFFFFF00000000ull
#define OC_LCB_ERR_INFO_FEC_CERR_CNT_7_DATA_SHIFT					0
#define OC_LCB_ERR_INFO_FEC_CERR_CNT_7_DATA_MASK					0xFFFFFFFFull
#define OC_LCB_ERR_INFO_FEC_CERR_CNT_7_DATA_SMASK					0xFFFFFFFFull
/*
* Table #106 of oc_lcb_csrs - LCB_ERR_INFO_FEC_CERR_CNT_8
* This register is one of an eight register set that counts corrected symbol 
* errors in each received code word. If eight symbol errors are corrected in a 
* received code word this register increments. This register is active for 
* RS(528,512).
*/
#define OC_LCB_ERR_INFO_FEC_CERR_CNT_8							(OC_LCB_CSRS + 0x0000000005F8)
#define OC_LCB_ERR_INFO_FEC_CERR_CNT_8_RESETCSR						0x0000000000000000ull
#define OC_LCB_ERR_INFO_FEC_CERR_CNT_8_UNUSED_63_32_SHIFT				32
#define OC_LCB_ERR_INFO_FEC_CERR_CNT_8_UNUSED_63_32_MASK				0xFFFFFFFFull
#define OC_LCB_ERR_INFO_FEC_CERR_CNT_8_UNUSED_63_32_SMASK				0xFFFFFFFF00000000ull
#define OC_LCB_ERR_INFO_FEC_CERR_CNT_8_DATA_SHIFT					0
#define OC_LCB_ERR_INFO_FEC_CERR_CNT_8_DATA_MASK					0xFFFFFFFFull
#define OC_LCB_ERR_INFO_FEC_CERR_CNT_8_DATA_SMASK					0xFFFFFFFFull
/*
* Table #107 of oc_lcb_csrs - LCB_ERR_INFO_FEC_UERR_CNT
* This register counts the number of uncorrected code words detected by the FEC 
* decoder. If the FEC decoder detects an uncorrectable error in a code word this 
* register increments. This register is active for both RS(132,128) and 
* RS(528,512). For RS(132,128) this register increments if there are more than 
* t=2 symbol errors. For RS(528,512) this register increments if there are more 
* than t=8 symbol errors. In both cases, if there are more than 2t symbol errors 
* in a code word, the FEC decoder detects the uncorrectable error state with 
* probability ~(1-1/t!), and increments this counter. A replay request is 
* generated when an uncorrectable error is detected. The replay starts from the 
* first LTP (or earlier) associated with the bad code word. The bad code word is 
* delivered to the CRC check engine with a maximum of e+t symbol errors, where e 
* > t, is the number of symbol errors at the decoder input. A subsequent 
* sequential CRC error generates a recovery, in lieu of the replay. CRC errors 
* are counted normally.
*/
#define OC_LCB_ERR_INFO_FEC_UERR_CNT							(OC_LCB_CSRS + 0x000000000600)
#define OC_LCB_ERR_INFO_FEC_UERR_CNT_RESETCSR						0x0000000000000000ull
#define OC_LCB_ERR_INFO_FEC_UERR_CNT_UNUSED_63_32_SHIFT					32
#define OC_LCB_ERR_INFO_FEC_UERR_CNT_UNUSED_63_32_MASK					0xFFFFFFFFull
#define OC_LCB_ERR_INFO_FEC_UERR_CNT_UNUSED_63_32_SMASK					0xFFFFFFFF00000000ull
#define OC_LCB_ERR_INFO_FEC_UERR_CNT_DATA_SHIFT						0
#define OC_LCB_ERR_INFO_FEC_UERR_CNT_DATA_MASK						0xFFFFFFFFull
#define OC_LCB_ERR_INFO_FEC_UERR_CNT_DATA_SMASK						0xFFFFFFFFull
/*
* Table #108 of oc_lcb_csrs - LCB_ERR_INFO_FEC_CERR_MASK_0
* This register is one of a five register set used to monitor the decoder's 
* error correction vector. With RS(528,512) all five are used to capture a 320b 
* error vector. With RS(132,128) the four lower registers capture a 256b error 
* vector. The vector is captured on each cycle that it outputs a non-zero value. 
* Each time an error mask is captured a corresponding valid bit is set in the 
* LCB_ERR_INFO_FEC_CERR_MASK_VLD register indicating that valid data is 
* available to firmware for post-processing. After reading the error mask, 
* firmware clears the valid indication, freeing up the location for subsequent 
* captures. A four deep queue allows capture of closely spaced error vectors. 
* Queue control logic manages all of the write/read operations and handshaking 
* with this error mask register. If the error mask queue and register are both 
* fully utilized while a new capture is being requested, the new request is 
* ignored and the LCB_ERR_INFO_FEC_CERR_MISS_CNT counter is incremented.
*/
#define OC_LCB_ERR_INFO_FEC_CERR_MASK_0							(OC_LCB_CSRS + 0x000000000608)
#define OC_LCB_ERR_INFO_FEC_CERR_MASK_0_RESETCSR					0x0000000000000000ull
#define OC_LCB_ERR_INFO_FEC_CERR_MASK_0_DATA_SHIFT					0
#define OC_LCB_ERR_INFO_FEC_CERR_MASK_0_DATA_MASK					0xFFFFFFFFFFFFFFFFull
#define OC_LCB_ERR_INFO_FEC_CERR_MASK_0_DATA_SMASK					0xFFFFFFFFFFFFFFFFull
/*
* Table #109 of oc_lcb_csrs - LCB_ERR_INFO_FEC_CERR_MASK_1
* This register is one of a five register set used to monitor the decoder's 
* error correction vector. With RS(528,512) all five are used to capture a 320b 
* error vector. With RS(132,128) the four lower registers capture a 256b error 
* vector. The vector is captured on each cycle that it outputs a non-zero value. 
* Each time an error mask is captured a corresponding valid bit is set in the 
* LCB_ERR_INFO_FEC_CERR_MASK_VLD register indicating that valid data is 
* available to firmware for post-processing. After reading the error mask, 
* firmware clears the valid indication, freeing up the location for subsequent 
* captures. A four deep queue allows capture of closely spaced error vectors. 
* Queue control logic manages all of the write/read operations and handshaking 
* with this error mask register. If the error mask queue and register are both 
* fully utilized while a new capture is being requested, the new request is 
* ignored and the LCB_ERR_INFO_FEC_CERR_MISS_CNT counter is incremented.
*/
#define OC_LCB_ERR_INFO_FEC_CERR_MASK_1							(OC_LCB_CSRS + 0x000000000610)
#define OC_LCB_ERR_INFO_FEC_CERR_MASK_1_RESETCSR					0x0000000000000000ull
#define OC_LCB_ERR_INFO_FEC_CERR_MASK_1_DATA_SHIFT					0
#define OC_LCB_ERR_INFO_FEC_CERR_MASK_1_DATA_MASK					0xFFFFFFFFFFFFFFFFull
#define OC_LCB_ERR_INFO_FEC_CERR_MASK_1_DATA_SMASK					0xFFFFFFFFFFFFFFFFull
/*
* Table #110 of oc_lcb_csrs - LCB_ERR_INFO_FEC_CERR_MASK_2
* This register is one of a five register set used to monitor the decoder's 
* error correction vector. With RS(528,512) all five are used to capture a 320b 
* error vector. With RS(132,128) the four lower registers capture a 256b error 
* vector. The vector is captured on each cycle that it outputs a non-zero value. 
* Each time an error mask is captured a corresponding valid bit is set in the 
* LCB_ERR_INFO_FEC_CERR_MASK_VLD register indicating that valid data is 
* available to firmware for post-processing. After reading the error mask, 
* firmware clears the valid indication, freeing up the location for subsequent 
* captures. A four deep queue allows capture of closely spaced error vectors. 
* Queue control logic manages all of the write/read operations and handshaking 
* with this error mask register. If the error mask queue and register are both 
* fully utilized while a new capture is being requested, the new request is 
* ignored and the LCB_ERR_INFO_FEC_CERR_MISS_CNT counter is incremented.
*/
#define OC_LCB_ERR_INFO_FEC_CERR_MASK_2							(OC_LCB_CSRS + 0x000000000618)
#define OC_LCB_ERR_INFO_FEC_CERR_MASK_2_RESETCSR					0x0000000000000000ull
#define OC_LCB_ERR_INFO_FEC_CERR_MASK_2_DATA_SHIFT					0
#define OC_LCB_ERR_INFO_FEC_CERR_MASK_2_DATA_MASK					0xFFFFFFFFFFFFFFFFull
#define OC_LCB_ERR_INFO_FEC_CERR_MASK_2_DATA_SMASK					0xFFFFFFFFFFFFFFFFull
/*
* Table #111 of oc_lcb_csrs - LCB_ERR_INFO_FEC_CERR_MASK_3
* This register is one of a five register set used to monitor the decoder's 
* error correction vector. With RS(528,512) all five are used to capture a 320b 
* error vector. With RS(132,128) the four lower registers capture a 256b error 
* vector. The vector is captured on each cycle that it outputs a non-zero value. 
* Each time an error mask is captured a corresponding valid bit is set in the 
* LCB_ERR_INFO_FEC_CERR_MASK_VLD register indicating that valid data is 
* available to firmware for post-processing. After reading the error mask, 
* firmware clears the valid indication, freeing up the location for subsequent 
* captures. A four deep queue allows capture of closely spaced error vectors. 
* Queue control logic manages all of the write/read operations and handshaking 
* with this error mask register. If the error mask queue and register are both 
* fully utilized while a new capture is being requested, the new request is 
* ignored and the LCB_ERR_INFO_FEC_CERR_MISS_CNT counter is incremented.
*/
#define OC_LCB_ERR_INFO_FEC_CERR_MASK_3							(OC_LCB_CSRS + 0x000000000620)
#define OC_LCB_ERR_INFO_FEC_CERR_MASK_3_RESETCSR					0x0000000000000000ull
#define OC_LCB_ERR_INFO_FEC_CERR_MASK_3_DATA_SHIFT					0
#define OC_LCB_ERR_INFO_FEC_CERR_MASK_3_DATA_MASK					0xFFFFFFFFFFFFFFFFull
#define OC_LCB_ERR_INFO_FEC_CERR_MASK_3_DATA_SMASK					0xFFFFFFFFFFFFFFFFull
/*
* Table #112 of oc_lcb_csrs - LCB_ERR_INFO_FEC_CERR_MASK_4
* This register is one of a five register set used to monitor the decoder's 
* error correction vector. With RS(528,512) all five are used to capture a 320b 
* error vector. With RS(132,128) the four lower registers capture a 256b error 
* vector. The vector is captured on each cycle that it outputs a non-zero value. 
* Each time an error mask is captured a corresponding valid bit is set in the 
* LCB_ERR_INFO_FEC_CERR_MASK_VLD register indicating that valid data is 
* available to firmware for post-processing. After reading the error mask, 
* firmware clears the valid indication, freeing up the location for subsequent 
* captures. A four deep queue allows capture of closely spaced error vectors. 
* Queue control logic manages all of the write/read operations and handshaking 
* with this error mask register. If the error mask queue and register are both 
* fully utilized while a new capture is being requested, the new request is 
* ignored and the LCB_ERR_INFO_FEC_CERR_MISS_CNT counter is incremented.
*/
#define OC_LCB_ERR_INFO_FEC_CERR_MASK_4							(OC_LCB_CSRS + 0x000000000628)
#define OC_LCB_ERR_INFO_FEC_CERR_MASK_4_RESETCSR					0x0000000000000000ull
#define OC_LCB_ERR_INFO_FEC_CERR_MASK_4_DATA_SHIFT					0
#define OC_LCB_ERR_INFO_FEC_CERR_MASK_4_DATA_MASK					0xFFFFFFFFFFFFFFFFull
#define OC_LCB_ERR_INFO_FEC_CERR_MASK_4_DATA_SMASK					0xFFFFFFFFFFFFFFFFull
/*
* Table #113 of oc_lcb_csrs - LCB_ERR_INFO_FEC_CERR_MASK_VLD
* Data valid bit for LCB_ERR_INFO_CERR_MASK_*
*/
#define OC_LCB_ERR_INFO_FEC_CERR_MASK_VLD						(OC_LCB_CSRS + 0x000000000630)
#define OC_LCB_ERR_INFO_FEC_CERR_MASK_VLD_RESETCSR					0x000000000003FF30ull
#define OC_LCB_ERR_INFO_FEC_CERR_MASK_VLD_UNUSED_63_18_SHIFT				18
#define OC_LCB_ERR_INFO_FEC_CERR_MASK_VLD_UNUSED_63_18_MASK				0x3FFFFFFFFFFFull
#define OC_LCB_ERR_INFO_FEC_CERR_MASK_VLD_UNUSED_63_18_SMASK				0xFFFFFFFFFFFC0000ull
#define OC_LCB_ERR_INFO_FEC_CERR_MASK_VLD_FEC_DEC_STATE_SHIFT				12
#define OC_LCB_ERR_INFO_FEC_CERR_MASK_VLD_FEC_DEC_STATE_MASK				0x3Full
#define OC_LCB_ERR_INFO_FEC_CERR_MASK_VLD_FEC_DEC_STATE_SMASK				0x3F000ull
#define OC_LCB_ERR_INFO_FEC_CERR_MASK_VLD_STATE_NUM_SHIFT				8
#define OC_LCB_ERR_INFO_FEC_CERR_MASK_VLD_STATE_NUM_MASK				0xFull
#define OC_LCB_ERR_INFO_FEC_CERR_MASK_VLD_STATE_NUM_SMASK				0xF00ull
#define OC_LCB_ERR_INFO_FEC_CERR_MASK_VLD_UNUSED_7_6_SHIFT				6
#define OC_LCB_ERR_INFO_FEC_CERR_MASK_VLD_UNUSED_7_6_MASK				0x3ull
#define OC_LCB_ERR_INFO_FEC_CERR_MASK_VLD_UNUSED_7_6_SMASK				0xC0ull
#define OC_LCB_ERR_INFO_FEC_CERR_MASK_VLD_FEC_3LN_SHIFT_SHIFT				4
#define OC_LCB_ERR_INFO_FEC_CERR_MASK_VLD_FEC_3LN_SHIFT_MASK				0x3ull
#define OC_LCB_ERR_INFO_FEC_CERR_MASK_VLD_FEC_3LN_SHIFT_SMASK				0x30ull
#define OC_LCB_ERR_INFO_FEC_CERR_MASK_VLD_UNUSED_3_1_SHIFT				1
#define OC_LCB_ERR_INFO_FEC_CERR_MASK_VLD_UNUSED_3_1_MASK				0x7ull
#define OC_LCB_ERR_INFO_FEC_CERR_MASK_VLD_UNUSED_3_1_SMASK				0xEull
#define OC_LCB_ERR_INFO_FEC_CERR_MASK_VLD_VAL_SHIFT					0
#define OC_LCB_ERR_INFO_FEC_CERR_MASK_VLD_VAL_MASK					0x1ull
#define OC_LCB_ERR_INFO_FEC_CERR_MASK_VLD_VAL_SMASK					0x1ull
/*
* Table #114 of oc_lcb_csrs - LCB_ERR_INFO_FEC_CERR_MASK_MISS_CNT
* Number of missed error mask captures. If LCB_ERR_INFO_FEC_CERR_MASK_* and the 
* error mask queue are full while a request for a capture is active, the error 
* vector is dropped, and this counter increments.
*/
#define OC_LCB_ERR_INFO_FEC_CERR_MASK_MISS_CNT						(OC_LCB_CSRS + 0x000000000638)
#define OC_LCB_ERR_INFO_FEC_CERR_MASK_MISS_CNT_RESETCSR					0x0000000000000000ull
#define OC_LCB_ERR_INFO_FEC_CERR_MASK_MISS_CNT_UNUSED_63_32_SHIFT			32
#define OC_LCB_ERR_INFO_FEC_CERR_MASK_MISS_CNT_UNUSED_63_32_MASK			0xFFFFFFFFull
#define OC_LCB_ERR_INFO_FEC_CERR_MASK_MISS_CNT_UNUSED_63_32_SMASK			0xFFFFFFFF00000000ull
#define OC_LCB_ERR_INFO_FEC_CERR_MASK_MISS_CNT_DATA_SHIFT				0
#define OC_LCB_ERR_INFO_FEC_CERR_MASK_MISS_CNT_DATA_MASK				0xFFFFFFFFull
#define OC_LCB_ERR_INFO_FEC_CERR_MASK_MISS_CNT_DATA_SMASK				0xFFFFFFFFull
/*
* Table #115 of oc_lcb_csrs - LCB_ERR_INFO_FEC_ERR_LN0
* The data in LCB_ERR_INFO_FEC_CERR_MASK is presented as 4 lanes x lane width 
* (64 or 80 bits), and is used to generate an error event count for each 
* physical lane. Each time the lane specific error vector from the FEC decoder 
* is nonzero, the appropriate lane error event counter increments. This allows 
* detection of weak physical lanes by knowing which lanes experienced symbol 
* correction most often. This field is cleared with LCB_CFG_CRC_CNTR_RESET.CLR_FEC_ERR_CNTRS
*/
#define OC_LCB_ERR_INFO_FEC_ERR_LN0							(OC_LCB_CSRS + 0x000000000640)
#define OC_LCB_ERR_INFO_FEC_ERR_LN0_RESETCSR						0x0000000000000000ull
#define OC_LCB_ERR_INFO_FEC_ERR_LN0_UNUSED_63_48_SHIFT					48
#define OC_LCB_ERR_INFO_FEC_ERR_LN0_UNUSED_63_48_MASK					0xFFFFull
#define OC_LCB_ERR_INFO_FEC_ERR_LN0_UNUSED_63_48_SMASK					0xFFFF000000000000ull
#define OC_LCB_ERR_INFO_FEC_ERR_LN0_DATA_SHIFT						0
#define OC_LCB_ERR_INFO_FEC_ERR_LN0_DATA_MASK						0xFFFFFFFFFFFFull
#define OC_LCB_ERR_INFO_FEC_ERR_LN0_DATA_SMASK						0xFFFFFFFFFFFFull
/*
* Table #116 of oc_lcb_csrs - LCB_ERR_INFO_FEC_ERR_LN1
* The data in LCB_ERR_INFO_FEC_CERR_MASK is presented as 4 lanes x lane width 
* (64 or 80 bits), and is used to generate an error event count for each 
* physical lane. Each time the lane specific error vector from the FEC decoder 
* is nonzero, the appropriate lane error event counter increments. This allows 
* detection of weak physical lanes by knowing which lanes experienced symbol 
* correction most often. This field is cleared with LCB_CFG_CRC_CNTR_RESET.CLR_FEC_ERR_CNTRS
*/
#define OC_LCB_ERR_INFO_FEC_ERR_LN1							(OC_LCB_CSRS + 0x000000000648)
#define OC_LCB_ERR_INFO_FEC_ERR_LN1_RESETCSR						0x0000000000000000ull
#define OC_LCB_ERR_INFO_FEC_ERR_LN1_UNUSED_63_48_SHIFT					48
#define OC_LCB_ERR_INFO_FEC_ERR_LN1_UNUSED_63_48_MASK					0xFFFFull
#define OC_LCB_ERR_INFO_FEC_ERR_LN1_UNUSED_63_48_SMASK					0xFFFF000000000000ull
#define OC_LCB_ERR_INFO_FEC_ERR_LN1_DATA_SHIFT						0
#define OC_LCB_ERR_INFO_FEC_ERR_LN1_DATA_MASK						0xFFFFFFFFFFFFull
#define OC_LCB_ERR_INFO_FEC_ERR_LN1_DATA_SMASK						0xFFFFFFFFFFFFull
/*
* Table #117 of oc_lcb_csrs - LCB_ERR_INFO_FEC_ERR_LN2
* The data in LCB_ERR_INFO_FEC_CERR_MASK is presented as 4 lanes x lane width 
* (64 or 80 bits), and is used to generate an error event count for each 
* physical lane. Each time the lane specific error vector from the FEC decoder 
* is nonzero, the appropriate lane error event counter increments. This allows 
* detection of weak physical lanes by knowing which lanes experienced symbol 
* correction most often. This field is cleared with LCB_CFG_CRC_CNTR_RESET.CLR_FEC_ERR_CNTRS
*/
#define OC_LCB_ERR_INFO_FEC_ERR_LN2							(OC_LCB_CSRS + 0x000000000650)
#define OC_LCB_ERR_INFO_FEC_ERR_LN2_RESETCSR						0x0000000000000000ull
#define OC_LCB_ERR_INFO_FEC_ERR_LN2_UNUSED_63_48_SHIFT					48
#define OC_LCB_ERR_INFO_FEC_ERR_LN2_UNUSED_63_48_MASK					0xFFFFull
#define OC_LCB_ERR_INFO_FEC_ERR_LN2_UNUSED_63_48_SMASK					0xFFFF000000000000ull
#define OC_LCB_ERR_INFO_FEC_ERR_LN2_DATA_SHIFT						0
#define OC_LCB_ERR_INFO_FEC_ERR_LN2_DATA_MASK						0xFFFFFFFFFFFFull
#define OC_LCB_ERR_INFO_FEC_ERR_LN2_DATA_SMASK						0xFFFFFFFFFFFFull
/*
* Table #118 of oc_lcb_csrs - LCB_ERR_INFO_FEC_ERR_LN3
* The data in LCB_ERR_INFO_FEC_CERR_MASK is presented as 4 lanes x lane width 
* (64 or 80 bits), and is used to generate an error event count for each 
* physical lane. Each time the lane specific error vector from the FEC decoder 
* is nonzero, the appropriate lane error event counter increments. This allows 
* detection of weak physical lanes by knowing which lanes experienced symbol 
* correction most often. This field is cleared with LCB_CFG_CRC_CNTR_RESET.CLR_FEC_ERR_CNTRS
*/
#define OC_LCB_ERR_INFO_FEC_ERR_LN3							(OC_LCB_CSRS + 0x000000000658)
#define OC_LCB_ERR_INFO_FEC_ERR_LN3_RESETCSR						0x0000000000000000ull
#define OC_LCB_ERR_INFO_FEC_ERR_LN3_UNUSED_63_48_SHIFT					48
#define OC_LCB_ERR_INFO_FEC_ERR_LN3_UNUSED_63_48_MASK					0xFFFFull
#define OC_LCB_ERR_INFO_FEC_ERR_LN3_UNUSED_63_48_SMASK					0xFFFF000000000000ull
#define OC_LCB_ERR_INFO_FEC_ERR_LN3_DATA_SHIFT						0
#define OC_LCB_ERR_INFO_FEC_ERR_LN3_DATA_MASK						0xFFFFFFFFFFFFull
#define OC_LCB_ERR_INFO_FEC_ERR_LN3_DATA_SMASK						0xFFFFFFFFFFFFull
/*
* Table #119 of oc_lcb_csrs - LCB_ERR_INFO_RX_RESYNC_CNT
* This register reports the total number of ReSyncRetry requests. Each time the 
* Rx sends a ReSyncRetryReq this counter increments.
*/
#define OC_LCB_ERR_INFO_RX_RESYNC_CNT							(OC_LCB_CSRS + 0x000000000660)
#define OC_LCB_ERR_INFO_RX_RESYNC_CNT_RESETCSR						0x0000000000000000ull
#define OC_LCB_ERR_INFO_RX_RESYNC_CNT_DATA_SHIFT					0
#define OC_LCB_ERR_INFO_RX_RESYNC_CNT_DATA_MASK						0xFFFFFFFFFFFFFFFFull
#define OC_LCB_ERR_INFO_RX_RESYNC_CNT_DATA_SMASK					0xFFFFFFFFFFFFFFFFull
/*
* Table #120 of oc_lcb_csrs - LCB_PRF_GOOD_LTP_CNT
* This register is used to report the LTP count with a good CRC. This will 
* assist with BER calculations. The TOTAL_CRC_ERR_CNT / (GOOD_LTP_CNT + 
* TOTAL_CRC_ERR_CNT) is the event error rate (EER). The BER will equal the 
* EER/1056 if there is only one bit error per event (CRC error), otherwise it is 
* larger.
*/
#define OC_LCB_PRF_GOOD_LTP_CNT								(OC_LCB_CSRS + 0x000000000700)
#define OC_LCB_PRF_GOOD_LTP_CNT_RESETCSR						0x0000000000000000ull
#define OC_LCB_PRF_GOOD_LTP_CNT_VAL_SHIFT						0
#define OC_LCB_PRF_GOOD_LTP_CNT_VAL_MASK						0xFFFFFFFFFFFFFFFFull
#define OC_LCB_PRF_GOOD_LTP_CNT_VAL_SMASK						0xFFFFFFFFFFFFFFFFull
/*
* Table #121 of oc_lcb_csrs - LCB_PRF_ACCEPTED_LTP_CNT
* This register is used to report the LTP count with a good CRC accepted into 
* the receive buffer. This will assist with performance monitor calculations. 
* GOOD_LTP_CNT + TOTAL_CRC_ERR_CNT is the total LTP count. The ACCEPTED_LTP_CNT 
* is the number that carry real payload delivered to the core. Null LTPs (replay 
* buffer full due to a too long of a round trip time), LTPs with CRC errors, and 
* good but tossed (waiting for a retransmission to begin) LTPs are not 
* accepted.
*/
#define OC_LCB_PRF_ACCEPTED_LTP_CNT							(OC_LCB_CSRS + 0x000000000708)
#define OC_LCB_PRF_ACCEPTED_LTP_CNT_RESETCSR						0x0000000000000000ull
#define OC_LCB_PRF_ACCEPTED_LTP_CNT_VAL_SHIFT						0
#define OC_LCB_PRF_ACCEPTED_LTP_CNT_VAL_MASK						0xFFFFFFFFFFFFFFFFull
#define OC_LCB_PRF_ACCEPTED_LTP_CNT_VAL_SMASK						0xFFFFFFFFFFFFFFFFull
/*
* Table #122 of oc_lcb_csrs - LCB_PRF_TX_RELIABLE_LTP_CNT
* This register is used to report the first time reliable LTP count on the Tx 
* side when a replay is not in progress. This counts the number of LTPs written 
* into the replay buffer.
*/
#define OC_LCB_PRF_TX_RELIABLE_LTP_CNT							(OC_LCB_CSRS + 0x000000000710)
#define OC_LCB_PRF_TX_RELIABLE_LTP_CNT_RESETCSR						0x0000000000000000ull
#define OC_LCB_PRF_TX_RELIABLE_LTP_CNT_VAL_SHIFT					0
#define OC_LCB_PRF_TX_RELIABLE_LTP_CNT_VAL_MASK						0xFFFFFFFFFFFFFFFFull
#define OC_LCB_PRF_TX_RELIABLE_LTP_CNT_VAL_SMASK					0xFFFFFFFFFFFFFFFFull
/*
* Table #123 of oc_lcb_csrs - LCB_PRF_RX_FLIT_CNT
* This register counts the flits on the lower side of the output 
* bus.
*/
#define OC_LCB_PRF_RX_FLIT_CNT								(OC_LCB_CSRS + 0x000000000718)
#define OC_LCB_PRF_RX_FLIT_CNT_RESETCSR							0x0000000000000000ull
#define OC_LCB_PRF_RX_FLIT_CNT_UNUSED_63_52_SHIFT					52
#define OC_LCB_PRF_RX_FLIT_CNT_UNUSED_63_52_MASK					0xFFFull
#define OC_LCB_PRF_RX_FLIT_CNT_UNUSED_63_52_SMASK					0xFFF0000000000000ull
#define OC_LCB_PRF_RX_FLIT_CNT_VAL_SHIFT						0
#define OC_LCB_PRF_RX_FLIT_CNT_VAL_MASK							0xFFFFFFFFFFFFFull
#define OC_LCB_PRF_RX_FLIT_CNT_VAL_SMASK						0xFFFFFFFFFFFFFull
/*
* Table #124 of oc_lcb_csrs - LCB_PRF_TX_FLIT_CNT
* This register counts the flits on the lower side of the input 
* bus.
*/
#define OC_LCB_PRF_TX_FLIT_CNT								(OC_LCB_CSRS + 0x000000000720)
#define OC_LCB_PRF_TX_FLIT_CNT_RESETCSR							0x0000000000000000ull
#define OC_LCB_PRF_TX_FLIT_CNT_UNUSED_63_52_SHIFT					52
#define OC_LCB_PRF_TX_FLIT_CNT_UNUSED_63_52_MASK					0xFFFull
#define OC_LCB_PRF_TX_FLIT_CNT_UNUSED_63_52_SMASK					0xFFF0000000000000ull
#define OC_LCB_PRF_TX_FLIT_CNT_VAL_SHIFT						0
#define OC_LCB_PRF_TX_FLIT_CNT_VAL_MASK							0xFFFFFFFFFFFFFull
#define OC_LCB_PRF_TX_FLIT_CNT_VAL_SMASK						0xFFFFFFFFFFFFFull
/*
* Table #125 of oc_lcb_csrs - LCB_PRF_CLK_CNTR
* This register is used to report various clk counts. The clk being monitored is 
* set by CFG_CLK_CNTR.
*/
#define OC_LCB_PRF_CLK_CNTR								(OC_LCB_CSRS + 0x000000000728)
#define OC_LCB_PRF_CLK_CNTR_RESETCSR							0x0000000000000000ull
#define OC_LCB_PRF_CLK_CNTR_UNUSED_63_49_SHIFT						49
#define OC_LCB_PRF_CLK_CNTR_UNUSED_63_49_MASK						0x7FFFull
#define OC_LCB_PRF_CLK_CNTR_UNUSED_63_49_SMASK						0xFFFE000000000000ull
#define OC_LCB_PRF_CLK_CNTR_NEW_VAL_WAS_STROBED_SHIFT					48
#define OC_LCB_PRF_CLK_CNTR_NEW_VAL_WAS_STROBED_MASK					0x1ull
#define OC_LCB_PRF_CLK_CNTR_NEW_VAL_WAS_STROBED_SMASK					0x1000000000000ull
#define OC_LCB_PRF_CLK_CNTR_CNT_SHIFT							0
#define OC_LCB_PRF_CLK_CNTR_CNT_MASK							0xFFFFFFFFFFFFull
#define OC_LCB_PRF_CLK_CNTR_CNT_SMASK							0xFFFFFFFFFFFFull
/*
* Table #126 of oc_lcb_csrs - LCB_PRF_GOOD_FECCW_CNT
* This register reports the number of good received FEC code words, without 
* correctable or uncorrectable errors. Used in conjunction with the error 
* information registers for FEC codewords, corrected code word error ratios, 
* uncorrected code word error ratios, and FEC symbol error ratios can be 
* calculated.
*/
#define OC_LCB_PRF_GOOD_FECCW_CNT							(OC_LCB_CSRS + 0x000000000730)
#define OC_LCB_PRF_GOOD_FECCW_CNT_RESETCSR						0x0000000000000000ull
#define OC_LCB_PRF_GOOD_FECCW_CNT_CNT_SHIFT						0
#define OC_LCB_PRF_GOOD_FECCW_CNT_CNT_MASK						0xFFFFFFFFFFFFFFFFull
#define OC_LCB_PRF_GOOD_FECCW_CNT_CNT_SMASK						0xFFFFFFFFFFFFFFFFull
/*
* Table #127 of oc_lcb_csrs - LCB_STS_LINK_PAUSE_ACTIVE
* This will be set after a LCB_CFG_REINIT_PAUSE_TX_MODE and LCB_CFG_FORCE_RECOVER_SEQUENCE 
* is used. See also LCB_CFG_REINIT_AS_SLAVE. This does not report anything when 
* using only LCB_CFG_REINIT_PAUSE_RX_MODE.
*/
#define OC_LCB_STS_LINK_PAUSE_ACTIVE							(OC_LCB_CSRS + 0x000000000780)
#define OC_LCB_STS_LINK_PAUSE_ACTIVE_RESETCSR						0x0000000000000000ull
#define OC_LCB_STS_LINK_PAUSE_ACTIVE_UNUSED_63_1_SHIFT					1
#define OC_LCB_STS_LINK_PAUSE_ACTIVE_UNUSED_63_1_MASK					0x7FFFFFFFFFFFFFFFull
#define OC_LCB_STS_LINK_PAUSE_ACTIVE_UNUSED_63_1_SMASK					0xFFFFFFFFFFFFFFFEull
#define OC_LCB_STS_LINK_PAUSE_ACTIVE_VAL_SHIFT						0
#define OC_LCB_STS_LINK_PAUSE_ACTIVE_VAL_MASK						0x1ull
#define OC_LCB_STS_LINK_PAUSE_ACTIVE_VAL_SMASK						0x1ull
/*
* Table #128 of oc_lcb_csrs - LCB_STS_LINK_TRANSFER_ACTIVE
* This will be set if the link is up.
*/
#define OC_LCB_STS_LINK_TRANSFER_ACTIVE							(OC_LCB_CSRS + 0x000000000788)
#define OC_LCB_STS_LINK_TRANSFER_ACTIVE_RESETCSR					0x0000000000000000ull
#define OC_LCB_STS_LINK_TRANSFER_ACTIVE_UNUSED_63_1_SHIFT				1
#define OC_LCB_STS_LINK_TRANSFER_ACTIVE_UNUSED_63_1_MASK				0x7FFFFFFFFFFFFFFFull
#define OC_LCB_STS_LINK_TRANSFER_ACTIVE_UNUSED_63_1_SMASK				0xFFFFFFFFFFFFFFFEull
#define OC_LCB_STS_LINK_TRANSFER_ACTIVE_VAL_SHIFT					0
#define OC_LCB_STS_LINK_TRANSFER_ACTIVE_VAL_MASK					0x1ull
#define OC_LCB_STS_LINK_TRANSFER_ACTIVE_VAL_SMASK					0x1ull
/*
* Table #129 of oc_lcb_csrs - LCB_STS_LN_DEGRADE
* This is used to monitor the lane degrade logic.
*/
#define OC_LCB_STS_LN_DEGRADE								(OC_LCB_CSRS + 0x000000000790)
#define OC_LCB_STS_LN_DEGRADE_RESETCSR							0x0000000000000000ull
#define OC_LCB_STS_LN_DEGRADE_CURRENT_CFG_RACES_WON_SHIFT				16
#define OC_LCB_STS_LN_DEGRADE_CURRENT_CFG_RACES_WON_MASK				0xFFFFFFFFFFFFull
#define OC_LCB_STS_LN_DEGRADE_CURRENT_CFG_RACES_WON_SMASK				0xFFFFFFFFFFFF0000ull
#define OC_LCB_STS_LN_DEGRADE_LN_123_RACES_WON_SHIFT					13
#define OC_LCB_STS_LN_DEGRADE_LN_123_RACES_WON_MASK					0x7ull
#define OC_LCB_STS_LN_DEGRADE_LN_123_RACES_WON_SMASK					0xE000ull
#define OC_LCB_STS_LN_DEGRADE_LN_023_RACES_WON_SHIFT					10
#define OC_LCB_STS_LN_DEGRADE_LN_023_RACES_WON_MASK					0x7ull
#define OC_LCB_STS_LN_DEGRADE_LN_023_RACES_WON_SMASK					0x1C00ull
#define OC_LCB_STS_LN_DEGRADE_LN_013_RACES_WON_SHIFT					7
#define OC_LCB_STS_LN_DEGRADE_LN_013_RACES_WON_MASK					0x7ull
#define OC_LCB_STS_LN_DEGRADE_LN_013_RACES_WON_SMASK					0x380ull
#define OC_LCB_STS_LN_DEGRADE_LN_012_RACES_WON_SHIFT					4
#define OC_LCB_STS_LN_DEGRADE_LN_012_RACES_WON_MASK					0x7ull
#define OC_LCB_STS_LN_DEGRADE_LN_012_RACES_WON_SMASK					0x70ull
#define OC_LCB_STS_LN_DEGRADE_UNUSED_3_SHIFT						3
#define OC_LCB_STS_LN_DEGRADE_UNUSED_3_MASK						0x1ull
#define OC_LCB_STS_LN_DEGRADE_UNUSED_3_SMASK						0x8ull
#define OC_LCB_STS_LN_DEGRADE_CNT_SHIFT							1
#define OC_LCB_STS_LN_DEGRADE_CNT_MASK							0x3ull
#define OC_LCB_STS_LN_DEGRADE_CNT_SMASK							0x6ull
#define OC_LCB_STS_LN_DEGRADE_EXHAUSTED_SHIFT						0
#define OC_LCB_STS_LN_DEGRADE_EXHAUSTED_MASK						0x1ull
#define OC_LCB_STS_LN_DEGRADE_EXHAUSTED_SMASK						0x1ull
/*
* Table #130 of oc_lcb_csrs - LCB_STS_TX_LTP_MODE
* This register is used to monitor the status of the Tx side LTP 
* mode.
*/
#define OC_LCB_STS_TX_LTP_MODE								(OC_LCB_CSRS + 0x000000000798)
#define OC_LCB_STS_TX_LTP_MODE_RESETCSR							0x0000000000000000ull
#define OC_LCB_STS_TX_LTP_MODE_UNUSED_63_1_SHIFT					1
#define OC_LCB_STS_TX_LTP_MODE_UNUSED_63_1_MASK						0x7FFFFFFFFFFFFFFFull
#define OC_LCB_STS_TX_LTP_MODE_UNUSED_63_1_SMASK					0xFFFFFFFFFFFFFFFEull
#define OC_LCB_STS_TX_LTP_MODE_VAL_SHIFT						0
#define OC_LCB_STS_TX_LTP_MODE_VAL_MASK							0x1ull
#define OC_LCB_STS_TX_LTP_MODE_VAL_SMASK						0x1ull
/*
* Table #131 of oc_lcb_csrs - LCB_STS_RX_LTP_MODE
* This register is used to monitor the status of the Rx side LTP 
* mode.
*/
#define OC_LCB_STS_RX_LTP_MODE								(OC_LCB_CSRS + 0x0000000007A0)
#define OC_LCB_STS_RX_LTP_MODE_RESETCSR							0x0000000000000000ull
#define OC_LCB_STS_RX_LTP_MODE_UNUSED_63_1_SHIFT					1
#define OC_LCB_STS_RX_LTP_MODE_UNUSED_63_1_MASK						0x7FFFFFFFFFFFFFFFull
#define OC_LCB_STS_RX_LTP_MODE_UNUSED_63_1_SMASK					0xFFFFFFFFFFFFFFFEull
#define OC_LCB_STS_RX_LTP_MODE_VAL_SHIFT						0
#define OC_LCB_STS_RX_LTP_MODE_VAL_MASK							0x1ull
#define OC_LCB_STS_RX_LTP_MODE_VAL_SMASK						0x1ull
/*
* Table #132 of oc_lcb_csrs - LCB_STS_RX_CRC_FEC_MODE
* This register is used to monitor the status of the Rx side CRC and FEC 
* modes.
*/
#define OC_LCB_STS_RX_CRC_FEC_MODE							(OC_LCB_CSRS + 0x0000000007A8)
#define OC_LCB_STS_RX_CRC_FEC_MODE_RESETCSR						0x0000000000000000ull
#define OC_LCB_STS_RX_CRC_FEC_MODE_UNUSED_63_6_SHIFT					6
#define OC_LCB_STS_RX_CRC_FEC_MODE_UNUSED_63_6_MASK					0x3FFFFFFFFFFFFFFull
#define OC_LCB_STS_RX_CRC_FEC_MODE_UNUSED_63_6_SMASK					0xFFFFFFFFFFFFFFC0ull
#define OC_LCB_STS_RX_CRC_FEC_MODE_FEC_MODE_SHIFT					4
#define OC_LCB_STS_RX_CRC_FEC_MODE_FEC_MODE_MASK					0x3ull
#define OC_LCB_STS_RX_CRC_FEC_MODE_FEC_MODE_SMASK					0x30ull
#define OC_LCB_STS_RX_CRC_FEC_MODE_UNUSED_3_2_SHIFT					2
#define OC_LCB_STS_RX_CRC_FEC_MODE_UNUSED_3_2_MASK					0x3ull
#define OC_LCB_STS_RX_CRC_FEC_MODE_UNUSED_3_2_SMASK					0xCull
#define OC_LCB_STS_RX_CRC_FEC_MODE_CRC_MODE_SHIFT					0
#define OC_LCB_STS_RX_CRC_FEC_MODE_CRC_MODE_MASK					0x3ull
#define OC_LCB_STS_RX_CRC_FEC_MODE_CRC_MODE_SMASK					0x3ull
/*
* Table #133 of oc_lcb_csrs - LCB_STS_RX_LOGICAL_ID
* This register reports the Rx logical ID (Peers Tx physical ID) for each 
* lane.
*/
#define OC_LCB_STS_RX_LOGICAL_ID							(OC_LCB_CSRS + 0x0000000007B0)
#define OC_LCB_STS_RX_LOGICAL_ID_RESETCSR						0x0000000000000000ull
#define OC_LCB_STS_RX_LOGICAL_ID_UNUSED_63_15_SHIFT					15
#define OC_LCB_STS_RX_LOGICAL_ID_UNUSED_63_15_MASK					0x1FFFFFFFFFFFFull
#define OC_LCB_STS_RX_LOGICAL_ID_UNUSED_63_15_SMASK					0xFFFFFFFFFFFF8000ull
#define OC_LCB_STS_RX_LOGICAL_ID_LN3_SHIFT						12
#define OC_LCB_STS_RX_LOGICAL_ID_LN3_MASK						0x7ull
#define OC_LCB_STS_RX_LOGICAL_ID_LN3_SMASK						0x7000ull
#define OC_LCB_STS_RX_LOGICAL_ID_UNUSED_11_SHIFT					11
#define OC_LCB_STS_RX_LOGICAL_ID_UNUSED_11_MASK						0x1ull
#define OC_LCB_STS_RX_LOGICAL_ID_UNUSED_11_SMASK					0x800ull
#define OC_LCB_STS_RX_LOGICAL_ID_LN2_SHIFT						8
#define OC_LCB_STS_RX_LOGICAL_ID_LN2_MASK						0x7ull
#define OC_LCB_STS_RX_LOGICAL_ID_LN2_SMASK						0x700ull
#define OC_LCB_STS_RX_LOGICAL_ID_UNUSED_7_SHIFT						7
#define OC_LCB_STS_RX_LOGICAL_ID_UNUSED_7_MASK						0x1ull
#define OC_LCB_STS_RX_LOGICAL_ID_UNUSED_7_SMASK						0x80ull
#define OC_LCB_STS_RX_LOGICAL_ID_LN1_SHIFT						4
#define OC_LCB_STS_RX_LOGICAL_ID_LN1_MASK						0x7ull
#define OC_LCB_STS_RX_LOGICAL_ID_LN1_SMASK						0x70ull
#define OC_LCB_STS_RX_LOGICAL_ID_UNUSED_3_SHIFT						3
#define OC_LCB_STS_RX_LOGICAL_ID_UNUSED_3_MASK						0x1ull
#define OC_LCB_STS_RX_LOGICAL_ID_UNUSED_3_SMASK						0x8ull
#define OC_LCB_STS_RX_LOGICAL_ID_LN0_SHIFT						0
#define OC_LCB_STS_RX_LOGICAL_ID_LN0_MASK						0x7ull
#define OC_LCB_STS_RX_LOGICAL_ID_LN0_SMASK						0x7ull
/*
* Table #134 of oc_lcb_csrs - LCB_STS_RX_SHIFTED_LN_NUM
* This register reports the Rx logical ID (Peers Tx physical ID) for each 
* lane.
*/
#define OC_LCB_STS_RX_SHIFTED_LN_NUM							(OC_LCB_CSRS + 0x0000000007B8)
#define OC_LCB_STS_RX_SHIFTED_LN_NUM_RESETCSR						0x0000000000000000ull
#define OC_LCB_STS_RX_SHIFTED_LN_NUM_UNUSED_63_15_SHIFT					15
#define OC_LCB_STS_RX_SHIFTED_LN_NUM_UNUSED_63_15_MASK					0x1FFFFFFFFFFFFull
#define OC_LCB_STS_RX_SHIFTED_LN_NUM_UNUSED_63_15_SMASK					0xFFFFFFFFFFFF8000ull
#define OC_LCB_STS_RX_SHIFTED_LN_NUM_LN3_SHIFT						12
#define OC_LCB_STS_RX_SHIFTED_LN_NUM_LN3_MASK						0x7ull
#define OC_LCB_STS_RX_SHIFTED_LN_NUM_LN3_SMASK						0x7000ull
#define OC_LCB_STS_RX_SHIFTED_LN_NUM_UNUSED_11_SHIFT					11
#define OC_LCB_STS_RX_SHIFTED_LN_NUM_UNUSED_11_MASK					0x1ull
#define OC_LCB_STS_RX_SHIFTED_LN_NUM_UNUSED_11_SMASK					0x800ull
#define OC_LCB_STS_RX_SHIFTED_LN_NUM_LN2_SHIFT						8
#define OC_LCB_STS_RX_SHIFTED_LN_NUM_LN2_MASK						0x7ull
#define OC_LCB_STS_RX_SHIFTED_LN_NUM_LN2_SMASK						0x700ull
#define OC_LCB_STS_RX_SHIFTED_LN_NUM_UNUSED_7_SHIFT					7
#define OC_LCB_STS_RX_SHIFTED_LN_NUM_UNUSED_7_MASK					0x1ull
#define OC_LCB_STS_RX_SHIFTED_LN_NUM_UNUSED_7_SMASK					0x80ull
#define OC_LCB_STS_RX_SHIFTED_LN_NUM_LN1_SHIFT						4
#define OC_LCB_STS_RX_SHIFTED_LN_NUM_LN1_MASK						0x7ull
#define OC_LCB_STS_RX_SHIFTED_LN_NUM_LN1_SMASK						0x70ull
#define OC_LCB_STS_RX_SHIFTED_LN_NUM_UNUSED_3_SHIFT					3
#define OC_LCB_STS_RX_SHIFTED_LN_NUM_UNUSED_3_MASK					0x1ull
#define OC_LCB_STS_RX_SHIFTED_LN_NUM_UNUSED_3_SMASK					0x8ull
#define OC_LCB_STS_RX_SHIFTED_LN_NUM_LN0_SHIFT						0
#define OC_LCB_STS_RX_SHIFTED_LN_NUM_LN0_MASK						0x7ull
#define OC_LCB_STS_RX_SHIFTED_LN_NUM_LN0_SMASK						0x7ull
/*
* Table #135 of oc_lcb_csrs - LCB_STS_RX_PHY_LN_EN
* This register reports the Rx side physical lane enable.
*/
#define OC_LCB_STS_RX_PHY_LN_EN								(OC_LCB_CSRS + 0x0000000007C0)
#define OC_LCB_STS_RX_PHY_LN_EN_RESETCSR						0x0000000000000000ull
#define OC_LCB_STS_RX_PHY_LN_EN_UNUSED_63_16_SHIFT					16
#define OC_LCB_STS_RX_PHY_LN_EN_UNUSED_63_16_MASK					0xFFFFFFFFFFFFull
#define OC_LCB_STS_RX_PHY_LN_EN_UNUSED_63_16_SMASK					0xFFFFFFFFFFFF0000ull
#define OC_LCB_STS_RX_PHY_LN_EN_FEC_DEGRADE_SHIFT					12
#define OC_LCB_STS_RX_PHY_LN_EN_FEC_DEGRADE_MASK					0xFull
#define OC_LCB_STS_RX_PHY_LN_EN_FEC_DEGRADE_SMASK					0xF000ull
#define OC_LCB_STS_RX_PHY_LN_EN_DEGRADE_SHIFT						8
#define OC_LCB_STS_RX_PHY_LN_EN_DEGRADE_MASK						0xFull
#define OC_LCB_STS_RX_PHY_LN_EN_DEGRADE_SMASK						0xF00ull
#define OC_LCB_STS_RX_PHY_LN_EN_INIT_SHIFT						4
#define OC_LCB_STS_RX_PHY_LN_EN_INIT_MASK						0xFull
#define OC_LCB_STS_RX_PHY_LN_EN_INIT_SMASK						0xF0ull
#define OC_LCB_STS_RX_PHY_LN_EN_COMBINED_SHIFT						0
#define OC_LCB_STS_RX_PHY_LN_EN_COMBINED_MASK						0xFull
#define OC_LCB_STS_RX_PHY_LN_EN_COMBINED_SMASK						0xFull
/*
* Table #136 of oc_lcb_csrs - LCB_STS_TX_PHY_LN_EN
* This register reports the Tx side physical lane enable.
*/
#define OC_LCB_STS_TX_PHY_LN_EN								(OC_LCB_CSRS + 0x0000000007C8)
#define OC_LCB_STS_TX_PHY_LN_EN_RESETCSR						0x0000000000000000ull
#define OC_LCB_STS_TX_PHY_LN_EN_UNUSED_63_5_SHIFT					5
#define OC_LCB_STS_TX_PHY_LN_EN_UNUSED_63_5_MASK					0x7FFFFFFFFFFFFFFull
#define OC_LCB_STS_TX_PHY_LN_EN_UNUSED_63_5_SMASK					0xFFFFFFFFFFFFFFE0ull
#define OC_LCB_STS_TX_PHY_LN_EN_TX_TON_SHIFT						4
#define OC_LCB_STS_TX_PHY_LN_EN_TX_TON_MASK						0x1ull
#define OC_LCB_STS_TX_PHY_LN_EN_TX_TON_SMASK						0x10ull
#define OC_LCB_STS_TX_PHY_LN_EN_VAL_SHIFT						0
#define OC_LCB_STS_TX_PHY_LN_EN_VAL_MASK						0xFull
#define OC_LCB_STS_TX_PHY_LN_EN_VAL_SMASK						0xFull
/*
* Table #137 of oc_lcb_csrs - LCB_STS_ROUND_TRIP_LTP_CNT
* This register reports the link round trip time in terms of a LTP transmit 
* time.
*/
#define OC_LCB_STS_ROUND_TRIP_LTP_CNT							(OC_LCB_CSRS + 0x0000000007D0)
#define OC_LCB_STS_ROUND_TRIP_LTP_CNT_RESETCSR						0x0000000000000000ull
#define OC_LCB_STS_ROUND_TRIP_LTP_CNT_UNUSED_63_16_SHIFT				16
#define OC_LCB_STS_ROUND_TRIP_LTP_CNT_UNUSED_63_16_MASK					0xFFFFFFFFFFFFull
#define OC_LCB_STS_ROUND_TRIP_LTP_CNT_UNUSED_63_16_SMASK				0xFFFFFFFFFFFF0000ull
#define OC_LCB_STS_ROUND_TRIP_LTP_CNT_VAL_SHIFT						0
#define OC_LCB_STS_ROUND_TRIP_LTP_CNT_VAL_MASK						0xFFFFull
#define OC_LCB_STS_ROUND_TRIP_LTP_CNT_VAL_SMASK						0xFFFFull
/*
* Table #138 of oc_lcb_csrs - LCB_STS_NULLS_REQUIRED
* This register reports the number of null LTPs that are required before reusing 
* a replay buffer location. This is necessary to prevent replay buffer overrun 
* when the link round trip is larger than the depth of the replay 
* buffer.
*/
#define OC_LCB_STS_NULLS_REQUIRED							(OC_LCB_CSRS + 0x0000000007D8)
#define OC_LCB_STS_NULLS_REQUIRED_RESETCSR						0x0000000000000000ull
#define OC_LCB_STS_NULLS_REQUIRED_UNUSED_63_16_SHIFT					16
#define OC_LCB_STS_NULLS_REQUIRED_UNUSED_63_16_MASK					0xFFFFFFFFFFFFull
#define OC_LCB_STS_NULLS_REQUIRED_UNUSED_63_16_SMASK					0xFFFFFFFFFFFF0000ull
#define OC_LCB_STS_NULLS_REQUIRED_CNT_SHIFT						0
#define OC_LCB_STS_NULLS_REQUIRED_CNT_MASK						0xFFFFull
#define OC_LCB_STS_NULLS_REQUIRED_CNT_SMASK						0xFFFFull
/*
* Table #139 of oc_lcb_csrs - LCB_STS_FLIT_QUIET_CNTR
* This register reports the number of replay buffer cycles that have transpired 
* since the last valid flit was passed up to the core.
*/
#define OC_LCB_STS_FLIT_QUIET_CNTR							(OC_LCB_CSRS + 0x0000000007E0)
#define OC_LCB_STS_FLIT_QUIET_CNTR_RESETCSR						0x0000000000000000ull
#define OC_LCB_STS_FLIT_QUIET_CNTR_UNUSED_63_3_SHIFT					3
#define OC_LCB_STS_FLIT_QUIET_CNTR_UNUSED_63_3_MASK					0x1FFFFFFFFFFFFFFFull
#define OC_LCB_STS_FLIT_QUIET_CNTR_UNUSED_63_3_SMASK					0xFFFFFFFFFFFFFFF8ull
#define OC_LCB_STS_FLIT_QUIET_CNTR_VAL_SHIFT						0
#define OC_LCB_STS_FLIT_QUIET_CNTR_VAL_MASK						0x7ull
#define OC_LCB_STS_FLIT_QUIET_CNTR_VAL_SMASK						0x7ull
/*
* Table #140 of oc_lcb_csrs - LCB_STS_RCV_SMA_MSG
* This register is used by the subnet management agent (SMA) to receive a 
* message from the peer SMA. The SMA software protocol must provide a means to 
* indicate a new message has been received.
*/
#define OC_LCB_STS_RCV_SMA_MSG								(OC_LCB_CSRS + 0x0000000007E8)
#define OC_LCB_STS_RCV_SMA_MSG_RESETCSR							0x0000000000000000ull
#define OC_LCB_STS_RCV_SMA_MSG_UNUSED_63_48_SHIFT					48
#define OC_LCB_STS_RCV_SMA_MSG_UNUSED_63_48_MASK					0xFFFFull
#define OC_LCB_STS_RCV_SMA_MSG_UNUSED_63_48_SMASK					0xFFFF000000000000ull
#define OC_LCB_STS_RCV_SMA_MSG_VAL_SHIFT						0
#define OC_LCB_STS_RCV_SMA_MSG_VAL_MASK							0xFFFFFFFFFFFFull
#define OC_LCB_STS_RCV_SMA_MSG_VAL_SMASK						0xFFFFFFFFFFFFull
/*
* Table #141 of oc_lcb_csrs - LCB_STS_MASTER_TIME_LOW_0
* When a MasterTimeLow flit, with an ID of 0, arrives at a port that supports a 
* Local Clock the Local Clock value is captured in a LocalTime register, and the 
* Master Clock ID and low 40 bits of the Master Time are captured in a 
* MasterTime register. For a debug HFI FZC in port mirroring mode capture the 
* low 40 bits of the LUT time stamp value in this register when a PortMirrorTime 
* arrives with the LUT time stamp embedded. MasterTime has a resolution of 
* 1ns.
*/
#define OC_LCB_STS_MASTER_TIME_LOW_0							(OC_LCB_CSRS + 0x0000000007F0)
#define OC_LCB_STS_MASTER_TIME_LOW_0_RESETCSR						0x0000000000000000ull
#define OC_LCB_STS_MASTER_TIME_LOW_0_UNUSED_63_42_SHIFT					42
#define OC_LCB_STS_MASTER_TIME_LOW_0_UNUSED_63_42_MASK					0x3FFFFFull
#define OC_LCB_STS_MASTER_TIME_LOW_0_UNUSED_63_42_SMASK					0xFFFFFC0000000000ull
#define OC_LCB_STS_MASTER_TIME_LOW_0_MASTER_ID_SHIFT					40
#define OC_LCB_STS_MASTER_TIME_LOW_0_MASTER_ID_MASK					0x3ull
#define OC_LCB_STS_MASTER_TIME_LOW_0_MASTER_ID_SMASK					0x30000000000ull
#define OC_LCB_STS_MASTER_TIME_LOW_0_VAL_SHIFT						0
#define OC_LCB_STS_MASTER_TIME_LOW_0_VAL_MASK						0xFFFFFFFFFFull
#define OC_LCB_STS_MASTER_TIME_LOW_0_VAL_SMASK						0xFFFFFFFFFFull
/*
* Table #142 of oc_lcb_csrs - LCB_STS_MASTER_TIME_HIGH_0
* When a MasterTimeHigh flit, with an ID of 0, arrives at a port that supports a 
* Local Clock, the high 32 bits of the Master Time are captured in a 
* MasterTimeHigh register. For a debug HFI FZC in port mirroring mode capture 
* the high 24 bits of the 56 bit LUT time stamp value in this register when a 
* PortMirrorTime arrives with the LUT time stamp embedded. MasterTime has a 
* resolution of 1ns.
*/
#define OC_LCB_STS_MASTER_TIME_HIGH_0							(OC_LCB_CSRS + 0x0000000007F8)
#define OC_LCB_STS_MASTER_TIME_HIGH_0_RESETCSR						0x0000000000000000ull
#define OC_LCB_STS_MASTER_TIME_HIGH_0_UNUSED_63_32_SHIFT				32
#define OC_LCB_STS_MASTER_TIME_HIGH_0_UNUSED_63_32_MASK					0xFFFFFFFFull
#define OC_LCB_STS_MASTER_TIME_HIGH_0_UNUSED_63_32_SMASK				0xFFFFFFFF00000000ull
#define OC_LCB_STS_MASTER_TIME_HIGH_0_VAL_SHIFT						0
#define OC_LCB_STS_MASTER_TIME_HIGH_0_VAL_MASK						0xFFFFFFFFull
#define OC_LCB_STS_MASTER_TIME_HIGH_0_VAL_SMASK						0xFFFFFFFFull
/*
* Table #143 of oc_lcb_csrs - LCB_STS_SNAPPED_LOCAL_TIME_0
* When a MasterTimeLow flit, with an ID of 0, arrives at a port that supports a 
* Local Clock the Local Clock value is captured in a LocalTime register. The 
* LocalTime register is not changed when the MasterTimeHigh flit arrives. For a 
* debug HFI FZC in port mirroring mode capture the Local Clock value in this 
* register when a PortMirrorTime arrives with the LUT time stamp 
* embedded.
*/
#define OC_LCB_STS_SNAPPED_LOCAL_TIME_0							(OC_LCB_CSRS + 0x000000000800)
#define OC_LCB_STS_SNAPPED_LOCAL_TIME_0_RESETCSR					0x0000000000000000ull
#define OC_LCB_STS_SNAPPED_LOCAL_TIME_0_VAL_SHIFT					0
#define OC_LCB_STS_SNAPPED_LOCAL_TIME_0_VAL_MASK					0xFFFFFFFFFFFFFFFFull
#define OC_LCB_STS_SNAPPED_LOCAL_TIME_0_VAL_SMASK					0xFFFFFFFFFFFFFFFFull
/*
* Table #144 of oc_lcb_csrs - LCB_STS_MASTER_TIME_LOW_1
* When a MasterTimeLow flit, with an ID of 1, arrives at a port that supports a 
* Local Clock the Local Clock value is captured in a LocalTime register, and the 
* Master Clock ID and low 40 bits of the Master Time are captured in a 
* MasterTime register. For a debug HFI FZC in port mirroring mode capture the 
* low 40 bits of the LUT time stamp value in this register when a PortMirrorTime 
* arrives with the LUT time stamp embedded. MasterTime has a resolution of 
* 1ns.
*/
#define OC_LCB_STS_MASTER_TIME_LOW_1							(OC_LCB_CSRS + 0x000000000808)
#define OC_LCB_STS_MASTER_TIME_LOW_1_RESETCSR						0x0000000000000000ull
#define OC_LCB_STS_MASTER_TIME_LOW_1_UNUSED_63_42_SHIFT					42
#define OC_LCB_STS_MASTER_TIME_LOW_1_UNUSED_63_42_MASK					0x3FFFFFull
#define OC_LCB_STS_MASTER_TIME_LOW_1_UNUSED_63_42_SMASK					0xFFFFFC0000000000ull
#define OC_LCB_STS_MASTER_TIME_LOW_1_MASTER_ID_SHIFT					40
#define OC_LCB_STS_MASTER_TIME_LOW_1_MASTER_ID_MASK					0x3ull
#define OC_LCB_STS_MASTER_TIME_LOW_1_MASTER_ID_SMASK					0x30000000000ull
#define OC_LCB_STS_MASTER_TIME_LOW_1_VAL_SHIFT						0
#define OC_LCB_STS_MASTER_TIME_LOW_1_VAL_MASK						0xFFFFFFFFFFull
#define OC_LCB_STS_MASTER_TIME_LOW_1_VAL_SMASK						0xFFFFFFFFFFull
/*
* Table #145 of oc_lcb_csrs - LCB_STS_MASTER_TIME_HIGH_1
* When a MasterTimeHigh flit, with an ID of 1, arrives at a port that supports a 
* Local Clock, the high 32 bits of the Master Time are captured in a 
* MasterTimeHigh register. For a debug HFI FZC in port mirroring mode capture 
* the high 24 bits of the 56 bit LUT time stamp value in this register when a 
* PortMirrorTime arrives with the LUT time stamp embedded. MasterTime has a 
* resolution of 1ns.
*/
#define OC_LCB_STS_MASTER_TIME_HIGH_1							(OC_LCB_CSRS + 0x000000000810)
#define OC_LCB_STS_MASTER_TIME_HIGH_1_RESETCSR						0x0000000000000000ull
#define OC_LCB_STS_MASTER_TIME_HIGH_1_UNUSED_63_32_SHIFT				32
#define OC_LCB_STS_MASTER_TIME_HIGH_1_UNUSED_63_32_MASK					0xFFFFFFFFull
#define OC_LCB_STS_MASTER_TIME_HIGH_1_UNUSED_63_32_SMASK				0xFFFFFFFF00000000ull
#define OC_LCB_STS_MASTER_TIME_HIGH_1_VAL_SHIFT						0
#define OC_LCB_STS_MASTER_TIME_HIGH_1_VAL_MASK						0xFFFFFFFFull
#define OC_LCB_STS_MASTER_TIME_HIGH_1_VAL_SMASK						0xFFFFFFFFull
/*
* Table #146 of oc_lcb_csrs - LCB_STS_SNAPPED_LOCAL_TIME_1
* When a MasterTimeLow flit, with an ID of 1, arrives at a port that supports a 
* Local Clock the Local Clock value is captured in a LocalTime register. The 
* LocalTime register is not changed when the MasterTimeHigh flit arrives. For a 
* debug HFI FZC in port mirroring mode capture the Local Clock value in this 
* register when a PortMirrorTime arrives with the LUT time stamp 
* embedded.
*/
#define OC_LCB_STS_SNAPPED_LOCAL_TIME_1							(OC_LCB_CSRS + 0x000000000818)
#define OC_LCB_STS_SNAPPED_LOCAL_TIME_1_RESETCSR					0x0000000000000000ull
#define OC_LCB_STS_SNAPPED_LOCAL_TIME_1_VAL_SHIFT					0
#define OC_LCB_STS_SNAPPED_LOCAL_TIME_1_VAL_MASK					0xFFFFFFFFFFFFFFFFull
#define OC_LCB_STS_SNAPPED_LOCAL_TIME_1_VAL_SMASK					0xFFFFFFFFFFFFFFFFull
/*
* Table #147 of oc_lcb_csrs - LCB_STS_MASTER_TIME_LOW_2
* When a MasterTimeLow flit, with an ID of 2, arrives at a port that supports a 
* Local Clock the Local Clock value is captured in a LocalTime register, and the 
* Master Clock ID and low 40 bits of the Master Time are captured in a 
* MasterTime register. For a debug HFI FZC in port mirroring mode capture the 
* low 40 bits of the LUT time stamp value in this register when a PortMirrorTime 
* arrives with the LUT time stamp embedded. MasterTime has a resolution of 
* 1ns.
*/
#define OC_LCB_STS_MASTER_TIME_LOW_2							(OC_LCB_CSRS + 0x000000000820)
#define OC_LCB_STS_MASTER_TIME_LOW_2_RESETCSR						0x0000000000000000ull
#define OC_LCB_STS_MASTER_TIME_LOW_2_UNUSED_63_42_SHIFT					42
#define OC_LCB_STS_MASTER_TIME_LOW_2_UNUSED_63_42_MASK					0x3FFFFFull
#define OC_LCB_STS_MASTER_TIME_LOW_2_UNUSED_63_42_SMASK					0xFFFFFC0000000000ull
#define OC_LCB_STS_MASTER_TIME_LOW_2_MASTER_ID_SHIFT					40
#define OC_LCB_STS_MASTER_TIME_LOW_2_MASTER_ID_MASK					0x3ull
#define OC_LCB_STS_MASTER_TIME_LOW_2_MASTER_ID_SMASK					0x30000000000ull
#define OC_LCB_STS_MASTER_TIME_LOW_2_VAL_SHIFT						0
#define OC_LCB_STS_MASTER_TIME_LOW_2_VAL_MASK						0xFFFFFFFFFFull
#define OC_LCB_STS_MASTER_TIME_LOW_2_VAL_SMASK						0xFFFFFFFFFFull
/*
* Table #148 of oc_lcb_csrs - LCB_STS_MASTER_TIME_HIGH_2
* When a MasterTimeHigh flit, with an ID of 2, arrives at a port that supports a 
* Local Clock, the high 32 bits of the Master Time are captured in a 
* MasterTimeHigh register. For a debug HFI FZC in port mirroring mode capture 
* the high 24 bits of the 56 bit LUT time stamp value in this register when a 
* PortMirrorTime arrives with the LUT time stamp embedded. MasterTime has a 
* resolution of 1ns.
*/
#define OC_LCB_STS_MASTER_TIME_HIGH_2							(OC_LCB_CSRS + 0x000000000828)
#define OC_LCB_STS_MASTER_TIME_HIGH_2_RESETCSR						0x0000000000000000ull
#define OC_LCB_STS_MASTER_TIME_HIGH_2_UNUSED_63_32_SHIFT				32
#define OC_LCB_STS_MASTER_TIME_HIGH_2_UNUSED_63_32_MASK					0xFFFFFFFFull
#define OC_LCB_STS_MASTER_TIME_HIGH_2_UNUSED_63_32_SMASK				0xFFFFFFFF00000000ull
#define OC_LCB_STS_MASTER_TIME_HIGH_2_VAL_SHIFT						0
#define OC_LCB_STS_MASTER_TIME_HIGH_2_VAL_MASK						0xFFFFFFFFull
#define OC_LCB_STS_MASTER_TIME_HIGH_2_VAL_SMASK						0xFFFFFFFFull
/*
* Table #149 of oc_lcb_csrs - LCB_STS_SNAPPED_LOCAL_TIME_2
* When a MasterTimeLow flit, with an ID of 2, arrives at a port that supports a 
* Local Clock the Local Clock value is captured in a LocalTime register. The 
* LocalTime register is not changed when the MasterTimeHigh flit arrives. For a 
* debug HFI FZC in port mirroring mode capture the Local Clock value in this 
* register when a PortMirrorTime arrives with the LUT time stamp 
* embedded.
*/
#define OC_LCB_STS_SNAPPED_LOCAL_TIME_2							(OC_LCB_CSRS + 0x000000000830)
#define OC_LCB_STS_SNAPPED_LOCAL_TIME_2_RESETCSR					0x0000000000000000ull
#define OC_LCB_STS_SNAPPED_LOCAL_TIME_2_VAL_SHIFT					0
#define OC_LCB_STS_SNAPPED_LOCAL_TIME_2_VAL_MASK					0xFFFFFFFFFFFFFFFFull
#define OC_LCB_STS_SNAPPED_LOCAL_TIME_2_VAL_SMASK					0xFFFFFFFFFFFFFFFFull
/*
* Table #150 of oc_lcb_csrs - LCB_STS_MASTER_TIME_LOW_3
* When a MasterTimeLow flit, with an ID of 3, arrives at a port that supports a 
* Local Clock the Local Clock value is captured in a LocalTime register, and the 
* Master Clock ID and low 40 bits of the Master Time are captured in a 
* MasterTime register. For a debug HFI FZC in port mirroring mode capture the 
* low 40 bits of the LUT time stamp value in this register when a PortMirrorTime 
* arrives with the LUT time stamp embedded. MasterTime has a resolution of 
* 1ns.
*/
#define OC_LCB_STS_MASTER_TIME_LOW_3							(OC_LCB_CSRS + 0x000000000838)
#define OC_LCB_STS_MASTER_TIME_LOW_3_RESETCSR						0x0000000000000000ull
#define OC_LCB_STS_MASTER_TIME_LOW_3_UNUSED_63_42_SHIFT					42
#define OC_LCB_STS_MASTER_TIME_LOW_3_UNUSED_63_42_MASK					0x3FFFFFull
#define OC_LCB_STS_MASTER_TIME_LOW_3_UNUSED_63_42_SMASK					0xFFFFFC0000000000ull
#define OC_LCB_STS_MASTER_TIME_LOW_3_MASTER_ID_SHIFT					40
#define OC_LCB_STS_MASTER_TIME_LOW_3_MASTER_ID_MASK					0x3ull
#define OC_LCB_STS_MASTER_TIME_LOW_3_MASTER_ID_SMASK					0x30000000000ull
#define OC_LCB_STS_MASTER_TIME_LOW_3_VAL_SHIFT						0
#define OC_LCB_STS_MASTER_TIME_LOW_3_VAL_MASK						0xFFFFFFFFFFull
#define OC_LCB_STS_MASTER_TIME_LOW_3_VAL_SMASK						0xFFFFFFFFFFull
/*
* Table #151 of oc_lcb_csrs - LCB_STS_MASTER_TIME_HIGH_3
* When a MasterTimeHigh flit, with an ID of 3, arrives at a port that supports a 
* Local Clock the high 32 bits of the Master Time are captured in a 
* MasterTimeHigh register. For a debug HFI FZC in port mirroring mode capture 
* the high 24 bits of the 56 bit LUT time stamp value in this register when a 
* PortMirrorTime arrives with the LUT time stamp embedded. MasterTime has a 
* resolution of 1ns.
*/
#define OC_LCB_STS_MASTER_TIME_HIGH_3							(OC_LCB_CSRS + 0x000000000840)
#define OC_LCB_STS_MASTER_TIME_HIGH_3_RESETCSR						0x0000000000000000ull
#define OC_LCB_STS_MASTER_TIME_HIGH_3_UNUSED_63_32_SHIFT				32
#define OC_LCB_STS_MASTER_TIME_HIGH_3_UNUSED_63_32_MASK					0xFFFFFFFFull
#define OC_LCB_STS_MASTER_TIME_HIGH_3_UNUSED_63_32_SMASK				0xFFFFFFFF00000000ull
#define OC_LCB_STS_MASTER_TIME_HIGH_3_VAL_SHIFT						0
#define OC_LCB_STS_MASTER_TIME_HIGH_3_VAL_MASK						0xFFFFFFFFull
#define OC_LCB_STS_MASTER_TIME_HIGH_3_VAL_SMASK						0xFFFFFFFFull
/*
* Table #152 of oc_lcb_csrs - LCB_STS_SNAPPED_LOCAL_TIME_3
* When a MasterTimeLow flit, with an ID of 3, arrives at a port that supports a 
* Local Clock the Local Clock value is captured in a LocalTime register. The 
* LocalTime register is not changed when the MasterTimeHigh flit arrives. For a 
* debug HFI FZC in port mirroring mode capture the Local Clock value in this 
* register when a PortMirrorTime arrives with the LUT time stamp 
* embedded.
*/
#define OC_LCB_STS_SNAPPED_LOCAL_TIME_3							(OC_LCB_CSRS + 0x000000000848)
#define OC_LCB_STS_SNAPPED_LOCAL_TIME_3_RESETCSR					0x0000000000000000ull
#define OC_LCB_STS_SNAPPED_LOCAL_TIME_3_VAL_SHIFT					0
#define OC_LCB_STS_SNAPPED_LOCAL_TIME_3_VAL_MASK					0xFFFFFFFFFFFFFFFFull
#define OC_LCB_STS_SNAPPED_LOCAL_TIME_3_VAL_SMASK					0xFFFFFFFFFFFFFFFFull
/*
* Table #153 of oc_lcb_csrs - LCB_STS_UPPER_LOCAL_TIME
* The upper 64 bits (NS bits) of the local time.
*/
#define OC_LCB_STS_UPPER_LOCAL_TIME							(OC_LCB_CSRS + 0x000000000850)
#define OC_LCB_STS_UPPER_LOCAL_TIME_RESETCSR						0x0000000000000000ull
#define OC_LCB_STS_UPPER_LOCAL_TIME_VAL_SHIFT						0
#define OC_LCB_STS_UPPER_LOCAL_TIME_VAL_MASK						0xFFFFFFFFFFFFFFFFull
#define OC_LCB_STS_UPPER_LOCAL_TIME_VAL_SMASK						0xFFFFFFFFFFFFFFFFull
/*
* Table #154 of oc_lcb_csrs - LCB_STS_LOWER_LOCAL_TIME
* The lower 32 bits (sub-NS bits) of the local time.
*/
#define OC_LCB_STS_LOWER_LOCAL_TIME							(OC_LCB_CSRS + 0x000000000858)
#define OC_LCB_STS_LOWER_LOCAL_TIME_RESETCSR						0x0000000000000000ull
#define OC_LCB_STS_LOWER_LOCAL_TIME_UNUSED_63_32_SHIFT					32
#define OC_LCB_STS_LOWER_LOCAL_TIME_UNUSED_63_32_MASK					0xFFFFFFFFull
#define OC_LCB_STS_LOWER_LOCAL_TIME_UNUSED_63_32_SMASK					0xFFFFFFFF00000000ull
#define OC_LCB_STS_LOWER_LOCAL_TIME_VAL_SHIFT						0
#define OC_LCB_STS_LOWER_LOCAL_TIME_VAL_MASK						0xFFFFFFFFull
#define OC_LCB_STS_LOWER_LOCAL_TIME_VAL_SMASK						0xFFFFFFFFull
/*
* Table #155 of oc_lcb_csrs - LCB_PG_CFG_RUN
* This register steers the LCB input mux between the BIST pattern generator and 
* the real mission mode inputs. When this register is set, bubble squashing is 
* disabled.
*/
#define OC_LCB_PG_CFG_RUN								(OC_LCB_CSRS + 0x000000000880)
#define OC_LCB_PG_CFG_RUN_RESETCSR							0x0000000000000000ull
#define OC_LCB_PG_CFG_RUN_UNUSED_63_1_SHIFT						1
#define OC_LCB_PG_CFG_RUN_UNUSED_63_1_MASK						0x7FFFFFFFFFFFFFFFull
#define OC_LCB_PG_CFG_RUN_UNUSED_63_1_SMASK						0xFFFFFFFFFFFFFFFEull
#define OC_LCB_PG_CFG_RUN_EN_SHIFT							0
#define OC_LCB_PG_CFG_RUN_EN_MASK							0x1ull
#define OC_LCB_PG_CFG_RUN_EN_SMASK							0x1ull
/*
* Table #156 of oc_lcb_csrs - LCB_PG_CFG_RX_RUN
* The receive run enable register is the control for starting and stopping 
* receive side flit and virtual channel acknowledge generation. This bit must be 
* enabled whenever the transmit run bit is enabled in the pattern generator at 
* the other end of the link, otherwise miss compares will occur.
*/
#define OC_LCB_PG_CFG_RX_RUN								(OC_LCB_CSRS + 0x000000000888)
#define OC_LCB_PG_CFG_RX_RUN_RESETCSR							0x0000000000000000ull
#define OC_LCB_PG_CFG_RX_RUN_UNUSED_63_1_SHIFT						1
#define OC_LCB_PG_CFG_RX_RUN_UNUSED_63_1_MASK						0x7FFFFFFFFFFFFFFFull
#define OC_LCB_PG_CFG_RX_RUN_UNUSED_63_1_SMASK						0xFFFFFFFFFFFFFFFEull
#define OC_LCB_PG_CFG_RX_RUN_EN_SHIFT							0
#define OC_LCB_PG_CFG_RX_RUN_EN_MASK							0x1ull
#define OC_LCB_PG_CFG_RX_RUN_EN_SMASK							0x1ull
/*
* Table #157 of oc_lcb_csrs - LCB_PG_CFG_TX_RUN
* The transmit run enable register is the control for starting and stopping 
* transmit side flit and virtual channel acknowledge verification. This bit must 
* be enabled only when the receive run bit is enabled in the pattern generator 
* at the other end of the link, otherwise miss compares will occur.
*/
#define OC_LCB_PG_CFG_TX_RUN								(OC_LCB_CSRS + 0x000000000890)
#define OC_LCB_PG_CFG_TX_RUN_RESETCSR							0x0000000000000000ull
#define OC_LCB_PG_CFG_TX_RUN_UNUSED_63_1_SHIFT						1
#define OC_LCB_PG_CFG_TX_RUN_UNUSED_63_1_MASK						0x7FFFFFFFFFFFFFFFull
#define OC_LCB_PG_CFG_TX_RUN_UNUSED_63_1_SMASK						0xFFFFFFFFFFFFFFFEull
#define OC_LCB_PG_CFG_TX_RUN_EN_SHIFT							0
#define OC_LCB_PG_CFG_TX_RUN_EN_MASK							0x1ull
#define OC_LCB_PG_CFG_TX_RUN_EN_SMASK							0x1ull
/*
* Table #158 of oc_lcb_csrs - LCB_PG_CFG_CAPTURE_DELAY
* The capture delay register sets the length in flits between the occurrence of 
* a the miscompare error flag and the hold of the capture buffer.
*/
#define OC_LCB_PG_CFG_CAPTURE_DELAY							(OC_LCB_CSRS + 0x000000000898)
#define OC_LCB_PG_CFG_CAPTURE_DELAY_RESETCSR						0x000000000000000Bull
#define OC_LCB_PG_CFG_CAPTURE_DELAY_UNUSED_63_4_SHIFT					4
#define OC_LCB_PG_CFG_CAPTURE_DELAY_UNUSED_63_4_MASK					0xFFFFFFFFFFFFFFFull
#define OC_LCB_PG_CFG_CAPTURE_DELAY_UNUSED_63_4_SMASK					0xFFFFFFFFFFFFFFF0ull
#define OC_LCB_PG_CFG_CAPTURE_DELAY_VAL_SHIFT						0
#define OC_LCB_PG_CFG_CAPTURE_DELAY_VAL_MASK						0xFull
#define OC_LCB_PG_CFG_CAPTURE_DELAY_VAL_SMASK						0xFull
/*
* Table #159 of oc_lcb_csrs - LCB_PG_CFG_CAPTURE_RADR
* The register controls the capture RAMs read address.
*/
#define OC_LCB_PG_CFG_CAPTURE_RADR							(OC_LCB_CSRS + 0x0000000008A0)
#define OC_LCB_PG_CFG_CAPTURE_RADR_RESETCSR						0x0000000000000000ull
#define OC_LCB_PG_CFG_CAPTURE_RADR_UNUSED_63_5_SHIFT					5
#define OC_LCB_PG_CFG_CAPTURE_RADR_UNUSED_63_5_MASK					0x7FFFFFFFFFFFFFFull
#define OC_LCB_PG_CFG_CAPTURE_RADR_UNUSED_63_5_SMASK					0xFFFFFFFFFFFFFFE0ull
#define OC_LCB_PG_CFG_CAPTURE_RADR_EN_SHIFT						4
#define OC_LCB_PG_CFG_CAPTURE_RADR_EN_MASK						0x1ull
#define OC_LCB_PG_CFG_CAPTURE_RADR_EN_SMASK						0x10ull
#define OC_LCB_PG_CFG_CAPTURE_RADR_VAL_SHIFT						0
#define OC_LCB_PG_CFG_CAPTURE_RADR_VAL_MASK						0xFull
#define OC_LCB_PG_CFG_CAPTURE_RADR_VAL_SMASK						0xFull
/*
* Table #160 of oc_lcb_csrs - LCB_PG_CFG_CRDTS_LCB
* The initial LCB credits register sets the number of LCB flit credits assumed 
* by the flit generator at reset. The LCB credits represents the space available 
* in the LCB input buffer. This value may be decreased to throttle the flit 
* generation rate or increased to explore LCB input buffer overflow.
*/
#define OC_LCB_PG_CFG_CRDTS_LCB								(OC_LCB_CSRS + 0x0000000008A8)
#define OC_LCB_PG_CFG_CRDTS_LCB_RESETCSR						0x0000000000000010ull
#define OC_LCB_PG_CFG_CRDTS_LCB_UNUSED_63_8_SHIFT					8
#define OC_LCB_PG_CFG_CRDTS_LCB_UNUSED_63_8_MASK					0xFFFFFFFFFFFFFFull
#define OC_LCB_PG_CFG_CRDTS_LCB_UNUSED_63_8_SMASK					0xFFFFFFFFFFFFFF00ull
#define OC_LCB_PG_CFG_CRDTS_LCB_VAL_SHIFT						0
#define OC_LCB_PG_CFG_CRDTS_LCB_VAL_MASK						0xFFull
#define OC_LCB_PG_CFG_CRDTS_LCB_VAL_SMASK						0xFFull
/*
* Table #161 of oc_lcb_csrs - LCB_PG_CFG_LEN
* This register controls how long testing occurs.
*/
#define OC_LCB_PG_CFG_LEN								(OC_LCB_CSRS + 0x0000000008B0)
#define OC_LCB_PG_CFG_LEN_RESETCSR							0x0240000000000000ull
#define OC_LCB_PG_CFG_LEN_UNUSED_63_58_SHIFT						58
#define OC_LCB_PG_CFG_LEN_UNUSED_63_58_MASK						0x3Full
#define OC_LCB_PG_CFG_LEN_UNUSED_63_58_SMASK						0xFC00000000000000ull
#define OC_LCB_PG_CFG_LEN_PAUSE_MSK_SHIFT						52
#define OC_LCB_PG_CFG_LEN_PAUSE_MSK_MASK						0x3Full
#define OC_LCB_PG_CFG_LEN_PAUSE_MSK_SMASK						0x3F0000000000000ull
#define OC_LCB_PG_CFG_LEN_VAL_SHIFT							0
#define OC_LCB_PG_CFG_LEN_VAL_MASK							0xFFFFFFFFFFFFFull
#define OC_LCB_PG_CFG_LEN_VAL_SMASK							0xFFFFFFFFFFFFFull
/*
* Table #162 of oc_lcb_csrs - LCB_PG_CFG_SEED
* The random seed register sets the initial value of all PG LFSRs. Each 
* individual LFSR uniquely alters the seed value such that each LFSR creates a 
* unique sequence. The seed itself need not be random, this determines where in 
* the LFSR sequence the test starts. This is most useful during pre silicon 
* validation.
*/
#define OC_LCB_PG_CFG_SEED								(OC_LCB_CSRS + 0x0000000008B8)
#define OC_LCB_PG_CFG_SEED_RESETCSR							0x0000000000000000ull
#define OC_LCB_PG_CFG_SEED_UNUSED_63_55_SHIFT						55
#define OC_LCB_PG_CFG_SEED_UNUSED_63_55_MASK						0x1FFull
#define OC_LCB_PG_CFG_SEED_UNUSED_63_55_SMASK						0xFF80000000000000ull
#define OC_LCB_PG_CFG_SEED_VAL_SHIFT							0
#define OC_LCB_PG_CFG_SEED_VAL_MASK							0x7FFFFFFFFFFFFFull
#define OC_LCB_PG_CFG_SEED_VAL_SMASK							0x7FFFFFFFFFFFFFull
/*
* Table #163 of oc_lcb_csrs - LCB_PG_CFG_FLIT
* The flit parameters register controls the random selection of flit type and 
* content.
*/
#define OC_LCB_PG_CFG_FLIT								(OC_LCB_CSRS + 0x0000000008C0)
#define OC_LCB_PG_CFG_FLIT_RESETCSR							0x0000000000000000ull
#define OC_LCB_PG_CFG_FLIT_UNUSED_63_5_SHIFT						5
#define OC_LCB_PG_CFG_FLIT_UNUSED_63_5_MASK						0x7FFFFFFFFFFFFFFull
#define OC_LCB_PG_CFG_FLIT_UNUSED_63_5_SMASK						0xFFFFFFFFFFFFFFE0ull
#define OC_LCB_PG_CFG_FLIT_ALLOW_UNEXP_TOSSED_FLITS_SHIFT				4
#define OC_LCB_PG_CFG_FLIT_ALLOW_UNEXP_TOSSED_FLITS_MASK				0x1ull
#define OC_LCB_PG_CFG_FLIT_ALLOW_UNEXP_TOSSED_FLITS_SMASK				0x10ull
#define OC_LCB_PG_CFG_FLIT_UNUSED_3_2_SHIFT						2
#define OC_LCB_PG_CFG_FLIT_UNUSED_3_2_MASK						0x3ull
#define OC_LCB_PG_CFG_FLIT_UNUSED_3_2_SMASK						0xCull
#define OC_LCB_PG_CFG_FLIT_CONTENT_SHIFT						0
#define OC_LCB_PG_CFG_FLIT_CONTENT_MASK							0x3ull
#define OC_LCB_PG_CFG_FLIT_CONTENT_SMASK						0x3ull
/*
* Table #164 of oc_lcb_csrs - LCB_PG_CFG_IDLE_INJECT
* The idle injection register controls the rate at which idles are injected into 
* the transmitted flit stream. These idles are inserted before flit throttling 
* is taken into consideration. These idles are also the idles that can contain 
* single and double bit errors.
*/
#define OC_LCB_PG_CFG_IDLE_INJECT							(OC_LCB_CSRS + 0x0000000008C8)
#define OC_LCB_PG_CFG_IDLE_INJECT_RESETCSR						0x0000000000002000ull
#define OC_LCB_PG_CFG_IDLE_INJECT_UNUSED_63_16_SHIFT					16
#define OC_LCB_PG_CFG_IDLE_INJECT_UNUSED_63_16_MASK					0xFFFFFFFFFFFFull
#define OC_LCB_PG_CFG_IDLE_INJECT_UNUSED_63_16_SMASK					0xFFFFFFFFFFFF0000ull
#define OC_LCB_PG_CFG_IDLE_INJECT_THRESHOLD_SHIFT					0
#define OC_LCB_PG_CFG_IDLE_INJECT_THRESHOLD_MASK					0xFFFFull
#define OC_LCB_PG_CFG_IDLE_INJECT_THRESHOLD_SMASK					0xFFFFull
/*
* Table #165 of oc_lcb_csrs - LCB_PG_CFG_ERR
* The error parameters register controls the rate of SBEs and MBEs injected into 
* flits.
*/
#define OC_LCB_PG_CFG_ERR								(OC_LCB_CSRS + 0x0000000008D0)
#define OC_LCB_PG_CFG_ERR_RESETCSR							0x0001004000001000ull
#define OC_LCB_PG_CFG_ERR_UNUSED_63_49_SHIFT						49
#define OC_LCB_PG_CFG_ERR_UNUSED_63_49_MASK						0x7FFFull
#define OC_LCB_PG_CFG_ERR_UNUSED_63_49_SMASK						0xFFFE000000000000ull
#define OC_LCB_PG_CFG_ERR_REALISTIC_SHIFT						48
#define OC_LCB_PG_CFG_ERR_REALISTIC_MASK						0x1ull
#define OC_LCB_PG_CFG_ERR_REALISTIC_SMASK						0x1000000000000ull
#define OC_LCB_PG_CFG_ERR_MBE_THRESHOLD_SHIFT						32
#define OC_LCB_PG_CFG_ERR_MBE_THRESHOLD_MASK						0xFFFFull
#define OC_LCB_PG_CFG_ERR_MBE_THRESHOLD_SMASK						0xFFFF00000000ull
#define OC_LCB_PG_CFG_ERR_SBE_THRESHOLD_SHIFT						0
#define OC_LCB_PG_CFG_ERR_SBE_THRESHOLD_MASK						0xFFFFFFFFull
#define OC_LCB_PG_CFG_ERR_SBE_THRESHOLD_SMASK						0xFFFFFFFFull
/*
* Table #166 of oc_lcb_csrs - LCB_PG_CFG_MISCOMPARE
* This register controls the enables for each miscompare type.
*/
#define OC_LCB_PG_CFG_MISCOMPARE							(OC_LCB_CSRS + 0x0000000008D8)
#define OC_LCB_PG_CFG_MISCOMPARE_RESETCSR						0x000000000000001Full
#define OC_LCB_PG_CFG_MISCOMPARE_UNUSED_63_5_SHIFT					5
#define OC_LCB_PG_CFG_MISCOMPARE_UNUSED_63_5_MASK					0x7FFFFFFFFFFFFFFull
#define OC_LCB_PG_CFG_MISCOMPARE_UNUSED_63_5_SMASK					0xFFFFFFFFFFFFFFE0ull
#define OC_LCB_PG_CFG_MISCOMPARE_EN_SHIFT						0
#define OC_LCB_PG_CFG_MISCOMPARE_EN_MASK						0x1Full
#define OC_LCB_PG_CFG_MISCOMPARE_EN_SMASK						0x1Full
/*
* Table #167 of oc_lcb_csrs - LCB_PG_CFG_PATTERN
* The transmit canned flit pattern register supplies the data pattern used when 
* canned data content is selected in the flit configuration register.
*/
#define OC_LCB_PG_CFG_PATTERN								(OC_LCB_CSRS + 0x0000000008E0)
#define OC_LCB_PG_CFG_PATTERN_RESETCSR							0x0000000000000000ull
#define OC_LCB_PG_CFG_PATTERN_UNUSED_63_56_SHIFT					56
#define OC_LCB_PG_CFG_PATTERN_UNUSED_63_56_MASK						0xFFull
#define OC_LCB_PG_CFG_PATTERN_UNUSED_63_56_SMASK					0xFF00000000000000ull
#define OC_LCB_PG_CFG_PATTERN_DATA_SHIFT						0
#define OC_LCB_PG_CFG_PATTERN_DATA_MASK							0xFFFFFFFFFFFFFFull
#define OC_LCB_PG_CFG_PATTERN_DATA_SMASK						0xFFFFFFFFFFFFFFull
/*
* Table #168 of oc_lcb_csrs - LCB_PG_DBG_FLIT_CRDTS_CNT
* This The LCB credit debug register contains the current number of LCB credits 
* in use waiting for acknowledgement. This represents the amount of the LCB 
* input FIFO in use.
*/
#define OC_LCB_PG_DBG_FLIT_CRDTS_CNT							(OC_LCB_CSRS + 0x0000000008E8)
#define OC_LCB_PG_DBG_FLIT_CRDTS_CNT_RESETCSR						0x0000000000000000ull
#define OC_LCB_PG_DBG_FLIT_CRDTS_CNT_UNUSED_63_8_SHIFT					8
#define OC_LCB_PG_DBG_FLIT_CRDTS_CNT_UNUSED_63_8_MASK					0xFFFFFFFFFFFFFFull
#define OC_LCB_PG_DBG_FLIT_CRDTS_CNT_UNUSED_63_8_SMASK					0xFFFFFFFFFFFFFF00ull
#define OC_LCB_PG_DBG_FLIT_CRDTS_CNT_VAL_SHIFT						0
#define OC_LCB_PG_DBG_FLIT_CRDTS_CNT_VAL_MASK						0xFFull
#define OC_LCB_PG_DBG_FLIT_CRDTS_CNT_VAL_SMASK						0xFFull
/*
* Table #169 of oc_lcb_csrs - LCB_PG_ERR_INFO_MISCOMPARE_CNT
* The miscompare count register reports the number of flits received that do not 
* match the expected flit.
*/
#define OC_LCB_PG_ERR_INFO_MISCOMPARE_CNT						(OC_LCB_CSRS + 0x0000000008F0)
#define OC_LCB_PG_ERR_INFO_MISCOMPARE_CNT_RESETCSR					0x0000000000000000ull
#define OC_LCB_PG_ERR_INFO_MISCOMPARE_CNT_UNUSED_63_8_SHIFT				8
#define OC_LCB_PG_ERR_INFO_MISCOMPARE_CNT_UNUSED_63_8_MASK				0xFFFFFFFFFFFFFFull
#define OC_LCB_PG_ERR_INFO_MISCOMPARE_CNT_UNUSED_63_8_SMASK				0xFFFFFFFFFFFFFF00ull
#define OC_LCB_PG_ERR_INFO_MISCOMPARE_CNT_VAL_SHIFT					0
#define OC_LCB_PG_ERR_INFO_MISCOMPARE_CNT_VAL_MASK					0xFFull
#define OC_LCB_PG_ERR_INFO_MISCOMPARE_CNT_VAL_SMASK					0xFFull
/*
* Table #170 of oc_lcb_csrs - LCB_PG_STS_CAPTURE_ACTUAL_DAT0
* This register is used to retrieve the data from the actual capture 
* RAM.
*/
#define OC_LCB_PG_STS_CAPTURE_ACTUAL_DAT0						(OC_LCB_CSRS + 0x0000000008F8)
#define OC_LCB_PG_STS_CAPTURE_ACTUAL_DAT0_RESETCSR					0x0000000000000000ull
#define OC_LCB_PG_STS_CAPTURE_ACTUAL_DAT0_VAL_SHIFT					0
#define OC_LCB_PG_STS_CAPTURE_ACTUAL_DAT0_VAL_MASK					0xFFFFFFFFFFFFFFFFull
#define OC_LCB_PG_STS_CAPTURE_ACTUAL_DAT0_VAL_SMASK					0xFFFFFFFFFFFFFFFFull
/*
* Table #171 of oc_lcb_csrs - LCB_PG_STS_CAPTURE_ACTUAL_DAT1
* This register is used to retrieve the data from the actual capture 
* RAM.
*/
#define OC_LCB_PG_STS_CAPTURE_ACTUAL_DAT1						(OC_LCB_CSRS + 0x000000000900)
#define OC_LCB_PG_STS_CAPTURE_ACTUAL_DAT1_RESETCSR					0x0000000000000000ull
#define OC_LCB_PG_STS_CAPTURE_ACTUAL_DAT1_VAL_SHIFT					0
#define OC_LCB_PG_STS_CAPTURE_ACTUAL_DAT1_VAL_MASK					0xFFFFFFFFFFFFFFFFull
#define OC_LCB_PG_STS_CAPTURE_ACTUAL_DAT1_VAL_SMASK					0xFFFFFFFFFFFFFFFFull
/*
* Table #172 of oc_lcb_csrs - LCB_PG_STS_CAPTURE_ACTUAL_DAT2
* This register is used to retrieve the data from the actual capture 
* RAM.
*/
#define OC_LCB_PG_STS_CAPTURE_ACTUAL_DAT2						(OC_LCB_CSRS + 0x000000000908)
#define OC_LCB_PG_STS_CAPTURE_ACTUAL_DAT2_RESETCSR					0x0000000000000000ull
#define OC_LCB_PG_STS_CAPTURE_ACTUAL_DAT2_VAL_SHIFT					0
#define OC_LCB_PG_STS_CAPTURE_ACTUAL_DAT2_VAL_MASK					0xFFFFFFFFFFFFFFFFull
#define OC_LCB_PG_STS_CAPTURE_ACTUAL_DAT2_VAL_SMASK					0xFFFFFFFFFFFFFFFFull
/*
* Table #173 of oc_lcb_csrs - LCB_PG_STS_CAPTURE_ACTUAL_DAT3
* This register is used to retrieve the data from the actual capture 
* RAM.
*/
#define OC_LCB_PG_STS_CAPTURE_ACTUAL_DAT3						(OC_LCB_CSRS + 0x000000000910)
#define OC_LCB_PG_STS_CAPTURE_ACTUAL_DAT3_RESETCSR					0x0000000000000000ull
#define OC_LCB_PG_STS_CAPTURE_ACTUAL_DAT3_VAL_SHIFT					0
#define OC_LCB_PG_STS_CAPTURE_ACTUAL_DAT3_VAL_MASK					0xFFFFFFFFFFFFFFFFull
#define OC_LCB_PG_STS_CAPTURE_ACTUAL_DAT3_VAL_SMASK					0xFFFFFFFFFFFFFFFFull
/*
* Table #174 of oc_lcb_csrs - LCB_PG_STS_CAPTURE_ACTUAL_MISC
* This register is used to retrieve the data from the actual capture 
* RAM.
*/
#define OC_LCB_PG_STS_CAPTURE_ACTUAL_MISC						(OC_LCB_CSRS + 0x000000000918)
#define OC_LCB_PG_STS_CAPTURE_ACTUAL_MISC_RESETCSR					0x0000000000000000ull
#define OC_LCB_PG_STS_CAPTURE_ACTUAL_MISC_UNUSED_63_28_SHIFT				28
#define OC_LCB_PG_STS_CAPTURE_ACTUAL_MISC_UNUSED_63_28_MASK				0xFFFFFFFFFull
#define OC_LCB_PG_STS_CAPTURE_ACTUAL_MISC_UNUSED_63_28_SMASK				0xFFFFFFFFF0000000ull
#define OC_LCB_PG_STS_CAPTURE_ACTUAL_MISC_WADR_SHIFT					24
#define OC_LCB_PG_STS_CAPTURE_ACTUAL_MISC_WADR_MASK					0xFull
#define OC_LCB_PG_STS_CAPTURE_ACTUAL_MISC_WADR_SMASK					0xF000000ull
#define OC_LCB_PG_STS_CAPTURE_ACTUAL_MISC_UNUSED_23_21_SHIFT				21
#define OC_LCB_PG_STS_CAPTURE_ACTUAL_MISC_UNUSED_23_21_MASK				0x7ull
#define OC_LCB_PG_STS_CAPTURE_ACTUAL_MISC_UNUSED_23_21_SMASK				0xE00000ull
#define OC_LCB_PG_STS_CAPTURE_ACTUAL_MISC_MISCOMPARE_SHIFT				16
#define OC_LCB_PG_STS_CAPTURE_ACTUAL_MISC_MISCOMPARE_MASK				0x1Full
#define OC_LCB_PG_STS_CAPTURE_ACTUAL_MISC_MISCOMPARE_SMASK				0x1F0000ull
#define OC_LCB_PG_STS_CAPTURE_ACTUAL_MISC_UNUSED_15_14_SHIFT				14
#define OC_LCB_PG_STS_CAPTURE_ACTUAL_MISC_UNUSED_15_14_MASK				0x3ull
#define OC_LCB_PG_STS_CAPTURE_ACTUAL_MISC_UNUSED_15_14_SMASK				0xC000ull
#define OC_LCB_PG_STS_CAPTURE_ACTUAL_MISC_VL_ACK_SHIFT					4
#define OC_LCB_PG_STS_CAPTURE_ACTUAL_MISC_VL_ACK_MASK					0x3FFull
#define OC_LCB_PG_STS_CAPTURE_ACTUAL_MISC_VL_ACK_SMASK					0x3FF0ull
#define OC_LCB_PG_STS_CAPTURE_ACTUAL_MISC_B64_3_SHIFT					3
#define OC_LCB_PG_STS_CAPTURE_ACTUAL_MISC_B64_3_MASK					0x1ull
#define OC_LCB_PG_STS_CAPTURE_ACTUAL_MISC_B64_3_SMASK					0x8ull
#define OC_LCB_PG_STS_CAPTURE_ACTUAL_MISC_B64_2_SHIFT					2
#define OC_LCB_PG_STS_CAPTURE_ACTUAL_MISC_B64_2_MASK					0x1ull
#define OC_LCB_PG_STS_CAPTURE_ACTUAL_MISC_B64_2_SMASK					0x4ull
#define OC_LCB_PG_STS_CAPTURE_ACTUAL_MISC_B64_1_SHIFT					1
#define OC_LCB_PG_STS_CAPTURE_ACTUAL_MISC_B64_1_MASK					0x1ull
#define OC_LCB_PG_STS_CAPTURE_ACTUAL_MISC_B64_1_SMASK					0x2ull
#define OC_LCB_PG_STS_CAPTURE_ACTUAL_MISC_B64_0_SHIFT					0
#define OC_LCB_PG_STS_CAPTURE_ACTUAL_MISC_B64_0_MASK					0x1ull
#define OC_LCB_PG_STS_CAPTURE_ACTUAL_MISC_B64_0_SMASK					0x1ull
/*
* Table #175 of oc_lcb_csrs - LCB_PG_STS_CAPTURE_EXPECT_DAT0
* This register is used to retrieve the data from the expect capture 
* RAM.
*/
#define OC_LCB_PG_STS_CAPTURE_EXPECT_DAT0						(OC_LCB_CSRS + 0x000000000920)
#define OC_LCB_PG_STS_CAPTURE_EXPECT_DAT0_RESETCSR					0x0000000000000000ull
#define OC_LCB_PG_STS_CAPTURE_EXPECT_DAT0_VAL_SHIFT					0
#define OC_LCB_PG_STS_CAPTURE_EXPECT_DAT0_VAL_MASK					0xFFFFFFFFFFFFFFFFull
#define OC_LCB_PG_STS_CAPTURE_EXPECT_DAT0_VAL_SMASK					0xFFFFFFFFFFFFFFFFull
/*
* Table #176 of oc_lcb_csrs - LCB_PG_STS_CAPTURE_EXPECT_DAT1
* This register is used to retrieve the data from the expect capture 
* RAM.
*/
#define OC_LCB_PG_STS_CAPTURE_EXPECT_DAT1						(OC_LCB_CSRS + 0x000000000928)
#define OC_LCB_PG_STS_CAPTURE_EXPECT_DAT1_RESETCSR					0x0000000000000000ull
#define OC_LCB_PG_STS_CAPTURE_EXPECT_DAT1_VAL_SHIFT					0
#define OC_LCB_PG_STS_CAPTURE_EXPECT_DAT1_VAL_MASK					0xFFFFFFFFFFFFFFFFull
#define OC_LCB_PG_STS_CAPTURE_EXPECT_DAT1_VAL_SMASK					0xFFFFFFFFFFFFFFFFull
/*
* Table #177 of oc_lcb_csrs - LCB_PG_STS_CAPTURE_EXPECT_DAT2
* This register is used to retrieve the data from the expect capture 
* RAM.
*/
#define OC_LCB_PG_STS_CAPTURE_EXPECT_DAT2						(OC_LCB_CSRS + 0x000000000930)
#define OC_LCB_PG_STS_CAPTURE_EXPECT_DAT2_RESETCSR					0x0000000000000000ull
#define OC_LCB_PG_STS_CAPTURE_EXPECT_DAT2_VAL_SHIFT					0
#define OC_LCB_PG_STS_CAPTURE_EXPECT_DAT2_VAL_MASK					0xFFFFFFFFFFFFFFFFull
#define OC_LCB_PG_STS_CAPTURE_EXPECT_DAT2_VAL_SMASK					0xFFFFFFFFFFFFFFFFull
/*
* Table #178 of oc_lcb_csrs - LCB_PG_STS_CAPTURE_EXPECT_DAT3
* This register is used to retrieve the data from the expect capture 
* RAM.
*/
#define OC_LCB_PG_STS_CAPTURE_EXPECT_DAT3						(OC_LCB_CSRS + 0x000000000938)
#define OC_LCB_PG_STS_CAPTURE_EXPECT_DAT3_RESETCSR					0x0000000000000000ull
#define OC_LCB_PG_STS_CAPTURE_EXPECT_DAT3_VAL_SHIFT					0
#define OC_LCB_PG_STS_CAPTURE_EXPECT_DAT3_VAL_MASK					0xFFFFFFFFFFFFFFFFull
#define OC_LCB_PG_STS_CAPTURE_EXPECT_DAT3_VAL_SMASK					0xFFFFFFFFFFFFFFFFull
/*
* Table #179 of oc_lcb_csrs - LCB_PG_STS_CAPTURE_EXPECT_MISC
* This register is used to retrieve the data from the expect capture 
* RAM.
*/
#define OC_LCB_PG_STS_CAPTURE_EXPECT_MISC						(OC_LCB_CSRS + 0x000000000940)
#define OC_LCB_PG_STS_CAPTURE_EXPECT_MISC_RESETCSR					0x0000000000000000ull
#define OC_LCB_PG_STS_CAPTURE_EXPECT_MISC_UNUSED_63_12_SHIFT				12
#define OC_LCB_PG_STS_CAPTURE_EXPECT_MISC_UNUSED_63_12_MASK				0xFFFFFFFFFFFFFull
#define OC_LCB_PG_STS_CAPTURE_EXPECT_MISC_UNUSED_63_12_SMASK				0xFFFFFFFFFFFFF000ull
#define OC_LCB_PG_STS_CAPTURE_EXPECT_MISC_VL_ACK_SHIFT					4
#define OC_LCB_PG_STS_CAPTURE_EXPECT_MISC_VL_ACK_MASK					0xFFull
#define OC_LCB_PG_STS_CAPTURE_EXPECT_MISC_VL_ACK_SMASK					0xFF0ull
#define OC_LCB_PG_STS_CAPTURE_EXPECT_MISC_B64_3_SHIFT					3
#define OC_LCB_PG_STS_CAPTURE_EXPECT_MISC_B64_3_MASK					0x1ull
#define OC_LCB_PG_STS_CAPTURE_EXPECT_MISC_B64_3_SMASK					0x8ull
#define OC_LCB_PG_STS_CAPTURE_EXPECT_MISC_B64_2_SHIFT					2
#define OC_LCB_PG_STS_CAPTURE_EXPECT_MISC_B64_2_MASK					0x1ull
#define OC_LCB_PG_STS_CAPTURE_EXPECT_MISC_B64_2_SMASK					0x4ull
#define OC_LCB_PG_STS_CAPTURE_EXPECT_MISC_B64_1_SHIFT					1
#define OC_LCB_PG_STS_CAPTURE_EXPECT_MISC_B64_1_MASK					0x1ull
#define OC_LCB_PG_STS_CAPTURE_EXPECT_MISC_B64_1_SMASK					0x2ull
#define OC_LCB_PG_STS_CAPTURE_EXPECT_MISC_B64_0_SHIFT					0
#define OC_LCB_PG_STS_CAPTURE_EXPECT_MISC_B64_0_MASK					0x1ull
#define OC_LCB_PG_STS_CAPTURE_EXPECT_MISC_B64_0_SMASK					0x1ull
/*
* Table #180 of oc_lcb_csrs - LCB_PG_STS_FLG
* The PG status flags register monitors for errors and the first occurrence of 
* some interesting conditions.
*/
#define OC_LCB_PG_STS_FLG								(OC_LCB_CSRS + 0x000000000948)
#define OC_LCB_PG_STS_FLG_RESETCSR							0x0000000000000000ull
#define OC_LCB_PG_STS_FLG_UNUSED_63_29_SHIFT						29
#define OC_LCB_PG_STS_FLG_UNUSED_63_29_MASK						0x7FFFFFFFFull
#define OC_LCB_PG_STS_FLG_UNUSED_63_29_SMASK						0xFFFFFFFFE0000000ull
#define OC_LCB_PG_STS_FLG_EXTRA_FLIT_ACK_SHIFT						28
#define OC_LCB_PG_STS_FLG_EXTRA_FLIT_ACK_MASK						0x1ull
#define OC_LCB_PG_STS_FLG_EXTRA_FLIT_ACK_SMASK						0x10000000ull
#define OC_LCB_PG_STS_FLG_UNUSED_27_25_SHIFT						25
#define OC_LCB_PG_STS_FLG_UNUSED_27_25_MASK						0x7ull
#define OC_LCB_PG_STS_FLG_UNUSED_27_25_SMASK						0xE000000ull
#define OC_LCB_PG_STS_FLG_LOST_FLIT_ACK_SHIFT						24
#define OC_LCB_PG_STS_FLG_LOST_FLIT_ACK_MASK						0x1ull
#define OC_LCB_PG_STS_FLG_LOST_FLIT_ACK_SMASK						0x1000000ull
#define OC_LCB_PG_STS_FLG_UNUSED_23_21_SHIFT						21
#define OC_LCB_PG_STS_FLG_UNUSED_23_21_MASK						0x7ull
#define OC_LCB_PG_STS_FLG_UNUSED_23_21_SMASK						0xE00000ull
#define OC_LCB_PG_STS_FLG_MISCOMPARE_SHIFT						16
#define OC_LCB_PG_STS_FLG_MISCOMPARE_MASK						0x1Full
#define OC_LCB_PG_STS_FLG_MISCOMPARE_SMASK						0x1F0000ull
#define OC_LCB_PG_STS_FLG_UNUSED_15_13_SHIFT						13
#define OC_LCB_PG_STS_FLG_UNUSED_15_13_MASK						0x7ull
#define OC_LCB_PG_STS_FLG_UNUSED_15_13_SMASK						0xE000ull
#define OC_LCB_PG_STS_FLG_OUT_OF_FLIT_CRDTS_SHIFT					12
#define OC_LCB_PG_STS_FLG_OUT_OF_FLIT_CRDTS_MASK					0x1ull
#define OC_LCB_PG_STS_FLG_OUT_OF_FLIT_CRDTS_SMASK					0x1000ull
#define OC_LCB_PG_STS_FLG_UNUSED_11_9_SHIFT						9
#define OC_LCB_PG_STS_FLG_UNUSED_11_9_MASK						0x7ull
#define OC_LCB_PG_STS_FLG_UNUSED_11_9_SMASK						0xE00ull
#define OC_LCB_PG_STS_FLG_TX_END_OF_TEST_SHIFT						8
#define OC_LCB_PG_STS_FLG_TX_END_OF_TEST_MASK						0x1ull
#define OC_LCB_PG_STS_FLG_TX_END_OF_TEST_SMASK						0x100ull
#define OC_LCB_PG_STS_FLG_UNUSED_7_5_SHIFT						5
#define OC_LCB_PG_STS_FLG_UNUSED_7_5_MASK						0x7ull
#define OC_LCB_PG_STS_FLG_UNUSED_7_5_SMASK						0xE0ull
#define OC_LCB_PG_STS_FLG_TX_RX_COMPLETE_SHIFT						4
#define OC_LCB_PG_STS_FLG_TX_RX_COMPLETE_MASK						0x1ull
#define OC_LCB_PG_STS_FLG_TX_RX_COMPLETE_SMASK						0x10ull
#define OC_LCB_PG_STS_FLG_UNUSED_3_0_SHIFT						0
#define OC_LCB_PG_STS_FLG_UNUSED_3_0_MASK						0xFull
#define OC_LCB_PG_STS_FLG_UNUSED_3_0_SMASK						0xFull
/*
* Table #181 of oc_lcb_csrs - LCB_PG_STS_PAUSE_COMPLETE_CNT
* The transmit pause complete count register reports the number of successful 
* pause cycles.
*/
#define OC_LCB_PG_STS_PAUSE_COMPLETE_CNT						(OC_LCB_CSRS + 0x000000000950)
#define OC_LCB_PG_STS_PAUSE_COMPLETE_CNT_RESETCSR					0x0000000000000000ull
#define OC_LCB_PG_STS_PAUSE_COMPLETE_CNT_UNUSED_63_16_SHIFT				16
#define OC_LCB_PG_STS_PAUSE_COMPLETE_CNT_UNUSED_63_16_MASK				0xFFFFFFFFFFFFull
#define OC_LCB_PG_STS_PAUSE_COMPLETE_CNT_UNUSED_63_16_SMASK				0xFFFFFFFFFFFF0000ull
#define OC_LCB_PG_STS_PAUSE_COMPLETE_CNT_VAL_SHIFT					0
#define OC_LCB_PG_STS_PAUSE_COMPLETE_CNT_VAL_MASK					0xFFFFull
#define OC_LCB_PG_STS_PAUSE_COMPLETE_CNT_VAL_SMASK					0xFFFFull
/*
* Table #182 of oc_lcb_csrs - LCB_PG_STS_TX_SBE_CNT
* The transmit single bit error count register reports the number of flits sent 
* to the LCB with a single bit error.
*/
#define OC_LCB_PG_STS_TX_SBE_CNT							(OC_LCB_CSRS + 0x000000000958)
#define OC_LCB_PG_STS_TX_SBE_CNT_RESETCSR						0x0000000000000000ull
#define OC_LCB_PG_STS_TX_SBE_CNT_UNUSED_63_16_SHIFT					16
#define OC_LCB_PG_STS_TX_SBE_CNT_UNUSED_63_16_MASK					0xFFFFFFFFFFFFull
#define OC_LCB_PG_STS_TX_SBE_CNT_UNUSED_63_16_SMASK					0xFFFFFFFFFFFF0000ull
#define OC_LCB_PG_STS_TX_SBE_CNT_VAL_SHIFT						0
#define OC_LCB_PG_STS_TX_SBE_CNT_VAL_MASK						0xFFFFull
#define OC_LCB_PG_STS_TX_SBE_CNT_VAL_SMASK						0xFFFFull
/*
* Table #183 of oc_lcb_csrs - LCB_PG_STS_TX_MBE_CNT
* The transmit multiple bit error count register reports the number of flits 
* sent to the LCB with a multiple bit error.
*/
#define OC_LCB_PG_STS_TX_MBE_CNT							(OC_LCB_CSRS + 0x000000000960)
#define OC_LCB_PG_STS_TX_MBE_CNT_RESETCSR						0x0000000000000000ull
#define OC_LCB_PG_STS_TX_MBE_CNT_UNUSED_63_16_SHIFT					16
#define OC_LCB_PG_STS_TX_MBE_CNT_UNUSED_63_16_MASK					0xFFFFFFFFFFFFull
#define OC_LCB_PG_STS_TX_MBE_CNT_UNUSED_63_16_SMASK					0xFFFFFFFFFFFF0000ull
#define OC_LCB_PG_STS_TX_MBE_CNT_VAL_SHIFT						0
#define OC_LCB_PG_STS_TX_MBE_CNT_VAL_MASK						0xFFFFull
#define OC_LCB_PG_STS_TX_MBE_CNT_VAL_SMASK						0xFFFFull

#endif 		/* DEF_FXR_OC_SW_DEF */
