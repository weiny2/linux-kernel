/*
* Autogenerated by i_csrs.pl on Wed Aug 15 07:34:30 2018
* 
* i_csrs.pl Version 1.5 last modified on Wednesday 8/8/18 08:19:29.
*/

#ifndef DEF_FXR_SW_SW_STRUCT
#define DEF_FXR_SW_SW_STRUCT


typedef        uint64_t        ptl_hdr_data_t;                /* This is header data provided by the caller to the Portals API for a put request. If the value of the header data is 0, the header data field is not included in the packet and the 0 indication is achieved through the HD field. */
typedef        uint64_t        ptl_match_bits_t;                /* These are match bits provided by the caller to the Portals API for a put request on a matching network interface. */
typedef        uint64_t        payload_t;                /* The packet payload including any required padding to bring its length up to an integral multiple of 8 bytes. The amount of padding (in bytes, from 0 to 7 bytes, is indicated in PAD_COUNT). */
typedef        uint64_t        user_pointer_t;                /* Opaque 64 bit field provided by the application and posted in the event. */
typedef        uint64_t        threshold_t;                /* A threshold to use with triggered operations */

/*
*  Structures and Unions from Tables
*/
/*
* Structure from Table titled: Lower bits (currently defined bits) of Portals L4 OPCODE(Union - opcode_low_t) - 5 bits
*                  from File : 131_Portals_Transport_Layer
*/
union opcode_low {
        union {
                uint64_t        request_op                  : 5;        /* [4:0] See Table 10-19 */
                uint64_t        fetch_request_op            : 5;        /* [4:0] See Table 10-20 */
                uint64_t        response_op                 : 5;        /* [4:0] See Table 10-23 */
                uint64_t        e2e_ctrl_op                 : 5;        /* [4:0] See Table 10-24 */
                uint64_t        verbs_rc_op                 : 5;        /* [4:0] See Table 10-21 */
                uint64_t        ud_op                       : 5;        /* [4:0] See Table 10-22 */
                } __attribute__ ((__packed__));
        uint64_t val;
};

/*
* Structure from Table titled: Portals L4 OPCODE(Struct - opcode_t) - 7 bits
*                  from File : 131_Portals_Transport_Layer
*/
union opcode {
        struct {
                uint64_t        opcode_low                  : 5;        /* [4:0] Currently defined 5 bits of the opcode field */
                uint64_t        reserved_6_5                : 2;        /* [6:5] Reserved */
                } __attribute__ ((__packed__));
        uint64_t val;
};

/*
* Structure from Table titled: Transport Layer Flit Type: A1 flit (Struct - ptl_l4_a1_t) - 64bits
*                  from File : 131_Portals_Transport_Layer
*/
union ptl_l4_a1 {
        struct {
                uint64_t        slid_low                    : 20;        /* [19:0] Lower 20 bits of the source LID */
                uint64_t        length                      : 7;        /* [26:20] Length of the packet in 8B flits */
                uint64_t        l4                          : 4;        /* [30:27] L4 bits for short headers */
                uint64_t        b                           : 1;        /* [31:31] BECN field */
                uint64_t        dlid_low                    : 20;        /* [51:32] Lower 20 bits of the destination LID */
                uint64_t        sc                          : 5;        /* [56:52] Service Class */
                uint64_t        rc                          : 3;        /* [59:57] Routing control */
                uint64_t        f                           : 1;        /* [60:60] FECN field */
                uint64_t        l2                          : 2;        /* [62:61] L2 field: always set to HDR_8B in this format */
                uint64_t        lt                          : 1;        /* [63:63] ?? */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Transport Layer Flit Type: A2 flit (Struct - ptl_l4_a2_t) - 64bits
*                  from File : 131_Portals_Transport_Layer
*/
union ptl_l4_a2 {
        struct {
                uint64_t        slid_low                    : 20;        /* [19:0] Lower 20 bits of the source LID */
                uint64_t        length                      : 11;        /* [30:20] Length of the packet in 8B flits */
                uint64_t        b                           : 1;        /* [31:31] BECN field */
                uint64_t        dlid_low                    : 20;        /* [51:32] Lower 20 bits of the destination LID */
                uint64_t        sc                          : 5;        /* [56:52] Service Class */
                uint64_t        rc                          : 3;        /* [59:57] routing control */
                uint64_t        f                           : 1;        /* [60:60] FECN field */
                uint64_t        l2                          : 2;        /* [62:61] L2 field: always set to HDR_16B in this format */
                uint64_t        lt                          : 1;        /* [63:63] ?? */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Transport Layer Flit Type: B flit (Struct - ptl_l4_b_t) - 64bits
*                  from File : 131_Portals_Transport_Layer
*/
union ptl_l4_b {
        struct {
                uint64_t        l4                          : 8;        /* [7:0] Layer 4 encoding */
                uint64_t        slid_high                   : 4;        /* [11:8] Upper 4 bits of SLID */
                uint64_t        dlid_high                   : 4;        /* [15:12] Upper 4 bits of DLID */
                uint64_t        pkey                        : 16;        /* [31:16] Partition Key */
                uint64_t        entropy                     : 16;        /* [47:32] Entropy field for L2 */
                uint64_t        age                         : 8;        /* [55:48] Age field for L2 */
                uint64_t        reserved_63_56              : 8;        /* [63:56] Reserved */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Transport Layer Flit Type: C1 flit (Struct - ptl_l4_c1_t) - 64bits
*                  from File : 131_Portals_Transport_Layer
*/
union ptl_l4_c1 {
        struct {
                uint64_t        psn                         : 16;        /* [15:0] Packet sequence number assigned to this packet */
                uint64_t        pkt_id                      : 16;        /* [31:16] Packet ID assigned to this packet (opaque handle assigned by the initiator) */
                uint64_t        msg_id                      : 16;        /* [47:32] Message ID assigned to this packet (opaque handle assigned by the initiator) */
                uint64_t        ptl_idx                     : 8;        /* [55:48] Portal Table Index for this message */
                uint64_t        opcode                      : 7;        /* [62:56] Op code associated with this packet */
                uint64_t        hd                          : 1;        /* [63:63] Indicates presence of header data */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Transport Layer Flit Type: C1 flit (Struct - ptl_l4_c2_t) - 64bits
*                  from File : 131_Portals_Transport_Layer
*/
union ptl_l4_c2 {
        struct {
                uint64_t        psn                         : 16;        /* [15:0] Packet sequence number assigned to this packet */
                uint64_t        pkt_id                      : 16;        /* [31:16] Packet ID assigned to this packet (opaque handle assigned by the initiator) */
                uint64_t        msg_id                      : 16;        /* [47:32] Message ID assigned to this packet (opaque handle assigned by the initiator) */
                uint64_t        proto_version               : 8;        /* [55:48] Protocol version for the connection request/response */
                uint64_t        opcode                      : 7;        /* [62:56] Op code associated with this packet */
                uint64_t        reserved_63_63              : 1;        /* [63:63]  */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Transport Layer Flit Type: C3 flit (Struct - ptl_l4_c3_t) - 64bits
*                  from File : 131_Portals_Transport_Layer
*/
union ptl_l4_c3 {
        struct {
                uint64_t        ack_psn                     : 16;        /* [15:0] Packet sequence number being acknowledged by this packet (echoed from packet being acknowledged) */
                uint64_t        ack_pkt_id                  : 16;        /* [31:16] Packet ID being acknowledged by this packet (echoed from packet being acknowledged). */
                uint64_t        ack_msg_id                  : 16;        /* [47:32] Message ID being acknowledged by this packet (echoed from packet being acknowledged) */
                uint64_t        ack_opcode                  : 1;        /* [48:48] Type of E2E acknowledgment being provided by this packet */
                uint64_t        reserved_55_49              : 7;        /* [55:49] Reserved */
                uint64_t        opcode                      : 7;        /* [62:56] Op code associated with this packet */
                uint64_t        reserved_63_63              : 1;        /* [63:63] Reserved */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Transport Layer Flit Type: D1 flit (Struct - ptl_l4_d1_t) - 64bits
*                  from File : 131_Portals_Transport_Layer
*/
union ptl_l4_d1 {
        struct {
                uint64_t        ack_psn                     : 16;        /* [15:0] Packet sequence number being acknowledged by this packet (echoed from packet being acknowledged) */
                uint64_t        ack_pkt_id                  : 16;        /* [31:16] Packet ID being acknowledged by this packet (echoed from packet being acknowledged) */
                uint64_t        ack_msg_id                  : 16;        /* [47:32] Message ID being acknowledged by this packet (echoed from packet being acknowledged). */
                uint64_t        ack_opcode                  : 1;        /* [48:48] Type of E2E acknowledgment being provided by this packet */
                uint64_t        reserved_51_49              : 3;        /* [51:49] Reserved */
                uint64_t        pad_count                   : 3;        /* [54:52] Pad count to indicate the number of unused bytes in the payload field that were added to pad to 8B flit boundary. */
                uint64_t        ls                          : 1;        /* [55:55] List used by the request. */
                uint64_t        reserved_63_56              : 8;        /* [63:56] Reserved */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Transport Layer Flit Type: D2 flit (Struct - ptl_l4_d2_t) - 64bits
*                  from File : 131_Portals_Transport_Layer
*/
union ptl_l4_d2 {
        struct {
                uint64_t        ack_psn                     : 16;        /* [15:0] Packet sequence number being acknowledged by this packet (echoed from packet being acknowledged) */
                uint64_t        ack_pkt_id                  : 16;        /* [31:16] Packet ID being acknowledged by this packet (echoed from packet being acknowledged) */
                uint64_t        ack_msg_id                  : 16;        /* [47:32] Message ID being acknowledged by this packet (echoed from packet being acknowledged). */
                uint64_t        ack_opcode                  : 1;        /* [48:48] Type of E2E acknowledgment being provided by this packet */
                uint64_t        reserved_54_49              : 6;        /* [54:49] Reserved */
                uint64_t        ls                          : 1;        /* [55:55] List used by the request. */
                uint64_t        reserved_63_56              : 8;        /* [63:56] Reserved */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Transport Layer Flit Type: E flit (Struct - ptl_l4_e_t) - 64bits
*                  from File : 131_Portals_Transport_Layer
*/
union ptl_l4_e {
        struct {
                uint64_t        user_id                     : 32;        /* [31:0] User Identifier (ID) to be used for access control. */
                uint64_t        tpid                        : 12;        /* [43:32] Target Process Identifier (TPID): process ID the message is targeting. Responses echo the TPID of the request into the TPID field of the response */
                uint64_t        reserved_47_44              : 4;        /* [47:44] Reserved */
                uint64_t        ipid                        : 12;        /* [59:48] Initiator PID (IPID): process ID that originated the message. Responses echo the IPID of the request into the IPID field of the response. */
                uint64_t        reserved_63_60              : 4;        /* [63:60] Reserved */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Transport Layer Flit Type: F flit (Struct - ptl_l4_f_t) - 64bits
*                  from File : 131_Portals_Transport_Layer
*/
union ptl_l4_f {
        struct {
                uint64_t        offset                      : 57;        /* [56:0] Offset used by the incoming packet */
                uint64_t        pad_count                   : 3;        /* [59:57] Number of pad bytes in the packet */
                uint64_t        ack_req                     : 2;        /* [61:60] Acknowledgment request type for the message */
                uint64_t        ni                          : 2;        /* [63:62] Network Interface used for the message */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Transport Layer Flit Type: F flit (Struct - ptl_l4_f2_t) - 64bits
*                  from File : 131_Portals_Transport_Layer
*/
union ptl_l4_f2 {
        struct {
                uint64_t        offset                      : 57;        /* [56:0] Offset used by the incoming packet */
                uint64_t        reserved_60_57              : 4;        /* [60:57]  */
                uint64_t        msg_status                  : 3;        /* [63:61] Status of the message communicated in the event. */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Transport Layer Flit Type: G1 flit (Struct - ptl_l4_g1_t) - 64bits
*                  from File : 131_Portals_Transport_Layer
*/
union ptl_l4_g1 {
        struct {
                uint64_t        srank                       : 32;        /* [31:0] Source Rank (logical source) used for matching */
                uint64_t        msg_len                     : 32;        /* [63:32] Length of the payload of the message in bytes. */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Transport Layer Flit Type: G2 flit (Struct - ptl_l4_g2_t) - 64bits
*                  from File : 131_Portals_Transport_Layer
*/
union ptl_l4_g2 {
        struct {
                uint64_t        expected_psn                : 16;        /* [15:0] The next Packet sequence number (PSN) that is expected at the destination */
                uint64_t        max_dist                    : 16;        /* [31:16] The allowed maximum distance. A value of 0 indicates that the max_dist field is not set and that the expected_psn is not set. */
                uint64_t        mmsg_len                    : 32;        /* [63:32] Modified Message Length: number of bytes modified by this request. */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Transport Layer Flit Type: G3 flit (Struct - ptl_l4_g3_t) - 64bits
*                  from File : 131_Portals_Transport_Layer
*/
union ptl_l4_g3 {
        struct {
                uint64_t        expected_psn                : 16;        /* [15:0] The next Packet sequence number (PSN) that is expected at the destination */
                uint64_t        max_dist                    : 16;        /* [31:16] The allowed maximum distance. A value of 0 indicates that the max_dist field is not set and that the expected_psn is not set. */
                uint64_t        transmit_delay              : 32;        /* [63:32] 32 bit transmit delay to use - given in microseconds. */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Transport Layer Flit Type: J1 flit (Struct - ptl_l4_j1_t) - 64bits
*                  from File : 131_Portals_Transport_Layer
*/
union ptl_l4_j1 {
        struct {
                uint64_t        target_ref                  : 32;        /* [31:0] Target reference: opaque handle placed in a response by the target and echoed by the initiator in subsequent messages. */
                uint64_t        mmsg_len                    : 32;        /* [63:32] Modified message length */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Transport Layer Flit Type: J2 flit (Struct - ptl_l4_j2_t) - 64bits
*                  from File : 131_Portals_Transport_Layer
*/
union ptl_l4_j2 {
        struct {
                uint64_t        target_ref                  : 32;        /* [31:0] Target reference: opaque handle placed in a response by the target and echoed by the initiator in subsequent messages. */
                uint64_t        reserved_63_32              : 32;        /* [63:32] Reserved */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Transport Layer Flit Type: P1 flit (Struct - ptl_l4_p1_t) - 64bits
*                  from File : 131_Portals_Transport_Layer
*/
union ptl_l4_p1 {
        struct {
                uint64_t        payload                     : 24;        /* [23:0] Message payload bytes */
                uint64_t        icrc                        : 32;        /* [55:24] Invariant CRC field (32b CRC) */
                uint64_t        atomic_dtype                : 6;        /* [61:56] Atomic Datatype */
                uint64_t        l2_tail                     : 2;        /* [63:62] Always 01 */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Transport Layer Flit Type: P2 flit (Struct - ptl_l4_p2_t) - 64bits
*                  from File : 131_Portals_Transport_Layer
*/
union ptl_l4_p2 {
        struct {
                uint64_t        reserved_23_0               : 24;        /* [23:0] Reserved */
                uint64_t        icrc                        : 32;        /* [55:24] Invariant CRC field (32b CRC) */
                uint64_t        atomic_dtype                : 6;        /* [61:56] Atomic Datatype */
                uint64_t        l2_tail                     : 2;        /* [63:62] Always 01 */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Transport Layer Flit Type: P3 flit (Struct - ptl_l4_p3_t) - 64bits
*                  from File : 131_Portals_Transport_Layer
*/
union ptl_l4_p3 {
        struct {
                uint64_t        ack_psn                     : 16;        /* [15:0] Packet sequence number being acknowledged by this packet (echoed from packet being acknowledged) */
                uint64_t        ack_pkt_id_low              : 8;        /* [23:16] Low 8 bits of the acknowledged packet ID. */
                uint64_t        icrc                        : 32;        /* [55:24] Invariant CRC field (32b CRC) */
                uint64_t        ack_pkt_id_high             : 6;        /* [61:56] Bits 13:8 of the acknowledged packet ID */
                uint64_t        l2_tail                     : 2;        /* [63:62] Always 01 */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Transport Layer Flit Type: P6 flit (Struct - ptl_l4_p4_t) - 64bits
*                  from File : 131_Portals_Transport_Layer
*/
union ptl_l4_p4 {
        struct {
                uint64_t        rfs                         : 3;        /* [2:0] MTU to be used for the message */
                uint64_t        reserved_23_3               : 21;        /* [23:3] Reserved */
                uint64_t        icrc                        : 32;        /* [55:24] Invariant CRC field (32b CRC) */
                uint64_t        atomic_dtype                : 6;        /* [61:56] Atomic Datatype */
                uint64_t        l2_tail                     : 2;        /* [63:62] Always 01 */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Physical Source Structure (Struct - phys_process_t) - 36 bits
*                  from File : 200_Software_Interfaces
*/
union phys_process {
        struct {
                uint64_t        slid                        : 24;        /* [23:0] Source LID */
                uint64_t        ipid                        : 12;        /* [35:24] Initiator PID */
                } __attribute__ ((__packed__));
        uint64_t val;
};

/*
* Structure from Table titled: Logical Source Structure (Struct - logical_process_t) - 36 bits
*                  from File : 200_Software_Interfaces
*/
union logical_process {
        struct {
                uint64_t        srank                       : 32;        /* [31:0] Source Rank */
                uint64_t        reserved_35_32              : 4;        /* [35:32] Reserved */
                } __attribute__ ((__packed__));
        uint64_t val;
};

/*
* Structure from Table titled: Source Structure (Union - ptl_process_t) - 36 bits
*                  from File : 200_Software_Interfaces
*/
union ptl_process {
        union {
                uint64_t        phys_src                    : 36;        /* [35:0] Physical interpretation of the source field */
                uint64_t        logical_src                 : 36;        /* [35:0] Logical interpretation of the source field */
                } __attribute__ ((__packed__));
        uint64_t val;
};

/*
* Structure from Table titled: Portals Transmit Command Field Structure (Struct - ptl_cmd_t) - 7bits
*                  from File : 200_Software_Interfaces
*/
union ptl_cmd {
        struct {
                uint64_t        ptl_opcode_low              : 5;        /* [4:0] Low order 5 bits to use in the Portals L4 OPCODE. Upper bits are set to 0. */
                uint64_t        ttype                       : 2;        /* [6:5] Data transfer mechanism used */
                } __attribute__ ((__packed__));
        uint64_t val;
};

/*
* Structure from Table titled: Transmit Command Field Structure (Union - tx_cq_cmd_t) - 7bits
*                  from File : 200_Software_Interfaces
*/
union tx_cq_cmd {
        union {
                uint64_t        ptl_cmd                     : 7;        /* [6:0] Interpreted as a Portals command field */
                uint64_t        nonptl_cmd                  : 7;        /* [6:0] Interpreted as a NonPortals command field */
                } __attribute__ ((__packed__));
        uint64_t val;
};

/*
* Structure from Table titled: Fastpath LE Options Structure (Struct - fp_le_options_t) - 10 bits
*                  from File : 200_Software_Interfaces
*/
union fp_le_options {
        struct {
                uint64_t        fxr_fp_op_put               : 1;        /* [0:0] See PTL_OP_PUT */
                uint64_t        fxr_fp_op_get               : 1;        /* [1:1] See PTL_OP_GET */
                uint64_t        fxr_fp_event_comm_disable   : 1;        /* [2:2] See PTL_EVENT_COMM_DISABLE */
                uint64_t        fxr_fp_event_success_disable: 1;        /* [3:3] See PTL_EVENT_SUCCESS_DISABLE */
                uint64_t        fxr_fp_event_ct_bytes       : 1;        /* [4:4] See PTL_EVENT_CT_BYTES */
                uint64_t        fxr_fp_event_ct_comm        : 1;        /* [5:5] See PTL_EVENT_CT_COMM */
                uint64_t        fxr_fp_ack_disable          : 1;        /* [6:6] See PTL_ACK_DISABLE */
                uint64_t        fxr_fp_no_atomic            : 1;        /* [7:7] See PTL_NO_ATOMIC */
                uint64_t        reserved_9_8                : 2;        /* [9:8]  */
                } __attribute__ ((__packed__));
        uint64_t val;
};

/*
* Structure from Table titled: Hardware MD Options Structure (Struct - md_options_t) - 8 bits
*                  from File : 200_Software_Interfaces
*/
union md_options {
        struct {
                uint64_t        success_disable             : 1;        /* [0:0] Only post events for operations that fail. This flag only impacts 'full events' (i.e. events posted to the EQ) and does not prevent counting events. This does apply to both Gen1 and Gen2 style operations. */
                uint64_t        ct_bytes                    : 1;        /* [1:1] By default, counting events count events. When set, this option causes bytes to be counted instead for success events. Counting bytes increments by Message Length for Send events and by Modified Length (mlength) for Reply and ACK events. Failure events always increment the count by one. */
                uint64_t        ct_reply                    : 1;        /* [2:2] Count reply events that occur on this MD (i.e. data is available in the reply buffer for get, fetching atomic, and swap operations) */
                uint64_t        ct_send                     : 1;        /* [3:3] Count send events on this MD (i.e. send buffer availability put, atomic, fetching atomic, and swap operations). May be incremented immediately for buffered operations (including fetching atomic operations). */
                uint64_t        ct_ack                      : 1;        /* [4:4] Count the arrival of Portals acknowledgments on this MD */
                uint64_t        send_disable                : 1;        /* [5:5] Specifies that this memory descriptor should not generate send events (PTL_EVENT_SEND). This flag does not affect counting events. This does apply to both Gen1 and Gen2 style operations. */
                uint64_t        iovec                       : 1;        /* [6:6] Reserved: used by PTL_IOVEC, which must also work for MDs. PTL_IOVEC is only allowed for DMA operations. It is irrelevant for Buffered operations. Setting PTL_IOVEC may cause erroneous behavior if it is set for PIO operations. This option also applies for GENERAL_DMA command variants (including MGMT_DMA). This option does not apply to OFED/Verbs or KDETH command variants at this time. */
                uint64_t        nonptl_sc4                  : 1;        /* [7:7] SC[4] for 9B Generic DMA commands to be passed in the sideband within FXR and be added to the start byte of a 9B packet. This bit only applies to  Management DMA. */
                } __attribute__ ((__packed__));
        uint64_t val;
};

/*
* Structure from Table titled: Hardware Response MD Options Structure (Struct - resp_md_options_t) - 4 bits
*                  from File : 200_Software_Interfaces
*/
union resp_md_options {
        struct {
                uint64_t        success_disable             : 1;        /* [0:0] Only post events for operations that fail. This flag only impacts 'full events' (i.e. events posted to the EQ) and does not prevent counting events. This does apply to both Gen1 and Gen2 style operations. */
                uint64_t        ct_bytes                    : 1;        /* [1:1] By default, counting events count events. When set, this option causes bytes to be counted instead for success events. Counting bytes increments by Message Length for Send events and by Modified Length (mlength) for Reply and ACK events. Failure events always increment the count by one. */
                uint64_t        ct_reply                    : 1;        /* [2:2] Count reply events that occur on this MD (i.e. data is available in the reply buffer for get, fetching atomic, and swap operations) */
                uint64_t        reserved_3_3                : 1;        /* [3:3]  */
                } __attribute__ ((__packed__));
        uint64_t val;
};

/*
* Structure from Table titled: Transmit Command Type: A1 flit (Struct - tx_cq_a1_t) - 64 bits
*                  from File : 200_Software_Interfaces
*/
union tx_cq_a1 {
        struct {
                uint64_t        dlid                        : 24;        /* [23:0] Destination LID for the operation */
                uint64_t        cmd_length                  : 10;        /* [33:24] Length of the command (in 8B flits) */
                uint64_t        ctype                       : 4;        /* [37:34] Type of the command */
                uint64_t        sh                          : 1;        /* [38:38] Indicates whether the command is allowed to use a small header (TRUE) or not (FALSE) */
                uint64_t        b                           : 1;        /* [39:39] Indicates a BECN should be included in this packet */
                uint64_t        sl                          : 5;        /* [44:40] Service level to be used to choose the TC/MC and Service Class (SC). This fields forms the SC field in packets internally until the LinkMux is reached, where the SL is converted to SC. This is forced into the SC field for 8B, 9B, and 16B packets when any command is used other than General DMA or MGMT DMA. */
                uint64_t        rc                          : 3;        /* [47:45] Routing class to be passed into the L2 header for this packet */
                uint64_t        ptl_idx                     : 8;        /* [55:48] Portal table index */
                uint64_t        cmd                         : 7;        /* [62:56] Command from software */
                uint64_t        pt                          : 1;        /* [63:63] Portals: Deprecated.Native Verbs: choses the fastpath (0) or fragmentation path (1). A command that is larger than one MTU that does not set PT is failed. */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Transmit Command Type: A2 flit (Struct - tx_cq_a2_t) - 64 bits
*                  from File : 200_Software_Interfaces
*/
union tx_cq_a2 {
        struct {
                uint64_t        dlid                        : 24;        /* [23:0] Destination LID for the operation */
                uint64_t        tpid                        : 12;        /* [35:24] Target process ID */
                uint64_t        reserved_39_36              : 4;        /* [39:36] Reserved */
                uint64_t        sl                          : 5;        /* [44:40] Service level to be used to choose the TC/MC and Service Class (SC). This fields forms the SC field in packets internally until the LinkMux is reached, where the SL is converted to SC. This is forced into the SC field for 8B, 9B, and 16B packets when any command is used other than General DMA or MGMT DMA. */
                uint64_t        rc                          : 3;        /* [47:45] Routing class to be passed into the L2 header for this packet */
                uint64_t        ptl_idx                     : 8;        /* [55:48] Portal table index */
                uint64_t        cmd                         : 7;        /* [62:56] Command from software */
                uint64_t        pt                          : 1;        /* [63:63] Portals: Deprecated.Native Verbs: choses the fastpath (0) or fragmentation path (1). A command that is larger than one MTU that does not set PT is failed. */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Transmit Command Type: A3 flit (Struct - tx_cq_a3_t) - 64 bits
*                  from File : 200_Software_Interfaces
*/
union tx_cq_a3 {
        struct {
                uint64_t        hdr_rate                    : 8;        /* [7:0] Rate at which the acknowledgement  bit will be added for KDETH and Verbs Packets.Bits 6:0: Rate at which the ack bit will be sentBit 7: adjust first header rate for first pass through (assumes a packet has already been sent by software). */
                uint64_t        per_pkt_delay               : 8;        /* [15:8] Amount of time to delay between packets for NonPortals Packets. Two options are under consideration:1) Actual delay is 2^N cycles2) Field is split as X.Y, and actual delay is X * 2^Y cycles */
                uint64_t        nonportals_pid              : 8;        /* [23:16] 8 bits of PID mapped into the range 0xF00 to 0xFFF to be used for virtual address translation. */
                uint64_t        cmd_length                  : 10;        /* [33:24] Length of the command (in 8B flits) */
                uint64_t        ctype                       : 4;        /* [37:34] Type of the command */
                uint64_t        l2                          : 2;        /* [39:38] Value to use for the L2 field for NonPortals Packets. */
                uint64_t        sl                          : 5;        /* [44:40] Service level to be used to choose the TC/MC and Service Class (SC). This fields forms the SC field in packets internally until the LinkMux is reached, where the SL is converted to SC. This is forced into the SC field for 8B, 9B, and 16B packets when any command is used other than General DMA or MGMT DMA. */
                uint64_t        rc                          : 3;        /* [47:45] Routing class to be passed into the L2 header for this packet */
                uint64_t        auth_idx                    : 3;        /* [50:48] Authentication index used for testing the Job ID field. */
                uint64_t        slid_low                    : 3;        /* [53:51] Low 3 bits of SLID to use for this command */
                uint64_t        b                           : 1;        /* [54:54] Indicates a BECN should be included in this packet */
                uint64_t        f                           : 1;        /* [55:55] Indicates a FECN should be included in this packet */
                uint64_t        cmd                         : 7;        /* [62:56] Command from software */
                uint64_t        pt                          : 1;        /* [63:63] Indicates preferred outgoing port number to use. */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Transmit Command Type: A4 flit (Struct - tx_cq_a4_t) - 64 bits
*                  from File : 200_Software_Interfaces
*/
union tx_cq_a4 {
        struct {
                uint64_t        dlid                        : 24;        /* [23:0] Destination LID for the operation */
                uint64_t        length                      : 11;        /* [34:24] Length of the packet being built */
                uint64_t        reserved_39_35              : 5;        /* [39:35]  */
                uint64_t        l4                          : 8;        /* [47:40] L4 to be used in the packet */
                uint64_t        entropy                     : 16;        /* [63:48] Entropy to be used in the packet */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Transmit Command Type: B1 flit (Struct - tx_cq_b1_t) - 64 bits
*                  from File : 200_Software_Interfaces
*/
union tx_cq_b1 {
        struct {
                uint64_t        md_handle                   : 11;        /* [10:0] Memory Descriptor (MD) handle used for identifying the transaction in a later cancel */
                uint64_t        auth_idx                    : 3;        /* [13:11] Authentication index used for populating the SRANK and User ID fields */
                uint64_t        slid_low                    : 2;        /* [15:14] Low 2 bits of the SLID to use for this operation */
                uint64_t        pkey                        : 16;        /* [31:16] PKEY for this message */
                uint64_t        eq_handle                   : 11;        /* [42:32] Event Queue (EQ) handle used for posting full events associated with this message */
                uint64_t        ct_handle                   : 11;        /* [53:43] Counting Event (CT) handle used for posting counting events associated with this message */
                uint64_t        hd                          : 1;        /* [54:54] Indicates whether header data  in this message is zero or nonzero. */
                uint64_t        pd                          : 1;        /* [55:55] Indicates whether this message uses physical destinations (TRUE) or the destinations go through the DLID relocation table (FALSE) */
                uint64_t        md_options                  : 8;        /* [63:56] Options from the MD, which control things like IOVECs and event posting. */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Transmit Command Type: D flit (Struct - tx_cq_d_t) - 64 bits
*                  from File : 200_Software_Interfaces
*/
union tx_cq_d {
        struct {
                uint64_t        remote_offset               : 57;        /* [56:0] Offset to use at the target */
                uint64_t        reserved_59_57              : 3;        /* [59:57]  */
                uint64_t        ack_req                     : 2;        /* [61:60] Acknowledgment request */
                uint64_t        ni                          : 2;        /* [63:62] Network interface */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Transmit Command Type: E1 flit (Struct - tx_cq_e1_t) - 64 bits
*                  from File : 200_Software_Interfaces
*/
union tx_cq_e1 {
        struct {
                uint64_t        tpid                        : 12;        /* [11:0] Target process ID */
                uint64_t        ipid                        : 12;        /* [23:12] Initiator process ID */
                uint64_t        atomic_dtype                : 6;        /* [29:24] Atomic datatype */
                uint64_t        reserved_30_30              : 1;        /* [30:30] Reserved */
                uint64_t        nr                          : 1;        /* [31:31] No Retransmit: when true, do not retransmit this message on a time-out */
                uint64_t        message_length              : 32;        /* [63:32] Length of the message payload in bytes */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Transmit Command Type: E2 flit (Struct - tx_cq_e2_t) - 64 bits
*                  from File : 200_Software_Interfaces
*/
union tx_cq_e2 {
        struct {
                uint64_t        tpid                        : 12;        /* [11:0] Target process ID */
                uint64_t        ipid                        : 12;        /* [23:12] Initiator process ID */
                uint64_t        atomic_dtype                : 6;        /* [29:24] Atomic datatype */
                uint64_t        reserved_30_30              : 1;        /* [30:30] Reserved */
                uint64_t        nr                          : 1;        /* [31:31] No Retransmit: when true, do not retransmit this message on a time-out */
                uint64_t        resp_eq_handle              : 11;        /* [42:32] EQ handle for the response events for fetching atomic operations (and swap operations) */
                uint64_t        resp_ct_handle              : 11;        /* [53:43] CT handle for the response events for fetching atomic operations (and swap operations) */
                uint64_t        message_length              : 6;        /* [59:54] Used for the requested length of a compare and swap or fetching atomic operation. Represents the payload (length - 1) in bytes. For a compare and swap (or masked swap), the operand is as long as the payload, and so the total packet contents is 2 x (short_msg_legnth + 1). */
                uint64_t        resp_md_opts                : 4;        /* [63:60] Response MD options */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Transmit Command Type: E3 flit (Struct - tx_cq_e3_t) - 64bits
*                  from File : 200_Software_Interfaces
*/
union tx_cq_e3 {
        struct {
                uint64_t        expected_psn                : 16;        /* [15:0] PSN that was expected */
                uint64_t        max_dist                    : 16;        /* [31:16] Maximum distance allowed at the initiator */
                uint64_t        message_length              : 32;        /* [63:32] Length of the message payload in bytes */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Transmit Command Type: E4 flit (Struct - tx_cq_e4_t) - 64 bits
*                  from File : 200_Software_Interfaces
*/
union tx_cq_e4 {
        struct {
                uint64_t        tid_entries                 : 12;        /* [11:0] Number of TID entries in the TID array for a PSM TID DMA. Reused in the General DMA format to indicate the total number of packets. */
                uint64_t        eq_handle                   : 11;        /* [22:12] Event Queue (EQ) handle used for posting full events associated with this message */
                uint64_t        reserved_23_23              : 1;        /* [23:23] Reserved */
                uint64_t        md_options                  : 8;        /* [31:24] Options to control things like IOVECs and event posting. Re-uses the MD options format for NonPortals messages. */
                uint64_t        message_length              : 32;        /* [63:32] Length of the message payload in bytes */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Transmit Command Type: F flit (Struct - tx_cq_f_t) - 64 bits
*                  from File : 200_Software_Interfaces
*/
union tx_cq_f {
        struct {
                uint64_t        local_start                 : 57;        /* [56:0] Local start address */
                uint64_t        reserved_63_57              : 7;        /* [63:57] Reserved */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Transmit Command Type: F2 flit (Struct - tx_cq_f2_t) - 64 bits
*                  from File : 200_Software_Interfaces
*/
union tx_cq_f2 {
        struct {
                uint64_t        local_start                 : 57;        /* [56:0] Local start address */
                uint64_t        reserved_60_57              : 4;        /* [60:57] Reserved */
                uint64_t        msg_status                  : 3;        /* [63:61] Status of the message communicated in the event. */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Transmit Command Type: I flit (Struct - tx_cq_i_t) - 64 bits
*                  from File : 200_Software_Interfaces
*/
union tx_cq_i {
        struct {
                uint64_t        target_reference            : 32;        /* [31:0] Opaque 32 bit field provided by target processing and passed opaquely through rendezvous operations. */
                uint64_t        message_length              : 32;        /* [63:32] Length of the message payload in bytes */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Transmit Command Type: J1 flit (Struct - tx_cq_j1_t) - 64 bits
*                  from File : 200_Software_Interfaces
*/
union tx_cq_j1 {
        struct {
                uint64_t        ack_psn                     : 16;        /* [15:0] Acknowledged packet sequence number. The acknowledged PSN is also used as the PSN for responses (e.g. Portals Acks, Replies, CTS). */
                uint64_t        ack_pkt_id                  : 16;        /* [31:16] Acknowledged packet identifier */
                uint64_t        ack_msg_id                  : 16;        /* [47:32] Acknowledged message identifier */
                uint64_t        ack_op                      : 1;        /* [48:48] Acknowledgment operation type */
                uint64_t        reserved_54_49              : 6;        /* [54:49] Reserved */
                uint64_t        ls                          : 1;        /* [55:55] List state indicating the list matched by the request */
                uint64_t        reserved_63_56              : 8;        /* [63:56] Reserved */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Transmit Command Type: J2 flit (Struct - tx_cq_j2_t) - 64 bits
*                  from File : 200_Software_Interfaces
*/
union tx_cq_j2 {
        struct {
                uint64_t        reserved_15_0               : 16;        /* [15:0] Reserved */
                uint64_t        pkt_id                      : 16;        /* [31:16] Packet ID used in the incoming packet that will be reused by the ACK */
                uint64_t        msg_id                      : 16;        /* [47:32] Message ID used in the incoming packet that will be reused by the ACK */
                uint64_t        reserved_63_48              : 16;        /* [63:48] Reserved */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Transmit Command Type: K flit (Struct - tx_cq_k_t) - 64 bits
*                  from File : 200_Software_Interfaces
*/
union tx_cq_k {
        struct {
                uint64_t        expected_psn                : 16;        /* [15:0] PSN that was expected */
                uint64_t        max_dist                    : 16;        /* [31:16] Maximum distance allowed at the initiator */
                uint64_t        transmit_delay              : 32;        /* [63:32] 32 bits of the delay into the future to start me. Given in microseconds. */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Transmit Command Type: L flit (Struct - tx_cq_l_t) - 64 bits
*                  from File : 200_Software_Interfaces
*/
union tx_cq_l {
        struct {
                uint64_t        iov_entries                 : 32;        /* [31:0] Number of entries in the IOVEC. Use for sanity checking on the first transmit of the message. */
                uint64_t        iov_offset                  : 32;        /* [63:32] Offset into the first IOVEC entry where the operation starts */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Transmit Command Type: L2 flit (Struct - tx_cq_l2_t) - 64 bits
*                  from File : 200_Software_Interfaces
*/
union tx_cq_l2 {
        struct {
                uint64_t        tpid                        : 12;        /* [11:0] Target process ID */
                uint64_t        reserved_15_12              : 4;        /* [15:12] Reserved */
                uint64_t        iov_entries                 : 16;        /* [31:16] Number of entries in the IOVEC. Use for sanity checking on the first transmit of the message. */
                uint64_t        iov_offset                  : 32;        /* [63:32] Offset into the first IOVEC entry where the operation starts */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Transmit Command Type: P flit (Struct - tx_cq_p_t) - 64 bits
*                  from File : 200_Software_Interfaces
*/
union tx_cq_p {
        struct {
                uint64_t        eth                         : 32;        /* [31:0] Contains ETH or nothing */
                uint64_t        ethsize                     : 6;        /* [37:32] Size of the ETH in bytes. This field must be a multiple of 4 bytes. A noncompliant size is rounded down. */
                uint64_t        reserved_39_38              : 2;        /* [39:38]  */
                uint64_t        user_mtu                    : 3;        /* [42:40] MTU specified by the user for a PSM message. Uses the standard MTU encoding for STL. */
                uint64_t        sub_op                      : 5;        /* [47:43] Low 3 bits (2:0) are OP and are encoded as: 0: PSM Expected DMA1: Verbs TID RDMA Read Response2: Verbs TID RDMA Write3-7: reservedBit 3: NO_ACK_LAST: do not set the A bit on the last packet generatedBit 4: OPCODE_INC: Increment the opcode on the last packet. */
                uint64_t        first_pkt_size              : 16;        /* [63:48] Size of the payload in the first packet in a PSM message in bytes. The FIRST_PKT_SIZE must be less than or equal to the total message length. Otherwise, a failure is generated without generating any packets. */
        };
        uint64_t val;
};

/*
* Structure from Table titled: 9B Packet LRH flit (Struct - l4_lrh_t) - 64 bits
*                  from File : 200_Software_Interfaces
*/
union l4_lrh {
        struct {
                uint64_t        lver                        : 4;        /* [3:0] Link Version */
                uint64_t        sc_low                      : 4;        /* [7:4] Low four bits of the service class */
                uint64_t        lnh                         : 2;        /* [9:8] Link Next Header */
                uint64_t        reserved_11_10              : 2;        /* [11:10] Reserved */
                uint64_t        sl                          : 4;        /* [15:12] 4 bits of SL that are compatible with Verbs. Checked by TX-CI. */
                uint64_t        dlid_hi                     : 8;        /* [23:16] DLID[15:8] */
                uint64_t        dlid_lo                     : 8;        /* [31:24] DLID[7:0] */
                uint64_t        pkt_len_hi                  : 4;        /* [35:32] PKT_LEN[11:8]. Updated packet-to-packet for multi packet operations */
                uint64_t        reserved_39_36              : 4;        /* [39:36]  */
                uint64_t        pkt_len_lo                  : 8;        /* [47:40] PKT_LEN[7:0]. Updated packet-to-packet for multi packet operations */
                uint64_t        slid_hi                     : 8;        /* [55:48] Set by OTR on TX based on SLID programmed into HFI */
                uint64_t        slid_lo                     : 8;        /* [63:56] Set by OTR on TX based on SLID programmed into HFI and low 3 bits from A4 */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Transmit Command Type: BTH0 flit (Struct - tx_cq_bth0_t) - 64 bits
*                  from File : 200_Software_Interfaces
*/
union tx_cq_bth0 {
        struct {
                uint64_t        opcode                      : 8;        /* [7:0]  */
                uint64_t        tver                        : 4;        /* [11:8]  */
                uint64_t        pad_cnt                     : 2;        /* [13:12]  */
                uint64_t        m                           : 1;        /* [14:14]  */
                uint64_t        se                          : 1;        /* [15:15]  */
                uint64_t        pkey_hi                     : 8;        /* [23:16] Checked in Link Mux, but not modified */
                uint64_t        pkey_lo                     : 8;        /* [31:24] Checked in Link Mux, but not modified */
                uint64_t        reserved_37_32              : 6;        /* [37:32]  */
                uint64_t        b                           : 1;        /* [38:38]  */
                uint64_t        f                           : 1;        /* [39:39]  */
                uint64_t        dest_qp_hi                  : 8;        /* [47:40]  */
                uint64_t        dest_qp_mid                 : 8;        /* [55:48]  */
                uint64_t        dest_qp_low                 : 8;        /* [63:56]  */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Transmit Command Type: BTH0 flit (Struct - tx_cq_mbth0_t) - 64 bits
*                  from File : 200_Software_Interfaces
*/
union tx_cq_mbth0 {
        struct {
                uint64_t        opcode                      : 8;        /* [7:0]  */
                uint64_t        tver                        : 4;        /* [11:8]  */
                uint64_t        pad_cnt                     : 3;        /* [14:12]  */
                uint64_t        se                          : 1;        /* [15:15]  */
                uint64_t        pkey_hi                     : 8;        /* [23:16] Checked in Link Mux, but not modified */
                uint64_t        pkey_lo                     : 8;        /* [31:24] Checked in Link Mux, but not modified */
                uint64_t        reserved_38_32              : 7;        /* [38:32]  */
                uint64_t        m                           : 1;        /* [39:39]  */
                uint64_t        dest_qp_hi                  : 8;        /* [47:40]  */
                uint64_t        dest_qp_mid                 : 8;        /* [55:48]  */
                uint64_t        dest_qp_low                 : 8;        /* [63:56]  */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Transmit Command Type: BTH1 flit (Struct - tx_cq_bth1_t) - 64 bits
*                  from File : 200_Software_Interfaces
*/
union tx_cq_bth1 {
        struct {
                uint64_t        psn_hi                      : 7;        /* [6:0]  */
                uint64_t        a                           : 1;        /* [7:7]  */
                uint64_t        psn_mid_hi                  : 8;        /* [15:8]  */
                uint64_t        psn_mid_low                 : 8;        /* [23:16]  */
                uint64_t        psn_low                     : 8;        /* [31:24]  */
                uint64_t        tid_offset                  : 15;        /* [46:32]  */
                uint64_t        om                          : 1;        /* [47:47]  */
                uint64_t        tid                         : 10;        /* [57:48]  */
                uint64_t        tid_ctrl                    : 2;        /* [59:58]  */
                uint64_t        interrupt                   : 1;        /* [60:60]  */
                uint64_t        sh                          : 1;        /* [61:61]  */
                uint64_t        kver                        : 2;        /* [63:62]  */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Transmit Command Type: BTH2 flit (Struct - tx_cq_bth2_t) - 64 bits
*                  from File : 200_Software_Interfaces
*/
union tx_cq_bth2 {
        struct {
                uint64_t        psn_hi                      : 7;        /* [6:0]  */
                uint64_t        a                           : 1;        /* [7:7]  */
                uint64_t        psn_mid_hi                  : 8;        /* [15:8]  */
                uint64_t        psn_mid_low                 : 8;        /* [23:16]  */
                uint64_t        psn_low                     : 8;        /* [31:24]  */
                uint64_t        ofh                         : 32;        /* [63:32]  */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Transmit Command Type: KDETH0 flit (Struct - tx_cq_kdeth0_t) - 64 bits
*                  from File : 200_Software_Interfaces
*/
union tx_cq_kdeth0 {
        struct {
                uint64_t        j_key                       : 16;        /* [15:0] This field is checked in TX-CI using the 32 bits of the user ID as a test under mask (16 bit ID and 16 bit mask for the comparison). */
                uint64_t        hcrc_hi                     : 8;        /* [23:16]  */
                uint64_t        hcrc_lo                     : 8;        /* [31:24]  */
                uint64_t        kdeth                       : 32;        /* [63:32]  */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Transmit Command Type: KDETH1 flit (Struct - tx_cq_kdeth1_t) - 64 bits
*                  from File : 200_Software_Interfaces
*/
union tx_cq_kdeth1 {
        struct {
                uint64_t        kdeth                       : 32;        /* [31:0]  */
                uint64_t        kdeth_local_offset          : 32;        /* [63:32]  */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Transmit Command Type: FETH flit (Struct - tx_cq_feth_t) - 64 bits
*                  from File : 200_Software_Interfaces
*/
union tx_cq_feth {
        struct {
                uint64_t        eth                         : 32;        /* [31:0]  */
                uint64_t        reserved_63_32              : 32;        /* [63:32]  */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Transmit Command Type: Basic Put Flit 0 (Struct - tx_cq_base_put_flit0_t) - 256 bits
*                  from File : 200_Software_Interfaces
*/
union tx_cq_base_put_flit0 {
        struct {
                union                 tx_cq_a1                    a;        /* [63:0]  */
                union                 tx_cq_b1                    b;        /* [127:64]  */
                                      user_pointer_t              c;        /* [191:128] User pointer */
                union                 tx_cq_d                     d;        /* [255:192]  */
        };
        uint64_t val[4];
};

/*
* Structure from Table titled: Transmit Command Type: Buffered Put Flit 1(Struct - tx_cq_buff_put_flit1_t) - 256 bits
*                  from File : 200_Software_Interfaces
*/
union tx_cq_buff_put_flit1 {
        struct {
                union                 tx_cq_e1                    e;        /* [63:0]  */
                                      payload_t                   p0;        /* [127:64] Payload */
                                      payload_t                   p1;        /* [191:128] Payload */
                                      payload_t                   p2;        /* [255:192] Payload */
        };
        uint64_t val[4];
};

/*
* Structure from Table titled: Transmit Command Type: Buffered Put with Matching Flit 1(Struct - tx_cq_buff_put_superset_flit1_t) - 256 bits
*                  from File : 200_Software_Interfaces
*/
union tx_cq_buff_put_superset_flit1 {
        struct {
                union                 tx_cq_e1                    e;        /* [63:0]  */
                                      ptl_match_bits_t            mb;        /* [127:64] Match Bits */
                                      ptl_hdr_data_t              hd;        /* [191:128] Header Data */
                                      payload_t                   p0;        /* [255:192] Payload */
        };
        uint64_t val[4];
};

/*
* Structure from Table titled: Transmit Command Type: Buffered Two Operand Put Flit 1(Struct - tx_cq_buff_two_op_put_flit1_t) - 256 bits
*                  from File : 200_Software_Interfaces
*/
union tx_cq_buff_two_op_put_flit1 {
        struct {
                union                 tx_cq_e2                    e;        /* [63:0]  */
                union                 tx_cq_f                     f;        /* [127:64]  */
                                      payload_t                   p0;        /* [191:128] Payload */
                                      payload_t                   p1;        /* [255:192] Payload */
        };
        uint64_t val[4];
};

/*
* Structure from Table titled: Transmit Command Type: Buffered Two Operand Put with Matching Flit 1(Struct - tx_cq_buff_two_op_put_superset_flit1_t) - 256 bits
*                  from File : 200_Software_Interfaces
*/
union tx_cq_buff_two_op_put_superset_flit1 {
        struct {
                union                 tx_cq_e2                    e;        /* [63:0]  */
                union                 tx_cq_f                     f;        /* [127:64]  */
                                      ptl_match_bits_t            mb;        /* [191:128] Match Bits */
                                      ptl_hdr_data_t              hd;        /* [255:192] Header Data */
        };
        uint64_t val[4];
};

/*
* Structure from Table titled: Transmit Command Type: Small Operation Flit0 (Struct - tx_cq_small_op_flit0_t) - 256 bits
*                  from File : 200_Software_Interfaces
*/
union tx_cq_small_op_flit0 {
        struct {
                union                 tx_cq_a1                    a;        /* [63:0]  */
                union                 tx_cq_b1                    b;        /* [127:64]  */
                union                 tx_cq_d                     d;        /* [191:128]  */
                union                 tx_cq_e1                    e;        /* [255:192]  */
        };
        uint64_t val[4];
};

/*
* Structure from Table titled: Transmit Command Type: Small Put Flit1 (Struct - tx_cq_small_put_flit1_t) - 256 bits
*                  from File : 200_Software_Interfaces
*/
union tx_cq_small_put_flit1 {
        struct {
                                      payload_t                   p0;        /* [63:0]  */
                union                 tx_cq_a2                    a;        /* [127:64]  */
                union                 tx_cq_d                     d;        /* [191:128]  */
                                      payload_t                   p1;        /* [255:192]  */
        };
        uint64_t val[4];
};

/*
* Structure from Table titled: Transmit Command Type: Small Get Flit1 (Struct - tx_cq_small_get_flit1_t) - 256 bits
*                  from File : 200_Software_Interfaces
*/
union tx_cq_small_get_flit1 {
        struct {
                union                 tx_cq_f                     f0;        /* [63:0]  */
                union                 tx_cq_a2                    a;        /* [127:64]  */
                union                 tx_cq_d                     d;        /* [191:128]  */
                union                 tx_cq_f                     f1;        /* [255:192]  */
        };
        uint64_t val[4];
};

/*
* Structure from Table titled: Transmit Command Type: Payload Flit (Struct - tx_cq_payload_flit_t) - 256 bits
*                  from File : 200_Software_Interfaces
*/
union tx_cq_payload_flit {
        struct {
                                      payload_t                   p0;        /* [63:0]  */
                                      payload_t                   p1;        /* [127:64]  */
                                      payload_t                   p2;        /* [191:128]  */
                                      payload_t                   p3;        /* [255:192]  */
        };
        uint64_t val[4];
};

/*
* Structure from Table titled: Transmit Command Type: Programmed I/O Put Flit 1(Struct - tx_cq_pio_put_flit1_t) - 256 bits
*                  from File : 200_Software_Interfaces
*/
union tx_cq_pio_put_flit1 {
        struct {
                union                 tx_cq_e1                    e;        /* [63:0]  */
                union                 tx_cq_f                     f;        /* [127:64]  */
                                      payload_t                   p0;        /* [191:128] Payload */
                                      payload_t                   p1;        /* [255:192] Payload */
        };
        uint64_t val[4];
};

/*
* Structure from Table titled: Transmit Command Type: Programmed I/O Put with Superset of all fields and DMA Put Flit 1(Struct - tx_cq_put_superset_flit1_t) - 256 bits
*                  from File : 200_Software_Interfaces
*/
union tx_cq_put_superset_flit1 {
        struct {
                union                 tx_cq_e1                    e;        /* [63:0]  */
                union                 tx_cq_f                     f;        /* [127:64]  */
                                      ptl_match_bits_t            mb;        /* [191:128] Match Bits */
                                      ptl_hdr_data_t              hd;        /* [255:192] Header Data */
        };
        uint64_t val[4];
};

/*
* Structure from Table titled: Transmit Command Type: IOVEC DMA Put Flit 1(Struct - tx_cq_iovec_flit1_t) - 256 bits
*                  from File : 200_Software_Interfaces
*/
union tx_cq_iovec_flit1 {
        struct {
                union                 tx_cq_e1                    e;        /* [63:0]  */
                union                 tx_cq_f                     f;        /* [127:64]  */
                                      ptl_match_bits_t            mb;        /* [191:128] Match Bits */
                                      ptl_hdr_data_t              hd;        /* [255:192] Header Data */
        };
        uint64_t val[4];
};

/*
* Structure from Table titled: Transmit Command Type: IOVEC DMA Put Flit 2(Struct - tx_cq_iovec_flit2_t) - 256 bits
*                  from File : 200_Software_Interfaces
*/
union tx_cq_iovec_flit2 {
        struct {
                union                 tx_cq_l                     l;        /* [63:0]  */
                struct {
                        uint64_t        reserved_255_64_0           : 64;        /* [255:64] Reserved */
                };
                struct {
                        uint64_t        reserved_255_64_1           : 64;        /* [255:64] Reserved */
                };
                struct {
                        uint64_t        reserved_255_64_2           : 64;        /* [255:64] Reserved */
                };
        };
        uint64_t val[4];
};

/*
* Structure from Table titled: Transmit Command Type: Base IOVEC (Struct - base_iovec_t) - 128 bits
*                  from File : 200_Software_Interfaces
*/
union base_iovec {
        struct {
                struct {
                        uint64_t        start                       : 57;        /* [56:0] Address of the payload pointed to by his IOVEC entry */
                        uint64_t        reserved_63_57              : 7;        /* [63:57] Reserved */
                };
                struct {
                        uint64_t        length                      : 32;        /* [95:64] The length of the IOVEC entry in bytes. This limits the overall message length to 4GB-1. */
                        uint64_t        reserved_122_96             : 27;        /* [122:96] Reserved */
                        uint64_t        ptl_or_stleep               : 1;        /* [123:123] This packet is a Portals or STLEEP packet being transferred using GENERAL_DMA. That means that the last byte of the specified payload is merged into the tail byte of the packet. This is the atomic datatype for Portals or the Pad Count for STLEEP as provided by software in host memory. This bit is only valid for the entry where SP is set. */
                        uint64_t        use_9b                      : 1;        /* [124:124] Only valid when SP is set. Indicates that this packet needs to use a 9B format, which uses the NONPTL_SC4 bit to send to TXDMA to populate the start byte. 9B packets in memory must not have the start byte or stop byte inserted - these are added by hardware as is the ICRC.Note: 9B packets cannot be mixed with other packet types in a given MGMT_DMA command. */
                        uint64_t        ep                          : 1;        /* [125:125] End of packet: this entire region is included in the packet, and the packet ends. Only used for NonPortals (Generic DMA) operations. */
                        uint64_t        sp                          : 1;        /* [126:126] Start of packet: a new packet is started with this entry. Only used for NonPortals (Generic DMA) operations. An SP marker must immediately follow an EP marker. */
                        uint64_t        v                           : 1;        /* [127:127] Valid: this entry is valid. Only used for NonPortals (Generic DMA) operations. */
                };
        };
        uint64_t val[2];
};

/*
* Structure from Table titled: Transmit Command Type: Short acknowledgment (Struct - tx_cq_short_ack_flit0_t) - 256 bits
*                  from File : 200_Software_Interfaces
*/
union tx_cq_short_ack_flit0 {
        struct {
                union                 tx_cq_a1                    a;        /* [63:0]  */
                union                 tx_cq_b1                    b;        /* [127:64]  */
                union                 tx_cq_j2                    j2;        /* [191:128]  */
                union                 tx_cq_j1                    j1;        /* [255:192]  */
        };
        uint64_t val[4];
};

/*
* Structure from Table titled: Transmit Command Type: Acknowledgment Flit 0 (Struct - tx_cq_ack_flit0_t) - 256 bits
*                  from File : 200_Software_Interfaces
*/
union tx_cq_ack_flit0 {
        struct {
                union                 tx_cq_a1                    a;        /* [63:0]  */
                union                 tx_cq_b1                    b;        /* [127:64]  */
                union                 tx_cq_j2                    j2;        /* [191:128]  */
                union                 tx_cq_d                     d;        /* [255:192]  */
        };
        uint64_t val[4];
};

/*
* Structure from Table titled: Transmit Command Type:  Acknowledgment Flit 1(Struct - tx_cq_ack_flit1_t) - 256 bits
*                  from File : 200_Software_Interfaces
*/
union tx_cq_ack_flit1 {
        struct {
                union                 tx_cq_j1                    j;        /* [63:0]  */
                union                 tx_cq_e3                    e;        /* [127:64]  */
                struct {
                        uint64_t        reserved_255_128_0          : 64;        /* [255:128] Reserved */
                };
                struct {
                        uint64_t        reserved_255_128_1          : 64;        /* [255:128] Reserved */
                };
        };
        uint64_t val[4];
};

/*
* Structure from Table titled: Transmit Command Type: Buffered Reply Flit 1 (Struct - tx_cq_buff_reply_flit1_t) - 256 bits
*                  from File : 200_Software_Interfaces
*/
union tx_cq_buff_reply_flit1 {
        struct {
                union                 tx_cq_j1                    j;        /* [63:0]  */
                union                 tx_cq_e3                    e;        /* [127:64]  */
                union                 tx_cq_l2                    l;        /* [191:128]  */
                                      payload_t                   p0;        /* [255:192]  */
        };
        uint64_t val[4];
};

/*
* Structure from Table titled: Transmit Command Type: Reply Flit 1(Struct - tx_cq_reply_flit1_t) - 256 bits
*                  from File : 200_Software_Interfaces
*/
union tx_cq_reply_flit1 {
        struct {
                union                 tx_cq_j1                    j;        /* [63:0]  */
                union                 tx_cq_e3                    e;        /* [127:64]  */
                union                 tx_cq_l2                    l;        /* [191:128]  */
                union                 tx_cq_f                     f;        /* [255:192]  */
        };
        uint64_t val[4];
};

/*
* Structure from Table titled: Transmit Command Type: CTS Flit 1(Struct - tx_cq_cts_flit1_t) - 256 bits
*                  from File : 200_Software_Interfaces
*/
union tx_cq_cts_flit1 {
        struct {
                union                 tx_cq_j1                    j;        /* [63:0]  */
                union                 tx_cq_k                     k;        /* [127:64]  */
                union                 tx_cq_i                     i;        /* [191:128]  */
                struct {
                        uint64_t        reserved_255_192            : 64;        /* [255:192] Reserved */
                };
        };
        uint64_t val[4];
};

/*
* Structure from Table titled: Transmit Command Type: Two Op DMA Flit 1(Struct - tx_cq_reqwresp_dma_flit1_t) - 256 bits
*                  from File : 200_Software_Interfaces
*/
union tx_cq_reqwresp_dma_flit1 {
        struct {
                union                 tx_cq_e2                    e;        /* [63:0]  */
                union                 tx_cq_f                     f1;        /* [127:64]  */
                union                 tx_cq_f                     f2;        /* [191:128]  */
                                      ptl_match_bits_t            mb;        /* [255:192] Match Bits */
        };
        uint64_t val[4];
};

/*
* Structure from Table titled: Transmit Command Type: Two Op DMA Flit 2(Struct - tx_cq_reqwresp_dma_flit2_t) - 256 bits
*                  from File : 200_Software_Interfaces
*/
union tx_cq_reqwresp_dma_flit2 {
        struct {
                                      ptl_hdr_data_t              hd;        /* [63:0] Header Data */
                                      payload_t                   p0;        /* [127:64]  */
                                      payload_t                   p1;        /* [191:128]  */
                                      payload_t                   p2;        /* [255:192]  */
        };
        uint64_t val[4];
};

/*
* Structure from Table titled: Transmit Command Type: Two Op DMA Flit 3(Struct - tx_cq_reqwresp_dma_flit3_t) - 256 bits
*                  from File : 200_Software_Interfaces
*/
union tx_cq_reqwresp_dma_flit3 {
        struct {
                                      payload_t                   p0;        /* [63:0]  */
                struct {
                        uint64_t        reserved_255_64_0           : 64;        /* [255:64] Reserved */
                };
                struct {
                        uint64_t        reserved_255_64_1           : 64;        /* [255:64] Reserved */
                };
                struct {
                        uint64_t        reserved_255_64_2           : 64;        /* [255:64] Reserved */
                };
        };
        uint64_t val[4];
};

/*
* Structure from Table titled: Transmit Command Type: Generalized IOVEC DMA Flit 0 (Struct - tx_cq_general_dma_flit0_t) - 256 bits
*                  from File : 200_Software_Interfaces
*/
union tx_cq_general_dma_flit0 {
        struct {
                union                 tx_cq_a3                    a;        /* [63:0]  */
                union                 tx_cq_b1                    b;        /* [127:64]  */
                                      user_pointer_t              c;        /* [191:128]  */
                union                 tx_cq_e4                    e;        /* [255:192]  */
        };
        uint64_t val[4];
};

/*
* Structure from Table titled: Transmit Command Type: Generalized DMA Flit 1(Struct - tx_cq_general_dma_flit1_t) - 256 bits
*                  from File : 200_Software_Interfaces
*/
union tx_cq_general_dma_flit1 {
        struct {
                union                 tx_cq_f                     f;        /* [63:0]  */
                struct {
                        uint64_t        reserved_255_64_0           : 64;        /* [255:64] Reserved */
                };
                struct {
                        uint64_t        reserved_255_64_1           : 64;        /* [255:64] Reserved */
                };
                struct {
                        uint64_t        reserved_255_64_2           : 64;        /* [255:64] Reserved */
                };
        };
        uint64_t val[4];
};

/*
* Structure from Table titled: Transmit Command Type: 9B OFED DMA Flit 0 (Struct - tx_cq_ofed9b_dma_flit0_t) - 256 bits
*                  from File : 200_Software_Interfaces
*/
union tx_cq_ofed9b_dma_flit0 {
        struct {
                union                 tx_cq_a3                    a;        /* [63:0]  */
                union                 l4_lrh                      lrh;        /* [127:64]  */
                union                 tx_cq_bth0                  bth0;        /* [191:128]  */
                union                 tx_cq_bth2                  bth2;        /* [255:192]  */
        };
        uint64_t val[4];
};

/*
* Structure from Table titled: Transmit Command Type: 9B OFED DMA with GRH Flit 0 (Struct - tx_cq_ofed9b_grh_dma_flit0_t) - 256 bits
*                  from File : 200_Software_Interfaces
*/
union tx_cq_ofed9b_grh_dma_flit0 {
        struct {
                union                 tx_cq_a3                    a;        /* [63:0]  */
                union                 l4_lrh                      lrh;        /* [127:64]  */
                struct {
                        uint64_t        grh_0                       : 64;        /* [255:128]  */
                };
                struct {
                        uint64_t        grh_1                       : 64;        /* [255:128]  */
                };
        };
        uint64_t val[4];
};

/*
* Structure from Table titled: Transmit Command Type: 16B OFED DMA Flit 0 (Struct - tx_cq_ofed16b_dma_flit0_t) - 256 bits
*                  from File : 200_Software_Interfaces
*/
union tx_cq_ofed16b_dma_flit0 {
        struct {
                union                 tx_cq_a3                    a;        /* [63:0]  */
                union                 tx_cq_a4                    a4;        /* [127:64]  */
                union                 tx_cq_mbth0                 bth0;        /* [191:128]  */
                union                 tx_cq_bth2                  bth2;        /* [255:192]  */
        };
        uint64_t val[4];
};

/*
* Structure from Table titled: Transmit Command Type: 16B OFED DMA Flit 0 (Struct - tx_cq_ofed16b_grh_dma_flit0_t) - 256 bits
*                  from File : 200_Software_Interfaces
*/
union tx_cq_ofed16b_grh_dma_flit0 {
        struct {
                union                 tx_cq_a3                    a;        /* [63:0]  */
                union                 tx_cq_a4                    a4;        /* [127:64]  */
                struct {
                        uint64_t        grh_0                       : 64;        /* [255:128]  */
                };
                struct {
                        uint64_t        grh_1                       : 64;        /* [255:128]  */
                };
        };
        uint64_t val[4];
};

/*
* Structure from Table titled: Transmit Command Type: OFED DMA Flit 1(Struct - tx_cq_ofed_grh_dma_flit1_t) - 256 bits
*                  from File : 200_Software_Interfaces
*/
union tx_cq_ofed_grh_dma_flit1 {
        struct {
                struct {
                        uint64_t        grh_0                       : 64;        /* [191:0]  */
                };
                struct {
                        uint64_t        grh_1                       : 64;        /* [191:0]  */
                };
                struct {
                        uint64_t        grh_2                       : 64;        /* [191:0]  */
                };
                union                 tx_cq_bth0                  bth;        /* [255:192]  */
        };
        uint64_t val[4];
};

/*
* Structure from Table titled: Transmit Command Type: OFED DMA Flit 1(Struct - tx_cq_ofed16b_grh_dma_flit1_t) - 256 bits
*                  from File : 200_Software_Interfaces
*/
union tx_cq_ofed16b_grh_dma_flit1 {
        struct {
                struct {
                        uint64_t        grh_0                       : 64;        /* [191:0]  */
                };
                struct {
                        uint64_t        grh_1                       : 64;        /* [191:0]  */
                };
                struct {
                        uint64_t        grh_2                       : 64;        /* [191:0]  */
                };
                union                 tx_cq_mbth0                 bth;        /* [255:192]  */
        };
        uint64_t val[4];
};

/*
* Structure from Table titled: Transmit Command Type: OFED DMA Flit 1(Struct - tx_cq_ofed_grh_dma_flit2_t) - 256 bits
*                  from File : 200_Software_Interfaces
*/
union tx_cq_ofed_grh_dma_flit2 {
        struct {
                union                 tx_cq_bth2                  bth;        /* [63:0]  */
                struct {
                        uint64_t        eth_0                       : 64;        /* [255:64]  */
                };
                struct {
                        uint64_t        eth_1                       : 64;        /* [255:64]  */
                };
                struct {
                        uint64_t        eth_2                       : 64;        /* [255:64]  */
                };
        };
        uint64_t val[4];
};

/*
* Structure from Table titled: Transmit Command Type: OFED DMA Flit 3 (Struct - tx_cq_ofed_dma_flit3_t) - 256 bits
*                  from File : 200_Software_Interfaces
*/
union tx_cq_ofed_dma_flit3 {
        struct {
                union                 tx_cq_p                     p;        /* [63:0]  */
                union                 tx_cq_f                     f;        /* [127:64]  */
                                      user_pointer_t              user_ptr;        /* [191:128]  */
                union                 tx_cq_e4                    e;        /* [255:192]  */
        };
        uint64_t val[4];
};

/*
* Structure from Table titled: Transmit Command Type: PSM PIO Flit 0 (Struct - tx_cq_psm_flit0_t) - 256 bits
*                  from File : 200_Software_Interfaces
*/
union tx_cq_psm_flit0 {
        struct {
                union                 tx_cq_a3                    a;        /* [63:0]  */
                union                 l4_lrh                      lrh;        /* [127:64]  */
                union                 tx_cq_bth0                  bth0;        /* [191:128]  */
                union                 tx_cq_bth1                  bth1;        /* [255:192]  */
        };
        uint64_t val[4];
};

/*
* Structure from Table titled: Transmit Command Type: PSM PIO Flit 0 (Struct - tx_cq_psm16b_flit0_t) - 256 bits
*                  from File : 200_Software_Interfaces
*/
union tx_cq_psm16b_flit0 {
        struct {
                union                 tx_cq_a3                    a;        /* [63:0]  */
                union                 tx_cq_a4                    a4;        /* [127:64]  */
                union                 tx_cq_mbth0                 bth0;        /* [191:128]  */
                union                 tx_cq_bth1                  bth1;        /* [255:192]  */
        };
        uint64_t val[4];
};

/*
* Structure from Table titled: Transmit Command Type: PSM PIO Flit 1 (Struct - tx_cq_psm_pio_flit1_t) - 256 bits
*                  from File : 200_Software_Interfaces
*/
union tx_cq_psm_pio_flit1 {
        struct {
                union                 tx_cq_kdeth0                kdeth;        /* [63:0]  */
                struct {
                        uint64_t        sw_def_0                    : 64;        /* [255:64]  */
                };
                struct {
                        uint64_t        sw_def_1                    : 64;        /* [255:64]  */
                };
                struct {
                        uint64_t        sw_def_2                    : 64;        /* [255:64]  */
                };
        };
        uint64_t val[4];
};

/*
* Structure from Table titled: Transmit Command Type: PSM DMA Flit 1 (Struct - tx_cq_psm_dma_flit1_t) - 256 bits
*                  from File : 200_Software_Interfaces
*/
union tx_cq_psm_dma_flit1 {
        struct {
                union                 tx_cq_kdeth0                kdeth0;        /* [63:0]  */
                struct {
                        uint64_t        kdeth2_0                    : 64;        /* [191:64]  */
                };
                struct {
                        uint64_t        kdeth2_1                    : 64;        /* [191:64]  */
                };
                union                 tx_cq_kdeth1                kdeth1;        /* [255:192]  */
        };
        uint64_t val[4];
};

/*
* Structure from Table titled: Transmit Command Type: PSM 16B DMA Flit 1 (Struct - tx_cq_psm16B_dma_flit1_t) - 256 bits
*                  from File : 200_Software_Interfaces
*/
union tx_cq_psm16B_dma_flit1 {
        struct {
                union                 tx_cq_kdeth0                kdeth0;        /* [63:0]  */
                struct {
                        uint64_t        kdeth2                      : 64;        /* [127:64]  */
                };
                union                 tx_cq_kdeth1                kdeth1;        /* [191:128]  */
                struct {
                        uint64_t        reserved_255_192            : 64;        /* [255:192]  */
                };
        };
        uint64_t val[4];
};

/*
* Structure from Table titled: Transmit Command Type: PSM DMA Flit 2(Struct - tx_cq_psm_dma_flit2_t) - 256 bits
*                  from File : 200_Software_Interfaces
*/
union tx_cq_psm_dma_flit2 {
        struct {
                struct {
                        uint64_t        kdeth2_0                    : 64;        /* [191:0]  */
                };
                struct {
                        uint64_t        kdeth2_1                    : 64;        /* [191:0]  */
                };
                struct {
                        uint64_t        kdeth2_2                    : 64;        /* [191:0]  */
                };
                union                 tx_cq_p                     p;        /* [255:192]  */
        };
        uint64_t val[4];
};

/*
* Structure from Table titled: Transmit Command Type: PSM DMA Flit 3 (Struct - tx_cq_psm_dma_flit3_t) - 256 bits
*                  from File : 200_Software_Interfaces
*/
union tx_cq_psm_dma_flit3 {
        struct {
                union                 tx_cq_f                     f0;        /* [63:0]  */
                union                 tx_cq_f                     f1;        /* [127:64]  */
                                      user_pointer_t              user_ptr;        /* [191:128]  */
                union                 tx_cq_e4                    e;        /* [255:192]  */
        };
        uint64_t val[4];
};

/*
* Structure from Table titled: Transmit Command Type: PSM TID/Offset Array (Struct - tx_psm_tid_array_t) - 64 bits
*                  from File : 200_Software_Interfaces
*/
union tx_psm_tid_array {
        struct {
                uint64_t        tid0_length                 : 11;        /* [10:0] Length of the first TID in the 8B entry. This is expressed in 4KB increments. */
                uint64_t        reserved_19_11              : 9;        /* [19:11]  */
                uint64_t        tid0_ctrl                   : 2;        /* [21:20] TIDCtrl value to be used with this TID. Placed directly into the packets for this TID. For additional details, see Section 10.3.4 KDETH Header Format in the Storm Lake Specification, Volume 1. */
                uint64_t        tid0                        : 10;        /* [31:22] TID of of the first TID in the 8B entry. Placed directly into the packets for this TID. */
                uint64_t        tid1_length                 : 11;        /* [42:32] Length of the second TID in the 8B entry. This is expressed in 4KB increments. */
                uint64_t        reserved_51_43              : 9;        /* [51:43]  */
                uint64_t        tid1_ctrl                   : 2;        /* [53:52] TIDCtrl value to be used with this TID. Placed directly into the packets for this TID. */
                uint64_t        tid1                        : 10;        /* [63:54] TID of of the first TID in the 8B entry. Placed directly into the packets for this TID. */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Receive IOVEC Length Structure (Struct - rx_iov_length_t) - 57 bits
*                  from File : 200_Software_Interfaces
*/
union rx_iov_length {
        struct {
                uint64_t        length                      : 32;        /* [31:0] Length of the ME referenced by the total IOVEC in bytes. Limited to 4GB-1 in length. */
                uint64_t        iovec_block_size            : 5;        /* [36:32] Power of 2 size of the transcoded IOVEC blocks in bytes */
                uint64_t        iovec_stride                : 5;        /* [41:37] Power of 2 number of IOVEC entries in each transcoded block */
                uint64_t        iovec_alignment             : 3;        /* [44:42] Power of 2 minimum alignment of the IOVEC buffer start addresses in bytes */
                uint64_t        reserved_46_45              : 2;        /* [46:45] Reserved */
                uint64_t        iov_transcoded              : 1;        /* [47:47] Set if this is a transcoded IOVEC array. */
                uint64_t        reserved_56_48              : 9;        /* [56:48] Reserved */
                } __attribute__ ((__packed__));
        uint64_t val;
};

/*
* Structure from Table titled: Receive IOVEC Length Structure with 48 bits (Struct - rx_iov_length48_t) - 48 bits
*                  from File : 200_Software_Interfaces
*/
union rx_iov_length48 {
        struct {
                uint64_t        length                      : 32;        /* [31:0] Length of the ME referenced by the total IOVEC in bytes. Limited to 4GB-1 in length. */
                uint64_t        iovec_block_size            : 5;        /* [36:32] Power of 2 size of the transcoded IOVEC blocks in bytes */
                uint64_t        iovec_stride                : 5;        /* [41:37] Power of 2 number of IOVEC entries in each transcoded block */
                uint64_t        iovec_alignment             : 3;        /* [44:42] Power of 2 minimum alignment of the IOVEC buffer start addresses in bytes */
                uint64_t        reserved_46_45              : 2;        /* [46:45] Reserved */
                uint64_t        iov_transcoded              : 1;        /* [47:47] Set if this is a transcoded IOVEC array. */
                } __attribute__ ((__packed__));
        uint64_t val;
};

/*
* Structure from Table titled: Receive Length (Union - rx_length_t) - 57 bits
*                  from File : 200_Software_Interfaces
*/
union rx_length {
        union {
                uint64_t        length                      : 57;        /* [56:0] Length of the ME/LE when an IOVEC is not used. */
                uint64_t        iov_length                  : 57;        /* [56:0] Length of the ME/LE when an IOVEC is used. */
                } __attribute__ ((__packed__));
        uint64_t val;
};

/*
* Structure from Table titled: Receive Length Union with 48 bits (Union - rx_length48_t) - 48 bits
*                  from File : 200_Software_Interfaces
*/
union rx_length48 {
        union {
                uint64_t        length                      : 48;        /* [47:0] Length of the ME/LE when an IOVEC is not used. */
                uint64_t        iov_length                  : 48;        /* [47:0] Length of the ME/LE when an IOVEC is used. */
                } __attribute__ ((__packed__));
        uint64_t val;
};

/*
* Structure from Table titled: Receive Type: C1 flit (Struct - rx_c1_t) - 64bits
*                  from File : 200_Software_Interfaces
*/
union rx_c1 {
        struct {
                uint64_t        user_id                     : 32;        /* [31:0] User ID used in the command and/or used for access control in a list entry. The User ID may be set to PTL_UID_ANY, or may specify a required User ID. A failed User ID check causes the PTL_SR_PERMISSION_VIOLATION counter to be incremented. */
                uint64_t        me_options                  : 20;        /* [51:32] The ME/LE options */
                uint64_t        reserved_52_52              : 1;        /* [52:52] Reserved */
                uint64_t        msg_status                  : 3;        /* [55:53] Message status as communicated:1) Internally from OTR to RXHP in the reference count decrement2) Across the wire in an Event message */
                uint64_t        ptl_idx                     : 8;        /* [63:56] Portal Table Index for the command and/or ME/LE. */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Receive Type: C2 flit (Struct - rx_c2_t) - 64bits
*                  from File : 200_Software_Interfaces
*/
union rx_c2 {
        struct {
                uint64_t        user_id                     : 32;        /* [31:0] User ID used in the command and/or used for access control in a list entry. The User ID may be set to PTL_UID_ANY, or may specify a required User ID. A failed User ID check causes the PTL_SR_PERMISSION_VIOLATION counter to be incremented. */
                uint64_t        matched_me                  : 16;        /* [47:32] When an unexpected header is in progress and matches a new MEAppend, this field is used to hold a pointer to the ME that it matched. */
                uint64_t        m                           : 1;        /* [48:48] Matched to ME/LE: Used in the unexpected header to indicate that an ME or LE has matched to this unexpected header. This is set to prevent future matches. It is only set when an operation is still pending to the unexpected header. */
                uint64_t        p                           : 1;        /* [49:49] Pending Operation: Used in the unexpected header entry to indicate that there is an operation in progress to an entry. This is set when the entry is created and cleared when the local DMA completes (single packet message or truncated rendezvous) or when the rendezvous completes (long message, not truncated). */
                uint64_t        ne                          : 1;        /* [50:50] Normal Event Needed: Occurs during a rendezvous operation to indicate that the standard event was a) required, and b) not yet posted. Causes a normal event to be posted with the operation completes. */
                uint64_t        ack_req                     : 2;        /* [52:51] Indicates whether the message requested an acknowledgment */
                uint64_t        msg_status                  : 3;        /* [55:53] Message status stored in the tracking entry and communicated:1) Internally from OTR to RXHP in the reference count decrement2) Across the wire in an Event message */
                uint64_t        ptl_idx                     : 8;        /* [63:56] Portal Table Index for the command and/or ME/LE. */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Receive Type: C3 flit (Struct - rx_c3_t) - 64bits
*                  from File : 200_Software_Interfaces
*/
union rx_c3 {
        struct {
                uint64_t        reserved_31_0               : 32;        /* [31:0] Reserved */
                uint64_t        trig_handle                 : 16;        /* [47:32] Triggered operation buffer slot to use for this triggered ooperation command. */
                uint64_t        reserved_55_48              : 8;        /* [55:48] Reserved */
                uint64_t        ptl_idx                     : 8;        /* [63:56] Portal Table Index for the command and/or ME/LE. */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Receive Type: C4 flit (Struct - rx_c4_t) - 64bits
*                  from File : 200_Software_Interfaces
*/
union rx_c4 {
        struct {
                uint64_t        trig_previous               : 16;        /* [15:0] Previous item in the triggered operation listNote: the previous pointer is unused in the current implementation. It was originally planned as a doubly linked list and is left as a placeholder. */
                uint64_t        trig_next                   : 16;        /* [31:16] Next item in the triggered operation list */
                uint64_t        trig_handle                 : 16;        /* [47:32] Triggered operation buffer slot to use for this triggered ooperation command. */
                uint64_t        cq_source                   : 8;        /* [55:48] Command queue on which this triggered operation was issued. */
                uint64_t        ptl_idx                     : 8;        /* [63:56] Portal Table Index for the command and/or ME/LE. */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Receive Type: C5 flit (Struct - rx_c5_t) - 64bits
*                  from File : 200_Software_Interfaces
*/
union rx_c5 {
        struct {
                uint64_t        reserved_55_0               : 56;        /* [55:0] Reserved */
                uint64_t        ptl_idx                     : 8;        /* [63:56] Portal Table Index for the command and/or ME/LE. */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Receive Type: C6 flit (Struct - rx_c6_t) - 64bits
*                  from File : 200_Software_Interfaces
*/
union rx_c6 {
        struct {
                uint64_t        reserved_31_0               : 32;        /* [31:0] Reserved */
                uint64_t        qp_num                      : 24;        /* [55:32] Number of the QP that the command is manipulating */
                uint64_t        ptl_idx                     : 8;        /* [63:56] Portal Table Index for the command and/or ME/LE. */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Receive Type: D1 flit (Struct - rx_d1_t) - 64bits
*                  from File : 200_Software_Interfaces
*/
union rx_d1 {
        struct {
                uint64_t        initiator_id                : 36;        /* [35:0] Initiator of the message (logical or physicalID of the originating message). Used as part of the matching logic and may be set to wildcard values (e.g. PTL_PID_ANY, PTL_LID_ANY, PTL_RANK_ANY). */
                uint64_t        ct_handle                   : 11;        /* [46:36] Counting event (CT) handle to use for posting the event */
                uint64_t        reserved_47_47              : 1;        /* [47:47] Reserved */
                uint64_t        ref_count                   : 16;        /* [63:48] Number of pending operations referencing this entry */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Receive Type: D2 flit (Struct - rx_d2_t) - 64 bits
*                  from File : 200_Software_Interfaces
*/
union rx_d2 {
        struct {
                uint64_t        slid                        : 24;        /* [23:0] Source LID of the message (physical LID of the originating node of the incoming message.) Used as part of the matching logic. */
                uint64_t        ipid                        : 12;        /* [35:24] Initiator PID (PID of the originating process of the incoming message). Used as part of the matching logic. */
                uint64_t        reserved_39_36              : 4;        /* [39:36] Reserved */
                uint64_t        parent_me                   : 16;        /* [55:40] Pointer to the ME that an unexpected header entry that is tracking an unexpected operation or a rendezvous operation is associated with */
                uint64_t        opcode                      : 7;        /* [62:56] OPCODE from an incoming network packet. */
                uint64_t        fa                          : 1;        /* [63:63] Indicates if this was a FetchingAtomic operation (1) or not (0). */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Receive Type: D3 flit (Struct - rx_d3_t) - 64 bits
*                  from File : 200_Software_Interfaces
*/
union rx_d3 {
        struct {
                uint64_t        initiator_id                : 36;        /* [35:0] Initiator of the message (logical or physical ID of the originating message). Used as part of the matching logic and may be set to wildcard values (e.g. PTL_PID_ANY, PTL_LID_ANY, PTL_RANK_ANY). */
                uint64_t        ct_handle                   : 11;        /* [46:36] Counting event (CT) handle to use for posting the event */
                uint64_t        ncc                         : 1;        /* [47:47] 1: do not generate a command complete event0: allow command complete event (where applicable) */
                uint64_t        command                     : 12;        /* [59:48] Receive command */
                uint64_t        reserved_61_60              : 2;        /* [61:60] Reserved */
                uint64_t        cmd_len                     : 2;        /* [63:62] The length of a receive command minus 1 in 32B increments. (0=>32B, 1=>64B, 2=>96B, 3=>128B) */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Receive Type: D4 flit (Struct - rx_d4_t) - 64 bits
*                  from File : 200_Software_Interfaces
*/
union rx_d4 {
        struct {
                uint64_t        reserved_31_0               : 32;        /* [31:0]  */
                uint64_t        ni                          : 2;        /* [33:32] NI associated with the CT_Handle. */
                uint64_t        tc                          : 2;        /* [35:34] Two bit Traffic Class for Triggered Operation. */
                uint64_t        ct_handle                   : 11;        /* [46:36] Counting event (CT) handle to use for posting the event */
                uint64_t        ncc                         : 1;        /* [47:47] 1: do not generate a command complete event0: allow command complete event (where applicable) */
                uint64_t        command                     : 12;        /* [59:48] Receive command */
                uint64_t        tq                          : 1;        /* [60:60] Target Queue for the triggered operation */
                uint64_t        reserved_61_61              : 1;        /* [61:61] Reserved */
                uint64_t        cmd_len                     : 2;        /* [63:62] The length of a receive command minus 1 in 32B increments. (0=>32B, 1=>64B, 2=>96B, 3=>128B) */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Receive Type: D5 flit (Struct - rx_d5_t) - 64 bits
*                  from File : 200_Software_Interfaces
*/
union rx_d5 {
        struct {
                uint64_t        reserved_31_0               : 32;        /* [31:0]  */
                uint64_t        ni                          : 2;        /* [33:32] NI associated with the CT_Handle. */
                uint64_t        reserved_35_34              : 2;        /* [35:34]  */
                uint64_t        ct_handle                   : 11;        /* [46:36] Counting event (CT) handle to use for posting the event */
                uint64_t        ncc                         : 1;        /* [47:47] 1: do not generate a command complete event0: allow command complete event (where applicable) */
                uint64_t        command                     : 12;        /* [59:48] Receive command */
                uint64_t        reserved_61_60              : 2;        /* [61:60] Reserved */
                uint64_t        cmd_len                     : 2;        /* [63:62] The length of a receive command minus 1 in 32B increments. (0=>32B, 1=>64B, 2=>96B, 3=>128B) */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Receive Type: D6 flit (Struct - rx_d6_t) - 64 bits
*                  from File : 200_Software_Interfaces
*/
union rx_d6 {
        struct {
                uint64_t        lba_low                     : 36;        /* [35:0] Low 36 bits of the logical base address */
                uint64_t        ct_handle                   : 11;        /* [46:36] Counting event (CT) handle to use for posting the event */
                uint64_t        ncc                         : 1;        /* [47:47] 1: do not generate a command complete event0: allow command complete event (where applicable) */
                uint64_t        command                     : 12;        /* [59:48] Receive command */
                uint64_t        reserved_61_60              : 2;        /* [61:60] Reserved */
                uint64_t        cmd_len                     : 2;        /* [63:62] The length of a receive command minus 1 in 32B increments. (0=>32B, 1=>64B, 2=>96B, 3=>128B) */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Receive Type: E1 flit (Struct - rx_e1_t) - 64bits
*                  from File : 200_Software_Interfaces
*/
union rx_e1 {
        struct {
                uint64_t        local_offset                : 40;        /* [39:0] Storage for the locally managed offset in a locally managed list entry */
                uint64_t        min_free                    : 24;        /* [63:40] Minimum buffer space that must be free to prevent the item from unlinking */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Receive Type: E2 flit (Struct - rx_e2_t) - 64bits
*                  from File : 200_Software_Interfaces
*/
union rx_e2 {
        struct {
                uint64_t        rlength                     : 32;        /* [31:0] Requested operation length in a message */
                uint64_t        mlength                     : 32;        /* [63:32] Modified Length: amount of the buffer that was actually modified. */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Receive Type: E3 flit (Struct - rx_e3_t) - 64bits
*                  from File : 200_Software_Interfaces
*/
union rx_e3 {
        struct {
                uint64_t        reserved_11_0               : 12;        /* [11:0] Reserved */
                uint64_t        cmd_pid                     : 12;        /* [23:12] PID to be used for this operation (context to give the LIST_HANDLE meaning) */
                uint64_t        list_handle                 : 16;        /* [39:24] List entry to be used in an operation */
                uint64_t        min_free                    : 24;        /* [63:40] Minimum buffer space that must be free to prevent the item from unlinking */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Receive Type: E4 flit (Struct - rx_e4_t) - 64bits
*                  from File : 200_Software_Interfaces
*/
union rx_e4 {
        struct {
                uint64_t        reserved_11_0               : 12;        /* [11:0] Reserved */
                uint64_t        cmd_pid                     : 12;        /* [23:12] PID to be used for this operation (context to give the LIST_HANDLE meaning) */
                uint64_t        reserved_63_24              : 40;        /* [63:24]  */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Receive Type: E5 flit (Struct - rx_e5_t) - 64bits
*                  from File : 200_Software_Interfaces
*/
union rx_e5 {
        struct {
                uint64_t        reserved_11_0               : 12;        /* [11:0] Reserved */
                uint64_t        cmd_pid                     : 12;        /* [23:12] PID to be used for this operation (context to give the LIST_HANDLE meaning) */
                uint64_t        list_handle                 : 16;        /* [39:24] List entry to be used in an operation */
                uint64_t        recvq_root                  : 16;        /* [55:40] Pointer to the root of the receive queue that this is to be appended to. */
                uint64_t        reserved_63_56              : 8;        /* [63:56] Reserved */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Receive Type: E6 flit (Struct - rx_e6_t) - 64bits
*                  from File : 200_Software_Interfaces
*/
union rx_e6 {
        struct {
                uint64_t        lba                         : 57;        /* [56:0] Logical base address for Native Verbs RDMA operations. */
                uint64_t        reserved_63_57              : 7;        /* [63:57] Reserved */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Receive Type: E7 flit (Struct - rx_e7_t) - 64bits
*                  from File : 200_Software_Interfaces
*/
union rx_e7 {
        struct {
                uint64_t        reserved_11_0               : 12;        /* [11:0] Reserved */
                uint64_t        cmd_pid                     : 12;        /* [23:12] PID to be used for this operation (context to give the LIST_HANDLE meaning) */
                uint64_t        list_handle                 : 16;        /* [39:24] List entry to be used in an operation */
                uint64_t        lba_high                    : 21;        /* [60:40] Upper 21 bits of the logical base address */
                uint64_t        reserved_63_61              : 3;        /* [63:61] Reserved */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Receive Type: F1 flit (Struct - rx_f1_t) - 64bits
*                  from File : 200_Software_Interfaces
*/
union rx_f1 {
        struct {
                uint64_t        length                      : 57;        /* [56:0] Length of a buffer */
                uint64_t        reserved_63_57              : 7;        /* [63:57] Reserved */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Receive Type: F2 flit (Struct - rx_f2_t) - 64bits
*                  from File : 200_Software_Interfaces
*/
union rx_f2 {
        struct {
                uint64_t        length                      : 48;        /* [47:0] Length of a buffer */
                uint64_t        unex_ref_count              : 16;        /* [63:48] Number of unexpected headers referencing an overflow list entry */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Receive Type: F3 flit (Struct - rx_f3_t) - 64bits
*                  from File : 200_Software_Interfaces
*/
union rx_f3 {
        struct {
                uint64_t        req_offset                  : 57;        /* [56:0] Requested offset in the received message */
                uint64_t        dtype                       : 6;        /* [62:57] Datatype of the operation that was received */
                uint64_t        reserved_63_63              : 1;        /* [63:63] Reserved */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Receive Type: H flit (Struct - rx_h_t) - 64bits
*                  from File : 200_Software_Interfaces
*/
union rx_h {
        struct {
                uint64_t        srank                       : 32;        /* [31:0] Source rank for an operation */
                uint64_t        dlid                        : 7;        /* [38:32] Low order 7 bits of Destination LID of an operation */
                uint64_t        pt                          : 1;        /* [39:39] Deprecated */
                uint64_t        packets                     : 24;        /* [63:40] Remaining packets for this operation */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Receive Type: J flit (Struct - rx_j_t) - 64bits
*                  from File : 200_Software_Interfaces
*/
union rx_j {
        struct {
                uint64_t        start                       : 57;        /* [56:0] Start address for a buffer or operation */
                uint64_t        chint_select                : 2;        /* [58:57] Select one of four CHINT values provided in a CSR. */
                uint64_t        o                           : 1;        /* [59:59] In ME Space: True: Item is an overflow list entry. False: Item is a priority list entry.In UH Space: True: Item is a Native Verbs entry using a priority list entry format.False: Item is an unexpected header / tracking entry. */
                uint64_t        f                           : 1;        /* [60:60] In a Portals entry: This item needs to be freed when it is no longer in use. This is unused for the unexpected header case.In a Native Verbs entry: Item is free and should not match. */
                uint64_t        ni                          : 2;        /* [62:61] Network Interface used for this operation. */
                uint64_t        v                           : 1;        /* [63:63] This item is valid. */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Receive Type: K flit (Struct - rx_k_t) - 64bits
*                  from File : 200_Software_Interfaces
*/
union rx_k {
        struct {
                uint64_t        previous                    : 16;        /* [15:0] Points to the previous list entry on the list */
                uint64_t        reserved_31_16              : 16;        /* [31:16] Reserved */
                uint64_t        next                        : 16;        /* [47:32] Points to the next list entry on the list */
                uint64_t        reserved_63_48              : 16;        /* [63:48] Reserved */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Receive Type: K1 flit (Struct - rx_k1_t) - 64bits
*                  from File : 200_Software_Interfaces
*/
union rx_k1 {
        struct {
                uint64_t        previous                    : 16;        /* [15:0] Points to the previous list entry on the list */
                uint64_t        next                        : 16;        /* [31:16] Points to the next list entry on the list */
                uint64_t        reserved_63_32              : 32;        /* [63:32] Reserved */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Receive Type: List Manipulation (Struct - rx_cq_list_flit0_t) - 256 bits
*                  from File : 200_Software_Interfaces
*/
union rx_cq_list_flit0 {
        struct {
                                      ptl_match_bits_t            a;        /* [63:0]  */
                                      ptl_match_bits_t            b;        /* [127:64]  */
                union                 rx_c1                       c;        /* [191:128]  */
                union                 rx_d3                       d;        /* [255:192]  */
        };
        uint64_t val[4];
};

/*
* Structure from Table titled: Receive Type: List Manipulation (Struct - rx_cq_list_flit1_t) - 256 bits
*                  from File : 200_Software_Interfaces
*/
union rx_cq_list_flit1 {
        struct {
                union                 rx_e3                       e;        /* [63:0]  */
                union                 rx_f1                       f;        /* [127:64]  */
                                      user_pointer_t              g;        /* [191:128]  */
                union                 rx_j                        j;        /* [255:192]  */
        };
        uint64_t val[4];
};

/*
* Structure from Table titled: Receive Type: Verbs Queue Manipulation (Struct - rx_cq_list_verbs_flit1_t) - 256 bits
*                  from File : 200_Software_Interfaces
*/
union rx_cq_list_verbs_flit1 {
        struct {
                union                 rx_e5                       e;        /* [63:0]  */
                union                 rx_f1                       f;        /* [127:64]  */
                                      user_pointer_t              g;        /* [191:128]  */
                union                 rx_j                        j;        /* [255:192]  */
        };
        uint64_t val[4];
};

/*
* Structure from Table titled: Receive Type: Native Verbs Memory Region Manipulation (Struct - rx_cq_mreg_verbs_flit0_t) - 256 bits
*                  from File : 200_Software_Interfaces
*/
union rx_cq_mreg_verbs_flit0 {
        struct {
                                      ptl_match_bits_t            a;        /* [63:0]  */
                                      ptl_match_bits_t            b;        /* [127:64]  */
                union                 rx_c1                       c;        /* [191:128]  */
                union                 rx_d6                       d;        /* [255:192]  */
        };
        uint64_t val[4];
};

/*
* Structure from Table titled: Receive Type: Native Verbs Memory Region Manipulation (Struct - rx_cq_mreg_verbs_flit1_t) - 256 bits
*                  from File : 200_Software_Interfaces
*/
union rx_cq_mreg_verbs_flit1 {
        struct {
                union                 rx_e7                       e;        /* [63:0]  */
                union                 rx_f1                       f;        /* [127:64]  */
                                      user_pointer_t              g;        /* [191:128]  */
                union                 rx_j                        j;        /* [255:192]  */
        };
        uint64_t val[4];
};

/*
* Structure from Table titled: Receive Type: Triggered Operation (Struct - rx_cq_trig_flit0_t) - 256 bits
*                  from File : 200_Software_Interfaces
*/
union rx_cq_trig_flit0 {
        struct {
                union                 tx_cq_a1                    a;        /* [63:0] RX parses the first part of the TX command to translate the service level. The RX form of the triggered operation command does not need to parse the first 8 bytes. */
                                      threshold_t                 b;        /* [127:64] The triggered operation threshold */
                union                 rx_c3                       c;        /* [191:128]  */
                union                 rx_d4                       d;        /* [255:192]  */
        };
        uint64_t val[4];
};

/*
* Structure from Table titled: Receive Type: Triggered Operation (Struct - rx_cq_trig_flit1_t) - 256 bits
*                  from File : 200_Software_Interfaces
*/
union rx_cq_trig_flit1 {
        struct {
                union                 rx_e4                       e;        /* [63:0]  */
                struct {
                        uint64_t        command_0                   : 64;        /* [255:64]  */
                };
                struct {
                        uint64_t        command_1                   : 64;        /* [255:64]  */
                };
                struct {
                        uint64_t        command_2                   : 64;        /* [255:64]  */
                };
        };
        uint64_t val[4];
};

/*
* Structure from Table titled: Receive Type: State Control (Struct - rx_cq_state_flit0_t) - 256 bits
*                  from File : 200_Software_Interfaces
*/
union rx_cq_state_flit0 {
        struct {
                struct {
                        uint64_t        p0                          : 64;        /* [63:0]  */
                };
                struct {
                        uint64_t        p1                          : 64;        /* [127:64]  */
                };
                union                 rx_c5                       c;        /* [191:128]  */
                union                 rx_d5                       d;        /* [255:192]  */
        };
        uint64_t val[4];
};

/*
* Structure from Table titled: Receive Type: State Control (Struct - rx_cq_state_flit1_t) - 256 bits
*                  from File : 200_Software_Interfaces
*/
union rx_cq_state_flit1 {
        struct {
                union                 rx_e4                       e;        /* [63:0]  */
                struct {
                        uint64_t        p2                          : 64;        /* [127:64]  */
                };
                struct {
                        uint64_t        p3                          : 64;        /* [191:128]  */
                };
                                      user_pointer_t              user_ptr;        /* [255:192]  */
        };
        uint64_t val[4];
};

/*
* Structure from Table titled: Receive Type: State Control (Struct - rx_cq_state_verbs_flit0_t) - 256 bits
*                  from File : 200_Software_Interfaces
*/
union rx_cq_state_verbs_flit0 {
        struct {
                struct {
                        uint64_t        p0                          : 64;        /* [63:0]  */
                };
                struct {
                        uint64_t        p1                          : 64;        /* [127:64]  */
                };
                union                 rx_c6                       c;        /* [191:128]  */
                union                 rx_d5                       d;        /* [255:192]  */
        };
        uint64_t val[4];
};

/*
* Structure from Table titled: Portal Table Entry Structure: non-Fast Path (Struct - ptentry_fp0_t) - 256 bits
*                  from File : 200_Software_Interfaces
*/
union ptentry_fp0 {
        struct {
                struct {
                        uint64_t        overflow_head               : 16;        /* [15:0] Pointer to the head of the overflow list associated with this Portal Table Entry */
                        uint64_t        overflow_tail               : 16;        /* [31:16] Pointer to the tail of the overflow list associated with this Portal Table Entry */
                        uint64_t        unexpected_head             : 16;        /* [47:32] Pointer to the head of the unexpected header list associated with this Portal Table Entry */
                        uint64_t        reserved_54_48              : 7;        /* [54:48] Reserved */
                        uint64_t        enable                      : 1;        /* [55:55] This Portal Table Entry is enabled */
                        uint64_t        ot                          : 1;        /* [56:56] Indicates whether all entries on this Portal Table Entry will truncate (do not have the PTL_ME_NO_TRUNCATE option set) */
                        uint64_t        uo                          : 1;        /* [57:57] Indicates whether all entries on the priority list for this Portal Table Entry will have the PTL_ME_USE_ONCE or PTL_LE_USE_ONCE option set. */
                        uint64_t        fc                          : 1;        /* [58:58] Indicates if flow control is enabled for this Portal Table Entry. */
                        uint64_t        bc                          : 1;        /* [59:59] Indicates whether this Portal Table Entry corresponds to a backward compatibility PTEntry. */
                        uint64_t        ni                          : 2;        /* [61:60] The NI associated with this Portal Table Entry */
                        uint64_t        fp                          : 1;        /* [62:62] Indicates whether this is a fast path PTEntry or not */
                        uint64_t        v                           : 1;        /* [63:63] Indicates whether this PT Entry is Valid. */
                };
                struct {
                        uint64_t        priority_head               : 16;        /* [79:64] Pointer to the head of the priority list associated with this Portal Table Entry */
                        uint64_t        priority_tail               : 16;        /* [95:80] Pointer to the tail of the priority list associated with this Portal Table Entry */
                        uint64_t        unexpected_tail             : 16;        /* [111:96] Pointer to the tail of the unexpected headerlist associated with this Portal Table Entry */
                        uint64_t        eq_handle                   : 11;        /* [122:112] EQ Handle associated with this Portal Table Entry */
                        uint64_t        reserved_124_123            : 2;        /* [124:123] Reserved */
                        uint64_t        qp                          : 1;        /* [125:125] Indicates if this is a Queue Pair entry type. */
                        uint64_t        reserved_255_126_0          : 2;        /* [255:126] Reserved */
                };
                struct {
                        uint64_t        reserved_255_126_1          : 64;        /* [255:126] Reserved */
                };
                struct {
                        uint64_t        reserved_255_126_2          : 64;        /* [255:126] Reserved */
                };
        };
        uint64_t val[4];
};

/*
* Structure from Table titled: Portal Table Entry Structure: Fast Path (Struct - ptentry_fp1_t) - 256 bits
*                  from File : 200_Software_Interfaces
*/
union ptentry_fp1 {
        struct {
                struct {
                        uint64_t        start                       : 57;        /* [56:0] Start address of the LE attached to the fast path PTEntry */
                        uint64_t        le_2_0                      : 3;        /* [59:57] Low order bits of LE Options for the fastpath (fp_le_options_t bits 2:0) */
                        uint64_t        ni                          : 2;        /* [61:60] The NI associated with this Portal Table Entry */
                        uint64_t        fp                          : 1;        /* [62:62] Indicates whether this is a fast path PTEntry or not */
                        uint64_t        v                           : 1;        /* [63:63] Indicates whether this PT Entry is Valid. */
                };
                struct {
                        uint64_t        user_id                     : 32;        /* [95:64] User ID used for access control. The User ID may be set to PTL_UID_ANY, or may specify a required User ID. A failed User ID check causes the PTL_SR_PERMISSION_VIOLATION counter to be incremented. */
                        uint64_t        ref_count                   : 16;        /* [111:96] Reference count for the LE attached to this PTEntry */
                        uint64_t        eq_handle                   : 11;        /* [122:112] EQ Handle associated with this Portal Table Entry */
                        uint64_t        le_7_3                      : 5;        /* [127:123] Middle bits of LE Options for the fastpath (fp_le_options_t bits 7:3) */
                };
                struct {
                        uint64_t        length                      : 57;        /* [184:128] Length of the LE attached to the fast path PTEntry */
                        uint64_t        le_9_8                      : 2;        /* [186:185] High bits of LE Options for the fastpath (fp_le_options_t bits 9:8) */
                        uint64_t        reserved_191_187            : 5;        /* [191:187] Reserved */
                };
                struct {
                        uint64_t        ct_handle                   : 11;        /* [202:192] Counting Event (CT) handle attached to this PTEntry */
                        uint64_t        reserved_255_203            : 53;        /* [255:203] Reserved */
                };
        };
        uint64_t val[4];
};

/*
* Structure from Table titled: Portal Table Entry Structure: Fast Path with Enable (Struct - ptentry_fp1e_t) - 256 bits
*                  from File : 200_Software_Interfaces
*/
union ptentry_fp1e {
        struct {
                struct {
                        uint64_t        start                       : 57;        /* [56:0] Start address of the LE attached to the fast path PTEntry */
                        uint64_t        enable                      : 1;        /* [57:57] This Portal Table Entry is enabled */
                        uint64_t        reserved_59_58              : 2;        /* [59:58] Reserved */
                        uint64_t        ni                          : 2;        /* [61:60] The NI associated with this Portal Table Entry */
                        uint64_t        fp                          : 1;        /* [62:62] Indicates whether this is a fast path PTEntry or not */
                        uint64_t        v                           : 1;        /* [63:63] Indicates whether this PT Entry is Valid. */
                };
                struct {
                        uint64_t        user_id                     : 32;        /* [95:64] User ID used for access control. The User ID may be set to PTL_UID_ANY, or may specify a required User ID. A failed User ID check causes the PTL_SR_PERMISSION_VIOLATION counter to be incremented. */
                        uint64_t        ref_count                   : 16;        /* [111:96] Reference count for the LE attached to this PTEntry */
                        uint64_t        eq_handle                   : 11;        /* [122:112] EQ Handle associated with this Portal Table Entry */
                        uint64_t        le_7_3                      : 5;        /* [127:123] Middle bits of LE Options for the fastpath (fp_le_options_t bits 7:3) */
                };
                struct {
                        uint64_t        length                      : 57;        /* [184:128] Length of the LE attached to the fast path PTEntry */
                        uint64_t        le_2_0                      : 3;        /* [187:185] Low order bits of LE Options for the fastpath (fp_le_options_t bits 2:0) */
                        uint64_t        reserved_191_188            : 4;        /* [191:188] Reserved */
                };
                struct {
                        uint64_t        ct_handle                   : 11;        /* [202:192] Counting Event (CT) handle attached to this PTEntry */
                        uint64_t        reserved_255_203            : 53;        /* [255:203] Reserved */
                };
        };
        uint64_t val[4];
};

/*
* Structure from Table titled: Portal Table Entry Structure: non-Fast Path with Backward Compatibility Usage Model for Eager Operations (Struct - ptentry_fp0_bc1_et0_t) - 256 bits
*                  from File : 200_Software_Interfaces
*/
union ptentry_fp0_bc1_et0 {
        struct {
                struct {
                        uint64_t        eager_cnt                   : 4;        /* [3:0] EAGER_CNT is the number of eager FIFO entries supported by this context. 0 is disabled, (1-9): 8*2^(EAGER_CNT-1) eager buffer entries, 0xa-0xf are reserved */
                        uint64_t        reserved_37_4               : 34;        /* [37:4]  */
                        uint64_t        dont_drop_eager_full        : 1;        /* [38:38] When set, the packet wont be dropped when the context's Eager buffer queue is full. This will cause back pressure on the fabric. See Section 8.5.10 of WFR HAS 'Enable Back Pressure on the Fabric' */
                        uint64_t        job_key                     : 16;        /* [54:39] Job Key to be used for checking against the incoming packet. */
                        uint64_t        enable                      : 1;        /* [55:55] This Portal Table Entry for this context is enabled */
                        uint64_t        jk                          : 1;        /* [56:56] Indicates whether the JKey in the incoming packet should be checked. */
                        uint64_t        re                          : 1;        /* [57:57] Redirect Enable: Enables packets to be redirected to context 0 in some error cases. */
                        uint64_t        fc                          : 1;        /* [58:58] Indicates if flow control is enabled for this Portal Table Entry. Should always be set for Backwards compatible Portal Table Entries. */
                        uint64_t        bc                          : 1;        /* [59:59] Indicates whether this Portal Table Entry corresponds to a backward compatibility PTEntry. Should always be set for both Eager and Expected backward compatible Portal Table Entries. */
                        uint64_t        etid                        : 1;        /* [60:60] Indicates whether this is an eager (0) or expected/TID flow (1) Portal Table Entry. */
                        uint64_t        dont_drop_rhqf              : 1;        /* [61:61] When set the packet wont be dropped when the context Rx Header Queue is full. This will cause back pressure on the fabric. See section 8.5.10 of WFR HAS. 'Enable Back Pressure on the Fabric' */
                        uint64_t        fp                          : 1;        /* [62:62] Indicates whether this is a fast path PTEntry or not. Must not be set for Backwards Compatible Portal Table Entries. */
                        uint64_t        v                           : 1;        /* [63:63] Indicates whether this PT Entry is Valid. Should be set during normal operation. */
                };
                struct {
                        uint64_t        eager_head                  : 11;        /* [74:64] Pointer to the head List Entry index of the cyclic eager queue for backward compatibility operations in eager packet mode. List Entries  in the Eager queue begin at 0 and can reach as high as 2047. The maximum value is determined by EAGER_CNT setting.Host software is responsible for maintaining this index as it consumes eager packets from the queue. It must wrap the index value based on the queue depth as configured by the EAGER_CNT value. */
                        uint64_t        reserved_79_75              : 5;        /* [79:75]  */
                        uint64_t        eager_tail                  : 11;        /* [90:80] Pointer to the tail List Entry index of the cyclic eager queue for backward compatibility operations. This index is maintained by the firmware. */
                        uint64_t        reserved_93_91              : 3;        /* [93:91]  */
                        uint64_t        rcv_hdr_entry_sz            : 2;        /* [95:94] DEPRECATED: This field will not be used. */
                        uint64_t        job_key_mask                : 16;        /* [111:96] Job Key Mask: mask of which bits to compare. Comparison is 'if (PACKET_VALUE & JOB_KEY_MASK == JOB_KEY) then PASS' */
                        uint64_t        eq_handle                   : 11;        /* [122:112] EQ Handle associated with this Portal Table Entry. Must be set to a valid, non zero EQD handle. */
                        uint64_t        rcvhdrsz                    : 5;        /* [127:123] Receive Header Size: Size of the KDETH header in dwords . This is used to determine the split point between header and payload for type 0 and 1 KDETH packets. */
                };
                struct {
                        uint64_t        reserved_255_128_0          : 64;        /* [255:128] Reserved */
                };
                struct {
                        uint64_t        reserved_255_128_1          : 64;        /* [255:128] Reserved */
                };
        };
        uint64_t val[4];
};

/*
* Structure from Table titled: Portal Table Entry Structure: non-Fast Path with Backward Compatibility Usage Model for TID Operations (Struct - ptentry_fp0_bc1_et1_t) - 256 bits
*                  from File : 200_Software_Interfaces
*/
union ptentry_fp0_bc1_et1 {
        struct {
                struct {
                        uint64_t        seq_num                     : 11;        /* [10:0] Flow Sequence Number */
                        uint64_t        gen_val                     : 20;        /* [30:11] Flow Generation value  - If EXT_PSN_ENABLE is 0, only bits 23:11 are used to give a 13-bit GenVal. Bits [30:24] are reserved, and should be set to 0 by software, but will be ignored by hardware.  - If EXT_PSN_ENABLE is 1, bits 30:11 are used to give a 20-bit GenVal */
                        uint64_t        flow_valid                  : 1;        /* [31:31] Indicates if the Flow is Valid. Must be set for correct operation. */
                        uint64_t        hdr_supp_enabled            : 1;        /* [32:32] Header Suppression is enabled */
                        uint64_t        keep_after_seq_err          : 1;        /* [33:33] Keep the header after a sequence error (continue to DMA receive header on the sequence number mismatch) */
                        uint64_t        keep_on_gen_error           : 1;        /* [34:34] Keep the header after a generation error (continue to DMA receive header on the generation number mismatch) */
                        uint64_t        keep_payload_on_gen_err     : 1;        /* [35:35] Keep the payload after a generation error (continue to DMA receive header on the generation number mismatch) */
                        uint64_t        seq_mismatch                : 1;        /* [36:36] Indicates a sequence number mismatch. Must be cleared through an RX Command. */
                        uint64_t        gen_mismatch                : 1;        /* [37:37] Indicates a generation mismatch. Must be cleared through an RX Command. */
                        uint64_t        ext_psn_enable              : 1;        /* [38:38] Enable the use of 31 bit PSNs for this flow. */
                        uint64_t        job_key                     : 16;        /* [54:39] Job Key to be used for checking against the incoming packet. */
                        uint64_t        enable                      : 1;        /* [55:55] This Portal Table Entry is enabled.This must be set before packets can be accepted. */
                        uint64_t        jk                          : 1;        /* [56:56] Indicates whether the JKey in the incoming packet should be checked. */
                        uint64_t        re                          : 1;        /* [57:57] Redirect Enable: Enables packets to be redirected to context 0 in some error cases. */
                        uint64_t        fc                          : 1;        /* [58:58] Indicates if flow control is enabled for this Portal Table Entry. Must be set for correct operation. */
                        uint64_t        bc                          : 1;        /* [59:59] Indicates whether this Portal Table Entry corresponds to a backward compatibility PTEntry. Should always be set for both Eager and Expected backward compatible Portal Table Entries. */
                        uint64_t        etid                        : 1;        /* [60:60] Indicates whether this is an eager (0) or expected/TID flow (1) */
                        uint64_t        dont_drop_rhqf              : 1;        /* [61:61] When set the packet wont be dropped when the context Rx Header Queue is full. This will cause back pressure on the fabric. See section 8.5.10 of WFR HAS. 'Enable Back Pressure on the Fabric' */
                        uint64_t        fp                          : 1;        /* [62:62] Indicates whether this is a fast path PTEntry or not. Must not be set for Backwards Compatible Portal Table Entries. */
                        uint64_t        v                           : 1;        /* [63:63] Indicates whether this PT Entry is Valid. This must be set for correct operation. */
                };
                struct {
                        uint64_t        tidbaseindex                : 16;        /* [79:64] Base of the TID array in the ME space. */
                        uint64_t        tidpaircnt                  : 4;        /* [83:80] The number of expected TID pairs used for this context. 0 = disabled, 1-9 = 4*2^(tidpaircnt-1) TID pairs, 0xa-0xf reserved. */
                        uint64_t        reserved_93_84              : 10;        /* [93:84]  */
                        uint64_t        rcv_hdr_entry_sz            : 2;        /* [95:94] DEPRECATED: This field will not be used. */
                        uint64_t        job_key_mask                : 16;        /* [111:96] Job Key Mask: mask of which bits to compare. Comparison is 'if (PACKET_VALUE & JOB_KEY_MASK == JOB_KEY) then PASS' */
                        uint64_t        eq_handle                   : 11;        /* [122:112] EQ Handle associated with this Portal Table Entry. Must be set to a valid, non zero EQD handle for Backward compatible Portal Table Entries. */
                        uint64_t        rcvhdrsz                    : 5;        /* [127:123] Receive Header Size: Size of the KDETH header in dowrds.. This is used to determine the split point between header and payload for type 0 and 1 KDETH packets. */
                };
                struct {
                        uint64_t        reserved_255_128_0          : 64;        /* [255:128] Reserved */
                };
                struct {
                        uint64_t        reserved_255_128_1          : 64;        /* [255:128] Reserved */
                };
        };
        uint64_t val[4];
};

/*
* Structure from Table titled: Portal Table Entry Structure: Verbs (Struct - ptentry_verbs_t) - 256 bits
*                  from File : 200_Software_Interfaces
*/
union ptentry_verbs {
        struct {
                struct {
                        uint64_t        nack                        : 6;        /* [5:0] NACK to send when this QP is in a failure state. */
                        uint64_t        reserved_7_6                : 2;        /* [7:6]  */
                        uint64_t        pd                          : 24;        /* [31:8] Protection domain of the target structures (RKey and Receive Queue) */
                        uint64_t        slid                        : 24;        /* [55:32] Source LID that must match the incoming packet using this queue pair (exact match required) */
                        uint64_t        reserved_56_56              : 1;        /* [56:56] Reserved */
                        uint64_t        enable                      : 1;        /* [57:57] This Portal Table Entry is enabled */
                        uint64_t        fc                          : 1;        /* [58:58] Indicates that flow control is enabled for this Portal Table Entry. */
                        uint64_t        bc                          : 1;        /* [59:59] must be 0 to indicate verbs over native protocol */
                        uint64_t        ni                          : 2;        /* [61:60] NI to be used for addressing the EQ Handle */
                        uint64_t        fp                          : 1;        /* [62:62] Must be 0 to indicate verbs over native protocol */
                        uint64_t        v                           : 1;        /* [63:63] Indicates whether this PT Entry is Valid. */
                };
                struct {
                        uint64_t        recvq_root                  : 16;        /* [79:64] Pointer to an ME that serves as the root of the receive queue */
                        uint64_t        tpid                        : 12;        /* [91:80] Target PID: context of the target side structures for the receive queue */
                        uint64_t        reserved_95_92              : 4;        /* [95:92] Reserved */
                        uint64_t        ipid                        : 12;        /* [107:96] Initiator PID that must match the incoming packet exactly */
                        uint64_t        reserved_111_108            : 4;        /* [111:108] Reserved */
                        uint64_t        eq_handle                   : 11;        /* [122:112] EQ Handle associated with this Portal Table Entry */
                        uint64_t        failed                      : 1;        /* [123:123] Indicates that this QP is in a failure state. Acts as if the QP is disabled. */
                        uint64_t        ud                          : 1;        /* [124:124] Indicates that this is a UD queue pair */
                        uint64_t        qp                          : 1;        /* [125:125] Indicates if this is a Queue Pair entry type. */
                        uint64_t        ot                          : 1;        /* [126:126] Indicates whether all entries on this Portal Table Entry will truncate (do not have the PTL_ME_NO_TRUNCATE option set) */
                        uint64_t        uo                          : 1;        /* [127:127] Indicates whether all entries on the priority list for this Portal Table Entry will have the PTL_ME_USE_ONCE or PTL_LE_USE_ONCE option set. */
                };
                struct {
                        uint64_t        user_id                     : 32;        /* [159:128] USER_ID that must match the incoming packet exactly.For UD, the low order 16 bits hold the PKey associated with the QP. Set these bits to 0 to disable the PKey check for this QP. Zero can be used as a disable, because earlier logic (LinkMux, then RXE2E) have confirmed that a legal PKey is in use. */
                        uint64_t        qkey                        : 32;        /* [191:160] QKey for UD Queue Pairs (used for authentication for UD only).For RC, the low order 16 bits hold the PKey associated with the QP. Set these bits to 0 to disable the PKey check for this QP. Zero can be used as a disable, because earlier logic (LinkMux, then RXE2E) have confirmed that a legal PKey is in use */
                };
                struct {
                        uint64_t        reserved_255_192            : 64;        /* [255:192] Reserved */
                };
        };
        uint64_t val[4];
};

/*
* Structure from Table titled: Counting Event Structure (Struct - ptl_ct_event_t) - 256 bits
*                  from File : 200_Software_Interfaces
*/
union ptl_ct_event {
        struct {
                struct {
                        uint64_t        success                     : 64;        /* [63:0] Count of successful events */
                };
                struct {
                        uint64_t        failure                     : 64;        /* [127:64] Count of failure events */
                };
                struct {
                        uint64_t        threshold                   : 64;        /* [191:128] Threshold associated with the triggered operation at the head of the list associated with this CT */
                };
                struct {
                        uint64_t        triggered_head              : 16;        /* [207:192] Pointer to the head of the triggered operation list. */
                        uint64_t        triggered_tail              : 16;        /* [223:208] Pointer to the tail of the triggered operation list. */
                        uint64_t        bt                          : 1;        /* [224:224] Triggered operations are blocked */
                        uint64_t        pt                          : 1;        /* [225:225] A triggered operation is pending */
                        uint64_t        ato                         : 1;        /* [226:226] A triggered operation is active in the device - this is a device managed field */
                        uint64_t        reserved_239_227            : 13;        /* [239:227] Reserved */
                        uint64_t        irq                         : 8;        /* [247:240] Interrupt vector to use for an interrupt when this CT processes an event that causes the success count to reach or exceed the threshold. The value of the IRQ can only be set at CT allocation time and cannot be changed dynamically while the CT is valid. */
                        uint64_t        reserved_251_248            : 4;        /* [251:248] Reserved */
                        uint64_t        ni                          : 2;        /* [253:252] Network interface the CT is associated with */
                        uint64_t        i                           : 1;        /* [254:254] Interrupt when this CT processes an event that causes the success count to reach or exceed the threshold. The interrupt enable bit can only be set at CT allocation time, and cannot be updated dynamically while the CT is valid. */
                        uint64_t        v                           : 1;        /* [255:255] Indicates whether the entry is valid. If invalid, this will not prevent hardware from updating the contents of the CT (eg. success/fail count) but will prevent any subsequent actions (triggered operations and interrupts). */
                };
        };
        uint64_t val[4];
};

/*
* Structure from Table titled: Event Queue Descriptor Structure (Struct - eqd_t) - 128 bits
*                  from File : 200_Software_Interfaces
*/
union eqd {
        struct {
                struct {
                        uint64_t        start                       : 45;        /* [44:0] Start address, which is required to be aligned to a 4KB page, which is also the minimum allocation unit. The memory referenced by the start address may not be swapped out of memory. Allocate on write behavior is also not permissible, since that could require a swap out of other memory to perform allocation. The physical pages backing the buffer may change, but the buffer may not swap or require other pages to swap in order to be accessed. */
                        uint64_t        reserved_45_45              : 1;        /* [45:45]  */
                        uint64_t        order                       : 5;        /* [50:46] Size of the event queue expressed as a power of 2 number of entries ranging from 2^0 (one entry) to 2^31 entries. The size of the head and tail pointer only support up to an Order value of 22. Note: Due to the nature of the event queue implementation, only (2^ORDER)-1 entries can be in use in the event queue before it is regarded as being full. The amount of memory required to be allocated for the EQ is determined by Order and SZ and must be at least 4KB. */
                        uint64_t        irq                         : 8;        /* [58:51] Interrupt vector to use for an interrupt when this EQ processes an event. */
                        uint64_t        d                           : 1;        /* [59:59] Dropped Event: an event was dropped for this event queue. This should be set by hardware whenever an event is dropped. An event is dropped (and this bit set) when there is an attempt to write to a full event queue. It should be cleared by hardware when the next event is written. That next event is written when an event write is attempted and the EQ is no longer full. That event must have the EQ Dropped bit set. */
                        uint64_t        ni                          : 2;        /* [61:60] Network interface the EQ is associated with */
                        uint64_t        i                           : 1;        /* [62:62] Indicates this EQ should generate an interrupt when an event is delivered. If I is set, an interrupt is generated for every event. */
                        uint64_t        v                           : 1;        /* [63:63] Indicates whether the descriptor is valid */
                };
                struct {
                        uint64_t        tail                        : 22;        /* [85:64] Next location to be written in the event queue. The tail is tracked based on the entry number, and ranges from 0 to (2^Order)-1. */
                        uint64_t        reserved_87_86              : 2;        /* [87:86]  */
                        uint64_t        pending_events              : 16;        /* [103:88] Number of events that are pending to this event queue. */
                        uint64_t        head                        : 22;        /* [125:104] Next location in the event queue to read by the host software. The head is tracked based on the entry number, and ranges from 0 to (2^Order)-1. When (Tail+1) % 2^Order is equal to Head, the event queue is full. */
                        uint64_t        s                           : 1;        /* [126:126] Enable Solicited Interrupts on this EQ. Used for the Verbs case. Interrupts are allowed to be generated when they are requested in the message. If S is not set, messages may not request interrupts; however, they still generate interrupts when I is set. If neither I or S is set, events never generate interrupts. */
                        uint64_t        sz                          : 1;        /* [127:127] Indicates whether entries/events in this EQ will use 64B (SZ=0) or 128B (SZ=1). Only Non-Portals events are intended to make use of 128B events. All head/tail/pending/order math is based on entry number without considering SZ. SZ is only used when calculating the corresponding host address. */
                };
        };
        uint64_t val[2];
};

/*
* Structure from Table titled: Event Queue Entry Structure at Initiator (Struct - initiator_EQEntry_t) - 512 bits
*                  from File : 200_Software_Interfaces
*/
union initiator_EQEntry {
        struct {
                struct {
                        uint64_t        reserved_35_0               : 36;        /* [35:0] Reserved */
                        uint64_t        opcode                      : 5;        /* [40:36] The low 5 bits of the opcode used in the initial request */
                        uint64_t        ls                          : 1;        /* [41:41] List that the operation was delivered to at the target */
                        uint64_t        fail_type                   : 6;        /* [47:42] The Portals Fail Type for the operation */
                        uint64_t        ptl_idx                     : 8;        /* [55:48] The Portal Table Index used for the operation */
                        uint64_t        event_kind                  : 6;        /* [61:56] The type of the event being delivered */
                        uint64_t        d                           : 1;        /* [62:62] EQ Dropped flag is set (TRUE) or not (FALSE) */
                        uint64_t        v                           : 1;        /* [63:63] Valid */
                };
                struct {
                        uint64_t        roffset                     : 57;        /* [120:64] Remote Offset: on the initiator, this is the 'actual offset' received in the Portals ACK or CTS packet. */
                        uint64_t        reserved_126_121            : 6;        /* [126:121] Reserved */
                        uint64_t        bn                          : 1;        /* [127:127] The BECN bit was set in the last response/ack received for this message. BECN is not set (set to false) for cases where it is not relevant (e.g. on events that are only local completions like a PTL_EVENT_SEND). */
                };
                struct {
                        uint64_t        rlength                     : 32;        /* [159:128] Requested Length as expressed in the TX command. In the case of a GENERAL_DMA command, this may be the number of IOVEC entries. */
                        uint64_t        mlength                     : 32;        /* [191:160] Modified Length: this is not strictly consistent with the Portals PTL_EVENT_SEND as of Portals 4.0.2; however, any mismatch can be adjusted in a Portals implementation. */
                };
                                      user_pointer_t              user_ptr;        /* [255:192] User Pointer */
                                      ptl_match_bits_t            match_bits;        /* [319:256] Match bits */
                                      ptl_hdr_data_t              hdr_data;        /* [383:320] Header Data */
                struct {
                        uint64_t        reserved_446_384            : 63;        /* [446:384] Reserved */
                        uint64_t        fn                          : 1;        /* [447:447] The FECN bit was set in the last packet to arrive for this message. BECN is not set (set to false) for cases where it is not relevant (e.g. on events that are only local completions like a PTL_EVENT_SEND). */
                };
                struct {
                        uint64_t        reserved_511_448            : 64;        /* [511:448] Reserved */
                };
        };
        uint64_t val[8];
};

/*
* Structure from Table titled: Event Queue Entry Structure at Target (Struct - target_EQEntry_t) - 512 bits
*                  from File : 200_Software_Interfaces
*/
union target_EQEntry {
        struct {
                struct {
                        uint64_t        initiator_id                : 36;        /* [35:0] The source of the message. The contents of this field change depending on NI:PTL_NONMATCHING_LOGICAL: phys_process_t (SLID/IPID)PTL_NONMATCHING_PHYSICAL: phys_process_t (SLID/IPID)PTL_MATCHING_LOGICAL: logical_process_t (SRANK)PTL_MATCHING_PHYSICAL: phys_process_t (SLID/IPID) */
                        uint64_t        atomic_op                   : 5;        /* [40:36] The incoming atomic operation type, if applicable */
                        uint64_t        pt                          : 1;        /* [41:41] The port that the message arrived on. (DEPRECATED) */
                        uint64_t        fail_type                   : 6;        /* [47:42] The Portals Fail Type for the operation */
                        uint64_t        ptl_idx                     : 8;        /* [55:48] The Portal Table Index used for the operation */
                        uint64_t        event_kind                  : 6;        /* [61:56] The type of the event being delivered */
                        uint64_t        d                           : 1;        /* [62:62] EQ Dropped flag is set (TRUE) or not (FALSE). Indicates whether any events were dropped (to prevent overflow) between the most recently delivered event and this event. */
                        uint64_t        v                           : 1;        /* [63:63] Valid */
                };
                struct {
                        uint64_t        roffset                     : 57;        /* [120:64] Remote Offset: on the target, this is the requested offset that arrived in the initial request (e.g. in the RTS) */
                        uint64_t        atomic_dtype                : 6;        /* [126:121] Atomic Datatype, if applicable */
                        uint64_t        f                           : 1;        /* [127:127] This event was generated by an operation on the fast path (TRUE) or not (FALSE). This indicates that the user pointer is held in a separate per-PTEntry structure in software and cannot be interpreted from the event format. */
                };
                struct {
                        uint64_t        rlength                     : 32;        /* [159:128] Requested Length. For fast path processing, on non-buffered (>64B) Get events, this is set to MLENGTH or MLENGTH+1. In that case it does not accurately indicate the requested length but will indicate whether the request was truncated. */
                        uint64_t        mlength                     : 32;        /* [191:160] Modified Length */
                };
                                      user_pointer_t              user_ptr;        /* [255:192] User Pointer from the ME/LE/OE targeted. For fast path processing this is set to 0, in conjunction with setting the F bit. For connection requests, this field contains the TC in the lower two bits (the rest are zero). */
                                      ptl_match_bits_t            match_bits;        /* [319:256] Match bits, if applicable */
                                      ptl_hdr_data_t              hdr_data;        /* [383:320] Header data. The Portals protocol does not require header data to be delivered for Gets. However, FXR will deliver header data for all Gets, except non-buffered (>64B) fast path Gets. */
                struct {
                        uint64_t        start                       : 57;        /* [440:384] This field typically contains the Start address where the data was deposited; however, when the ME/LE sets the IOVEC option, the actual offset will be placed in this field. In the rendezvous event case, Start can be calculated from the actual offset and start in the ME. */
                        uint64_t        reserved_446_441            : 6;        /* [446:441] Reserved */
                        uint64_t        fn                          : 1;        /* [447:447] The FECN bit was set in the last packet to arrive for this message. The FECN bit in the target event should not be set if it would convey particularly stale information. Specifically, it should not be set for events generated from unexpected headers or non-buffered Gets. */
                };
                struct {
                        uint64_t        user_id                     : 32;        /* [479:448] User ID (will get some new name) associated with the incoming packet */
                        uint64_t        reserved_511_480            : 32;        /* [511:480] Reserved */
                };
        };
        uint64_t val[8];
};

/*
* Structure from Table titled: Event Queue Entry Structure for PT Read(Struct - ptread_EQEntry_t) - 512 bits
*                  from File : 200_Software_Interfaces
*/
union ptread_EQEntry {
        struct {
                struct {
                        uint64_t        reserved_40_0               : 41;        /* [40:0] Reserved */
                        uint64_t        pt                          : 1;        /* [41:41] Deprecated: The port that the message arrived on. */
                        uint64_t        fail_type                   : 6;        /* [47:42] The Portals Fail Type for the operation */
                        uint64_t        ptl_idx                     : 8;        /* [55:48] The Portal Table Index used for the operation */
                        uint64_t        event_kind                  : 6;        /* [61:56] The type of the event being delivered */
                        uint64_t        d                           : 1;        /* [62:62] EQ Dropped flag is set (TRUE) or not (FALSE) */
                        uint64_t        v                           : 1;        /* [63:63] Valid */
                };
                struct {
                        uint64_t        pt_data0                    : 64;        /* [127:64] Low 64 bits of the PT */
                };
                struct {
                        uint64_t        pt_data1                    : 64;        /* [191:128] Bits 64-127 of the PT */
                };
                                      user_pointer_t              user_ptr;        /* [255:192] User Pointer from the PT_READ command. */
                struct {
                        uint64_t        reserved_511_256_0          : 64;        /* [511:256] Reserved */
                };
                struct {
                        uint64_t        reserved_511_256_1          : 64;        /* [511:256] Reserved */
                };
                struct {
                        uint64_t        reserved_511_256_2          : 64;        /* [511:256] Reserved */
                };
                struct {
                        uint64_t        reserved_511_256_3          : 64;        /* [511:256] Reserved */
                };
        };
        uint64_t val[8];
};

/*
* Structure from Table titled: Event Queue Entry Structure for ME Read (Struct - meread_EQEntry_t) - 512 bits
*                  from File : 200_Software_Interfaces
*/
union meread_EQEntry {
        struct {
                struct {
                        uint64_t        initiator_id                : 36;        /* [35:0] The source of the message. The contents of this field change depending on NI:PTL_NONMATCHING_LOGICAL: phys_process_t (SLID/IPID)PTL_NONMATCHING_PHYSICAL: phys_process_t (SLID/IPID)PTL_MATCHING_LOGICAL: logical_process_t (SRANK)PTL_MATCHING_PHYSICAL: phys_process_t (SLID/IPID) */
                        uint64_t        reserved_40_36              : 5;        /* [40:36]  */
                        uint64_t        pt                          : 1;        /* [41:41] Deprecated: The port that the message arrived on. */
                        uint64_t        fail_type                   : 6;        /* [47:42] The Portals Fail Type for the operation */
                        uint64_t        ptl_idx                     : 8;        /* [55:48] The Portal Table Index used for the operation */
                        uint64_t        event_kind                  : 6;        /* [61:56] The type of the event being delivered */
                        uint64_t        d                           : 1;        /* [62:62] EQ Dropped flag is set (TRUE) or not (FALSE) */
                        uint64_t        v                           : 1;        /* [63:63] Valid */
                };
                struct {
                        uint64_t        length                      : 57;        /* [120:64] Length of the ME being read */
                        uint64_t        reserved_127_121            : 7;        /* [127:121] Reserved */
                };
                struct {
                        uint64_t        local_offset                : 40;        /* [167:128] Storage for the locally managed offset in a locally managed list entry */
                        uint64_t        min_free                    : 24;        /* [191:168] Minimum buffer space that must be free to prevent the item from unlinking */
                };
                                      user_pointer_t              user_ptr;        /* [255:192] User Pointer from the ME/LE/OE targeted. For fast path processing this is set to 0, in conjunction with setting the F bit. For connection requests, this field contains the TC in the lower two bits (the rest are zero). */
                                      ptl_match_bits_t            match_bits;        /* [319:256] Match bits */
                struct {
                        uint64_t        previous                    : 16;        /* [335:320] Pointer to the previous entry */
                        uint64_t        next                        : 16;        /* [351:336] Pointer to the next entry */
                        uint64_t        reserved_355_352            : 4;        /* [355:352]  */
                        uint64_t        ct_handle                   : 11;        /* [366:356] CT Handle from the ME being read */
                        uint64_t        reserved_367_367            : 1;        /* [367:367]  */
                        uint64_t        ref_count                   : 16;        /* [383:368] Ref count or unexpected ref count from the ME being read */
                };
                struct {
                        uint64_t        start                       : 57;        /* [440:384] This field typically contains the Start address where the data was deposited; however, when the ME/LE sets the IOVEC option, the actual offset will be placed in this field. */
                        uint64_t        reserved_442_441            : 2;        /* [442:441] Reserved */
                        uint64_t        o                           : 1;        /* [443:443] Item is an overflow list entry */
                        uint64_t        f                           : 1;        /* [444:444] This item needs to be freed when it is no longer in use. */
                        uint64_t        ni                          : 2;        /* [446:445] Network Interface used for this operation. */
                        uint64_t        me_v                        : 1;        /* [447:447] The ME/LE/Unexpected header being read is valid. */
                };
                struct {
                        uint64_t        user_id                     : 32;        /* [479:448] User ID (will get some new name) associated with the incoming packet */
                        uint64_t        me_options                  : 20;        /* [499:480] ME / LE Options from the ME being read */
                        uint64_t        reserved_500_500            : 1;        /* [500:500] Reserved */
                        uint64_t        msg_status                  : 3;        /* [503:501] Message status as communicated:1) Internally from OTR to RXHP in the reference count decrement2) Across the wire in an Event message */
                        uint64_t        ptl_idx2                    : 8;        /* [511:504] Duplicate of Portal Table Index for the command and/or ME/LE due to the nature of the copy performed by hardware */
                };
        };
        uint64_t val[8];
};

/*
* Structure from Table titled: Receive Header Flags (RHF) structure for NonPortals Events (Struct - rhf_t) - 64 bits
*                  from File : 200_Software_Interfaces
*/
union rhf {
        struct {
                uint64_t        pktlen                      : 12;        /* [11:0] Packet length in DWORDs (4B multiples) */
                uint64_t        egrindex                    : 11;        /* [22:12] If an eager buffer is used (UseEgrBfr is set), this field specifies the index to the eager array that was allocated for the payload of this eager packet. If an eager buffer is not used (UseEgrBfr is clear), including all expected packets, this field specifies the index of the most recent eager array entry that was previously allocated for this receive context. This is the same EgrIndex value as the most recently delivered packet on that context that had the UseEgrBfr set. In the case where no eager buffer entries have yet been allocated since this receive context was enabled, the value will be 0. */
                uint64_t        blk_egr_full                : 1;        /* [23:23] Blocked Eager Full: the Eager queue is full and the input has been blocked. */
                uint64_t        egroffset                   : 16;        /* [39:24] If the eager buffer is used (UseEgrBfr is set) this field specifies the offset of the payload in the eager buffer specified by EgrIndex. The offset is in multiples of 64B, and packing of payload into the eager buffer is performed at 64B granularity by setting the PTL_MAY_ALIGN option in the ME. The ME buffer Start address must be 64B aligned if the PTL_MAY_ALIGN option is used, or else the behavior is undefined.Note that packet payload will always be contained in one eager buffer entry, i.e. never spans across two eager buffers. The size of this field is 16 bits allowing 22 bits (4MB) to be addressed in 64B multiples. */
                uint64_t        payload_suppress            : 1;        /* [40:40] Payload was suppressed due to an error. Payload suppressing errors include:1) An Invalid Flow (valid bit set to 0) */
                uint64_t        blk_rhq_full                : 1;        /* [41:41] Blocked RHQ Full: The receive header queue is full and the input has been blocked. */
                uint64_t        rterr                       : 3;        /* [44:42] RcvTypeErr, as defined in Table 22-159 */
                uint64_t        te                          : 1;        /* [45:45] TID Error */
                uint64_t        le                          : 1;        /* [46:46] Set if the packet does not fit the buffer and is truncated. */
                uint64_t        ie                          : 1;        /* [47:47] ICRC Error: If an ICRC error occurs, and the (untrusted) packet maps to a valid eager-style non-Portals buffer (including bypass and RSM), the packet is delivered and the RHF.IE bit is set to indicate the error. Software is expected to discard these packets. For packets that map to an expected non-Portals buffer, the packet is dropped in hardware. */
                uint64_t        hdrlen                      : 5;        /* [52:48] Length of the header in DWords. */
                uint64_t        kl                          : 1;        /* [53:53] This is set if the received packet is a KDETH packet whose actual length is too short to contain the IB headers, the context's KDETH size and ICRC. There are two cases:For IBA Local KDETH packets that are too short to contain LRH + BTH (2 DW + 3 DW), the context's KDETH size (RcvHdrSize in DWs) plus ICRC (1 DW). i.e. shorter than 6 DW plus RcvHdrSize.For IBA Global KDETH packets that are too short to contain LRH + GRH + BTH (2 DW + 10DW + 3 DW), the context's KDETH size (RcvHdrSize in DWs) plus ICRC (1 DW). i.e. shorter than 16 DW plus RcvHdrSize. This error can occur only for packets delivered as type 0 or type 1. The minimum supported value for RcvHdrSize is 2 DW. */
                uint64_t        sc4                         : 1;        /* [54:54] SC[4]: fifth bit of the SC, especially for 9B packets */
                uint64_t        u                           : 1;        /* [55:55] If set, the eager buffer is used. If clear, the eager buffer is not used (the eager packet fits entirely in the header queue entry) or this is not an eager packet. The bit will be clear for expected receive packets. */
                uint64_t        event_kind                  : 6;        /* [61:56] The type of the event being delivered - a single encoding space is used across Gen1 and Gen2 packet types. */
                uint64_t        d                           : 1;        /* [62:62] EQ dropped flag is set */
                uint64_t        v                           : 1;        /* [63:63] Valid */
        };
        uint64_t val;
};

/*
* Structure from Table titled: List Entry (Struct - rx_le_t) - 1024 bits
*                  from File : 200_Software_Interfaces
*/
union rx_le {
        struct {
                struct {
                        uint64_t        reserved_63_0               : 64;        /* [63:0] Reserved */
                };
                struct {
                        uint64_t        reserved_127_64             : 64;        /* [127:64] Reserved */
                };
                union                 rx_c1                       c;        /* [191:128]  */
                union                 rx_d1                       d;        /* [255:192]  */
                struct {
                        uint64_t        reserved_319_256            : 64;        /* [319:256] Reserved */
                };
                union                 rx_f1                       f;        /* [383:320]  */
                                      user_pointer_t              g;        /* [447:384] User pointer */
                union                 rx_j                        j;        /* [511:448]  */
                union                 rx_k                        k;        /* [575:512]  */
                struct {
                        uint64_t        reserved_1023_576_0         : 64;        /* [1023:576]  */
                };
                struct {
                        uint64_t        reserved_1023_576_1         : 64;        /* [1023:576]  */
                };
                struct {
                        uint64_t        reserved_1023_576_2         : 64;        /* [1023:576]  */
                };
                struct {
                        uint64_t        reserved_1023_576_3         : 64;        /* [1023:576]  */
                };
                struct {
                        uint64_t        reserved_1023_576_4         : 64;        /* [1023:576]  */
                };
                struct {
                        uint64_t        reserved_1023_576_5         : 64;        /* [1023:576]  */
                };
                struct {
                        uint64_t        reserved_1023_576_6         : 64;        /* [1023:576]  */
                };
        };
        uint64_t val[16];
};

/*
* Structure from Table titled: Host List Entry (Struct - host_rx_le_t) - 1024 bits
*                  from File : 200_Software_Interfaces
*/
union host_rx_le {
        struct {
                struct {
                        uint64_t        reserved_63_0               : 64;        /* [63:0] Reserved */
                };
                struct {
                        uint64_t        reserved_127_64             : 64;        /* [127:64] Reserved */
                };
                union                 rx_c1                       c;        /* [191:128]  */
                union                 rx_d1                       d;        /* [255:192]  */
                struct {
                        uint64_t        reserved_575_256_0          : 64;        /* [575:256] Reserved */
                };
                struct {
                        uint64_t        reserved_575_256_1          : 64;        /* [575:256] Reserved */
                };
                struct {
                        uint64_t        reserved_575_256_2          : 64;        /* [575:256] Reserved */
                };
                struct {
                        uint64_t        reserved_575_256_3          : 64;        /* [575:256] Reserved */
                };
                struct {
                        uint64_t        reserved_575_256_4          : 64;        /* [575:256] Reserved */
                };
                union                 rx_f1                       f;        /* [639:576]  */
                                      user_pointer_t              g;        /* [703:640] User pointer */
                union                 rx_j                        j;        /* [767:704]  */
                union                 rx_k1                       k;        /* [831:768]  */
                struct {
                        uint64_t        reserved_1023_832_0         : 64;        /* [1023:832]  */
                };
                struct {
                        uint64_t        reserved_1023_832_1         : 64;        /* [1023:832]  */
                };
                struct {
                        uint64_t        reserved_1023_832_2         : 64;        /* [1023:832]  */
                };
        };
        uint64_t val[16];
};

/*
* Structure from Table titled: Priority List Entry ME (Struct - rx_priority_me_t) - 1024 bits
*                  from File : 200_Software_Interfaces
*/
union rx_priority_me {
        struct {
                                      ptl_match_bits_t            match_bits;        /* [63:0] Match bits. Matching criteria for the incoming match bits */
                                      ptl_match_bits_t            mask_bits;        /* [127:64] Mask bits. Used to mask out insignificant bits in the incoming match bits */
                union                 rx_c1                       c;        /* [191:128]  */
                union                 rx_d1                       d;        /* [255:192]  */
                union                 rx_e1                       e;        /* [319:256]  */
                union                 rx_f1                       f;        /* [383:320]  */
                                      user_pointer_t              g;        /* [447:384] User pointer */
                union                 rx_j                        j;        /* [511:448]  */
                union                 rx_k                        k;        /* [575:512]  */
                struct {
                        uint64_t        reserved_1023_576_0         : 64;        /* [1023:576]  */
                };
                struct {
                        uint64_t        reserved_1023_576_1         : 64;        /* [1023:576]  */
                };
                struct {
                        uint64_t        reserved_1023_576_2         : 64;        /* [1023:576]  */
                };
                struct {
                        uint64_t        reserved_1023_576_3         : 64;        /* [1023:576]  */
                };
                struct {
                        uint64_t        reserved_1023_576_4         : 64;        /* [1023:576]  */
                };
                struct {
                        uint64_t        reserved_1023_576_5         : 64;        /* [1023:576]  */
                };
                struct {
                        uint64_t        reserved_1023_576_6         : 64;        /* [1023:576]  */
                };
        };
        uint64_t val[16];
};

/*
* Structure from Table titled: Host Priority List Entry ME (Struct - host_rx_priority_me_t) - 1024 bits
*                  from File : 200_Software_Interfaces
*/
union host_rx_priority_me {
        struct {
                                      ptl_match_bits_t            match_bits;        /* [63:0] Match bits. Matching criteria for the incoming match bits */
                                      ptl_match_bits_t            mask_bits;        /* [127:64] Mask bits. Used to mask out insignificant bits in the incoming match bits */
                union                 rx_c1                       c;        /* [191:128]  */
                union                 rx_d1                       d;        /* [255:192]  */
                struct {
                        uint64_t        reserved_511_256_0          : 64;        /* [511:256]  */
                };
                struct {
                        uint64_t        reserved_511_256_1          : 64;        /* [511:256]  */
                };
                struct {
                        uint64_t        reserved_511_256_2          : 64;        /* [511:256]  */
                };
                struct {
                        uint64_t        reserved_511_256_3          : 64;        /* [511:256]  */
                };
                union                 rx_e1                       e;        /* [575:512]  */
                union                 rx_f1                       f;        /* [639:576]  */
                                      user_pointer_t              g;        /* [703:640] User pointer */
                union                 rx_j                        j;        /* [767:704]  */
                union                 rx_k1                       k;        /* [831:768]  */
                struct {
                        uint64_t        reserved_1023_832_0         : 64;        /* [1023:832]  */
                };
                struct {
                        uint64_t        reserved_1023_832_1         : 64;        /* [1023:832]  */
                };
                struct {
                        uint64_t        reserved_1023_832_2         : 64;        /* [1023:832]  */
                };
        };
        uint64_t val[16];
};

/*
* Structure from Table titled: Overflow List Entry ME (Struct - rx_overflow_me_t) - 1024 bits
*                  from File : 200_Software_Interfaces
*/
union rx_overflow_me {
        struct {
                                      ptl_match_bits_t            match_bits;        /* [63:0] Match bits. Matching criteria for the incoming match bits */
                                      ptl_match_bits_t            mask_bits;        /* [127:64] Mask bits. Used to mask out insignificant bits in the incoming match bits */
                union                 rx_c1                       c;        /* [191:128]  */
                union                 rx_d1                       d;        /* [255:192]  */
                union                 rx_e1                       e;        /* [319:256]  */
                union                 rx_f2                       f;        /* [383:320]  */
                                      user_pointer_t              g;        /* [447:384] User pointer */
                union                 rx_j                        j;        /* [511:448]  */
                union                 rx_k                        k;        /* [575:512]  */
                struct {
                        uint64_t        reserved_1023_576_0         : 64;        /* [1023:576]  */
                };
                struct {
                        uint64_t        reserved_1023_576_1         : 64;        /* [1023:576]  */
                };
                struct {
                        uint64_t        reserved_1023_576_2         : 64;        /* [1023:576]  */
                };
                struct {
                        uint64_t        reserved_1023_576_3         : 64;        /* [1023:576]  */
                };
                struct {
                        uint64_t        reserved_1023_576_4         : 64;        /* [1023:576]  */
                };
                struct {
                        uint64_t        reserved_1023_576_5         : 64;        /* [1023:576]  */
                };
                struct {
                        uint64_t        reserved_1023_576_6         : 64;        /* [1023:576]  */
                };
        };
        uint64_t val[16];
};

/*
* Structure from Table titled: Host Overflow List Entry ME (Struct - host_rx_overflow_me_t) - 1024 bits
*                  from File : 200_Software_Interfaces
*/
union host_rx_overflow_me {
        struct {
                                      ptl_match_bits_t            match_bits;        /* [63:0] Match bits. Matching criteria for the incoming match bits */
                                      ptl_match_bits_t            mask_bits;        /* [127:64] Mask bits. Used to mask out insignificant bits in the incoming match bits */
                union                 rx_c1                       c;        /* [191:128]  */
                union                 rx_d1                       d;        /* [255:192]  */
                struct {
                        uint64_t        reserved_511_256_0          : 64;        /* [511:256]  */
                };
                struct {
                        uint64_t        reserved_511_256_1          : 64;        /* [511:256]  */
                };
                struct {
                        uint64_t        reserved_511_256_2          : 64;        /* [511:256]  */
                };
                struct {
                        uint64_t        reserved_511_256_3          : 64;        /* [511:256]  */
                };
                union                 rx_e1                       e;        /* [575:512]  */
                union                 rx_f2                       f;        /* [639:576]  */
                                      user_pointer_t              g;        /* [703:640] User pointer */
                union                 rx_j                        j;        /* [767:704]  */
                union                 rx_k1                       k;        /* [831:768]  */
                struct {
                        uint64_t        reserved_1023_832_0         : 64;        /* [1023:832]  */
                };
                struct {
                        uint64_t        reserved_1023_832_1         : 64;        /* [1023:832]  */
                };
                struct {
                        uint64_t        reserved_1023_832_2         : 64;        /* [1023:832]  */
                };
        };
        uint64_t val[16];
};

/*
* Structure from Table titled: Unexpected Header List Entry / Rendezvous Tracking Entry  (Struct - rx_uh_rts_get_le_t) - 1024 bits
*                  from File : 200_Software_Interfaces
*/
union rx_uh_rts_get_le {
        struct {
                                      ptl_match_bits_t            match_bits;        /* [63:0] Match bits */
                                      ptl_hdr_data_t              hdr_data;        /* [127:64] Header data */
                union                 rx_c2                       c;        /* [191:128]  */
                union                 rx_d2                       d;        /* [255:192]  */
                union                 rx_e2                       e;        /* [319:256]  */
                union                 rx_f3                       f;        /* [383:320]  */
                union                 rx_h                        h;        /* [447:384]  */
                union                 rx_j                        j;        /* [511:448] Note: the start address in this QWORD contains the actual offset when an IOVEC is used. */
                union                 rx_k                        k;        /* [575:512]  */
                struct {
                        uint64_t        reserved_1023_576_0         : 64;        /* [1023:576]  */
                };
                struct {
                        uint64_t        reserved_1023_576_1         : 64;        /* [1023:576]  */
                };
                struct {
                        uint64_t        reserved_1023_576_2         : 64;        /* [1023:576]  */
                };
                struct {
                        uint64_t        reserved_1023_576_3         : 64;        /* [1023:576]  */
                };
                struct {
                        uint64_t        reserved_1023_576_4         : 64;        /* [1023:576]  */
                };
                struct {
                        uint64_t        reserved_1023_576_5         : 64;        /* [1023:576]  */
                };
                struct {
                        uint64_t        reserved_1023_576_6         : 64;        /* [1023:576]  */
                };
        };
        uint64_t val[16];
};

/*
* Structure from Table titled: Host Unexpected Header List Entry / Rendezvous Tracking Entry / Get Tracking Entry (Struct - host_rx_uh_rts_get_le_t) - 1024 bits
*                  from File : 200_Software_Interfaces
*/
union host_rx_uh_rts_get_le {
        struct {
                                      ptl_match_bits_t            match_bits;        /* [63:0] Match bits */
                                      ptl_hdr_data_t              hdr_data;        /* [127:64] Header data */
                union                 rx_c2                       c;        /* [191:128]  */
                union                 rx_d2                       d;        /* [255:192]  */
                struct {
                        uint64_t        reserved_511_256_0          : 64;        /* [511:256]  */
                };
                struct {
                        uint64_t        reserved_511_256_1          : 64;        /* [511:256]  */
                };
                struct {
                        uint64_t        reserved_511_256_2          : 64;        /* [511:256]  */
                };
                struct {
                        uint64_t        reserved_511_256_3          : 64;        /* [511:256]  */
                };
                union                 rx_e2                       e;        /* [575:512]  */
                union                 rx_f3                       f;        /* [639:576]  */
                union                 rx_h                        h;        /* [703:640]  */
                union                 rx_j                        j;        /* [767:704] Note: the start address in this QWORD contains the actual offset when an IOVEC is used. */
                union                 rx_k1                       k;        /* [831:768]  */
                struct {
                        uint64_t        reserved_1023_832_0         : 64;        /* [1023:832]  */
                };
                struct {
                        uint64_t        reserved_1023_832_1         : 64;        /* [1023:832]  */
                };
                struct {
                        uint64_t        reserved_1023_832_2         : 64;        /* [1023:832]  */
                };
        };
        uint64_t val[16];
};

/*
* Structure from Table titled: Priority List Entry ME (Struct - rx_verbs_mreg_t) - 1024 bits
*                  from File : 200_Software_Interfaces
*/
union rx_verbs_mreg {
        struct {
                                      ptl_match_bits_t            match_bits;        /* [63:0] Match bits. Matching criteria for the incoming match bits */
                                      ptl_match_bits_t            mask_bits;        /* [127:64] Mask bits. Used to mask out insignificant bits in the incoming match bits */
                union                 rx_c1                       c;        /* [191:128]  */
                union                 rx_d1                       d;        /* [255:192]  */
                union                 rx_e6                       e;        /* [319:256]  */
                union                 rx_f1                       f;        /* [383:320]  */
                                      user_pointer_t              g;        /* [447:384] User pointer */
                union                 rx_j                        j;        /* [511:448]  */
                union                 rx_k                        k;        /* [575:512]  */
                struct {
                        uint64_t        reserved_1023_576_0         : 64;        /* [1023:576]  */
                };
                struct {
                        uint64_t        reserved_1023_576_1         : 64;        /* [1023:576]  */
                };
                struct {
                        uint64_t        reserved_1023_576_2         : 64;        /* [1023:576]  */
                };
                struct {
                        uint64_t        reserved_1023_576_3         : 64;        /* [1023:576]  */
                };
                struct {
                        uint64_t        reserved_1023_576_4         : 64;        /* [1023:576]  */
                };
                struct {
                        uint64_t        reserved_1023_576_5         : 64;        /* [1023:576]  */
                };
                struct {
                        uint64_t        reserved_1023_576_6         : 64;        /* [1023:576]  */
                };
        };
        uint64_t val[16];
};

/*
* Structure from Table titled: Host Priority List Entry ME (Struct - host_rx_verbs_mreg_t) - 1024 bits
*                  from File : 200_Software_Interfaces
*/
union host_rx_verbs_mreg {
        struct {
                                      ptl_match_bits_t            match_bits;        /* [63:0] Match bits. Matching criteria for the incoming match bits */
                                      ptl_match_bits_t            mask_bits;        /* [127:64] Mask bits. Used to mask out insignificant bits in the incoming match bits */
                union                 rx_c1                       c;        /* [191:128]  */
                union                 rx_d1                       d;        /* [255:192]  */
                struct {
                        uint64_t        reserved_511_256_0          : 64;        /* [511:256]  */
                };
                struct {
                        uint64_t        reserved_511_256_1          : 64;        /* [511:256]  */
                };
                struct {
                        uint64_t        reserved_511_256_2          : 64;        /* [511:256]  */
                };
                struct {
                        uint64_t        reserved_511_256_3          : 64;        /* [511:256]  */
                };
                union                 rx_e6                       e;        /* [575:512]  */
                union                 rx_f1                       f;        /* [639:576]  */
                                      user_pointer_t              g;        /* [703:640] User pointer */
                union                 rx_j                        j;        /* [767:704]  */
                union                 rx_k1                       k;        /* [831:768]  */
                struct {
                        uint64_t        reserved_1023_832_0         : 64;        /* [1023:832]  */
                };
                struct {
                        uint64_t        reserved_1023_832_1         : 64;        /* [1023:832]  */
                };
                struct {
                        uint64_t        reserved_1023_832_2         : 64;        /* [1023:832]  */
                };
        };
        uint64_t val[16];
};

/*
* Structure from Table titled: Transmit Command Type Modified: B1 flit (Struct - tx_cq_b1_omb_t) - 64 bits
*                  from File : 140_OutstandingRequest_and_Reliability
*/
union tx_cq_b1_omb {
        struct {
                uint64_t        mctc                        : 4;        /* [3:0] OTR Message Class / Traffic Class */
                uint64_t        reserved_10_4               : 7;        /* [10:4] Reserved */
                uint64_t        auth_idx                    : 3;        /* [13:11] Authentication index used for populating the SRANK and User ID fields */
                uint64_t        slid_low                    : 2;        /* [15:14] Low 2 bits of the SLID to use for this operation */
                uint64_t        pkey                        : 16;        /* [31:16] PKEY for this message */
                uint64_t        msg_id                      : 16;        /* [47:32] Message Identifier */
                uint64_t        reserved_53_48              : 6;        /* [53:48] Reserved */
                uint64_t        hd                          : 1;        /* [54:54] Indicates whether header data is included in this message or is zero. */
                uint64_t        pr                          : 1;        /* [55:55] Indicates the privilege level of the corresponding command queue from which the command originated. */
                uint64_t        md_options                  : 8;        /* [63:56] Options from the MD, which control things like IOVECs and event posting. */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Transmit Command Type Portals Modified: C flit (Struct - tx_cq_c_omb_t) - 64 bits
*                  from File : 140_OutstandingRequest_and_Reliability
*/
union tx_cq_c_omb {
        struct {
                uint64_t        user_id                     : 32;        /* [31:0] The user identifier associated with the process that initiated the packet. */
                uint64_t        srank                       : 32;        /* [63:32] The rank number of the source of the packet. */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Transmit Command Type non-Portals Modified: C flit (Struct - tx_cq_c_gen1_omb_t) - 64 bits
*                  from File : 140_OutstandingRequest_and_Reliability
*/
union tx_cq_c_gen1_omb {
        struct {
                uint64_t        mctc                        : 4;        /* [3:0] OTR Message Class / Traffic Class */
                uint64_t        reserved_31_4               : 28;        /* [31:4] Reserved */
                uint64_t        msg_id                      : 16;        /* [47:32] Message Identifier */
                uint64_t        reserved_54_48              : 7;        /* [54:48] Reserved */
                uint64_t        pr                          : 1;        /* [55:55] Indicates the privilege level of the corresponding command queue from which the command originated. */
                uint64_t        reserved_63_56              : 8;        /* [63:56] Reserved */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Pending Rendezvous Operations (Struct - pend_rend_t) - 96 bits
*                  from File : 140_OutstandingRequest_and_Reliability
*/
union pend_rend {
        struct {
                struct {
                        uint64_t        head_time                   : 32;        /* [31:0] Time associated with the head of the list */
                        uint64_t        tail_time                   : 32;        /* [63:32] Time associated with the tail of the list */
                };
                struct {
                        uint64_t        head_p                      : 16;        /* [79:64] Pointer to the head of the list */
                        uint64_t        tail_p                      : 16;        /* [95:80] Pointer to the tail of the list */
                } __attribute__ ((__packed__));
        } __attribute__ ((__packed__));
        uint64_t val[2];
};

/*
* Structure from Table titled: OMB Type: A flit (Struct - omb_a_t) - 64 bits
*                  from File : 140_OutstandingRequest_and_Reliability
*/
union omb_a {
        struct {
                uint64_t        dlid                        : 24;        /* [23:0] Destination LID */
                uint64_t        clength                     : 5;        /* [28:24] Command length in OMB */
                uint64_t        reserved_31_29              : 3;        /* [31:29] Reserved */
                uint64_t        slid_low                    : 2;        /* [33:32] Two low order bits of SLID to use. Used for indexing local sequence number table and for selecting outgoing SLID. */
                uint64_t        ctype                       : 4;        /* [37:34] Transmit command type */
                uint64_t        sh                          : 1;        /* [38:38] Indicates if software allows this buffer entry to use the small header */
                uint64_t        becn                        : 1;        /* [39:39] Indicates if the backward explicit congestion notification is set. Must be stored as zero.Editor's Note: this should have been a type becn_t, but I screwed up. Not changing it to reduce RTL churn. */
                uint64_t        sl                          : 5;        /* [44:40] Service level associated with this request */
                uint64_t        rc                          : 3;        /* [47:45] Route control associated with this request */
                uint64_t        ptl_idx                     : 8;        /* [55:48] Portal Table Index for the command */
                uint64_t        opcode                      : 7;        /* [62:56] Opcode used for the L4 */
                uint64_t        pt                          : 1;        /* [63:63] Indicates the outgoing port to use. DEPRECATED */
        };
        uint64_t val;
};

/*
* Structure from Table titled: OMB Type: B flit (Struct - omb_b_t) - 64 bits
*                  from File : 140_OutstandingRequest_and_Reliability
*/
union omb_b {
        struct {
                uint64_t        mdhandle                    : 11;        /* [10:0] Memory Descriptor Handle used for this request. The meaning of the contents of this field are opaque, since it is only used for canceling a request. */
                uint64_t        mctc                        : 4;        /* [14:11] Message class and traffic class */
                uint64_t        reserved_15_15              : 1;        /* [15:15] Reserved */
                uint64_t        pkey                        : 16;        /* [31:16] Partition key provided by the command */
                uint64_t        eqhandle                    : 11;        /* [42:32] Event Queue where events are posted for this request */
                uint64_t        cthandle                    : 11;        /* [53:43] Counting Event where events are posted for this request */
                uint64_t        hd                          : 1;        /* [54:54] Indicates if header is included in this message (1) or is zero (0). */
                uint64_t        pr                          : 1;        /* [55:55] Indicates the privilege level of the operation */
                uint64_t        mdoptions                   : 8;        /* [63:56] Memory Descriptor Options: describes options for how this request is handled, including controlling which events are posted. */
        };
        uint64_t val;
};

/*
* Structure from Table titled: OMB Type: D flit (Struct - omb_d_t) - 64 bits
*                  from File : 140_OutstandingRequest_and_Reliability
*/
union omb_d {
        struct {
                uint64_t        user_id                     : 32;        /* [31:0] User ID used with this message */
                uint64_t        srank                       : 32;        /* [63:32] SRANK used for this message */
        };
        uint64_t val;
};

/*
* Structure from Table titled: OMB Type: H1 flit (Struct - omb_h1_t) - 64 bits
*                  from File : 140_OutstandingRequest_and_Reliability
*/
union omb_h1 {
        struct {
                uint64_t        payload                     : 32;        /* [31:0] Last 0 to 4 bytes of payload plus any pad bytes needed to end on this boundary. */
                uint64_t        ni                          : 2;        /* [33:32] The NI of the original request - added to enable posting the event to the correct event queue during cancellation scenarios. */
                uint64_t        data_ptr                    : 16;        /* [49:34] Pointer to the second OMB entry that is part of this operation. */
                uint64_t        status                      : 6;        /* [55:50] Status of this operation, including capturing error conditions received from the target. Used as part of the event posting (accumulates errors for later event posting). Associated with the ACK or REPLY events */
                uint64_t        v                           : 1;        /* [56:56] Indicates if this entry is valid */
                uint64_t        t                           : 1;        /* [57:57] Type of the entry */
                uint64_t        c                           : 1;        /* [58:58] Cancelled: indicates if the message associated with this entry has been canceled. */
                uint64_t        ack_req                     : 2;        /* [60:59] Acknowledgement type requested */
                uint64_t        buff_state                  : 3;        /* [63:61] State of the current buffer */
        };
        uint64_t val;
};

/*
* Structure from Table titled: OMB Type: H2 flit (Struct - omb_h2_t) - 64 bits
*                  from File : 140_OutstandingRequest_and_Reliability
*/
union omb_h2 {
        struct {
                uint64_t        completion_count            : 24;        /* [23:0] Number of packets remaining to be transferred for a rendezvous operation. Initialized to the total number of packets to transfer and decremented. */
                uint64_t        rfs                         : 3;        /* [26:24] RFS for a rendezvous operation (only used for rendezvous) */
                uint64_t        reserved_31_27              : 5;        /* [31:27]  */
                uint64_t        ni                          : 2;        /* [33:32] The NI of the original request - added to enable posting the event to the correct event queue during cancellation scenarios. */
                uint64_t        data_ptr                    : 16;        /* [49:34] Pointer to the second OMB entry that is part of this operation. */
                uint64_t        status                      : 6;        /* [55:50] Status of this entry, including capturing error conditions associated with the local operation. Used as part of the event posting (accumulates errors for later event posting). */
                uint64_t        v                           : 1;        /* [56:56] Indicates if this entry is valid */
                uint64_t        t                           : 1;        /* [57:57] Type of the entry */
                uint64_t        c                           : 1;        /* [58:58] Cancelled: indicates if the message associated with this entry has been canceled. */
                uint64_t        ack_req                     : 2;        /* [60:59] Acknowledgement type requested */
                uint64_t        buff_state                  : 3;        /* [63:61] State of the current buffer */
        };
        uint64_t val;
};

/*
* Structure from Table titled: OMB Type: H3 flit (Struct - omb_h3_t) - 64 bits
*                  from File : 140_OutstandingRequest_and_Reliability
*/
union omb_h3 {
        struct {
                uint64_t        next_ptr                    : 16;        /* [15:0] Pointer to the next pending OMB entry for pending rendezvous operation tracking. */
                uint64_t        reserved_63_16              : 48;        /* [63:16] Reserved */
        };
        uint64_t val;
};

/*
* Structure from Table titled: OMB Type: H4 flit (Struct - omb_h4_t) - 64 bits
*                  from File : 140_OutstandingRequest_and_Reliability
*/
union omb_h4 {
        struct {
                uint64_t        reserved_31_0               : 32;        /* [31:0] Reserved */
                uint64_t        ni                          : 2;        /* [33:32] The NI of the original request - added to enable posting the event to the correct event queue during cancellation scenarios. */
                uint64_t        data_ptr                    : 16;        /* [49:34] Pointer to the second OMB entry that is part of this operation. */
                uint64_t        status                      : 6;        /* [55:50] Status of this operation, including capturing error conditions received from the target. Used as part of the event posting (accumulates errors for later event posting). Associated with the ACK or REPLY events */
                uint64_t        v                           : 1;        /* [56:56] Indicates if this entry is valid */
                uint64_t        t                           : 1;        /* [57:57] Type of the entry */
                uint64_t        c                           : 1;        /* [58:58] Cancelled: indicates if the message associated with this entry has been canceled. */
                uint64_t        reserved_60_59              : 2;        /* [60:59] Reserved */
                uint64_t        buff_state                  : 3;        /* [63:61] State of the current buffer */
        };
        uint64_t val;
};

/*
* Structure from Table titled: OMB Type: N flit (Struct - omb_n_t) - 64 bits
*                  from File : 140_OutstandingRequest_and_Reliability
*/
union omb_n {
        struct {
                uint64_t        offset                      : 57;        /* [56:0] Offset to be used at the target */
                uint64_t        reserved_59_57              : 3;        /* [59:57] Reserved */
                uint64_t        ack_req                     : 2;        /* [61:60] (deprecated: this is deprecated with the addition of ACK_REQ to H1 and H2) Acknowledgement type requested */
                uint64_t        ni                          : 2;        /* [63:62] Network interface used for this message */
        };
        uint64_t val;
};

/*
* Structure from Table titled: OMB Type: O flit (Struct - omb_o_t) - 64 bits
*                  from File : 140_OutstandingRequest_and_Reliability
*/
union omb_o {
        struct {
                uint64_t        start                       : 57;        /* [56:0] Start address for a given message */
                uint64_t        reserved_63_57              : 7;        /* [63:57] Reserved */
        };
        uint64_t val;
};

/*
* Structure from Table titled: OMB Type: P flit (Struct - omb_p_t) - 64 bits
*                  from File : 140_OutstandingRequest_and_Reliability
*/
union omb_p {
        struct {
                uint64_t        sched_time                  : 32;        /* [31:0] Scheduled time for this entry */
                uint64_t        reserved_59_32              : 28;        /* [59:32] Reserved */
                uint64_t        rrc                         : 3;        /* [62:60] Route control associated with this request */
                uint64_t        ls                          : 1;        /* [63:63] Indicates list (LS) that was used at the target and that will be delivered in the event at the initiator when the rendezvous completes. */
        };
        uint64_t val;
};

/*
* Structure from Table titled: OMB Format: Generic Buffered (Struct - omb_generic_buffered_t) - 512bits
*                  from File : 140_OutstandingRequest_and_Reliability
*/
union omb_generic_buffered {
        struct {
                union                 omb_a                       a;        /* [63:0]  */
                union                 omb_b                       b;        /* [127:64]  */
                                      user_pointer_t              c;        /* [191:128]  */
                union                 omb_d                       d;        /* [255:192]  */
                union                 tx_cq_e1                    e;        /* [319:256]  */
                                      payload_t                   p0;        /* [383:320]  */
                                      payload_t                   p1;        /* [447:384]  */
                union                 omb_h1                      h;        /* [511:448]  */
        };
        uint64_t val[8];
};

/*
* Structure from Table titled: OMB Format: Buffered Reply (Struct - omb_buffered_reply_t) - 512bits
*                  from File : 140_OutstandingRequest_and_Reliability
*/
union omb_buffered_reply {
        struct {
                union                 omb_a                       a;        /* [63:0]  */
                union                 omb_b                       b;        /* [127:64]  */
                                      user_pointer_t              c;        /* [191:128]  */
                union                 tx_cq_j1                    m;        /* [255:192] Format from TX CQ is reused, but the ACK OP field is set to zero. */
                union                 tx_cq_e1                    e;        /* [319:256]  */
                struct {
                        uint64_t        reserved_383_320            : 64;        /* [383:320]  */
                };
                                      payload_t                   p0;        /* [447:384]  */
                union                 omb_h4                      h;        /* [511:448]  */
        };
        uint64_t val[8];
};

/*
* Structure from Table titled: OMB Format: Generic Two Operand Buffered (Struct - omb_generic_two_op_buffered_t) - 512bits
*                  from File : 140_OutstandingRequest_and_Reliability
*/
union omb_generic_two_op_buffered {
        struct {
                union                 omb_a                       a;        /* [63:0]  */
                union                 omb_b                       b;        /* [127:64]  */
                                      user_pointer_t              c;        /* [191:128]  */
                union                 omb_d                       d;        /* [255:192]  */
                union                 tx_cq_e2                    e;        /* [319:256]  */
                                      payload_t                   p0;        /* [383:320]  */
                                      payload_t                   p1;        /* [447:384]  */
                union                 omb_h1                      h;        /* [511:448]  */
        };
        uint64_t val[8];
};

/*
* Structure from Table titled: OMB Format: Generic Buffered Message Extension (Struct - omb_generic_buffered_ext_t) - 512bits
*                  from File : 140_OutstandingRequest_and_Reliability
*/
union omb_generic_buffered_ext {
        struct {
                                      payload_t                   p0;        /* [63:0]  */
                                      payload_t                   p1;        /* [127:64]  */
                                      payload_t                   p2;        /* [191:128]  */
                                      payload_t                   p3;        /* [255:192]  */
                                      payload_t                   p4;        /* [319:256]  */
                                      payload_t                   p5;        /* [383:320]  */
                                      payload_t                   p6;        /* [447:384]  */
                union                 omb_h1                      h;        /* [511:448]  */
        };
        uint64_t val[8];
};

/*
* Structure from Table titled: OMB Format: Standard Unbuffered (Struct - omb_generic_unbuffered_t) - 512bits
*                  from File : 140_OutstandingRequest_and_Reliability
*/
union omb_generic_unbuffered {
        struct {
                union                 omb_a                       a;        /* [63:0]  */
                union                 omb_b                       b;        /* [127:64]  */
                                      user_pointer_t              c;        /* [191:128]  */
                union                 omb_d                       d;        /* [255:192]  */
                union                 tx_cq_e1                    e;        /* [319:256]  */
                                      ptl_match_bits_t            f;        /* [383:320]  */
                                      ptl_hdr_data_t              g;        /* [447:384]  */
                union                 omb_h2                      h;        /* [511:448]  */
        };
        uint64_t val[8];
};

/*
* Structure from Table titled: OMB Format: Requests with Response Data: Second Entry (Struct - omb_reqwresp_dma_second_t) - 512bits
*                  from File : 140_OutstandingRequest_and_Reliability
*/
union omb_reqwresp_dma_second {
        struct {
                                      payload_t                   op0;        /* [63:0]  */
                                      payload_t                   op1;        /* [127:64]  */
                                      payload_t                   op2;        /* [191:128]  */
                                      payload_t                   op3;        /* [255:192]  */
                union                 omb_o                       o;        /* [319:256]  */
                struct {
                        uint64_t        reserved_383_320            : 64;        /* [383:320]  */
                };
                struct {
                        uint64_t        reserved_447_384            : 64;        /* [447:384]  */
                };
                union                 omb_h4                      h;        /* [511:448]  */
        };
        uint64_t val[8];
};

/*
* Structure from Table titled: OMB Format: Unbuffered Replies, Acknowledgements, and CTS Operations (Struct - omb_generic_reply_t) - 512bits
*                  from File : 140_OutstandingRequest_and_Reliability
*/
union omb_generic_reply {
        struct {
                union                 omb_a                       a;        /* [63:0]  */
                union                 omb_b                       b;        /* [127:64]  */
                                      user_pointer_t              c;        /* [191:128]  */
                union                 tx_cq_j1                    m;        /* [255:192] Format from TX CQ is reused, but the ACK OP field is set to zero. */
                union                 tx_cq_e1                    e;        /* [319:256]  */
                struct {
                        uint64_t        reserved_383_320            : 64;        /* [383:320] Reserved */
                };
                union                 tx_cq_i                     i;        /* [447:384]  */
                union                 omb_h2                      h;        /* [511:448]  */
        };
        uint64_t val[8];
};

/*
* Structure from Table titled: OMB Format: Rendezvous, second entry (Struct - omb_rendezvous2_t) - 512bits
*                  from File : 140_OutstandingRequest_and_Reliability
*/
union omb_rendezvous2 {
        struct {
                union                 omb_n                       n0;        /* [63:0] This variant of the flit stores the actual offset used at the target for posting in the completion event. */
                union                 tx_cq_i                     i;        /* [127:64]  */
                union                 omb_o                       o;        /* [191:128]  */
                union                 tx_cq_l                     q;        /* [255:192] Descriptions of the IOVEC being used. */
                union                 omb_n                       n1;        /* [319:256] This variant of the flit stores the requested offset for use in an ECTS or in a retransmit. */
                union                 omb_p                       p;        /* [383:320] Future time for issuing the payload of this rendezvous operation. */
                union                 omb_h3                      h3;        /* [447:384]  */
                union                 omb_h2                      h2;        /* [511:448]  */
        };
        uint64_t val[8];
};

/*
* Structure from Table titled: Pending Packets (Struct - pend_pkt_t) - 76 bits
*                  from File : 140_OutstandingRequest_and_Reliability
*/
union pend_pkt {
        struct {
                struct {
                        uint64_t        head_time                   : 12;        /* [11:0] Time associated with the head of the list */
                        uint64_t        current_seq                 : 16;        /* [27:12] Current local sequence number for this hash entry */
                        uint64_t        oldest_seq                  : 16;        /* [43:28] Local sequence number for the head of the list (aka the oldest outstanding local sequence number) */
                        uint64_t        head_p                      : 16;        /* [59:44] Pointer to the head of the list */
                        uint64_t        tail_p                      : 16;        /* [75:60] Pointer to the tail of the list */
                } __attribute__ ((__packed__));
        } __attribute__ ((__packed__));
        uint64_t val[2];
};

/*
* Structure from Table titled: Base OPB Type (Struct - opb_t) - 320 bits
*                  from File : 140_OutstandingRequest_and_Reliability
*/
union opb {
        struct {
                struct {
                        uint64_t        offset                      : 57;        /* [56:0] Target Offset */
                        uint64_t        pad_count                   : 3;        /* [59:57] Number of pad bytes at the end of the payload of the packet */
                        uint64_t        ack_req                     : 2;        /* [61:60] Acknowledgement request */
                        uint64_t        ni                          : 2;        /* [63:62] network interface */
                };
                struct {
                        uint64_t        start                       : 57;        /* [120:64] Base address for this packet. Note that tis is the address for delivering the reply (for a Get or a two operand atomic) The address must be sign extended to maintain canonical form when used for 57 bit internal fields. */
                        uint64_t        a                           : 1;        /* [121:121] Indicates if this OPB entry was associated with an adaptive (1) or ordered (0) message. */
                        uint64_t        mctc                        : 4;        /* [125:122] message class and traffic class */
                        uint64_t        rf                          : 1;        /* [126:126] This packet should be Retransmitted using the FPE. */
                        uint64_t        v                           : 1;        /* [127:127] Valid */
                };
                struct {
                        uint64_t        psn                         : 16;        /* [143:128] Sequence number for this packet */
                        uint64_t        msg_id                      : 16;        /* [159:144] Message ID for this packet */
                        uint64_t        buff_state                  : 4;        /* [163:160] State of the current buffer */
                        uint64_t        retrans_cnt                 : 4;        /* [167:164] Retransmit count for this packet */
                        uint64_t        length                      : 11;        /* [178:168] Packet length */
                        uint64_t        pt                          : 1;        /* [179:179] Native Verbs Only: Indicates if the command was larger than one packet (1) or not (0). */
                        uint64_t        timestamp                   : 12;        /* [191:180] Last transmit time of this packet */
                };
                struct {
                        uint64_t        iovec_offset                : 32;        /* [223:192] Offset of the start address within the first IOVEC entry */
                        uint64_t        local_seq                   : 16;        /* [239:224] Local sequence number */
                        uint64_t        expected_psn                : 16;        /* [255:240] The expected PSN. This field is only valid when the buffer state indicates the entry is PENDING. */
                };
                struct {
                        uint64_t        dlid                        : 24;        /* [279:256] Destination Local Identifier for this packet */
                        uint64_t        pkey_idx                    : 6;        /* [285:280] Local index of the PKEY used for this entry. Used to implement the required tuple check. */
                        uint64_t        reserved_287_286            : 2;        /* [287:286] Reserved */
                        uint64_t        opcode                      : 7;        /* [294:288] Combined opcode and transfer type */
                        uint64_t        rpt                         : 1;        /* [295:295] Retransmit pending in TXDMA */
                        uint64_t        ctype                       : 4;        /* [299:296] Transmit Command Type */
                        uint64_t        reserved_305_300            : 6;        /* [305:300] Reserved */
                        uint64_t        payload_len                 : 14;        /* [319:306] The length of the payload in this packet. */
                };
        };
        uint64_t val[5];
};

/*
* Structure from Table titled: Pending Acknowledgement OPB Type (Struct - opb_pending_ack_t) - 320 bits
*                  from File : 140_OutstandingRequest_and_Reliability
*/
union opb_pending_ack {
        struct {
                struct {
                        uint64_t        reserved_27_0               : 28;        /* [27:0] Reserved */
                        uint64_t        sh                          : 1;        /* [28:28] Indicates if software allows this buffer entry to use the small header */
                        uint64_t        becn                        : 1;        /* [29:29] Indicates if the backward explicit congestion notification is set. Must be stored as zero. */
                        uint64_t        slid_low                    : 2;        /* [31:30] Two low order bits of SLID to use. Used for indexing local sequence number table and for selecting outgoing SLID. */
                        uint64_t        sl                          : 5;        /* [36:32] Service level associated with this request */
                        uint64_t        rc                          : 3;        /* [39:37] Route control associated with this request */
                        uint64_t        cmd                         : 7;        /* [46:40] Opcode used for the L4 */
                        uint64_t        reserved_47_47              : 1;        /* [47:47] Reserved */
                        uint64_t        pkey                        : 16;        /* [63:48] Partition Key */
                };
                struct {
                        uint64_t        ack_psn                     : 16;        /* [79:64] Acknowledged packet sequence number */
                        uint64_t        ack_pkt_id                  : 16;        /* [95:80] Acknowledged packet identifier */
                        uint64_t        ack_msg_id                  : 16;        /* [111:96] Acknowledged message identifier */
                        uint64_t        ack_op                      : 1;        /* [112:112] Acknowledgement operation type */
                        uint64_t        reserved_118_113            : 6;        /* [118:113] Reserved */
                        uint64_t        ls                          : 1;        /* [119:119] List state indicating the list matched by the request */
                        uint64_t        rf                          : 1;        /* [120:120] This packet should be Retransmitted using the FPE. */
                        uint64_t        a                           : 1;        /* [121:121] Indicates if this OPB entry was associated with an adaptive (1) or ordered (0) message. */
                        uint64_t        mctc                        : 4;        /* [125:122] message class and traffic class */
                        uint64_t        reserved_126_126            : 1;        /* [126:126] Reserved */
                        uint64_t        v                           : 1;        /* [127:127] Valid */
                };
                struct {
                        uint64_t        psn                         : 16;        /* [143:128] Sequence number for this packet */
                        uint64_t        msg_id                      : 16;        /* [159:144] Message ID for this packet */
                        uint64_t        buff_state                  : 4;        /* [163:160] State of the current buffer */
                        uint64_t        retrans_cnt                 : 4;        /* [167:164] Retransmit count for this packet */
                        uint64_t        length                      : 11;        /* [178:168] Packet length */
                        uint64_t        pt                          : 1;        /* [179:179] Outgoing port to use DEPRECATED */
                        uint64_t        timestamp                   : 12;        /* [191:180] Last transmit time of this packet */
                };
                struct {
                        uint64_t        reserved_215_192            : 24;        /* [215:192] Reserved */
                        uint64_t        orig_sl                     : 5;        /* [220:216] Service level associated with the original request that was wrapped back around through the E2E ack command */
                        uint64_t        orig_rc                     : 3;        /* [223:221] Route control associated with the original request that was wrapped back around through the E2E ack command. */
                        uint64_t        local_seq                   : 16;        /* [239:224] Local sequence number */
                        uint64_t        reserved_255_240            : 16;        /* [255:240] Reserved */
                };
                struct {
                        uint64_t        dlid                        : 24;        /* [279:256] Destination LID */
                        uint64_t        reserved_287_280            : 8;        /* [287:280] Reserved */
                        uint64_t        opcode                      : 7;        /* [294:288] Combined opcode and transfer type */
                        uint64_t        reserved_295_295            : 1;        /* [295:295] Reserved */
                        uint64_t        ctype                       : 4;        /* [299:296] Transmit command type */
                        uint64_t        reserved_319_300            : 20;        /* [319:300] Reserved */
                };
        };
        uint64_t val[5];
};

/*
* Structure from Table titled: Rendezvous Transmit Command Type: D flit (Struct - tx_cq_d_rmessage_t) - 64 bits
*                  from File : 140_OutstandingRequest_and_Reliability
*/
union tx_cq_d_rmessage {
        struct {
                uint64_t        remote_offset               : 57;        /* [56:0] Offset to use at the target */
                uint64_t        rfs                         : 3;        /* [59:57] Rendezvous Fragment Size */
                uint64_t        ack_req                     : 2;        /* [61:60] Acknowledgment request */
                uint64_t        ni                          : 2;        /* [63:62] Network interface */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Rendezvous Message Flit 0 Type: (Struct - rmessage_flit0_t) - 256 bits
*                  from File : 140_OutstandingRequest_and_Reliability
*/
union rmessage_flit0 {
        struct {
                union                 omb_a                       a;        /* [63:0]  */
                union                 tx_cq_b1_omb                b;        /* [127:64] Modified format of the tx_cq_b1_t struct. The modified format does not contain CT Handle, EQ Handle, MD Handle, and Authentication Index. Those fields have been replaced by MSG_ID, and MC/TC. */
                union                 tx_cq_c_omb                 c;        /* [191:128] Modified format of the tx_cq_c_t struct. The modified format replaces the User Pointer with the SRANK and USER_ID. */
                union                 tx_cq_d_rmessage            d;        /* [255:192] Modified format of the tx_cq_d_t struct. The modified format inserts the RFS, which is used in the Fragmentation Programmable Engine. */
        };
        uint64_t val[4];
};

/*
* Structure from Table titled: Rendezvous Event Message Flit 1 Type: (Struct - rmessage_event_flit1_t) - 256 bits
*                  from File : 140_OutstandingRequest_and_Reliability
*/
union rmessage_event_flit1 {
        struct {
                union                 tx_cq_e1                    e;        /* [63:0]  */
                union                 tx_cq_f2                    f;        /* [127:64]  */
                                      ptl_match_bits_t            mb;        /* [191:128] Match Bits */
                                      ptl_hdr_data_t              hd;        /* [255:192] Header Data */
        };
        uint64_t val[4];
};

/*
* Structure from Table titled: Rendezvous Event Message Flit 2 Type: (Struct - rmessage_event_flit2_t) - 256 bits
*                  from File : 140_OutstandingRequest_and_Reliability
*/
union rmessage_event_flit2 {
        struct {
                union                 tx_cq_i                     i;        /* [63:0]  */
                union                 tx_cq_d                     d;        /* [127:64]  */
                struct {
                        uint64_t        reserved_255_128_0          : 64;        /* [255:128]  */
                };
                struct {
                        uint64_t        reserved_255_128_1          : 64;        /* [255:128]  */
                };
        };
        uint64_t val[4];
};

/*
* Structure from Table titled: Rendezvous IOVEC Message Flit 1 Type: (Struct - rmessage_iovec_flit1_t) - 256 bits
*                  from File : 140_OutstandingRequest_and_Reliability
*/
union rmessage_iovec_flit1 {
        struct {
                union                 tx_cq_e1                    e;        /* [63:0]  */
                union                 tx_cq_f                     f;        /* [127:64]  */
                union                 tx_cq_i                     i;        /* [191:128]  */
                union                 tx_cq_l                     l;        /* [255:192]  */
        };
        uint64_t val[4];
};

/*
* Structure from Table titled: Rendezvous non-IOVEC Message Flit 1 Type: (Struct - rmessage_flit1_t) - 256 bits
*                  from File : 140_OutstandingRequest_and_Reliability
*/
union rmessage_flit1 {
        struct {
                union                 tx_cq_e1                    e;        /* [63:0]  */
                union                 tx_cq_f                     f;        /* [127:64]  */
                union                 tx_cq_i                     i;        /* [191:128]  */
                struct {
                        uint64_t        reserved_255_192            : 64;        /* [255:192]  */
                };
        };
        uint64_t val[4];
};

/*
* Structure from Table titled: Transmit Protocol State (Struct - tx_proto_state_t) - 64 bits
*                  from File : 140_OutstandingRequest_and_Reliability
*/
union tx_proto_state {
        struct {
                uint64_t        next_seq_ordered            : 16;        /* [15:0] Next PSN for the ordered packets */
                uint64_t        next_seq_unordered          : 16;        /* [31:16] Next PSN for the unordered packets. This includes adaptive routing and deterministic routing that is hashed using any fields other than DLID and SLID. */
                uint64_t        oldest_unordered            : 16;        /* [47:32] Oldest unordered PSN known to be outstanding */
                uint64_t        max_seq_dist                : 12;        /* [59:48] Maximum distance between oldest unordered and next unordered PSNs. */
                uint64_t        ctrl                        : 4;        /* [63:60] Control state for this destination */
        };
        uint64_t val;
};


#endif                 /* DEF_FXR_SW_SW_STRUCT */
