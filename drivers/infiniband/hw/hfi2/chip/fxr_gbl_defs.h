/*
*------------------------------------------------------------------------------
*                                                                              
*  INTEL CONFIDENTIAL                                                          
*                                                                              
*  Copyright 2018 Intel Corporation All Rights Reserved.                 
*                                                                              
*  The source code contained or described herein and all documents related     
*  to the source code ("Material") are owned by Intel Corporation or its    
*  suppliers or licensors. Title to the Material remains with Intel            
*  Corporation or its suppliers and licensors. The Material contains trade     
*  secrets and proprietary and confidential information of Intel or its        
*  suppliers and licensors. The Material is protected by worldwide copyright   
*  and trade secret laws and treaty provisions. No part of the Material may    
*  be used, copied, reproduced, modified, published, uploaded, posted,         
*  transmitted, distributed, or disclosed in any way without Intel's prior     
*  express written permission.                                                 
*                                                                              
*  No license under any patent, copyright, trade secret or other intellectual  
*  property right is granted to or conferred upon you by disclosure or         
*  delivery of the Materials, either expressly, by implication, inducement,    
*  estoppel or otherwise. Any license under such intellectual property rights  
*  must be express and approved by Intel in writing.                           
*                                                                              
*------------------------------------------------------------------------------
*  Auto-generated by /p/hdk/rtl/proj_tools/sl2_tools/sl2_tools-srvr10nm-18ww26b/scripts/i_csrs/i_csrs.pl
*  i_csrs.pl Version 1.5 last modified on Thursday 6/28/18 12:45:58
*  /p/hdk/rtl/proj_tools/sl2_tools/sl2_tools-srvr10nm-18ww26b/scripts/i_csrs/i_csrs.pl -C -RVREGS -ST fxr_gbl -o /nfs/sc/disks/slx_0108/pvesv/fxr_autogen/fxr /nfs/sc/disks/slx_0108/pvesv/fxr_autogen/repo_xml/300_Memory_Map.xml /nfs/sc/disks/slx_0108/pvesv/fxr_autogen/repo_xml/347_Memory_Map_GLOBAL.xml
*------------------------------------------------------------------------------
*/

#ifndef DEF_FXR_GBL_SW_DEF
#define DEF_FXR_GBL_SW_DEF

#ifndef FXR_GBL_CSRS
#define FXR_GBL_CSRS					0x000000000000
#endif
#define FXR_NUM_CONTEXTS				256
#define FXR_NUM_PIDS					4096
#define FXR_MAX_CONTEXT					255
#define FXR_TX_CONTEXT_ENTRIES				128
#define FXR_TX_CONTEXT_MAX				127
#define FXR_RX_CONTEXT_ENTRIES				32
#define FXR_RX_CONTEXT_MAX				31
#define FXR_NUM_SL					32
#define FXR_MAX_SL					31
#define GLOBAL_OFFSET					0
/*
* Table #4 of fxr_top - ASIC_CFG_DRV_STR
* This CSR is used to control the drive strength of GPIO and QSFP pins in FXR. 
* The fields are broken out here to show how the 2-bit fields control the drive 
* strength of different #%%#FXR#%%# ASIC miscellaneous output pins.
*/
#define FXR_ASIC_CFG_DRV_STR				(FXR_GBL_CSRS + 0x000000000000)
#define FXR_ASIC_CFG_DRV_STR_RESETCSR			0x000000000000000Aull
#define FXR_ASIC_CFG_DRV_STR_RESERVED_63_4_SHIFT	4
#define FXR_ASIC_CFG_DRV_STR_RESERVED_63_4_MASK		0xFFFFFFFFFFFFFFFull
#define FXR_ASIC_CFG_DRV_STR_RESERVED_63_4_SMASK	0xFFFFFFFFFFFFFFF0ull
#define FXR_ASIC_CFG_DRV_STR_DRV_STR_GPIO_SHIFT		2
#define FXR_ASIC_CFG_DRV_STR_DRV_STR_GPIO_MASK		0x3ull
#define FXR_ASIC_CFG_DRV_STR_DRV_STR_GPIO_SMASK		0xCull
#define FXR_ASIC_CFG_DRV_STR_DRV_STR_QSFP_SHIFT		0
#define FXR_ASIC_CFG_DRV_STR_DRV_STR_QSFP_MASK		0x3ull
#define FXR_ASIC_CFG_DRV_STR_DRV_STR_QSFP_SMASK		0x3ull
/*
* Table #5 of fxr_top - ASIC_GPIO_IN
* This CSR is used to read the current value of the GPIO pins (prior to any 
* inversion).
*/
#define FXR_ASIC_GPIO_IN				(FXR_GBL_CSRS + 0x000000000008)
#define FXR_ASIC_GPIO_IN_RESETCSR			0x0000000000000000ull
#define FXR_ASIC_GPIO_IN_RESERVED_63_9_SHIFT		9
#define FXR_ASIC_GPIO_IN_RESERVED_63_9_MASK		0x7FFFFFFFFFFFFFull
#define FXR_ASIC_GPIO_IN_RESERVED_63_9_SMASK		0xFFFFFFFFFFFFFE00ull
#define FXR_ASIC_GPIO_IN_GPIO_IN_SHIFT			0
#define FXR_ASIC_GPIO_IN_GPIO_IN_MASK			0x1FFull
#define FXR_ASIC_GPIO_IN_GPIO_IN_SMASK			0x1FFull
/*
* Table #6 of fxr_top - ASIC_GPIO_OE
* This CSR specifies the output enable for the GPIO pins.
*/
#define FXR_ASIC_GPIO_OE				(FXR_GBL_CSRS + 0x000000000010)
#define FXR_ASIC_GPIO_OE_RESETCSR			0x0000000000000000ull
#define FXR_ASIC_GPIO_OE_RESERVED_63_9_SHIFT		9
#define FXR_ASIC_GPIO_OE_RESERVED_63_9_MASK		0x7FFFFFFFFFFFFFull
#define FXR_ASIC_GPIO_OE_RESERVED_63_9_SMASK		0xFFFFFFFFFFFFFE00ull
#define FXR_ASIC_GPIO_OE_GPIO_OE_SHIFT			0
#define FXR_ASIC_GPIO_OE_GPIO_OE_MASK			0x1FFull
#define FXR_ASIC_GPIO_OE_GPIO_OE_SMASK			0x1FFull
/*
* Table #7 of fxr_top - ASIC_GPIO_INVERT
* This CSR specifies whether the read value of the GPIO pins should be inverted 
* or not.
*/
#define FXR_ASIC_GPIO_INVERT				(FXR_GBL_CSRS + 0x000000000018)
#define FXR_ASIC_GPIO_INVERT_RESETCSR			0x0000000000000000ull
#define FXR_ASIC_GPIO_INVERT_RESERVED_63_9_SHIFT	9
#define FXR_ASIC_GPIO_INVERT_RESERVED_63_9_MASK		0x7FFFFFFFFFFFFFull
#define FXR_ASIC_GPIO_INVERT_RESERVED_63_9_SMASK	0xFFFFFFFFFFFFFE00ull
#define FXR_ASIC_GPIO_INVERT_GPIO_INVERT_SHIFT		0
#define FXR_ASIC_GPIO_INVERT_GPIO_INVERT_MASK		0x1FFull
#define FXR_ASIC_GPIO_INVERT_GPIO_INVERT_SMASK		0x1FFull
/*
* Table #8 of fxr_top - ASIC_GPIO_OUT
* This CSR specifies the output value of the GPIO pins.
*/
#define FXR_ASIC_GPIO_OUT				(FXR_GBL_CSRS + 0x000000000020)
#define FXR_ASIC_GPIO_OUT_RESETCSR			0x0000000000000000ull
#define FXR_ASIC_GPIO_OUT_RESERVED_63_9_SHIFT		9
#define FXR_ASIC_GPIO_OUT_RESERVED_63_9_MASK		0x7FFFFFFFFFFFFFull
#define FXR_ASIC_GPIO_OUT_RESERVED_63_9_SMASK		0xFFFFFFFFFFFFFE00ull
#define FXR_ASIC_GPIO_OUT_GPIO_OUT_SHIFT		0
#define FXR_ASIC_GPIO_OUT_GPIO_OUT_MASK			0x1FFull
#define FXR_ASIC_GPIO_OUT_GPIO_OUT_SMASK		0x1FFull
/*
* Table #9 of fxr_top - ASIC_GPIO_MASK
* This CSR specifies the mask value for the GPIO pins and is used to mask the 
* GPIO status value to indicate whether the GPIO interrupt is to be 
* delivered.
*/
#define FXR_ASIC_GPIO_MASK				(FXR_GBL_CSRS + 0x000000000028)
#define FXR_ASIC_GPIO_MASK_RESETCSR			0x0000000000000000ull
#define FXR_ASIC_GPIO_MASK_RESERVED_63_9_SHIFT		9
#define FXR_ASIC_GPIO_MASK_RESERVED_63_9_MASK		0x7FFFFFFFFFFFFFull
#define FXR_ASIC_GPIO_MASK_RESERVED_63_9_SMASK		0xFFFFFFFFFFFFFE00ull
#define FXR_ASIC_GPIO_MASK_GPIO_MASK_SHIFT		0
#define FXR_ASIC_GPIO_MASK_GPIO_MASK_MASK		0x1FFull
#define FXR_ASIC_GPIO_MASK_GPIO_MASK_SMASK		0x1FFull
/*
* Table #10 of fxr_top - ASIC_GPIO_STATUS
* This CSR can be used to read the GPIO status.
*/
#define FXR_ASIC_GPIO_STATUS				(FXR_GBL_CSRS + 0x000000000030)
#define FXR_ASIC_GPIO_STATUS_RESETCSR			0x0000000000000000ull
#define FXR_ASIC_GPIO_STATUS_RESERVED_63_9_SHIFT	9
#define FXR_ASIC_GPIO_STATUS_RESERVED_63_9_MASK		0x7FFFFFFFFFFFFFull
#define FXR_ASIC_GPIO_STATUS_RESERVED_63_9_SMASK	0xFFFFFFFFFFFFFE00ull
#define FXR_ASIC_GPIO_STATUS_GPIO_STATUS_SHIFT		0
#define FXR_ASIC_GPIO_STATUS_GPIO_STATUS_MASK		0x1FFull
#define FXR_ASIC_GPIO_STATUS_GPIO_STATUS_SMASK		0x1FFull
/*
* Table #11 of fxr_top - ASIC_GPIO_CLEAR
* This CSR can be used to clear the GPIO status.
*/
#define FXR_ASIC_GPIO_CLEAR				(FXR_GBL_CSRS + 0x000000000038)
#define FXR_ASIC_GPIO_CLEAR_RESETCSR			0x0000000000000000ull
#define FXR_ASIC_GPIO_CLEAR_RESERVED_63_9_SHIFT		9
#define FXR_ASIC_GPIO_CLEAR_RESERVED_63_9_MASK		0x7FFFFFFFFFFFFFull
#define FXR_ASIC_GPIO_CLEAR_RESERVED_63_9_SMASK		0xFFFFFFFFFFFFFE00ull
#define FXR_ASIC_GPIO_CLEAR_GPIO_CLEAR_SHIFT		0
#define FXR_ASIC_GPIO_CLEAR_GPIO_CLEAR_MASK		0x1FFull
#define FXR_ASIC_GPIO_CLEAR_GPIO_CLEAR_SMASK		0x1FFull
/*
* Table #12 of fxr_top - ASIC_GPIO_FORCE
* This CSR can be used to force the GPIO status.
*/
#define FXR_ASIC_GPIO_FORCE				(FXR_GBL_CSRS + 0x000000000040)
#define FXR_ASIC_GPIO_FORCE_RESETCSR			0x0000000000000000ull
#define FXR_ASIC_GPIO_FORCE_RESERVED_63_9_SHIFT		9
#define FXR_ASIC_GPIO_FORCE_RESERVED_63_9_MASK		0x7FFFFFFFFFFFFFull
#define FXR_ASIC_GPIO_FORCE_RESERVED_63_9_SMASK		0xFFFFFFFFFFFFFE00ull
#define FXR_ASIC_GPIO_FORCE_GPIO_FORCE_SHIFT		0
#define FXR_ASIC_GPIO_FORCE_GPIO_FORCE_MASK		0x1FFull
#define FXR_ASIC_GPIO_FORCE_GPIO_FORCE_SMASK		0x1FFull
/*
* Table #13 of fxr_top - ASIC_QSFP_IN
* This CSR is used to read the current value of the QSFP pins (prior to any 
* inversion).
*/
#define FXR_ASIC_QSFP_IN				(FXR_GBL_CSRS + 0x000000000048)
#define FXR_ASIC_QSFP_IN_RESETCSR			0x000000000000001Bull
#define FXR_ASIC_QSFP_IN_RESERVED_63_5_SHIFT		5
#define FXR_ASIC_QSFP_IN_RESERVED_63_5_MASK		0x7FFFFFFFFFFFFFFull
#define FXR_ASIC_QSFP_IN_RESERVED_63_5_SMASK		0xFFFFFFFFFFFFFFE0ull
#define FXR_ASIC_QSFP_IN_QSFP_IN_SHIFT			0
#define FXR_ASIC_QSFP_IN_QSFP_IN_MASK			0x1Full
#define FXR_ASIC_QSFP_IN_QSFP_IN_SMASK			0x1Full
/*
* Table #14 of fxr_top - ASIC_QSFP_OE
* This CSR specifies the output enable for the QSFP pins.
*/
#define FXR_ASIC_QSFP_OE				(FXR_GBL_CSRS + 0x000000000050)
#define FXR_ASIC_QSFP_OE_RESETCSR			0x0000000000000000ull
#define FXR_ASIC_QSFP_OE_RESERVED_63_5_SHIFT		5
#define FXR_ASIC_QSFP_OE_RESERVED_63_5_MASK		0x7FFFFFFFFFFFFFFull
#define FXR_ASIC_QSFP_OE_RESERVED_63_5_SMASK		0xFFFFFFFFFFFFFFE0ull
#define FXR_ASIC_QSFP_OE_QSFP_OE_SHIFT			0
#define FXR_ASIC_QSFP_OE_QSFP_OE_MASK			0x1Full
#define FXR_ASIC_QSFP_OE_QSFP_OE_SMASK			0x1Full
/*
* Table #15 of fxr_top - ASIC_QSFP_INVERT
* This CSR specifies whether the read value of the QSFP pins should be inverted 
* or not.
*/
#define FXR_ASIC_QSFP_INVERT				(FXR_GBL_CSRS + 0x000000000058)
#define FXR_ASIC_QSFP_INVERT_RESETCSR			0x0000000000000000ull
#define FXR_ASIC_QSFP_INVERT_RESERVED_63_5_SHIFT	5
#define FXR_ASIC_QSFP_INVERT_RESERVED_63_5_MASK		0x7FFFFFFFFFFFFFFull
#define FXR_ASIC_QSFP_INVERT_RESERVED_63_5_SMASK	0xFFFFFFFFFFFFFFE0ull
#define FXR_ASIC_QSFP_INVERT_QSFP_INVERT_SHIFT		0
#define FXR_ASIC_QSFP_INVERT_QSFP_INVERT_MASK		0x1Full
#define FXR_ASIC_QSFP_INVERT_QSFP_INVERT_SMASK		0x1Full
/*
* Table #16 of fxr_top - ASIC_QSFP_OUT
* This CSR specifies the output value of the QSFP pins.
*/
#define FXR_ASIC_QSFP_OUT				(FXR_GBL_CSRS + 0x000000000060)
#define FXR_ASIC_QSFP_OUT_RESETCSR			0x0000000000000004ull
#define FXR_ASIC_QSFP_OUT_RESERVED_63_5_SHIFT		5
#define FXR_ASIC_QSFP_OUT_RESERVED_63_5_MASK		0x7FFFFFFFFFFFFFFull
#define FXR_ASIC_QSFP_OUT_RESERVED_63_5_SMASK		0xFFFFFFFFFFFFFFE0ull
#define FXR_ASIC_QSFP_OUT_QSFP_OUT_SHIFT		0
#define FXR_ASIC_QSFP_OUT_QSFP_OUT_MASK			0x1Full
#define FXR_ASIC_QSFP_OUT_QSFP_OUT_SMASK		0x1Full
/*
* Table #17 of fxr_top - ASIC_QSFP_MASK
* This CSR specifies the mask value for the QSFP pins and is used to mask the 
* QSFP status value to indicate whether the QSFP interrupt is to be 
* delivered.
*/
#define FXR_ASIC_QSFP_MASK				(FXR_GBL_CSRS + 0x000000000068)
#define FXR_ASIC_QSFP_MASK_RESETCSR			0x0000000000000000ull
#define FXR_ASIC_QSFP_MASK_RESERVED_63_5_SHIFT		5
#define FXR_ASIC_QSFP_MASK_RESERVED_63_5_MASK		0x7FFFFFFFFFFFFFFull
#define FXR_ASIC_QSFP_MASK_RESERVED_63_5_SMASK		0xFFFFFFFFFFFFFFE0ull
#define FXR_ASIC_QSFP_MASK_QSFP_MASK_SHIFT		0
#define FXR_ASIC_QSFP_MASK_QSFP_MASK_MASK		0x1Full
#define FXR_ASIC_QSFP_MASK_QSFP_MASK_SMASK		0x1Full
/*
* Table #18 of fxr_top - ASIC_QSFP_STATUS
* This CSR can be used to read the QSFP status.
*/
#define FXR_ASIC_QSFP_STATUS				(FXR_GBL_CSRS + 0x000000000070)
#define FXR_ASIC_QSFP_STATUS_RESETCSR			0x000000000000001Bull
#define FXR_ASIC_QSFP_STATUS_RESERVED_63_5_SHIFT	5
#define FXR_ASIC_QSFP_STATUS_RESERVED_63_5_MASK		0x7FFFFFFFFFFFFFFull
#define FXR_ASIC_QSFP_STATUS_RESERVED_63_5_SMASK	0xFFFFFFFFFFFFFFE0ull
#define FXR_ASIC_QSFP_STATUS_QSFP_STATUS_SHIFT		0
#define FXR_ASIC_QSFP_STATUS_QSFP_STATUS_MASK		0x1Full
#define FXR_ASIC_QSFP_STATUS_QSFP_STATUS_SMASK		0x1Full
/*
* Table #19 of fxr_top - ASIC_QSFP_CLEAR
* This CSR can be used to clear the QSFP status.
*/
#define FXR_ASIC_QSFP_CLEAR				(FXR_GBL_CSRS + 0x000000000078)
#define FXR_ASIC_QSFP_CLEAR_RESETCSR			0x0000000000000000ull
#define FXR_ASIC_QSFP_CLEAR_RESERVED_63_5_SHIFT		5
#define FXR_ASIC_QSFP_CLEAR_RESERVED_63_5_MASK		0x7FFFFFFFFFFFFFFull
#define FXR_ASIC_QSFP_CLEAR_RESERVED_63_5_SMASK		0xFFFFFFFFFFFFFFE0ull
#define FXR_ASIC_QSFP_CLEAR_QSFP_CLEAR_SHIFT		0
#define FXR_ASIC_QSFP_CLEAR_QSFP_CLEAR_MASK		0x1Full
#define FXR_ASIC_QSFP_CLEAR_QSFP_CLEAR_SMASK		0x1Full
/*
* Table #20 of fxr_top - ASIC_QSFP_FORCE
* This CSR can be used to force the QSFP status.
*/
#define FXR_ASIC_QSFP_FORCE				(FXR_GBL_CSRS + 0x000000000080)
#define FXR_ASIC_QSFP_FORCE_RESETCSR			0x0000000000000000ull
#define FXR_ASIC_QSFP_FORCE_RESERVED_63_5_SHIFT		5
#define FXR_ASIC_QSFP_FORCE_RESERVED_63_5_MASK		0x7FFFFFFFFFFFFFFull
#define FXR_ASIC_QSFP_FORCE_RESERVED_63_5_SMASK		0xFFFFFFFFFFFFFFE0ull
#define FXR_ASIC_QSFP_FORCE_QSFP_FORCE_SHIFT		0
#define FXR_ASIC_QSFP_FORCE_QSFP_FORCE_MASK		0x1Full
#define FXR_ASIC_QSFP_FORCE_QSFP_FORCE_SMASK		0x1Full
/*
* Table #21 of fxr_top - ASIC_QSFP_SELECTOR
* This CSR is used to select which version of the QSFP csr's will connect to the 
* pins. 
*/
#define FXR_ASIC_QSFP_SELECTOR				(FXR_GBL_CSRS + 0x000000000088)
#define FXR_ASIC_QSFP_SELECTOR_RESETCSR			0x0000000000000000ull
#define FXR_ASIC_QSFP_SELECTOR_RESERVED_63_1_SHIFT	1
#define FXR_ASIC_QSFP_SELECTOR_RESERVED_63_1_MASK	0x7FFFFFFFFFFFFFFFull
#define FXR_ASIC_QSFP_SELECTOR_RESERVED_63_1_SMASK	0xFFFFFFFFFFFFFFFEull
#define FXR_ASIC_QSFP_SELECTOR_QSFP_SELECTOR_SHIFT	0
#define FXR_ASIC_QSFP_SELECTOR_QSFP_SELECTOR_MASK	0x1ull
#define FXR_ASIC_QSFP_SELECTOR_QSFP_SELECTOR_SMASK	0x1ull

#endif 		/* DEF_FXR_GBL_SW_DEF */
