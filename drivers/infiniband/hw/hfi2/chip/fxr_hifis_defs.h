/*
*------------------------------------------------------------------------------
*                                                                              
*  INTEL CONFIDENTIAL                                                          
*                                                                              
*  Copyright 2018 Intel Corporation All Rights Reserved.                 
*                                                                              
*  The source code contained or described herein and all documents related     
*  to the source code ("Material") are owned by Intel Corporation or its    
*  suppliers or licensors. Title to the Material remains with Intel            
*  Corporation or its suppliers and licensors. The Material contains trade     
*  secrets and proprietary and confidential information of Intel or its        
*  suppliers and licensors. The Material is protected by worldwide copyright   
*  and trade secret laws and treaty provisions. No part of the Material may    
*  be used, copied, reproduced, modified, published, uploaded, posted,         
*  transmitted, distributed, or disclosed in any way without Intel's prior     
*  express written permission.                                                 
*                                                                              
*  No license under any patent, copyright, trade secret or other intellectual  
*  property right is granted to or conferred upon you by disclosure or         
*  delivery of the Materials, either expressly, by implication, inducement,    
*  estoppel or otherwise. Any license under such intellectual property rights  
*  must be express and approved by Intel in writing.                           
*                                                                              
*------------------------------------------------------------------------------
*  Auto-generated by /p/hdk/rtl/proj_tools/sl2_tools/sl2_tools-srvr10nm-18ww26b/scripts/i_csrs/i_csrs.pl
*  i_csrs.pl Version 1.5 last modified on Thursday 6/28/18 12:45:58
*  /p/hdk/rtl/proj_tools/sl2_tools/sl2_tools-srvr10nm-18ww26b/scripts/i_csrs/i_csrs.pl -C -RVREGS -ST fxr_hifis -o /nfs/sc/disks/slx_0108/pvesv/fxr_autogen/fxr /nfs/sc/disks/slx_0108/pvesv/fxr_autogen/repo_xml/300_Memory_Map.xml /nfs/sc/disks/slx_0108/pvesv/fxr_autogen/repo_xml/340_Memory_Map_HIFIS.xml
*------------------------------------------------------------------------------
*/

#ifndef DEF_FXR_HIFIS_SW_DEF
#define DEF_FXR_HIFIS_SW_DEF

#ifndef HFI_HIFIS_CSRS
#define HFI_HIFIS_CSRS						0x000000000000
#endif
#define FXR_NUM_CONTEXTS					256
#define FXR_NUM_PIDS						4096
#define FXR_MAX_CONTEXT						255
#define FXR_TX_CONTEXT_ENTRIES					128
#define FXR_TX_CONTEXT_MAX					127
#define FXR_RX_CONTEXT_ENTRIES					32
#define FXR_RX_CONTEXT_MAX					31
#define FXR_NUM_SL						32
#define FXR_MAX_SL						31
#define HIFIS_IN_CFG_BASE					0
#define HIFIS_ERR_BASE						512
/*
* Table #4 of fxr_top - HIFIS_CFG_IN_CONTROL
* Various HIFIS Block control.The ARB_CTL control fields in this CSR define the 
* priority for arbitration selection when two are more request inputs are valid. 
* A local pointer into the 16-bit field selects a bit which determines the 
* priority for a given arbitration cycle. The local pointer advances to the next 
* bit after an active arbitration cycle. Note that a valid request is blocked 
* only when a valid higher priority request is presented.
*/
#define HFI_HIFIS_CFG_IN_CONTROL				(HFI_HIFIS_CSRS + 0x000000000000)
#define HFI_HIFIS_CFG_IN_CONTROL_RESETCSR			0x00000012AAAA4924ull
#define HFI_HIFIS_CFG_IN_CONTROL_ECC_CORR_BYPASS_SHIFT		63
#define HFI_HIFIS_CFG_IN_CONTROL_ECC_CORR_BYPASS_MASK		0x1ull
#define HFI_HIFIS_CFG_IN_CONTROL_ECC_CORR_BYPASS_SMASK		0x8000000000000000ull
#define HFI_HIFIS_CFG_IN_CONTROL_RESERVED_62_38_SHIFT		38
#define HFI_HIFIS_CFG_IN_CONTROL_RESERVED_62_38_MASK		0x1FFFFFFull
#define HFI_HIFIS_CFG_IN_CONTROL_RESERVED_62_38_SMASK		0x7FFFFFC000000000ull
#define HFI_HIFIS_CFG_IN_CONTROL_RSPACK_THRESH_SHIFT		32
#define HFI_HIFIS_CFG_IN_CONTROL_RSPACK_THRESH_MASK		0x3Full
#define HFI_HIFIS_CFG_IN_CONTROL_RSPACK_THRESH_SMASK		0x3F00000000ull
#define HFI_HIFIS_CFG_IN_CONTROL_ARB_CNTL_A_SHIFT		16
#define HFI_HIFIS_CFG_IN_CONTROL_ARB_CNTL_A_MASK		0xFFFFull
#define HFI_HIFIS_CFG_IN_CONTROL_ARB_CNTL_A_SMASK		0xFFFF0000ull
#define HFI_HIFIS_CFG_IN_CONTROL_ARB_CNTL_B_SHIFT		0
#define HFI_HIFIS_CFG_IN_CONTROL_ARB_CNTL_B_MASK		0xFFFFull
#define HFI_HIFIS_CFG_IN_CONTROL_ARB_CNTL_B_SMASK		0xFFFFull
/*
* Table #5 of fxr_top - HIFIS_CFG_IN
* The HIFIS CFG IN register enables selected modes and operations within the 
* HIFIS Block.
*/
#define HFI_HIFIS_CFG_IN					(HFI_HIFIS_CSRS + 0x000000000008)
#define HFI_HIFIS_CFG_IN_RESETCSR				0x0000421000000000ull
#define HFI_HIFIS_CFG_IN_RESERVED_63_47_SHIFT			47
#define HFI_HIFIS_CFG_IN_RESERVED_63_47_MASK			0x1FFFFull
#define HFI_HIFIS_CFG_IN_RESERVED_63_47_SMASK			0xFFFF800000000000ull
#define HFI_HIFIS_CFG_IN_RX_HIFIS_PKT_CREDIT_MAX_SHIFT		42
#define HFI_HIFIS_CFG_IN_RX_HIFIS_PKT_CREDIT_MAX_MASK		0x1Full
#define HFI_HIFIS_CFG_IN_RX_HIFIS_PKT_CREDIT_MAX_SMASK		0x7C0000000000ull
#define HFI_HIFIS_CFG_IN_TX_HIFIS_PKT_CREDIT_MAX_SHIFT		37
#define HFI_HIFIS_CFG_IN_TX_HIFIS_PKT_CREDIT_MAX_MASK		0x1Full
#define HFI_HIFIS_CFG_IN_TX_HIFIS_PKT_CREDIT_MAX_SMASK		0x3E000000000ull
#define HFI_HIFIS_CFG_IN_AT_HIFIS_PKT_CREDIT_MAX_SHIFT		32
#define HFI_HIFIS_CFG_IN_AT_HIFIS_PKT_CREDIT_MAX_MASK		0x1Full
#define HFI_HIFIS_CFG_IN_AT_HIFIS_PKT_CREDIT_MAX_SMASK		0x1F00000000ull
#define HFI_HIFIS_CFG_IN_RESERVED_31_0_SHIFT			0
#define HFI_HIFIS_CFG_IN_RESERVED_31_0_MASK			0xFFFFFFFFull
#define HFI_HIFIS_CFG_IN_RESERVED_31_0_SMASK			0xFFFFFFFFull
/*
* Table #6 of fxr_top - HIFIS_CFG_OUT1
* The HIFIS CFG OUT1 register enables selected modes and operations within the 
* HIFIS Block. The ARB_CNTL control field in this CSR defines the priority for 
* an arbitration selection when two are more request inputs are valid. A local 
* pointer into the 16-bit ARB_CNTL field selects a bit which determines the 
* priority for a given arbitration cycle. The local pointer advances to the next 
* bit after an active arbitration cycle. Note that a valid request is blocked 
* only when a valid higher priority request is presented.
*/
#define HFI_HIFIS_CFG_OUT1					(HFI_HIFIS_CSRS + 0x000000000010)
#define HFI_HIFIS_CFG_OUT1_RESETCSR				0x108004002010AAAAull
#define HFI_HIFIS_CFG_OUT1_RESERVED_63_SHIFT			63
#define HFI_HIFIS_CFG_OUT1_RESERVED_63_MASK			0x1ull
#define HFI_HIFIS_CFG_OUT1_RESERVED_63_SMASK			0x8000000000000000ull
#define HFI_HIFIS_CFG_OUT1_PORT_ARB_CREDITS_SHIFT		56
#define HFI_HIFIS_CFG_OUT1_PORT_ARB_CREDITS_MASK		0x7Full
#define HFI_HIFIS_CFG_OUT1_PORT_ARB_CREDITS_SMASK		0x7F00000000000000ull
#define HFI_HIFIS_CFG_OUT1_CREDIT_EN_RX_SHIFT			55
#define HFI_HIFIS_CFG_OUT1_CREDIT_EN_RX_MASK			0x1ull
#define HFI_HIFIS_CFG_OUT1_CREDIT_EN_RX_SMASK			0x80000000000000ull
#define HFI_HIFIS_CFG_OUT1_CREDITS_AVAIL_RX_REQ_SHIFT		49
#define HFI_HIFIS_CFG_OUT1_CREDITS_AVAIL_RX_REQ_MASK		0x3Full
#define HFI_HIFIS_CFG_OUT1_CREDITS_AVAIL_RX_REQ_SMASK		0x7E000000000000ull
#define HFI_HIFIS_CFG_OUT1_CREDITS_AVAIL_RX_RSP_SHIFT		43
#define HFI_HIFIS_CFG_OUT1_CREDITS_AVAIL_RX_RSP_MASK		0x3Full
#define HFI_HIFIS_CFG_OUT1_CREDITS_AVAIL_RX_RSP_SMASK		0x1F80000000000ull
#define HFI_HIFIS_CFG_OUT1_CREDIT_EN_TX_SHIFT			42
#define HFI_HIFIS_CFG_OUT1_CREDIT_EN_TX_MASK			0x1ull
#define HFI_HIFIS_CFG_OUT1_CREDIT_EN_TX_SMASK			0x40000000000ull
#define HFI_HIFIS_CFG_OUT1_CREDITS_AVAIL_TX_REQ_SHIFT		36
#define HFI_HIFIS_CFG_OUT1_CREDITS_AVAIL_TX_REQ_MASK		0x3Full
#define HFI_HIFIS_CFG_OUT1_CREDITS_AVAIL_TX_REQ_SMASK		0x3F000000000ull
#define HFI_HIFIS_CFG_OUT1_CREDITS_AVAIL_TX_RSP_SHIFT		30
#define HFI_HIFIS_CFG_OUT1_CREDITS_AVAIL_TX_RSP_MASK		0x3Full
#define HFI_HIFIS_CFG_OUT1_CREDITS_AVAIL_TX_RSP_SMASK		0xFC0000000ull
#define HFI_HIFIS_CFG_OUT1_CREDIT_EN_AT_SHIFT			29
#define HFI_HIFIS_CFG_OUT1_CREDIT_EN_AT_MASK			0x1ull
#define HFI_HIFIS_CFG_OUT1_CREDIT_EN_AT_SMASK			0x20000000ull
#define HFI_HIFIS_CFG_OUT1_CREDITS_AVAIL_AT_RSP_SHIFT		22
#define HFI_HIFIS_CFG_OUT1_CREDITS_AVAIL_AT_RSP_MASK		0x7Full
#define HFI_HIFIS_CFG_OUT1_CREDITS_AVAIL_AT_RSP_SMASK		0x1FC00000ull
#define HFI_HIFIS_CFG_OUT1_PCIM_HIFIS_PKT_CREDIT_MAX_SHIFT	16
#define HFI_HIFIS_CFG_OUT1_PCIM_HIFIS_PKT_CREDIT_MAX_MASK	0x3Full
#define HFI_HIFIS_CFG_OUT1_PCIM_HIFIS_PKT_CREDIT_MAX_SMASK	0x3F0000ull
#define HFI_HIFIS_CFG_OUT1_ARB_CNTL_AT_SHIFT			0
#define HFI_HIFIS_CFG_OUT1_ARB_CNTL_AT_MASK			0xFFFFull
#define HFI_HIFIS_CFG_OUT1_ARB_CNTL_AT_SMASK			0xFFFFull
/*
* Table #7 of fxr_top - HIFIS_CFG_OUT2
* The HIFIS CFG OUT2 register enables selected modes and operations within the 
* 1.2Ghz clock domain of the HIFIS Block. The ARB_CNTL control fields in this 
* CSR define the priority for an arbitration selection when two are more request 
* inputs are valid. A local pointer into the 16-bit ARB_CNTL field selects a bit 
* which determines the priority for a given arbitration cycle. The local pointer 
* advances to the next bit after an active arbitration cycle. Note that a valid 
* request is blocked only when a valid higher priority request is 
* presented.
*/
#define HFI_HIFIS_CFG_OUT2					(HFI_HIFIS_CSRS + 0x000000000018)
#define HFI_HIFIS_CFG_OUT2_RESETCSR				0xAAAA4924AAAA4924ull
#define HFI_HIFIS_CFG_OUT2_ARB_CNTL_RX_A_SHIFT			48
#define HFI_HIFIS_CFG_OUT2_ARB_CNTL_RX_A_MASK			0xFFFFull
#define HFI_HIFIS_CFG_OUT2_ARB_CNTL_RX_A_SMASK			0xFFFF000000000000ull
#define HFI_HIFIS_CFG_OUT2_ARB_CNTL_RX_B_SHIFT			32
#define HFI_HIFIS_CFG_OUT2_ARB_CNTL_RX_B_MASK			0xFFFFull
#define HFI_HIFIS_CFG_OUT2_ARB_CNTL_RX_B_SMASK			0xFFFF00000000ull
#define HFI_HIFIS_CFG_OUT2_ARB_CNTL_TX_A_SHIFT			16
#define HFI_HIFIS_CFG_OUT2_ARB_CNTL_TX_A_MASK			0xFFFFull
#define HFI_HIFIS_CFG_OUT2_ARB_CNTL_TX_A_SMASK			0xFFFF0000ull
#define HFI_HIFIS_CFG_OUT2_ARB_CNTL_TX_B_SHIFT			0
#define HFI_HIFIS_CFG_OUT2_ARB_CNTL_TX_B_MASK			0xFFFFull
#define HFI_HIFIS_CFG_OUT2_ARB_CNTL_TX_B_SMASK			0xFFFFull
/*
* Table #8 of fxr_top - HIFIS_ERR_STS
* This is the Error Status CSR. Bits are set by hardware or by writing to the 
* HIFIS_ERR_FRC CSR. Bits are cleared by writing to the HIFIS_ERR_CLR 
* CSR.
*/
#define HFI_HIFIS_ERR_STS					(HFI_HIFIS_CSRS + 0x000000000200)
#define HFI_HIFIS_ERR_STS_RESETCSR				0x0000000000000000ull
#define HFI_HIFIS_ERR_STS_RESERVED_63_14_SHIFT			14
#define HFI_HIFIS_ERR_STS_RESERVED_63_14_MASK			0x3FFFFFFFFFFFFull
#define HFI_HIFIS_ERR_STS_RESERVED_63_14_SMASK			0xFFFFFFFFFFFFC000ull
#define HFI_HIFIS_ERR_STS_RX_IN_HDR_SBE_SHIFT			13
#define HFI_HIFIS_ERR_STS_RX_IN_HDR_SBE_MASK			0x1ull
#define HFI_HIFIS_ERR_STS_RX_IN_HDR_SBE_SMASK			0x2000ull
#define HFI_HIFIS_ERR_STS_RX_IN_HDR_MBE_SHIFT			12
#define HFI_HIFIS_ERR_STS_RX_IN_HDR_MBE_MASK			0x1ull
#define HFI_HIFIS_ERR_STS_RX_IN_HDR_MBE_SMASK			0x1000ull
#define HFI_HIFIS_ERR_STS_TX_IN_HDR_SBE_SHIFT			11
#define HFI_HIFIS_ERR_STS_TX_IN_HDR_SBE_MASK			0x1ull
#define HFI_HIFIS_ERR_STS_TX_IN_HDR_SBE_SMASK			0x800ull
#define HFI_HIFIS_ERR_STS_TX_IN_HDR_MBE_SHIFT			10
#define HFI_HIFIS_ERR_STS_TX_IN_HDR_MBE_MASK			0x1ull
#define HFI_HIFIS_ERR_STS_TX_IN_HDR_MBE_SMASK			0x400ull
#define HFI_HIFIS_ERR_STS_AT_IN_HDR_SBE_SHIFT			9
#define HFI_HIFIS_ERR_STS_AT_IN_HDR_SBE_MASK			0x1ull
#define HFI_HIFIS_ERR_STS_AT_IN_HDR_SBE_SMASK			0x200ull
#define HFI_HIFIS_ERR_STS_AT_IN_HDR_MBE_SHIFT			8
#define HFI_HIFIS_ERR_STS_AT_IN_HDR_MBE_MASK			0x1ull
#define HFI_HIFIS_ERR_STS_AT_IN_HDR_MBE_SMASK			0x100ull
#define HFI_HIFIS_ERR_STS_AT_REQ_INQ_OFLOW_SHIFT		7
#define HFI_HIFIS_ERR_STS_AT_REQ_INQ_OFLOW_MASK			0x1ull
#define HFI_HIFIS_ERR_STS_AT_REQ_INQ_OFLOW_SMASK		0x80ull
#define HFI_HIFIS_ERR_STS_TX_REQ_INQ_OFLOW_SHIFT		6
#define HFI_HIFIS_ERR_STS_TX_REQ_INQ_OFLOW_MASK			0x1ull
#define HFI_HIFIS_ERR_STS_TX_REQ_INQ_OFLOW_SMASK		0x40ull
#define HFI_HIFIS_ERR_STS_RX_REQ_INQ_OFLOW_SHIFT		5
#define HFI_HIFIS_ERR_STS_RX_REQ_INQ_OFLOW_MASK			0x1ull
#define HFI_HIFIS_ERR_STS_RX_REQ_INQ_OFLOW_SMASK		0x20ull
#define HFI_HIFIS_ERR_STS_ADM_HDR_SBE_SHIFT			4
#define HFI_HIFIS_ERR_STS_ADM_HDR_SBE_MASK			0x1ull
#define HFI_HIFIS_ERR_STS_ADM_HDR_SBE_SMASK			0x10ull
#define HFI_HIFIS_ERR_STS_ADM_HDR_MBE_SHIFT			3
#define HFI_HIFIS_ERR_STS_ADM_HDR_MBE_MASK			0x1ull
#define HFI_HIFIS_ERR_STS_ADM_HDR_MBE_SMASK			0x8ull
#define HFI_HIFIS_ERR_STS_IMI_HDR_SBE_SHIFT			2
#define HFI_HIFIS_ERR_STS_IMI_HDR_SBE_MASK			0x1ull
#define HFI_HIFIS_ERR_STS_IMI_HDR_SBE_SMASK			0x4ull
#define HFI_HIFIS_ERR_STS_IMI_HDR_MBE_SHIFT			1
#define HFI_HIFIS_ERR_STS_IMI_HDR_MBE_MASK			0x1ull
#define HFI_HIFIS_ERR_STS_IMI_HDR_MBE_SMASK			0x2ull
#define HFI_HIFIS_ERR_STS_PCIM_Q_ERR_SHIFT			0
#define HFI_HIFIS_ERR_STS_PCIM_Q_ERR_MASK			0x1ull
#define HFI_HIFIS_ERR_STS_PCIM_Q_ERR_SMASK			0x1ull
/*
* Table #9 of fxr_top - HIFIS_ERR_CLR
* This is the Error Clear CSR. Writing a 1 to a valid bit will clear the 
* corresponding bit in the HIFIS_ERR_STS CSR.
*/
#define HFI_HIFIS_ERR_CLR					(HFI_HIFIS_CSRS + 0x000000000208)
#define HFI_HIFIS_ERR_CLR_RESETCSR				0x0000000000000000ull
#define HFI_HIFIS_ERR_CLR_RESERVED_63_14_SHIFT			14
#define HFI_HIFIS_ERR_CLR_RESERVED_63_14_MASK			0x3FFFFFFFFFFFFull
#define HFI_HIFIS_ERR_CLR_RESERVED_63_14_SMASK			0xFFFFFFFFFFFFC000ull
#define HFI_HIFIS_ERR_CLR_EVENTS_SHIFT				0
#define HFI_HIFIS_ERR_CLR_EVENTS_MASK				0x3FFFull
#define HFI_HIFIS_ERR_CLR_EVENTS_SMASK				0x3FFFull
/*
* Table #10 of fxr_top - HIFIS_ERR_FRC
* This is the Error Force CSR. Writing a 1 to a valid bit will set the 
* corresponding bit in the HIFIS_ERR_STS CSR.
*/
#define HFI_HIFIS_ERR_FRC					(HFI_HIFIS_CSRS + 0x000000000210)
#define HFI_HIFIS_ERR_FRC_RESETCSR				0x0000000000000000ull
#define HFI_HIFIS_ERR_FRC_RESERVED_63_14_SHIFT			14
#define HFI_HIFIS_ERR_FRC_RESERVED_63_14_MASK			0x3FFFFFFFFFFFFull
#define HFI_HIFIS_ERR_FRC_RESERVED_63_14_SMASK			0xFFFFFFFFFFFFC000ull
#define HFI_HIFIS_ERR_FRC_EVENTS_SHIFT				0
#define HFI_HIFIS_ERR_FRC_EVENTS_MASK				0x3FFFull
#define HFI_HIFIS_ERR_FRC_EVENTS_SMASK				0x3FFFull
/*
* Table #11 of fxr_top - HIFIS_ERR_EN_HOST
* This is the Error Enable for the Host Interrupt. If a bit is set, the 
* corresponding error bit in HIFIS_ERR_STS will cause an interrupt on the HOST 
* interrupt signal.
*/
#define HFI_HIFIS_ERR_EN_HOST					(HFI_HIFIS_CSRS + 0x000000000218)
#define HFI_HIFIS_ERR_EN_HOST_RESETCSR				0x0000000000000000ull
#define HFI_HIFIS_ERR_EN_HOST_RESERVED_63_14_SHIFT		14
#define HFI_HIFIS_ERR_EN_HOST_RESERVED_63_14_MASK		0x3FFFFFFFFFFFFull
#define HFI_HIFIS_ERR_EN_HOST_RESERVED_63_14_SMASK		0xFFFFFFFFFFFFC000ull
#define HFI_HIFIS_ERR_EN_HOST_EVENTS_SHIFT			0
#define HFI_HIFIS_ERR_EN_HOST_EVENTS_MASK			0x3FFFull
#define HFI_HIFIS_ERR_EN_HOST_EVENTS_SMASK			0x3FFFull
/*
* Table #12 of fxr_top - HIFIS_ERR_FIRST_HOST
* This is the First Error CSR for the Host Interrupt. When this CSR is clear, it 
* will capture the next HIFIS_ERR_STS value when a new HOST Interrupt 
* occurs.
*/
#define HFI_HIFIS_ERR_FIRST_HOST				(HFI_HIFIS_CSRS + 0x000000000220)
#define HFI_HIFIS_ERR_FIRST_HOST_RESETCSR			0x0000000000000000ull
#define HFI_HIFIS_ERR_FIRST_HOST_RESERVED_63_14_SHIFT		14
#define HFI_HIFIS_ERR_FIRST_HOST_RESERVED_63_14_MASK		0x3FFFFFFFFFFFFull
#define HFI_HIFIS_ERR_FIRST_HOST_RESERVED_63_14_SMASK		0xFFFFFFFFFFFFC000ull
#define HFI_HIFIS_ERR_FIRST_HOST_EVENTS_SHIFT			0
#define HFI_HIFIS_ERR_FIRST_HOST_EVENTS_MASK			0x3FFFull
#define HFI_HIFIS_ERR_FIRST_HOST_EVENTS_SMASK			0x3FFFull
/*
* Table #13 of fxr_top - HIFIS_ERR_EN_BMC
* This is the Error Enable for the BMC Interrupt. If a bit is set, the 
* corresponding error bit in HIFIS_ERR_STS will cause an interrupt on the BMC 
* interrupt signal.
*/
#define HFI_HIFIS_ERR_EN_BMC					(HFI_HIFIS_CSRS + 0x000000000228)
#define HFI_HIFIS_ERR_EN_BMC_RESETCSR				0x0000000000000000ull
#define HFI_HIFIS_ERR_EN_BMC_RESERVED_63_14_SHIFT		14
#define HFI_HIFIS_ERR_EN_BMC_RESERVED_63_14_MASK		0x3FFFFFFFFFFFFull
#define HFI_HIFIS_ERR_EN_BMC_RESERVED_63_14_SMASK		0xFFFFFFFFFFFFC000ull
#define HFI_HIFIS_ERR_EN_BMC_EVENTS_SHIFT			0
#define HFI_HIFIS_ERR_EN_BMC_EVENTS_MASK			0x3FFFull
#define HFI_HIFIS_ERR_EN_BMC_EVENTS_SMASK			0x3FFFull
/*
* Table #14 of fxr_top - HIFIS_ERR_FIRST_BMC
* This is the First Error CSR for the BMC Interrupt. When this CSR is clear, it 
* will capture the next HIFIS_ERR_STS value when a new BMC Interrupt 
* occurs.
*/
#define HFI_HIFIS_ERR_FIRST_BMC					(HFI_HIFIS_CSRS + 0x000000000230)
#define HFI_HIFIS_ERR_FIRST_BMC_RESETCSR			0x0000000000000000ull
#define HFI_HIFIS_ERR_FIRST_BMC_RESERVED_63_14_SHIFT		14
#define HFI_HIFIS_ERR_FIRST_BMC_RESERVED_63_14_MASK		0x3FFFFFFFFFFFFull
#define HFI_HIFIS_ERR_FIRST_BMC_RESERVED_63_14_SMASK		0xFFFFFFFFFFFFC000ull
#define HFI_HIFIS_ERR_FIRST_BMC_EVENTS_SHIFT			0
#define HFI_HIFIS_ERR_FIRST_BMC_EVENTS_MASK			0x3FFFull
#define HFI_HIFIS_ERR_FIRST_BMC_EVENTS_SMASK			0x3FFFull
/*
* Table #15 of fxr_top - HIFIS_ERR_EN_QUAR
* This is the Error Enable for the Quarantine Interrupt. If a bit is set, the 
* corresponding error bit in HIFIS_ERR_STS will cause an interrupt on the QUAR 
* interrupt signal.
*/
#define HFI_HIFIS_ERR_EN_QUAR					(HFI_HIFIS_CSRS + 0x000000000238)
#define HFI_HIFIS_ERR_EN_QUAR_RESETCSR				0x0000000000000000ull
#define HFI_HIFIS_ERR_EN_QUAR_RESERVED_63_14_SHIFT		14
#define HFI_HIFIS_ERR_EN_QUAR_RESERVED_63_14_MASK		0x3FFFFFFFFFFFFull
#define HFI_HIFIS_ERR_EN_QUAR_RESERVED_63_14_SMASK		0xFFFFFFFFFFFFC000ull
#define HFI_HIFIS_ERR_EN_QUAR_EVENTS_SHIFT			0
#define HFI_HIFIS_ERR_EN_QUAR_EVENTS_MASK			0x3FFFull
#define HFI_HIFIS_ERR_EN_QUAR_EVENTS_SMASK			0x3FFFull
/*
* Table #16 of fxr_top - HIFIS_ERR_FIRST_QUAR
* This is the First Error CSR for the Quarantine Interrupt. When this CSR is 
* clear, it will capture the next HIFIS_ERR_STS value when a new QUAR Interrupt 
* occurs.
*/
#define HFI_HIFIS_ERR_FIRST_QUAR				(HFI_HIFIS_CSRS + 0x000000000240)
#define HFI_HIFIS_ERR_FIRST_QUAR_RESETCSR			0x0000000000000000ull
#define HFI_HIFIS_ERR_FIRST_QUAR_RESERVED_63_14_SHIFT		14
#define HFI_HIFIS_ERR_FIRST_QUAR_RESERVED_63_14_MASK		0x3FFFFFFFFFFFFull
#define HFI_HIFIS_ERR_FIRST_QUAR_RESERVED_63_14_SMASK		0xFFFFFFFFFFFFC000ull
#define HFI_HIFIS_ERR_FIRST_QUAR_EVENTS_SHIFT			0
#define HFI_HIFIS_ERR_FIRST_QUAR_EVENTS_MASK			0x3FFFull
#define HFI_HIFIS_ERR_FIRST_QUAR_EVENTS_SMASK			0x3FFFull
/*
* Table #17 of fxr_top - HIFIS_ERR_INFO
* Error Info register of syndrome values of reported sbe/mbe errors.
*/
#define HFI_HIFIS_ERR_INFO					(HFI_HIFIS_CSRS + 0x000000000248)
#define HFI_HIFIS_ERR_INFO_RESETCSR				0x0000000000000000ull
#define HFI_HIFIS_ERR_INFO_RESERVED_63_40_SHIFT			40
#define HFI_HIFIS_ERR_INFO_RESERVED_63_40_MASK			0xFFFFFFull
#define HFI_HIFIS_ERR_INFO_RESERVED_63_40_SMASK			0xFFFFFF0000000000ull
#define HFI_HIFIS_ERR_INFO_RX_IN_HDR_SYND_SHIFT			32
#define HFI_HIFIS_ERR_INFO_RX_IN_HDR_SYND_MASK			0xFFull
#define HFI_HIFIS_ERR_INFO_RX_IN_HDR_SYND_SMASK			0xFF00000000ull
#define HFI_HIFIS_ERR_INFO_TX_IN_HDR_SYND_SHIFT			24
#define HFI_HIFIS_ERR_INFO_TX_IN_HDR_SYND_MASK			0xFFull
#define HFI_HIFIS_ERR_INFO_TX_IN_HDR_SYND_SMASK			0xFF000000ull
#define HFI_HIFIS_ERR_INFO_AT_IN_HDR_SYND_SHIFT			16
#define HFI_HIFIS_ERR_INFO_AT_IN_HDR_SYND_MASK			0xFFull
#define HFI_HIFIS_ERR_INFO_AT_IN_HDR_SYND_SMASK			0xFF0000ull
#define HFI_HIFIS_ERR_INFO_ADM_HDR_SYND_SHIFT			8
#define HFI_HIFIS_ERR_INFO_ADM_HDR_SYND_MASK			0xFFull
#define HFI_HIFIS_ERR_INFO_ADM_HDR_SYND_SMASK			0xFF00ull
#define HFI_HIFIS_ERR_INFO_IMI_HDR_SYND_SHIFT			0
#define HFI_HIFIS_ERR_INFO_IMI_HDR_SYND_MASK			0xFFull
#define HFI_HIFIS_ERR_INFO_IMI_HDR_SYND_SMASK			0xFFull

#endif 		/* DEF_FXR_HIFIS_SW_DEF */
