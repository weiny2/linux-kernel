/*
*------------------------------------------------------------------------------
*                                                                              
*  INTEL CONFIDENTIAL                                                          
*                                                                              
*  Copyright 2016 Intel Corporation All Rights Reserved.                 
*                                                                              
*  The source code contained or described herein and all documents related     
*  to the source code ("Material") are owned by Intel Corporation or its    
*  suppliers or licensors. Title to the Material remains with Intel            
*  Corporation or its suppliers and licensors. The Material contains trade     
*  secrets and proprietary and confidential information of Intel or its        
*  suppliers and licensors. The Material is protected by worldwide copyright   
*  and trade secret laws and treaty provisions. No part of the Material may    
*  be used, copied, reproduced, modified, published, uploaded, posted,         
*  transmitted, distributed, or disclosed in any way without Intel's prior     
*  express written permission.                                                 
*                                                                              
*  No license under any patent, copyright, trade secret or other intellectual  
*  property right is granted to or conferred upon you by disclosure or         
*  delivery of the Materials, either expressly, by implication, inducement,    
*  estoppel or otherwise. Any license under such intellectual property rights  
*  must be express and approved by Intel in writing.                           
*                                                                              
*------------------------------------------------------------------------------
*  Auto-generated by /nfs/sc/disks/slx_0108/pvesv/fxr_autogen/i_csrs.pl
*  i_csrs.pl Version 1.5 last modified on Monday 12/19/16 11:42:34
*  /nfs/sc/disks/slx_0108/pvesv/fxr_autogen/i_csrs.pl -C -RVREGS -ST fxr_linkmux_tp -o /nfs/sc/disks/slx_0108/pvesv/fxr_autogen/fxr /nfs/sc/disks/slx_0108/pvesv/fxr_autogen/repo_xml/300_Memory_Map.xml /nfs/sc/disks/slx_0108/pvesv/fxr_autogen/repo_xml/358_Memory_Map_LinkMux_TP.xml
*------------------------------------------------------------------------------
*/

#ifndef DEF_FXR_LINKMUX_TP_SW_DEF
#define DEF_FXR_LINKMUX_TP_SW_DEF

#ifndef FXR_LM_TP_CSRS
#define FXR_LM_TP_CSRS							0x000000000000
#endif
#define FXR_NUM_CONTEXTS						256
#define FXR_NUM_PIDS							4096
#define FXR_MAX_CONTEXT							255
#define FXR_TX_CONTEXT_ENTRIES						128
#define FXR_TX_CONTEXT_MAX						127
#define FXR_RX_CONTEXT_ENTRIES						16
#define FXR_RX_CONTEXT_MAX						15
#define FXR_NUM_SL							32
#define FXR_MAX_SL							31
#define TP_CONFIG_OFFSET						0
#define TP_PRIORITY_OFFSET						80
#define TP_PREEMPT_OFFSET						160
#define TP_PKEY_OFFSET							208
#define TP_CSG_OFFSET							368
#define TP_ERROR_FLAG_OFFSET_0						384
#define TP_ERROR_FLAG_OFFSET_1						512
#define TP_STS_OFFSET							640
#define TP_DBG_OFFSET							672
#define TP_PRF_OFFSET							1024
#define TP_NUM_VL							10
#define TP_NUM_PRF_CNTRS						128
#define TP_NUM_SCRATCH							22
#define TP_PRF_XMIT_PKTS						0
#define TP_PRF_VL0_XMIT_PKTS						1
#define TP_PRF_VL1_XMIT_PKTS						2
#define TP_PRF_VL2_XMIT_PKTS						3
#define TP_PRF_VL3_XMIT_PKTS						4
#define TP_PRF_VL4_XMIT_PKTS						5
#define TP_PRF_VL5_XMIT_PKTS						6
#define TP_PRF_VL6_XMIT_PKTS						7
#define TP_PRF_VL7_XMIT_PKTS						8
#define TP_PRF_VL8_XMIT_PKTS						9
#define TP_PRF_VL15_XMIT_PKTS						10
#define TP_PRF_XMIT_DATA						11
#define TP_PRF_VL0_XMIT_DATA						12
#define TP_PRF_VL1_XMIT_DATA						13
#define TP_PRF_VL2_XMIT_DATA						14
#define TP_PRF_VL3_XMIT_DATA						15
#define TP_PRF_VL4_XMIT_DATA						16
#define TP_PRF_VL5_XMIT_DATA						17
#define TP_PRF_VL6_XMIT_DATA						18
#define TP_PRF_VL7_XMIT_DATA						19
#define TP_PRF_VL8_XMIT_DATA						20
#define TP_PRF_VL15_XMIT_DATA						21
#define TP_PRF_MULTICAST_XMIT_PKTS					22
#define TP_PRF_XMIT_WAIT						23
#define TP_PRF_VL0_XMIT_WAIT						24
#define TP_PRF_VL1_XMIT_WAIT						25
#define TP_PRF_VL2_XMIT_WAIT						26
#define TP_PRF_VL3_XMIT_WAIT						27
#define TP_PRF_VL4_XMIT_WAIT						28
#define TP_PRF_VL5_XMIT_WAIT						29
#define TP_PRF_VL6_XMIT_WAIT						30
#define TP_PRF_VL7_XMIT_WAIT						31
#define TP_PRF_VL8_XMIT_WAIT						32
#define TP_PRF_VL15_XMIT_WAIT						33
#define TP_PRF_XMIT_WASTED_BW						34
#define TP_PRF_VL0_XMIT_WASTED_BW					35
#define TP_PRF_VL1_XMIT_WASTED_BW					36
#define TP_PRF_VL2_XMIT_WASTED_BW					37
#define TP_PRF_VL3_XMIT_WASTED_BW					38
#define TP_PRF_VL4_XMIT_WASTED_BW					39
#define TP_PRF_VL5_XMIT_WASTED_BW					40
#define TP_PRF_VL6_XMIT_WASTED_BW					41
#define TP_PRF_VL7_XMIT_WASTED_BW					42
#define TP_PRF_VL8_XMIT_WASTED_BW					43
#define TP_PRF_VL15_XMIT_WASTED_BW					44
#define TP_PRF_XMIT_WAIT_DATA						45
#define TP_PRF_VL0_XMIT_WAIT_DATA					46
#define TP_PRF_VL1_XMIT_WAIT_DATA					47
#define TP_PRF_VL2_XMIT_WAIT_DATA					48
#define TP_PRF_VL3_XMIT_WAIT_DATA					49
#define TP_PRF_VL4_XMIT_WAIT_DATA					50
#define TP_PRF_VL5_XMIT_WAIT_DATA					51
#define TP_PRF_VL6_XMIT_WAIT_DATA					52
#define TP_PRF_VL7_XMIT_WAIT_DATA					53
#define TP_PRF_VL8_XMIT_WAIT_DATA					54
#define TP_PRF_VL15_XMIT_WAIT_DATA					55
#define TP_PRF_MARK_FECN						56
#define TP_PRF_VL0_MARK_FECN						57
#define TP_PRF_VL1_MARK_FECN						58
#define TP_PRF_VL2_MARK_FECN						59
#define TP_PRF_VL3_MARK_FECN						60
#define TP_PRF_VL4_MARK_FECN						61
#define TP_PRF_VL5_MARK_FECN						62
#define TP_PRF_VL6_MARK_FECN						63
#define TP_PRF_VL7_MARK_FECN						64
#define TP_PRF_VL8_MARK_FECN						65
#define TP_PRF_VL15_MARK_FECN						66
#define TP_PRF_XMIT_TIME_CONGEST					67
#define TP_PRF_VL0_XMIT_TIME_CONGEST					68
#define TP_PRF_VL1_XMIT_TIME_CONGEST					69
#define TP_PRF_VL2_XMIT_TIME_CONGEST					70
#define TP_PRF_VL3_XMIT_TIME_CONGEST					71
#define TP_PRF_VL4_XMIT_TIME_CONGEST					72
#define TP_PRF_VL5_XMIT_TIME_CONGEST					73
#define TP_PRF_VL6_XMIT_TIME_CONGEST					74
#define TP_PRF_VL7_XMIT_TIME_CONGEST					75
#define TP_PRF_VL8_XMIT_TIME_CONGEST					76
#define TP_PRF_VL15_XMIT_TIME_CONGEST					77
#define TP_PRF_XMIT_PREEMPT						78
#define TP_PRF_CBUF0_SBUF_ALLOC_FAIL					79
#define TP_PRF_CBUF1_SBUF_ALLOC_FAIL					80
#define TP_PRF_CBUF2_SBUF_ALLOC_FAIL					81
#define TP_PRF_CBUF3_SBUF_ALLOC_FAIL					82
#define TP_PRF_VLP0_SBUF_ALLOC_FAIL					83
#define TP_PRF_VLP1_SBUF_ALLOC_FAIL					84
#define TP_PRF_VLP2_SBUF_ALLOC_FAIL					85
#define TP_PRF_VLP3_SBUF_ALLOC_FAIL					86
#define TP_PRF_VLP4_SBUF_ALLOC_FAIL					87
#define TP_PRF_VLP5_SBUF_ALLOC_FAIL					88
#define TP_PRF_VLP6_SBUF_ALLOC_FAIL					89
#define TP_PRF_VLP7_SBUF_ALLOC_FAIL					90
#define TP_PRF_VLP8_SBUF_ALLOC_FAIL					91
#define TP_PRF_VLP15_SBUF_ALLOC_FAIL					92
#define TP_ERR_SWPORT_CONGESTION					93
#define TP_ERR_VL0_SWPORT_CONGESTION					94
#define TP_ERR_VL1_SWPORT_CONGESTION					95
#define TP_ERR_VL2_SWPORT_CONGESTION					96
#define TP_ERR_VL3_SWPORT_CONGESTION					97
#define TP_ERR_VL4_SWPORT_CONGESTION					98
#define TP_ERR_VL5_SWPORT_CONGESTION					99
#define TP_ERR_VL6_SWPORT_CONGESTION					100
#define TP_ERR_VL7_SWPORT_CONGESTION					101
#define TP_ERR_VL8_SWPORT_CONGESTION					102
#define TP_ERR_VL15_SWPORT_CONGESTION					103
#define TP_ERR_XMIT_DISCARD						104
#define TP_ERR_VL0_XMIT_DISCARD						105
#define TP_ERR_VL1_XMIT_DISCARD						106
#define TP_ERR_VL2_XMIT_DISCARD						107
#define TP_ERR_VL3_XMIT_DISCARD						108
#define TP_ERR_VL4_XMIT_DISCARD						109
#define TP_ERR_VL5_XMIT_DISCARD						110
#define TP_ERR_VL6_XMIT_DISCARD						111
#define TP_ERR_VL7_XMIT_DISCARD						112
#define TP_ERR_VL8_XMIT_DISCARD						113
#define TP_ERR_VL15_XMIT_DISCARD					114
#define TP_ERR_XMIT_CONSTRAINT_ERROR					115
#define SCRATCH_0							116
/*
* Table #4 of fxr_top - TP_CFG_RESET
* The TPORT reset control register provides a mechanism to reset specific blocks 
* within TPORT.
*/
#define FXR_TP_CFG_RESET						(FXR_LM_TP_CSRS + 0x000000000000)
#define FXR_TP_CFG_RESET_RESETCSR					0x0000000000000000ull
#define FXR_TP_CFG_RESET_UNUSED_63_1_SHIFT				1
#define FXR_TP_CFG_RESET_UNUSED_63_1_MASK				0x7FFFFFFFFFFFFFFFull
#define FXR_TP_CFG_RESET_UNUSED_63_1_SMASK				0xFFFFFFFFFFFFFFFEull
#define FXR_TP_CFG_RESET_BLOCK_RESET_SHIFT				0
#define FXR_TP_CFG_RESET_BLOCK_RESET_MASK				0x1ull
#define FXR_TP_CFG_RESET_BLOCK_RESET_SMASK				0x1ull
/*
* Table #5 of fxr_top - TP_CFG_MISC_CTRL
* The TPORT Misc control registers provide error checking disable and mode 
* controls
*/
#define FXR_TP_CFG_MISC_CTRL						(FXR_LM_TP_CSRS + 0x000000000008)
#define FXR_TP_CFG_MISC_CTRL_RESETCSR					0x0000201400200200ull
#define FXR_TP_CFG_MISC_CTRL_UNUSED_63_51_SHIFT				51
#define FXR_TP_CFG_MISC_CTRL_UNUSED_63_51_MASK				0x1FFFull
#define FXR_TP_CFG_MISC_CTRL_UNUSED_63_51_SMASK				0xFFF8000000000000ull
#define FXR_TP_CFG_MISC_CTRL_DISABLE_16B_PKTS_SHIFT			50
#define FXR_TP_CFG_MISC_CTRL_DISABLE_16B_PKTS_MASK			0x1ull
#define FXR_TP_CFG_MISC_CTRL_DISABLE_16B_PKTS_SMASK			0x4000000000000ull
#define FXR_TP_CFG_MISC_CTRL_DISABLE_10B_PKTS_SHIFT			49
#define FXR_TP_CFG_MISC_CTRL_DISABLE_10B_PKTS_MASK			0x1ull
#define FXR_TP_CFG_MISC_CTRL_DISABLE_10B_PKTS_SMASK			0x2000000000000ull
#define FXR_TP_CFG_MISC_CTRL_DISABLE_9B_PKTS_SHIFT			48
#define FXR_TP_CFG_MISC_CTRL_DISABLE_9B_PKTS_MASK			0x1ull
#define FXR_TP_CFG_MISC_CTRL_DISABLE_9B_PKTS_SMASK			0x1000000000000ull
#define FXR_TP_CFG_MISC_CTRL_DISABLE_8B_PKTS_SHIFT			47
#define FXR_TP_CFG_MISC_CTRL_DISABLE_8B_PKTS_MASK			0x1ull
#define FXR_TP_CFG_MISC_CTRL_DISABLE_8B_PKTS_SMASK			0x800000000000ull
#define FXR_TP_CFG_MISC_CTRL_DISTANCE_MODE_SHIFT			46
#define FXR_TP_CFG_MISC_CTRL_DISTANCE_MODE_MASK				0x1ull
#define FXR_TP_CFG_MISC_CTRL_DISTANCE_MODE_SMASK			0x400000000000ull
#define FXR_TP_CFG_MISC_CTRL_OPERATIONAL_VL_SHIFT			36
#define FXR_TP_CFG_MISC_CTRL_OPERATIONAL_VL_MASK			0x3FFull
#define FXR_TP_CFG_MISC_CTRL_OPERATIONAL_VL_SMASK			0x3FF000000000ull
#define FXR_TP_CFG_MISC_CTRL_RX_DEVICE_SEL_SHIFT			35
#define FXR_TP_CFG_MISC_CTRL_RX_DEVICE_SEL_MASK				0x1ull
#define FXR_TP_CFG_MISC_CTRL_RX_DEVICE_SEL_SMASK			0x800000000ull
#define FXR_TP_CFG_MISC_CTRL_DISABLE_CLOCK_GATING_SHIFT			34
#define FXR_TP_CFG_MISC_CTRL_DISABLE_CLOCK_GATING_MASK			0x1ull
#define FXR_TP_CFG_MISC_CTRL_DISABLE_CLOCK_GATING_SMASK			0x400000000ull
#define FXR_TP_CFG_MISC_CTRL_WORMHOLE_EN_SHIFT				33
#define FXR_TP_CFG_MISC_CTRL_WORMHOLE_EN_MASK				0x1ull
#define FXR_TP_CFG_MISC_CTRL_WORMHOLE_EN_SMASK				0x200000000ull
#define FXR_TP_CFG_MISC_CTRL_DISABLE_ALL_VLS_SHIFT			32
#define FXR_TP_CFG_MISC_CTRL_DISABLE_ALL_VLS_MASK			0x1ull
#define FXR_TP_CFG_MISC_CTRL_DISABLE_ALL_VLS_SMASK			0x100000000ull
#define FXR_TP_CFG_MISC_CTRL_VL15_ARB_DISABLE_SHIFT			31
#define FXR_TP_CFG_MISC_CTRL_VL15_ARB_DISABLE_MASK			0x1ull
#define FXR_TP_CFG_MISC_CTRL_VL15_ARB_DISABLE_SMASK			0x80000000ull
#define FXR_TP_CFG_MISC_CTRL_VL8_0_ARB_DISABLE_SHIFT			22
#define FXR_TP_CFG_MISC_CTRL_VL8_0_ARB_DISABLE_MASK			0x1FFull
#define FXR_TP_CFG_MISC_CTRL_VL8_0_ARB_DISABLE_SMASK			0x7FC00000ull
#define FXR_TP_CFG_MISC_CTRL_DISABLE_RELIABLE_VL15_PKTS_SHIFT		21
#define FXR_TP_CFG_MISC_CTRL_DISABLE_RELIABLE_VL15_PKTS_MASK		0x1ull
#define FXR_TP_CFG_MISC_CTRL_DISABLE_RELIABLE_VL15_PKTS_SMASK		0x200000ull
#define FXR_TP_CFG_MISC_CTRL_DISABLE_RELIABLE_VL8_0_PKTS_SHIFT		12
#define FXR_TP_CFG_MISC_CTRL_DISABLE_RELIABLE_VL8_0_PKTS_MASK		0x1FFull
#define FXR_TP_CFG_MISC_CTRL_DISABLE_RELIABLE_VL8_0_PKTS_SMASK		0x1FF000ull
#define FXR_TP_CFG_MISC_CTRL_FC_BUFFER_SIZE_SHIFT			4
#define FXR_TP_CFG_MISC_CTRL_FC_BUFFER_SIZE_MASK			0xFFull
#define FXR_TP_CFG_MISC_CTRL_FC_BUFFER_SIZE_SMASK			0xFF0ull
#define FXR_TP_CFG_MISC_CTRL_DISABLE_EPOCH_CNT_CHECK_SHIFT		3
#define FXR_TP_CFG_MISC_CTRL_DISABLE_EPOCH_CNT_CHECK_MASK		0x1ull
#define FXR_TP_CFG_MISC_CTRL_DISABLE_EPOCH_CNT_CHECK_SMASK		0x8ull
#define FXR_TP_CFG_MISC_CTRL_DISABLE_SLL_CHECK_SHIFT			2
#define FXR_TP_CFG_MISC_CTRL_DISABLE_SLL_CHECK_MASK			0x1ull
#define FXR_TP_CFG_MISC_CTRL_DISABLE_SLL_CHECK_SMASK			0x4ull
#define FXR_TP_CFG_MISC_CTRL_DISABLE_HOQ_CHECK_SHIFT			1
#define FXR_TP_CFG_MISC_CTRL_DISABLE_HOQ_CHECK_MASK			0x1ull
#define FXR_TP_CFG_MISC_CTRL_DISABLE_HOQ_CHECK_SMASK			0x2ull
#define FXR_TP_CFG_MISC_CTRL_PKEY_CHK_ENABLE_SHIFT			0
#define FXR_TP_CFG_MISC_CTRL_PKEY_CHK_ENABLE_MASK			0x1ull
#define FXR_TP_CFG_MISC_CTRL_PKEY_CHK_ENABLE_SMASK			0x1ull
/*
* Table #6 of fxr_top - TP_CFG_TIMEOUT_CTRL
* The TPORT Timeout control register provide setting for packet 
* timeouts.
*/
#define FXR_TP_CFG_TIMEOUT_CTRL						(FXR_LM_TP_CSRS + 0x000000000010)
#define FXR_TP_CFG_TIMEOUT_CTRL_RESETCSR				0x000000000004B000ull
#define FXR_TP_CFG_TIMEOUT_CTRL_UNUSED_63_19_SHIFT			19
#define FXR_TP_CFG_TIMEOUT_CTRL_UNUSED_63_19_MASK			0x1FFFFFFFFFFFull
#define FXR_TP_CFG_TIMEOUT_CTRL_UNUSED_63_19_SMASK			0xFFFFFFFFFFF80000ull
#define FXR_TP_CFG_TIMEOUT_CTRL_CLOCKS_PER_US_SHIFT			8
#define FXR_TP_CFG_TIMEOUT_CTRL_CLOCKS_PER_US_MASK			0x7FFull
#define FXR_TP_CFG_TIMEOUT_CTRL_CLOCKS_PER_US_SMASK			0x7FF00ull
#define FXR_TP_CFG_TIMEOUT_CTRL_UNUSED_7_6_SHIFT			6
#define FXR_TP_CFG_TIMEOUT_CTRL_UNUSED_7_6_MASK				0x3ull
#define FXR_TP_CFG_TIMEOUT_CTRL_UNUSED_7_6_SMASK			0xC0ull
#define FXR_TP_CFG_TIMEOUT_CTRL_REQ_TO_INC_SHIFT			1
#define FXR_TP_CFG_TIMEOUT_CTRL_REQ_TO_INC_MASK				0x1Full
#define FXR_TP_CFG_TIMEOUT_CTRL_REQ_TO_INC_SMASK			0x3Eull
#define FXR_TP_CFG_TIMEOUT_CTRL_TEST_TO_COUNTER_SHIFT			0
#define FXR_TP_CFG_TIMEOUT_CTRL_TEST_TO_COUNTER_MASK			0x1ull
#define FXR_TP_CFG_TIMEOUT_CTRL_TEST_TO_COUNTER_SMASK			0x1ull
/*
* Table #7 of fxr_top - TP_CFG_VL_MTU
* The TPORT VL MTU registers set the maximum transfer unit (payload plus header) 
* for each VL. If the packet header length is larger that the VL MTU the packet 
* is discarded.
*/
#define FXR_TP_CFG_VL_MTU						(FXR_LM_TP_CSRS + 0x000000000018)
#define FXR_TP_CFG_VL_MTU_RESETCSR					0x4000000000000000ull
#define FXR_TP_CFG_VL_MTU_VL15_TX_MTU_SHIFT				60
#define FXR_TP_CFG_VL_MTU_VL15_TX_MTU_MASK				0xFull
#define FXR_TP_CFG_VL_MTU_VL15_TX_MTU_SMASK				0xF000000000000000ull
#define FXR_TP_CFG_VL_MTU_UNUSED_59_36_SHIFT				36
#define FXR_TP_CFG_VL_MTU_UNUSED_59_36_MASK				0xFFFFFFull
#define FXR_TP_CFG_VL_MTU_UNUSED_59_36_SMASK				0xFFFFFF000000000ull
#define FXR_TP_CFG_VL_MTU_VL8_TX_MTU_SHIFT				32
#define FXR_TP_CFG_VL_MTU_VL8_TX_MTU_MASK				0xFull
#define FXR_TP_CFG_VL_MTU_VL8_TX_MTU_SMASK				0xF00000000ull
#define FXR_TP_CFG_VL_MTU_VL7_TX_MTU_SHIFT				28
#define FXR_TP_CFG_VL_MTU_VL7_TX_MTU_MASK				0xFull
#define FXR_TP_CFG_VL_MTU_VL7_TX_MTU_SMASK				0xF0000000ull
#define FXR_TP_CFG_VL_MTU_VL6_TX_MTU_SHIFT				24
#define FXR_TP_CFG_VL_MTU_VL6_TX_MTU_MASK				0xFull
#define FXR_TP_CFG_VL_MTU_VL6_TX_MTU_SMASK				0xF000000ull
#define FXR_TP_CFG_VL_MTU_VL5_TX_MTU_SHIFT				20
#define FXR_TP_CFG_VL_MTU_VL5_TX_MTU_MASK				0xFull
#define FXR_TP_CFG_VL_MTU_VL5_TX_MTU_SMASK				0xF00000ull
#define FXR_TP_CFG_VL_MTU_VL4_TX_MTU_SHIFT				16
#define FXR_TP_CFG_VL_MTU_VL4_TX_MTU_MASK				0xFull
#define FXR_TP_CFG_VL_MTU_VL4_TX_MTU_SMASK				0xF0000ull
#define FXR_TP_CFG_VL_MTU_VL3_TX_MTU_SHIFT				12
#define FXR_TP_CFG_VL_MTU_VL3_TX_MTU_MASK				0xFull
#define FXR_TP_CFG_VL_MTU_VL3_TX_MTU_SMASK				0xF000ull
#define FXR_TP_CFG_VL_MTU_VL2_TX_MTU_SHIFT				8
#define FXR_TP_CFG_VL_MTU_VL2_TX_MTU_MASK				0xFull
#define FXR_TP_CFG_VL_MTU_VL2_TX_MTU_SMASK				0xF00ull
#define FXR_TP_CFG_VL_MTU_VL1_TX_MTU_SHIFT				4
#define FXR_TP_CFG_VL_MTU_VL1_TX_MTU_MASK				0xFull
#define FXR_TP_CFG_VL_MTU_VL1_TX_MTU_SMASK				0xF0ull
#define FXR_TP_CFG_VL_MTU_VL0_TX_MTU_SHIFT				0
#define FXR_TP_CFG_VL_MTU_VL0_TX_MTU_MASK				0xFull
#define FXR_TP_CFG_VL_MTU_VL0_TX_MTU_SMASK				0xFull
/*
* Table #8 of fxr_top - TP_CFG_VL_HOQ_LIFE
* The TPORT VL HOQ Life registers set the maximum time a packet can wait at the 
* head of a VL queue. The packet tag can wait at the head of a VL queue for two 
* reasons:
*/
#define FXR_TP_CFG_VL_HOQ_LIFE						(FXR_LM_TP_CSRS + 0x000000000020)
#define FXR_TP_CFG_VL_HOQ_LIFE_RESETCSR					0x001D6B5AD6B5AD6Bull
#define FXR_TP_CFG_VL_HOQ_LIFE_UNUSED_63_53_SHIFT			53
#define FXR_TP_CFG_VL_HOQ_LIFE_UNUSED_63_53_MASK			0x7FFull
#define FXR_TP_CFG_VL_HOQ_LIFE_UNUSED_63_53_SMASK			0xFFE0000000000000ull
#define FXR_TP_CFG_VL_HOQ_LIFE_VL_STALL_CNT_SHIFT			50
#define FXR_TP_CFG_VL_HOQ_LIFE_VL_STALL_CNT_MASK			0x7ull
#define FXR_TP_CFG_VL_HOQ_LIFE_VL_STALL_CNT_SMASK			0x1C000000000000ull
#define FXR_TP_CFG_VL_HOQ_LIFE_ENTRY9_SHIFT				45
#define FXR_TP_CFG_VL_HOQ_LIFE_ENTRY9_MASK				0x1Full
#define FXR_TP_CFG_VL_HOQ_LIFE_ENTRY9_SMASK				0x3E00000000000ull
#define FXR_TP_CFG_VL_HOQ_LIFE_ENTRY8_SHIFT				40
#define FXR_TP_CFG_VL_HOQ_LIFE_ENTRY8_MASK				0x1Full
#define FXR_TP_CFG_VL_HOQ_LIFE_ENTRY8_SMASK				0x1F0000000000ull
#define FXR_TP_CFG_VL_HOQ_LIFE_ENTRY7_SHIFT				35
#define FXR_TP_CFG_VL_HOQ_LIFE_ENTRY7_MASK				0x1Full
#define FXR_TP_CFG_VL_HOQ_LIFE_ENTRY7_SMASK				0xF800000000ull
#define FXR_TP_CFG_VL_HOQ_LIFE_ENTRY6_SHIFT				30
#define FXR_TP_CFG_VL_HOQ_LIFE_ENTRY6_MASK				0x1Full
#define FXR_TP_CFG_VL_HOQ_LIFE_ENTRY6_SMASK				0x7C0000000ull
#define FXR_TP_CFG_VL_HOQ_LIFE_ENTRY5_SHIFT				25
#define FXR_TP_CFG_VL_HOQ_LIFE_ENTRY5_MASK				0x1Full
#define FXR_TP_CFG_VL_HOQ_LIFE_ENTRY5_SMASK				0x3E000000ull
#define FXR_TP_CFG_VL_HOQ_LIFE_ENTRY4_SHIFT				20
#define FXR_TP_CFG_VL_HOQ_LIFE_ENTRY4_MASK				0x1Full
#define FXR_TP_CFG_VL_HOQ_LIFE_ENTRY4_SMASK				0x1F00000ull
#define FXR_TP_CFG_VL_HOQ_LIFE_ENTRY3_SHIFT				15
#define FXR_TP_CFG_VL_HOQ_LIFE_ENTRY3_MASK				0x1Full
#define FXR_TP_CFG_VL_HOQ_LIFE_ENTRY3_SMASK				0xF8000ull
#define FXR_TP_CFG_VL_HOQ_LIFE_ENTRY2_SHIFT				10
#define FXR_TP_CFG_VL_HOQ_LIFE_ENTRY2_MASK				0x1Full
#define FXR_TP_CFG_VL_HOQ_LIFE_ENTRY2_SMASK				0x7C00ull
#define FXR_TP_CFG_VL_HOQ_LIFE_ENTRY1_SHIFT				5
#define FXR_TP_CFG_VL_HOQ_LIFE_ENTRY1_MASK				0x1Full
#define FXR_TP_CFG_VL_HOQ_LIFE_ENTRY1_SMASK				0x3E0ull
#define FXR_TP_CFG_VL_HOQ_LIFE_ENTRY0_SHIFT				0
#define FXR_TP_CFG_VL_HOQ_LIFE_ENTRY0_MASK				0x1Full
#define FXR_TP_CFG_VL_HOQ_LIFE_ENTRY0_SMASK				0x1Full
/*
* Table #9 of fxr_top - TP_CFG_SC_TO_VLT_MAP
* SC to VL_t map registers are used to map the 32 SCs to the 10 VL_t's. There 
* are 16 entries per CSR.
*/
#define FXR_TP_CFG_SC_TO_VLT_MAP					(FXR_LM_TP_CSRS + 0x000000000030)
#define FXR_TP_CFG_SC_TO_VLT_MAP_RESETCSR				0x0000000000000000ull
#define FXR_TP_CFG_SC_TO_VLT_MAP_ENTRY15_SHIFT				60
#define FXR_TP_CFG_SC_TO_VLT_MAP_ENTRY15_MASK				0xFull
#define FXR_TP_CFG_SC_TO_VLT_MAP_ENTRY15_SMASK				0xF000000000000000ull
#define FXR_TP_CFG_SC_TO_VLT_MAP_ENTRY14_SHIFT				56
#define FXR_TP_CFG_SC_TO_VLT_MAP_ENTRY14_MASK				0xFull
#define FXR_TP_CFG_SC_TO_VLT_MAP_ENTRY14_SMASK				0xF00000000000000ull
#define FXR_TP_CFG_SC_TO_VLT_MAP_ENTRY13_SHIFT				52
#define FXR_TP_CFG_SC_TO_VLT_MAP_ENTRY13_MASK				0xFull
#define FXR_TP_CFG_SC_TO_VLT_MAP_ENTRY13_SMASK				0xF0000000000000ull
#define FXR_TP_CFG_SC_TO_VLT_MAP_ENTRY12_SHIFT				48
#define FXR_TP_CFG_SC_TO_VLT_MAP_ENTRY12_MASK				0xFull
#define FXR_TP_CFG_SC_TO_VLT_MAP_ENTRY12_SMASK				0xF000000000000ull
#define FXR_TP_CFG_SC_TO_VLT_MAP_ENTRY11_SHIFT				44
#define FXR_TP_CFG_SC_TO_VLT_MAP_ENTRY11_MASK				0xFull
#define FXR_TP_CFG_SC_TO_VLT_MAP_ENTRY11_SMASK				0xF00000000000ull
#define FXR_TP_CFG_SC_TO_VLT_MAP_ENTRY10_SHIFT				40
#define FXR_TP_CFG_SC_TO_VLT_MAP_ENTRY10_MASK				0xFull
#define FXR_TP_CFG_SC_TO_VLT_MAP_ENTRY10_SMASK				0xF0000000000ull
#define FXR_TP_CFG_SC_TO_VLT_MAP_ENTRY9_SHIFT				36
#define FXR_TP_CFG_SC_TO_VLT_MAP_ENTRY9_MASK				0xFull
#define FXR_TP_CFG_SC_TO_VLT_MAP_ENTRY9_SMASK				0xF000000000ull
#define FXR_TP_CFG_SC_TO_VLT_MAP_ENTRY8_SHIFT				32
#define FXR_TP_CFG_SC_TO_VLT_MAP_ENTRY8_MASK				0xFull
#define FXR_TP_CFG_SC_TO_VLT_MAP_ENTRY8_SMASK				0xF00000000ull
#define FXR_TP_CFG_SC_TO_VLT_MAP_ENTRY7_SHIFT				28
#define FXR_TP_CFG_SC_TO_VLT_MAP_ENTRY7_MASK				0xFull
#define FXR_TP_CFG_SC_TO_VLT_MAP_ENTRY7_SMASK				0xF0000000ull
#define FXR_TP_CFG_SC_TO_VLT_MAP_ENTRY6_SHIFT				24
#define FXR_TP_CFG_SC_TO_VLT_MAP_ENTRY6_MASK				0xFull
#define FXR_TP_CFG_SC_TO_VLT_MAP_ENTRY6_SMASK				0xF000000ull
#define FXR_TP_CFG_SC_TO_VLT_MAP_ENTRY5_SHIFT				20
#define FXR_TP_CFG_SC_TO_VLT_MAP_ENTRY5_MASK				0xFull
#define FXR_TP_CFG_SC_TO_VLT_MAP_ENTRY5_SMASK				0xF00000ull
#define FXR_TP_CFG_SC_TO_VLT_MAP_ENTRY4_SHIFT				16
#define FXR_TP_CFG_SC_TO_VLT_MAP_ENTRY4_MASK				0xFull
#define FXR_TP_CFG_SC_TO_VLT_MAP_ENTRY4_SMASK				0xF0000ull
#define FXR_TP_CFG_SC_TO_VLT_MAP_ENTRY3_SHIFT				12
#define FXR_TP_CFG_SC_TO_VLT_MAP_ENTRY3_MASK				0xFull
#define FXR_TP_CFG_SC_TO_VLT_MAP_ENTRY3_SMASK				0xF000ull
#define FXR_TP_CFG_SC_TO_VLT_MAP_ENTRY2_SHIFT				8
#define FXR_TP_CFG_SC_TO_VLT_MAP_ENTRY2_MASK				0xFull
#define FXR_TP_CFG_SC_TO_VLT_MAP_ENTRY2_SMASK				0xF00ull
#define FXR_TP_CFG_SC_TO_VLT_MAP_ENTRY1_SHIFT				4
#define FXR_TP_CFG_SC_TO_VLT_MAP_ENTRY1_MASK				0xFull
#define FXR_TP_CFG_SC_TO_VLT_MAP_ENTRY1_SMASK				0xF0ull
#define FXR_TP_CFG_SC_TO_VLT_MAP_ENTRY0_SHIFT				0
#define FXR_TP_CFG_SC_TO_VLT_MAP_ENTRY0_MASK				0xFull
#define FXR_TP_CFG_SC_TO_VLT_MAP_ENTRY0_SMASK				0xFull
/*
* Table #10 of fxr_top - TP_CFG_VLP_TO_VLT_MAP
* VLp to VL_t map registers are used to map the 10 VLp's to the 10 VL_t's. This 
* CSR is for resiliency, it is only used if there is a multiple bit error in the 
* Rinfo Fifo.
*/
#define FXR_TP_CFG_VLP_TO_VLT_MAP					(FXR_LM_TP_CSRS + 0x000000000040)
#define FXR_TP_CFG_VLP_TO_VLT_MAP_RESETCSR				0x0000000000000000ull
#define FXR_TP_CFG_VLP_TO_VLT_MAP_ENTRY15_SHIFT				60
#define FXR_TP_CFG_VLP_TO_VLT_MAP_ENTRY15_MASK				0xFull
#define FXR_TP_CFG_VLP_TO_VLT_MAP_ENTRY15_SMASK				0xF000000000000000ull
#define FXR_TP_CFG_VLP_TO_VLT_MAP_UNUSED_59_36_SHIFT			36
#define FXR_TP_CFG_VLP_TO_VLT_MAP_UNUSED_59_36_MASK			0xFFFFFFull
#define FXR_TP_CFG_VLP_TO_VLT_MAP_UNUSED_59_36_SMASK			0xFFFFFF000000000ull
#define FXR_TP_CFG_VLP_TO_VLT_MAP_ENTRY8_SHIFT				32
#define FXR_TP_CFG_VLP_TO_VLT_MAP_ENTRY8_MASK				0xFull
#define FXR_TP_CFG_VLP_TO_VLT_MAP_ENTRY8_SMASK				0xF00000000ull
#define FXR_TP_CFG_VLP_TO_VLT_MAP_ENTRY7_SHIFT				28
#define FXR_TP_CFG_VLP_TO_VLT_MAP_ENTRY7_MASK				0xFull
#define FXR_TP_CFG_VLP_TO_VLT_MAP_ENTRY7_SMASK				0xF0000000ull
#define FXR_TP_CFG_VLP_TO_VLT_MAP_ENTRY6_SHIFT				24
#define FXR_TP_CFG_VLP_TO_VLT_MAP_ENTRY6_MASK				0xFull
#define FXR_TP_CFG_VLP_TO_VLT_MAP_ENTRY6_SMASK				0xF000000ull
#define FXR_TP_CFG_VLP_TO_VLT_MAP_ENTRY5_SHIFT				20
#define FXR_TP_CFG_VLP_TO_VLT_MAP_ENTRY5_MASK				0xFull
#define FXR_TP_CFG_VLP_TO_VLT_MAP_ENTRY5_SMASK				0xF00000ull
#define FXR_TP_CFG_VLP_TO_VLT_MAP_ENTRY4_SHIFT				16
#define FXR_TP_CFG_VLP_TO_VLT_MAP_ENTRY4_MASK				0xFull
#define FXR_TP_CFG_VLP_TO_VLT_MAP_ENTRY4_SMASK				0xF0000ull
#define FXR_TP_CFG_VLP_TO_VLT_MAP_ENTRY3_SHIFT				12
#define FXR_TP_CFG_VLP_TO_VLT_MAP_ENTRY3_MASK				0xFull
#define FXR_TP_CFG_VLP_TO_VLT_MAP_ENTRY3_SMASK				0xF000ull
#define FXR_TP_CFG_VLP_TO_VLT_MAP_ENTRY2_SHIFT				8
#define FXR_TP_CFG_VLP_TO_VLT_MAP_ENTRY2_MASK				0xFull
#define FXR_TP_CFG_VLP_TO_VLT_MAP_ENTRY2_SMASK				0xF00ull
#define FXR_TP_CFG_VLP_TO_VLT_MAP_ENTRY1_SHIFT				4
#define FXR_TP_CFG_VLP_TO_VLT_MAP_ENTRY1_MASK				0xFull
#define FXR_TP_CFG_VLP_TO_VLT_MAP_ENTRY1_SMASK				0xF0ull
#define FXR_TP_CFG_VLP_TO_VLT_MAP_ENTRY0_SHIFT				0
#define FXR_TP_CFG_VLP_TO_VLT_MAP_ENTRY0_MASK				0xFull
#define FXR_TP_CFG_VLP_TO_VLT_MAP_ENTRY0_SMASK				0xFull
/*
* Table #11 of fxr_top - TP_CFG_BWCHECK
* The priority registers control the priority masks for the High, Medium, Low 
* and Non-Conforming MLRU arbiters
*/
#define FXR_TP_CFG_BWCHECK						(FXR_LM_TP_CSRS + 0x000000000050)
#define FXR_TP_CFG_BWCHECK_RESETCSR					0x0000000000000000ull
#define FXR_TP_CFG_BWCHECK_UNUSED_63_45_SHIFT				45
#define FXR_TP_CFG_BWCHECK_UNUSED_63_45_MASK				0x7FFFFull
#define FXR_TP_CFG_BWCHECK_UNUSED_63_45_SMASK				0xFFFFE00000000000ull
#define FXR_TP_CFG_BWCHECK_VL8_BWMETER_POINTER_SHIFT			42
#define FXR_TP_CFG_BWCHECK_VL8_BWMETER_POINTER_MASK			0x7ull
#define FXR_TP_CFG_BWCHECK_VL8_BWMETER_POINTER_SMASK			0x1C0000000000ull
#define FXR_TP_CFG_BWCHECK_VL8_CONFORMING_PRIORITY_SHIFT		40
#define FXR_TP_CFG_BWCHECK_VL8_CONFORMING_PRIORITY_MASK			0x3ull
#define FXR_TP_CFG_BWCHECK_VL8_CONFORMING_PRIORITY_SMASK		0x30000000000ull
#define FXR_TP_CFG_BWCHECK_VL7_BWMETER_POINTER_SHIFT			37
#define FXR_TP_CFG_BWCHECK_VL7_BWMETER_POINTER_MASK			0x7ull
#define FXR_TP_CFG_BWCHECK_VL7_BWMETER_POINTER_SMASK			0xE000000000ull
#define FXR_TP_CFG_BWCHECK_VL7_CONFORMING_PRIORITY_SHIFT		35
#define FXR_TP_CFG_BWCHECK_VL7_CONFORMING_PRIORITY_MASK			0x3ull
#define FXR_TP_CFG_BWCHECK_VL7_CONFORMING_PRIORITY_SMASK		0x1800000000ull
#define FXR_TP_CFG_BWCHECK_VL6_BWMETER_POINTER_SHIFT			32
#define FXR_TP_CFG_BWCHECK_VL6_BWMETER_POINTER_MASK			0x7ull
#define FXR_TP_CFG_BWCHECK_VL6_BWMETER_POINTER_SMASK			0x700000000ull
#define FXR_TP_CFG_BWCHECK_VL6_CONFORMING_PRIORITY_SHIFT		30
#define FXR_TP_CFG_BWCHECK_VL6_CONFORMING_PRIORITY_MASK			0x3ull
#define FXR_TP_CFG_BWCHECK_VL6_CONFORMING_PRIORITY_SMASK		0xC0000000ull
#define FXR_TP_CFG_BWCHECK_VL5_BWMETER_POINTER_SHIFT			27
#define FXR_TP_CFG_BWCHECK_VL5_BWMETER_POINTER_MASK			0x7ull
#define FXR_TP_CFG_BWCHECK_VL5_BWMETER_POINTER_SMASK			0x38000000ull
#define FXR_TP_CFG_BWCHECK_VL5_CONFORMING_PRIORITY_SHIFT		25
#define FXR_TP_CFG_BWCHECK_VL5_CONFORMING_PRIORITY_MASK			0x3ull
#define FXR_TP_CFG_BWCHECK_VL5_CONFORMING_PRIORITY_SMASK		0x6000000ull
#define FXR_TP_CFG_BWCHECK_VL4_BWMETER_POINTER_SHIFT			22
#define FXR_TP_CFG_BWCHECK_VL4_BWMETER_POINTER_MASK			0x7ull
#define FXR_TP_CFG_BWCHECK_VL4_BWMETER_POINTER_SMASK			0x1C00000ull
#define FXR_TP_CFG_BWCHECK_VL4_CONFORMING_PRIORITY_SHIFT		20
#define FXR_TP_CFG_BWCHECK_VL4_CONFORMING_PRIORITY_MASK			0x3ull
#define FXR_TP_CFG_BWCHECK_VL4_CONFORMING_PRIORITY_SMASK		0x300000ull
#define FXR_TP_CFG_BWCHECK_VL3_BWMETER_POINTER_SHIFT			17
#define FXR_TP_CFG_BWCHECK_VL3_BWMETER_POINTER_MASK			0x7ull
#define FXR_TP_CFG_BWCHECK_VL3_BWMETER_POINTER_SMASK			0xE0000ull
#define FXR_TP_CFG_BWCHECK_VL3_CONFORMING_PRIORITY_SHIFT		15
#define FXR_TP_CFG_BWCHECK_VL3_CONFORMING_PRIORITY_MASK			0x3ull
#define FXR_TP_CFG_BWCHECK_VL3_CONFORMING_PRIORITY_SMASK		0x18000ull
#define FXR_TP_CFG_BWCHECK_VL2_BWMETER_POINTER_SHIFT			12
#define FXR_TP_CFG_BWCHECK_VL2_BWMETER_POINTER_MASK			0x7ull
#define FXR_TP_CFG_BWCHECK_VL2_BWMETER_POINTER_SMASK			0x7000ull
#define FXR_TP_CFG_BWCHECK_VL2_CONFORMING_PRIORITY_SHIFT		10
#define FXR_TP_CFG_BWCHECK_VL2_CONFORMING_PRIORITY_MASK			0x3ull
#define FXR_TP_CFG_BWCHECK_VL2_CONFORMING_PRIORITY_SMASK		0xC00ull
#define FXR_TP_CFG_BWCHECK_VL1_BWMETER_POINTER_SHIFT			7
#define FXR_TP_CFG_BWCHECK_VL1_BWMETER_POINTER_MASK			0x7ull
#define FXR_TP_CFG_BWCHECK_VL1_BWMETER_POINTER_SMASK			0x380ull
#define FXR_TP_CFG_BWCHECK_VL1_CONFORMING_PRIORITY_SHIFT		5
#define FXR_TP_CFG_BWCHECK_VL1_CONFORMING_PRIORITY_MASK			0x3ull
#define FXR_TP_CFG_BWCHECK_VL1_CONFORMING_PRIORITY_SMASK		0x60ull
#define FXR_TP_CFG_BWCHECK_VL0_BWMETER_POINTER_SHIFT			2
#define FXR_TP_CFG_BWCHECK_VL0_BWMETER_POINTER_MASK			0x7ull
#define FXR_TP_CFG_BWCHECK_VL0_BWMETER_POINTER_SMASK			0x1Cull
#define FXR_TP_CFG_BWCHECK_VL0_CONFORMING_PRIORITY_SHIFT		0
#define FXR_TP_CFG_BWCHECK_VL0_CONFORMING_PRIORITY_MASK			0x3ull
#define FXR_TP_CFG_BWCHECK_VL0_CONFORMING_PRIORITY_SMASK		0x3ull
/*
* Table #12 of fxr_top - TP_CFG_BWMETER
* The leaky bucket registers control the eight leaky buckets for the High, 
* Medium, Low and Non-Conforming MLRU arbiters
*/
#define FXR_TP_CFG_BWMETER						(FXR_LM_TP_CSRS + 0x000000000060)
#define FXR_TP_CFG_BWMETER_RESETCSR					0x0000FFFF00070000ull
#define FXR_TP_CFG_BWMETER_UNUSED_63_48_SHIFT				48
#define FXR_TP_CFG_BWMETER_UNUSED_63_48_MASK				0xFFFFull
#define FXR_TP_CFG_BWMETER_UNUSED_63_48_SMASK				0xFFFF000000000000ull
#define FXR_TP_CFG_BWMETER_BANDWIDTH_LIMIT_SHIFT			32
#define FXR_TP_CFG_BWMETER_BANDWIDTH_LIMIT_MASK				0xFFFFull
#define FXR_TP_CFG_BWMETER_BANDWIDTH_LIMIT_SMASK			0xFFFF00000000ull
#define FXR_TP_CFG_BWMETER_UNUSED_31_19_SHIFT				19
#define FXR_TP_CFG_BWMETER_UNUSED_31_19_MASK				0x1FFFull
#define FXR_TP_CFG_BWMETER_UNUSED_31_19_SMASK				0xFFF80000ull
#define FXR_TP_CFG_BWMETER_LEAK_AMOUNT_INTEGRAL_SHIFT			16
#define FXR_TP_CFG_BWMETER_LEAK_AMOUNT_INTEGRAL_MASK			0x7ull
#define FXR_TP_CFG_BWMETER_LEAK_AMOUNT_INTEGRAL_SMASK			0x70000ull
#define FXR_TP_CFG_BWMETER_LEAK_AMOUNT_FRACTIONAL_SHIFT			8
#define FXR_TP_CFG_BWMETER_LEAK_AMOUNT_FRACTIONAL_MASK			0xFFull
#define FXR_TP_CFG_BWMETER_LEAK_AMOUNT_FRACTIONAL_SMASK			0xFF00ull
#define FXR_TP_CFG_BWMETER_UNUSED_7_0_SHIFT				0
#define FXR_TP_CFG_BWMETER_UNUSED_7_0_MASK				0xFFull
#define FXR_TP_CFG_BWMETER_UNUSED_7_0_SMASK				0xFFull
/*
* Table #13 of fxr_top - TP_CFG_PREEMPT_CTRL
* The preempt limit registers control when preemption is allowed, the size of 
* small, large, and preempt credit limit.
*/
#define FXR_TP_CFG_PREEMPT_CTRL						(FXR_LM_TP_CSRS + 0x0000000000A0)
#define FXR_TP_CFG_PREEMPT_CTRL_RESETCSR				0x0000000000210204ull
#define FXR_TP_CFG_PREEMPT_CTRL_UNUSED_63_58_SHIFT			58
#define FXR_TP_CFG_PREEMPT_CTRL_UNUSED_63_58_MASK			0x3Full
#define FXR_TP_CFG_PREEMPT_CTRL_UNUSED_63_58_SMASK			0xFC00000000000000ull
#define FXR_TP_CFG_PREEMPT_CTRL_HEAD_DISTANCE_SHIFT			54
#define FXR_TP_CFG_PREEMPT_CTRL_HEAD_DISTANCE_MASK			0xFull
#define FXR_TP_CFG_PREEMPT_CTRL_HEAD_DISTANCE_SMASK			0x3C0000000000000ull
#define FXR_TP_CFG_PREEMPT_CTRL_TAIL_DISTANCE_SHIFT			46
#define FXR_TP_CFG_PREEMPT_CTRL_TAIL_DISTANCE_MASK			0xFFull
#define FXR_TP_CFG_PREEMPT_CTRL_TAIL_DISTANCE_SMASK			0x3FC00000000000ull
#define FXR_TP_CFG_PREEMPT_CTRL_MAX_EXPLICIT_LEVEL_TX_ENABLED_SHIFT	42
#define FXR_TP_CFG_PREEMPT_CTRL_MAX_EXPLICIT_LEVEL_TX_ENABLED_MASK	0xFull
#define FXR_TP_CFG_PREEMPT_CTRL_MAX_EXPLICIT_LEVEL_TX_ENABLED_SMASK	0x3C0000000000ull
#define FXR_TP_CFG_PREEMPT_CTRL_MIN_INITIAL_SHIFT			32
#define FXR_TP_CFG_PREEMPT_CTRL_MIN_INITIAL_MASK			0x3FFull
#define FXR_TP_CFG_PREEMPT_CTRL_MIN_INITIAL_SMASK			0x3FF00000000ull
#define FXR_TP_CFG_PREEMPT_CTRL_UNUSED_31_30_SHIFT			30
#define FXR_TP_CFG_PREEMPT_CTRL_UNUSED_31_30_MASK			0x3ull
#define FXR_TP_CFG_PREEMPT_CTRL_UNUSED_31_30_SMASK			0xC0000000ull
#define FXR_TP_CFG_PREEMPT_CTRL_MIN_TAIL_SHIFT				20
#define FXR_TP_CFG_PREEMPT_CTRL_MIN_TAIL_MASK				0x3FFull
#define FXR_TP_CFG_PREEMPT_CTRL_MIN_TAIL_SMASK				0x3FF00000ull
#define FXR_TP_CFG_PREEMPT_CTRL_LARGE_PKT_LIMIT_SHIFT			16
#define FXR_TP_CFG_PREEMPT_CTRL_LARGE_PKT_LIMIT_MASK			0xFull
#define FXR_TP_CFG_PREEMPT_CTRL_LARGE_PKT_LIMIT_SMASK			0xF0000ull
#define FXR_TP_CFG_PREEMPT_CTRL_SMALL_PKT_LIMIT_SHIFT			8
#define FXR_TP_CFG_PREEMPT_CTRL_SMALL_PKT_LIMIT_MASK			0xFFull
#define FXR_TP_CFG_PREEMPT_CTRL_SMALL_PKT_LIMIT_SMASK			0xFF00ull
#define FXR_TP_CFG_PREEMPT_CTRL_PREEMPTION_LIMIT_SHIFT			0
#define FXR_TP_CFG_PREEMPT_CTRL_PREEMPTION_LIMIT_MASK			0xFFull
#define FXR_TP_CFG_PREEMPT_CTRL_PREEMPTION_LIMIT_SMASK			0xFFull
/*
* Table #14 of fxr_top - TP_CFG_PREEMPT_MATRIX
* VLx Packet preemption matrix.
*/
#define FXR_TP_CFG_PREEMPT_MATRIX					(FXR_LM_TP_CSRS + 0x0000000000B0)
#define FXR_TP_CFG_PREEMPT_MATRIX_RESETCSR				0x0000000000000000ull
#define FXR_TP_CFG_PREEMPT_MATRIX_UNUSED_63_50_SHIFT			50
#define FXR_TP_CFG_PREEMPT_MATRIX_UNUSED_63_50_MASK			0x3FFFull
#define FXR_TP_CFG_PREEMPT_MATRIX_UNUSED_63_50_SMASK			0xFFFC000000000000ull
#define FXR_TP_CFG_PREEMPT_MATRIX_ENTRY4_SHIFT				40
#define FXR_TP_CFG_PREEMPT_MATRIX_ENTRY4_MASK				0x3FFull
#define FXR_TP_CFG_PREEMPT_MATRIX_ENTRY4_SMASK				0x3FF0000000000ull
#define FXR_TP_CFG_PREEMPT_MATRIX_ENTRY3_SHIFT				30
#define FXR_TP_CFG_PREEMPT_MATRIX_ENTRY3_MASK				0x3FFull
#define FXR_TP_CFG_PREEMPT_MATRIX_ENTRY3_SMASK				0xFFC0000000ull
#define FXR_TP_CFG_PREEMPT_MATRIX_ENTRY2_SHIFT				20
#define FXR_TP_CFG_PREEMPT_MATRIX_ENTRY2_MASK				0x3FFull
#define FXR_TP_CFG_PREEMPT_MATRIX_ENTRY2_SMASK				0x3FF00000ull
#define FXR_TP_CFG_PREEMPT_MATRIX_ENTRY1_SHIFT				10
#define FXR_TP_CFG_PREEMPT_MATRIX_ENTRY1_MASK				0x3FFull
#define FXR_TP_CFG_PREEMPT_MATRIX_ENTRY1_SMASK				0xFFC00ull
#define FXR_TP_CFG_PREEMPT_MATRIX_ENTRY0_SHIFT				0
#define FXR_TP_CFG_PREEMPT_MATRIX_ENTRY0_MASK				0x3FFull
#define FXR_TP_CFG_PREEMPT_MATRIX_ENTRY0_SMASK				0x3FFull
/*
* Table #15 of fxr_top - TP_CFG_SPILL_BUFFER_CTRL
* The spill buffer control register.
*/
#define FXR_TP_CFG_SPILL_BUFFER_CTRL					(FXR_LM_TP_CSRS + 0x0000000000C0)
#define FXR_TP_CFG_SPILL_BUFFER_CTRL_RESETCSR				0x0000093000840000ull
#define FXR_TP_CFG_SPILL_BUFFER_CTRL_UNUSED_63_44_SHIFT			44
#define FXR_TP_CFG_SPILL_BUFFER_CTRL_UNUSED_63_44_MASK			0xFFFFFull
#define FXR_TP_CFG_SPILL_BUFFER_CTRL_UNUSED_63_44_SMASK			0xFFFFF00000000000ull
#define FXR_TP_CFG_SPILL_BUFFER_CTRL_SUBSW_SB_CREDITS_SHIFT		38
#define FXR_TP_CFG_SPILL_BUFFER_CTRL_SUBSW_SB_CREDITS_MASK		0x3Full
#define FXR_TP_CFG_SPILL_BUFFER_CTRL_SUBSW_SB_CREDITS_SMASK		0xFC000000000ull
#define FXR_TP_CFG_SPILL_BUFFER_CTRL_SUBSW_COLBUF_CREDITS_SHIFT		32
#define FXR_TP_CFG_SPILL_BUFFER_CTRL_SUBSW_COLBUF_CREDITS_MASK		0x3Full
#define FXR_TP_CFG_SPILL_BUFFER_CTRL_SUBSW_COLBUF_CREDITS_SMASK		0x3F00000000ull
#define FXR_TP_CFG_SPILL_BUFFER_CTRL_UNUSED_31_26_SHIFT			26
#define FXR_TP_CFG_SPILL_BUFFER_CTRL_UNUSED_31_26_MASK			0x3Full
#define FXR_TP_CFG_SPILL_BUFFER_CTRL_UNUSED_31_26_SMASK			0xFC000000ull
#define FXR_TP_CFG_SPILL_BUFFER_CTRL_PIPE_LENGTH_SHIFT			20
#define FXR_TP_CFG_SPILL_BUFFER_CTRL_PIPE_LENGTH_MASK			0x3Full
#define FXR_TP_CFG_SPILL_BUFFER_CTRL_PIPE_LENGTH_SMASK			0x3F00000ull
#define FXR_TP_CFG_SPILL_BUFFER_CTRL_UNUSED_19_SHIFT			19
#define FXR_TP_CFG_SPILL_BUFFER_CTRL_UNUSED_19_MASK			0x1ull
#define FXR_TP_CFG_SPILL_BUFFER_CTRL_UNUSED_19_SMASK			0x80000ull
#define FXR_TP_CFG_SPILL_BUFFER_CTRL_PRIORITY_SEL_SHIFT			18
#define FXR_TP_CFG_SPILL_BUFFER_CTRL_PRIORITY_SEL_MASK			0x1ull
#define FXR_TP_CFG_SPILL_BUFFER_CTRL_PRIORITY_SEL_SMASK			0x40000ull
#define FXR_TP_CFG_SPILL_BUFFER_CTRL_VL_ENABLE_SHIFT			8
#define FXR_TP_CFG_SPILL_BUFFER_CTRL_VL_ENABLE_MASK			0x3FFull
#define FXR_TP_CFG_SPILL_BUFFER_CTRL_VL_ENABLE_SMASK			0x3FF00ull
#define FXR_TP_CFG_SPILL_BUFFER_CTRL_SPILL_ENABLE_SHIFT			4
#define FXR_TP_CFG_SPILL_BUFFER_CTRL_SPILL_ENABLE_MASK			0xFull
#define FXR_TP_CFG_SPILL_BUFFER_CTRL_SPILL_ENABLE_SMASK			0xF0ull
#define FXR_TP_CFG_SPILL_BUFFER_CTRL_ENABLE_SHIFT			0
#define FXR_TP_CFG_SPILL_BUFFER_CTRL_ENABLE_MASK			0xFull
#define FXR_TP_CFG_SPILL_BUFFER_CTRL_ENABLE_SMASK			0xFull
/*
* Table #16 of fxr_top - TP_CFG_SPILL_ALLOC_CTRL
* The spill buffer control register.
*/
#define FXR_TP_CFG_SPILL_ALLOC_CTRL					(FXR_LM_TP_CSRS + 0x0000000000C8)
#define FXR_TP_CFG_SPILL_ALLOC_CTRL_RESETCSR				0x002019000040CC04ull
#define FXR_TP_CFG_SPILL_ALLOC_CTRL_UNUSED_63_59_SHIFT			59
#define FXR_TP_CFG_SPILL_ALLOC_CTRL_UNUSED_63_59_MASK			0x1Full
#define FXR_TP_CFG_SPILL_ALLOC_CTRL_UNUSED_63_59_SMASK			0xF800000000000000ull
#define FXR_TP_CFG_SPILL_ALLOC_CTRL_SB_TO_COLBUF_SWITCH_THRESHOLD_SHIFT	50
#define FXR_TP_CFG_SPILL_ALLOC_CTRL_SB_TO_COLBUF_SWITCH_THRESHOLD_MASK	0x1FFull
#define FXR_TP_CFG_SPILL_ALLOC_CTRL_SB_TO_COLBUF_SWITCH_THRESHOLD_SMASK	0x7FC000000000000ull
#define FXR_TP_CFG_SPILL_ALLOC_CTRL_SB_DEALLOCATE_THRESHOLD_SHIFT	41
#define FXR_TP_CFG_SPILL_ALLOC_CTRL_SB_DEALLOCATE_THRESHOLD_MASK	0x1FFull
#define FXR_TP_CFG_SPILL_ALLOC_CTRL_SB_DEALLOCATE_THRESHOLD_SMASK	0x3FE0000000000ull
#define FXR_TP_CFG_SPILL_ALLOC_CTRL_SB_TO_SB_SWITCH_THRESHOLD_SHIFT	32
#define FXR_TP_CFG_SPILL_ALLOC_CTRL_SB_TO_SB_SWITCH_THRESHOLD_MASK	0x1FFull
#define FXR_TP_CFG_SPILL_ALLOC_CTRL_SB_TO_SB_SWITCH_THRESHOLD_SMASK	0x1FF00000000ull
#define FXR_TP_CFG_SPILL_ALLOC_CTRL_UNUSED_31_29_SHIFT			29
#define FXR_TP_CFG_SPILL_ALLOC_CTRL_UNUSED_31_29_MASK			0x7ull
#define FXR_TP_CFG_SPILL_ALLOC_CTRL_UNUSED_31_29_SMASK			0xE0000000ull
#define FXR_TP_CFG_SPILL_ALLOC_CTRL_SB_ALLOCATE_THRESHOLD_SHIFT		20
#define FXR_TP_CFG_SPILL_ALLOC_CTRL_SB_ALLOCATE_THRESHOLD_MASK		0x1FFull
#define FXR_TP_CFG_SPILL_ALLOC_CTRL_SB_ALLOCATE_THRESHOLD_SMASK		0x1FF00000ull
#define FXR_TP_CFG_SPILL_ALLOC_CTRL_UNUSED_19_18_SHIFT			18
#define FXR_TP_CFG_SPILL_ALLOC_CTRL_UNUSED_19_18_MASK			0x3ull
#define FXR_TP_CFG_SPILL_ALLOC_CTRL_UNUSED_19_18_SMASK			0xC0000ull
#define FXR_TP_CFG_SPILL_ALLOC_CTRL_COLBUF_DEALLOCATE_THRESHOLD_SHIFT	12
#define FXR_TP_CFG_SPILL_ALLOC_CTRL_COLBUF_DEALLOCATE_THRESHOLD_MASK	0x3Full
#define FXR_TP_CFG_SPILL_ALLOC_CTRL_COLBUF_DEALLOCATE_THRESHOLD_SMASK	0x3F000ull
#define FXR_TP_CFG_SPILL_ALLOC_CTRL_COLBUF_TO_SB_SWITCH_THRESHOLD_SHIFT	6
#define FXR_TP_CFG_SPILL_ALLOC_CTRL_COLBUF_TO_SB_SWITCH_THRESHOLD_MASK	0x3Full
#define FXR_TP_CFG_SPILL_ALLOC_CTRL_COLBUF_TO_SB_SWITCH_THRESHOLD_SMASK	0xFC0ull
#define FXR_TP_CFG_SPILL_ALLOC_CTRL_COLBUF_ALLOCATE_THRESHOLD_SHIFT	0
#define FXR_TP_CFG_SPILL_ALLOC_CTRL_COLBUF_ALLOCATE_THRESHOLD_MASK	0x3Full
#define FXR_TP_CFG_SPILL_ALLOC_CTRL_COLBUF_ALLOCATE_THRESHOLD_SMASK	0x3Full
/*
* Table #17 of fxr_top - TP_CFG_PKEY_TABLE
* Outbound P-Key verification shall be enabled and disabled for each switch port 
* individually with the #%%#Tx_Pkey_En component of the PortInfo attribute. Each 
* port maintains a table of 64 Partition-Keys. Each address contains four Pkey 
* entries. 
*/
#define FXR_TP_CFG_PKEY_TABLE						(FXR_LM_TP_CSRS + 0x0000000000D0)
#define FXR_TP_CFG_PKEY_TABLE_RESETCSR					0x0000000000000000ull
#define FXR_TP_CFG_PKEY_TABLE_ENTRY3_SHIFT				48
#define FXR_TP_CFG_PKEY_TABLE_ENTRY3_MASK				0xFFFFull
#define FXR_TP_CFG_PKEY_TABLE_ENTRY3_SMASK				0xFFFF000000000000ull
#define FXR_TP_CFG_PKEY_TABLE_ENTRY2_SHIFT				32
#define FXR_TP_CFG_PKEY_TABLE_ENTRY2_MASK				0xFFFFull
#define FXR_TP_CFG_PKEY_TABLE_ENTRY2_SMASK				0xFFFF00000000ull
#define FXR_TP_CFG_PKEY_TABLE_ENTRY1_SHIFT				16
#define FXR_TP_CFG_PKEY_TABLE_ENTRY1_MASK				0xFFFFull
#define FXR_TP_CFG_PKEY_TABLE_ENTRY1_SMASK				0xFFFF0000ull
#define FXR_TP_CFG_PKEY_TABLE_ENTRY0_SHIFT				0
#define FXR_TP_CFG_PKEY_TABLE_ENTRY0_MASK				0xFFFFull
#define FXR_TP_CFG_PKEY_TABLE_ENTRY0_SMASK				0xFFFFull
/*
* Table #18 of fxr_top - TP_CFG_PKEY_CHECK_CTRL
* Outbound Pkey checking is performed on a 16 bit Pkey derived from the outbound 
* packet header and this register based on the packet type.
*/
#define FXR_TP_CFG_PKEY_CHECK_CTRL					(FXR_LM_TP_CSRS + 0x000000000150)
#define FXR_TP_CFG_PKEY_CHECK_CTRL_RESETCSR				0x0000000000000000ull
#define FXR_TP_CFG_PKEY_CHECK_CTRL_UNUSED_63_32_SHIFT			32
#define FXR_TP_CFG_PKEY_CHECK_CTRL_UNUSED_63_32_MASK			0xFFFFFFFFull
#define FXR_TP_CFG_PKEY_CHECK_CTRL_UNUSED_63_32_SMASK			0xFFFFFFFF00000000ull
#define FXR_TP_CFG_PKEY_CHECK_CTRL_PKEY_10B_SHIFT			20
#define FXR_TP_CFG_PKEY_CHECK_CTRL_PKEY_10B_MASK			0xFFFull
#define FXR_TP_CFG_PKEY_CHECK_CTRL_PKEY_10B_SMASK			0xFFF00000ull
#define FXR_TP_CFG_PKEY_CHECK_CTRL_UNUSED_19_16_SHIFT			16
#define FXR_TP_CFG_PKEY_CHECK_CTRL_UNUSED_19_16_MASK			0xFull
#define FXR_TP_CFG_PKEY_CHECK_CTRL_UNUSED_19_16_SMASK			0xF0000ull
#define FXR_TP_CFG_PKEY_CHECK_CTRL_PKEY_8B_SHIFT			0
#define FXR_TP_CFG_PKEY_CHECK_CTRL_PKEY_8B_MASK				0xFFFFull
#define FXR_TP_CFG_PKEY_CHECK_CTRL_PKEY_8B_SMASK			0xFFFFull
/*
* Table #19 of fxr_top - TP_ERR_STS_0
* This is the Packet Error Status CSR. Bits are set by hardware or by writing to 
* the TP_ERR_FRC CSR_0. Bits are cleared by writing to the TP_ERR_CLR CSR_1. The 
* interrupt register reports all error related to packets.
*/
#define FXR_TP_ERR_STS_0						(FXR_LM_TP_CSRS + 0x000000000180)
#define FXR_TP_ERR_STS_0_RESETCSR					0x0000000000000000ull
#define FXR_TP_ERR_STS_0_UNUSED_63_24_SHIFT				24
#define FXR_TP_ERR_STS_0_UNUSED_63_24_MASK				0xFFFFFFFFFFull
#define FXR_TP_ERR_STS_0_UNUSED_63_24_SMASK				0xFFFFFFFFFF000000ull
#define FXR_TP_ERR_STS_0_VLP_SC_ERROR_SHIFT				14
#define FXR_TP_ERR_STS_0_VLP_SC_ERROR_MASK				0x3FFull
#define FXR_TP_ERR_STS_0_VLP_SC_ERROR_SMASK				0xFFC000ull
#define FXR_TP_ERR_STS_0_CONGESTED_SHIFT				13
#define FXR_TP_ERR_STS_0_CONGESTED_MASK					0x1ull
#define FXR_TP_ERR_STS_0_CONGESTED_SMASK				0x2000ull
#define FXR_TP_ERR_STS_0_L2_ERROR_SHIFT					12
#define FXR_TP_ERR_STS_0_L2_ERROR_MASK					0x1ull
#define FXR_TP_ERR_STS_0_L2_ERROR_SMASK					0x1000ull
#define FXR_TP_ERR_STS_0_INVALID_VLT_SHIFT				11
#define FXR_TP_ERR_STS_0_INVALID_VLT_MASK				0x1ull
#define FXR_TP_ERR_STS_0_INVALID_VLT_SMASK				0x800ull
#define FXR_TP_ERR_STS_0_VLT_ERROR_SHIFT				10
#define FXR_TP_ERR_STS_0_VLT_ERROR_MASK					0x1ull
#define FXR_TP_ERR_STS_0_VLT_ERROR_SMASK				0x400ull
#define FXR_TP_ERR_STS_0_MTU_ERROR_SHIFT				9
#define FXR_TP_ERR_STS_0_MTU_ERROR_MASK					0x1ull
#define FXR_TP_ERR_STS_0_MTU_ERROR_SMASK				0x200ull
#define FXR_TP_ERR_STS_0_DROP_DATA_PKT_SHIFT				8
#define FXR_TP_ERR_STS_0_DROP_DATA_PKT_MASK				0x1ull
#define FXR_TP_ERR_STS_0_DROP_DATA_PKT_SMASK				0x100ull
#define FXR_TP_ERR_STS_0_HEADLESS_PKT_SHIFT				7
#define FXR_TP_ERR_STS_0_HEADLESS_PKT_MASK				0x1ull
#define FXR_TP_ERR_STS_0_HEADLESS_PKT_SMASK				0x80ull
#define FXR_TP_ERR_STS_0_TAILLESS_PKT_SHIFT				6
#define FXR_TP_ERR_STS_0_TAILLESS_PKT_MASK				0x1ull
#define FXR_TP_ERR_STS_0_TAILLESS_PKT_SMASK				0x40ull
#define FXR_TP_ERR_STS_0_SHORT_GRH_PKT_SHIFT				5
#define FXR_TP_ERR_STS_0_SHORT_GRH_PKT_MASK				0x1ull
#define FXR_TP_ERR_STS_0_SHORT_GRH_PKT_SMASK				0x20ull
#define FXR_TP_ERR_STS_0_LONG_PKT_SHIFT					4
#define FXR_TP_ERR_STS_0_LONG_PKT_MASK					0x1ull
#define FXR_TP_ERR_STS_0_LONG_PKT_SMASK					0x10ull
#define FXR_TP_ERR_STS_0_SHORT_PKT_SHIFT				3
#define FXR_TP_ERR_STS_0_SHORT_PKT_MASK					0x1ull
#define FXR_TP_ERR_STS_0_SHORT_PKT_SMASK				0x8ull
#define FXR_TP_ERR_STS_0_SUBSW_PKT_EBP_SHIFT				2
#define FXR_TP_ERR_STS_0_SUBSW_PKT_EBP_MASK				0x1ull
#define FXR_TP_ERR_STS_0_SUBSW_PKT_EBP_SMASK				0x4ull
#define FXR_TP_ERR_STS_0_TPORT_PKT_EBP_SHIFT				1
#define FXR_TP_ERR_STS_0_TPORT_PKT_EBP_MASK				0x1ull
#define FXR_TP_ERR_STS_0_TPORT_PKT_EBP_SMASK				0x2ull
#define FXR_TP_ERR_STS_0_PKEY_DISCARD_SHIFT				0
#define FXR_TP_ERR_STS_0_PKEY_DISCARD_MASK				0x1ull
#define FXR_TP_ERR_STS_0_PKEY_DISCARD_SMASK				0x1ull
/*
* Table #20 of fxr_top - TP_ERR_CLR_0
* This is the Error Clear CSR. Writing a 1 to a valid bit will clear the 
* corresponding bit in the TP_ERR_STS_0 CSR.
*/
#define FXR_TP_ERR_CLR_0						(FXR_LM_TP_CSRS + 0x000000000188)
#define FXR_TP_ERR_CLR_0_RESETCSR					0x0000000000000000ull
#define FXR_TP_ERR_CLR_0_UNUSED_63_24_SHIFT				24
#define FXR_TP_ERR_CLR_0_UNUSED_63_24_MASK				0xFFFFFFFFFFull
#define FXR_TP_ERR_CLR_0_UNUSED_63_24_SMASK				0xFFFFFFFFFF000000ull
#define FXR_TP_ERR_CLR_0_VALUE_SHIFT					0
#define FXR_TP_ERR_CLR_0_VALUE_MASK					0xFFFFFFull
#define FXR_TP_ERR_CLR_0_VALUE_SMASK					0xFFFFFFull
/*
* Table #21 of fxr_top - TP_ERR_FRC_0
* This is the Error Force CSR. Writing a 1 to a valid bit will set the 
* corresponding bit in the TP_ERR_STS_0 CSR.
*/
#define FXR_TP_ERR_FRC_0						(FXR_LM_TP_CSRS + 0x000000000190)
#define FXR_TP_ERR_FRC_0_RESETCSR					0x0000000000000000ull
#define FXR_TP_ERR_FRC_0_UNUSED_63_24_SHIFT				24
#define FXR_TP_ERR_FRC_0_UNUSED_63_24_MASK				0xFFFFFFFFFFull
#define FXR_TP_ERR_FRC_0_UNUSED_63_24_SMASK				0xFFFFFFFFFF000000ull
#define FXR_TP_ERR_FRC_0_VALUE_SHIFT					0
#define FXR_TP_ERR_FRC_0_VALUE_MASK					0xFFFFFFull
#define FXR_TP_ERR_FRC_0_VALUE_SMASK					0xFFFFFFull
/*
* Table #22 of fxr_top - TP_ERR_EN_HOST_0
* This is the Error Enable for the Host Interrupt. If a bit is set, the 
* corresponding error bit in TP_ERR_STS_0 will cause an interrupt on the HOST 
* interrupt signal.
*/
#define FXR_TP_ERR_EN_HOST_0						(FXR_LM_TP_CSRS + 0x000000000198)
#define FXR_TP_ERR_EN_HOST_0_RESETCSR					0x0000000000000000ull
#define FXR_TP_ERR_EN_HOST_0_UNUSED_63_24_SHIFT				24
#define FXR_TP_ERR_EN_HOST_0_UNUSED_63_24_MASK				0xFFFFFFFFFFull
#define FXR_TP_ERR_EN_HOST_0_UNUSED_63_24_SMASK				0xFFFFFFFFFF000000ull
#define FXR_TP_ERR_EN_HOST_0_VALUE_SHIFT				0
#define FXR_TP_ERR_EN_HOST_0_VALUE_MASK					0xFFFFFFull
#define FXR_TP_ERR_EN_HOST_0_VALUE_SMASK				0xFFFFFFull
/*
* Table #23 of fxr_top - TP_ERR_FIRST_HOST_0
* This is the First Error CSR for the Host Interrupt. When this CSR is clear, it 
* will capture the next enabled (via the TP_ERR_EN_HOST) TP_ERR_STS_0 bits when 
* a new HOST Interrupt occurs, subsequent interrupts are ignored.#%%#Address = 
* #%%#0x1A0#%%#, First interrupt register for Interrupt Status Addr 
* #%%#0x180#%%#.
*/
#define FXR_TP_ERR_FIRST_HOST_0						(FXR_LM_TP_CSRS + 0x0000000001A0)
#define FXR_TP_ERR_FIRST_HOST_0_RESETCSR				0x0000000000000000ull
#define FXR_TP_ERR_FIRST_HOST_0_UNUSED_63_24_SHIFT			24
#define FXR_TP_ERR_FIRST_HOST_0_UNUSED_63_24_MASK			0xFFFFFFFFFFull
#define FXR_TP_ERR_FIRST_HOST_0_UNUSED_63_24_SMASK			0xFFFFFFFFFF000000ull
#define FXR_TP_ERR_FIRST_HOST_0_VALUE_SHIFT				0
#define FXR_TP_ERR_FIRST_HOST_0_VALUE_MASK				0xFFFFFFull
#define FXR_TP_ERR_FIRST_HOST_0_VALUE_SMASK				0xFFFFFFull
/*
* Table #24 of fxr_top - TP_ERR_STS_1
* This is the Data Error Status CSR. Bits are set by hardware or by writing to 
* the TP_ERR_FRC_1 CSR. Bits are cleared by writing to the TP_ERR_CLR_1 CSR. The 
* interrupt register reports all error related to HW errors.
*/
#define FXR_TP_ERR_STS_1						(FXR_LM_TP_CSRS + 0x000000000200)
#define FXR_TP_ERR_STS_1_RESETCSR					0x0000000000000000ull
#define FXR_TP_ERR_STS_1_UNUSED_63_44_SHIFT				44
#define FXR_TP_ERR_STS_1_UNUSED_63_44_MASK				0xFFFFFull
#define FXR_TP_ERR_STS_1_UNUSED_63_44_SMASK				0xFFFFF00000000000ull
#define FXR_TP_ERR_STS_1_CRDT_RTRN_VL_ERR_SHIFT				43
#define FXR_TP_ERR_STS_1_CRDT_RTRN_VL_ERR_MASK				0x1ull
#define FXR_TP_ERR_STS_1_CRDT_RTRN_VL_ERR_SMASK				0x80000000000ull
#define FXR_TP_ERR_STS_1_CRDT_RTRN_PAR_ERR_SHIFT			42
#define FXR_TP_ERR_STS_1_CRDT_RTRN_PAR_ERR_MASK				0x1ull
#define FXR_TP_ERR_STS_1_CRDT_RTRN_PAR_ERR_SMASK			0x40000000000ull
#define FXR_TP_ERR_STS_1_CRDT_RTRN_ILLEGAL_VL_SHIFT			41
#define FXR_TP_ERR_STS_1_CRDT_RTRN_ILLEGAL_VL_MASK			0x1ull
#define FXR_TP_ERR_STS_1_CRDT_RTRN_ILLEGAL_VL_SMASK			0x20000000000ull
#define FXR_TP_ERR_STS_1_PERF_CNTR_ROLLOVER_SHIFT			40
#define FXR_TP_ERR_STS_1_PERF_CNTR_ROLLOVER_MASK			0x1ull
#define FXR_TP_ERR_STS_1_PERF_CNTR_ROLLOVER_SMASK			0x10000000000ull
#define FXR_TP_ERR_STS_1_PERF_CNTR_PERR_SHIFT				39
#define FXR_TP_ERR_STS_1_PERF_CNTR_PERR_MASK				0x1ull
#define FXR_TP_ERR_STS_1_PERF_CNTR_PERR_SMASK				0x8000000000ull
#define FXR_TP_ERR_STS_1_SLL_TIMEOUT_SHIFT				29
#define FXR_TP_ERR_STS_1_SLL_TIMEOUT_MASK				0x3FFull
#define FXR_TP_ERR_STS_1_SLL_TIMEOUT_SMASK				0x7FE0000000ull
#define FXR_TP_ERR_STS_1_HOQ_DISCARD_SHIFT				19
#define FXR_TP_ERR_STS_1_HOQ_DISCARD_MASK				0x3FFull
#define FXR_TP_ERR_STS_1_HOQ_DISCARD_SMASK				0x1FF80000ull
#define FXR_TP_ERR_STS_1_OC_CREDIT_UNDERFLOW_SHIFT			18
#define FXR_TP_ERR_STS_1_OC_CREDIT_UNDERFLOW_MASK			0x1ull
#define FXR_TP_ERR_STS_1_OC_CREDIT_UNDERFLOW_SMASK			0x40000ull
#define FXR_TP_ERR_STS_1_CREDIT_OVERFLOW_SHIFT				17
#define FXR_TP_ERR_STS_1_CREDIT_OVERFLOW_MASK				0x1ull
#define FXR_TP_ERR_STS_1_CREDIT_OVERFLOW_SMASK				0x20000ull
#define FXR_TP_ERR_STS_1_CSR_ADDR_ERR_SHIFT				16
#define FXR_TP_ERR_STS_1_CSR_ADDR_ERR_MASK				0x1ull
#define FXR_TP_ERR_STS_1_CSR_ADDR_ERR_SMASK				0x10000ull
#define FXR_TP_ERR_STS_1_DATAQ_SPILL_OVERFLOW_SHIFT			15
#define FXR_TP_ERR_STS_1_DATAQ_SPILL_OVERFLOW_MASK			0x1ull
#define FXR_TP_ERR_STS_1_DATAQ_SPILL_OVERFLOW_SMASK			0x8000ull
#define FXR_TP_ERR_STS_1_DATAQ_SPILL_UNDERFLOW_SHIFT			14
#define FXR_TP_ERR_STS_1_DATAQ_SPILL_UNDERFLOW_MASK			0x1ull
#define FXR_TP_ERR_STS_1_DATAQ_SPILL_UNDERFLOW_SMASK			0x4000ull
#define FXR_TP_ERR_STS_1_DATAQ_OVERFLOW_SHIFT				13
#define FXR_TP_ERR_STS_1_DATAQ_OVERFLOW_MASK				0x1ull
#define FXR_TP_ERR_STS_1_DATAQ_OVERFLOW_SMASK				0x2000ull
#define FXR_TP_ERR_STS_1_DATAQ_UNDERFLOW_SHIFT				12
#define FXR_TP_ERR_STS_1_DATAQ_UNDERFLOW_MASK				0x1ull
#define FXR_TP_ERR_STS_1_DATAQ_UNDERFLOW_SMASK				0x1000ull
#define FXR_TP_ERR_STS_1_RINFOQ_SPILL_OVERFLOW_SHIFT			11
#define FXR_TP_ERR_STS_1_RINFOQ_SPILL_OVERFLOW_MASK			0x1ull
#define FXR_TP_ERR_STS_1_RINFOQ_SPILL_OVERFLOW_SMASK			0x800ull
#define FXR_TP_ERR_STS_1_RINFOQ_SPILL_UNDERFLOW_SHIFT			10
#define FXR_TP_ERR_STS_1_RINFOQ_SPILL_UNDERFLOW_MASK			0x1ull
#define FXR_TP_ERR_STS_1_RINFOQ_SPILL_UNDERFLOW_SMASK			0x400ull
#define FXR_TP_ERR_STS_1_RINFOQ_SPILL_MBE_SHIFT				9
#define FXR_TP_ERR_STS_1_RINFOQ_SPILL_MBE_MASK				0x1ull
#define FXR_TP_ERR_STS_1_RINFOQ_SPILL_MBE_SMASK				0x200ull
#define FXR_TP_ERR_STS_1_RINFOQ_SPILL_SBE_SHIFT				8
#define FXR_TP_ERR_STS_1_RINFOQ_SPILL_SBE_MASK				0x1ull
#define FXR_TP_ERR_STS_1_RINFOQ_SPILL_SBE_SMASK				0x100ull
#define FXR_TP_ERR_STS_1_RINFOQ_OVERFLOW_SHIFT				7
#define FXR_TP_ERR_STS_1_RINFOQ_OVERFLOW_MASK				0x1ull
#define FXR_TP_ERR_STS_1_RINFOQ_OVERFLOW_SMASK				0x80ull
#define FXR_TP_ERR_STS_1_RINFOQ_UNDERFLOW_SHIFT				6
#define FXR_TP_ERR_STS_1_RINFOQ_UNDERFLOW_MASK				0x1ull
#define FXR_TP_ERR_STS_1_RINFOQ_UNDERFLOW_SMASK				0x40ull
#define FXR_TP_ERR_STS_1_RINFOQ_MBE_SHIFT				5
#define FXR_TP_ERR_STS_1_RINFOQ_MBE_MASK				0x1ull
#define FXR_TP_ERR_STS_1_RINFOQ_MBE_SMASK				0x20ull
#define FXR_TP_ERR_STS_1_RINFOQ_SBE_SHIFT				4
#define FXR_TP_ERR_STS_1_RINFOQ_SBE_MASK				0x1ull
#define FXR_TP_ERR_STS_1_RINFOQ_SBE_SMASK				0x10ull
#define FXR_TP_ERR_STS_1_SUBSW_PE_SHIFT					3
#define FXR_TP_ERR_STS_1_SUBSW_PE_MASK					0x1ull
#define FXR_TP_ERR_STS_1_SUBSW_PE_SMASK					0x8ull
#define FXR_TP_ERR_STS_1_SUBSW_MBE_SHIFT				2
#define FXR_TP_ERR_STS_1_SUBSW_MBE_MASK					0x1ull
#define FXR_TP_ERR_STS_1_SUBSW_MBE_SMASK				0x4ull
#define FXR_TP_ERR_STS_1_SUBSW_SBE_SHIFT				1
#define FXR_TP_ERR_STS_1_SUBSW_SBE_MASK					0x1ull
#define FXR_TP_ERR_STS_1_SUBSW_SBE_SMASK				0x2ull
#define FXR_TP_ERR_STS_1_REQUEST_TO_SHIFT				0
#define FXR_TP_ERR_STS_1_REQUEST_TO_MASK				0x1ull
#define FXR_TP_ERR_STS_1_REQUEST_TO_SMASK				0x1ull
/*
* Table #25 of fxr_top - TP_ERR_CLR_1
* This is the Error Force CSR. Writing a 1 to a valid bit will set the 
* corresponding bit in the TP_ERR_STS_1 CSR.
*/
#define FXR_TP_ERR_CLR_1						(FXR_LM_TP_CSRS + 0x000000000208)
#define FXR_TP_ERR_CLR_1_RESETCSR					0x0000000000000000ull
#define FXR_TP_ERR_CLR_1_UNUSED_63_44_SHIFT				44
#define FXR_TP_ERR_CLR_1_UNUSED_63_44_MASK				0xFFFFFull
#define FXR_TP_ERR_CLR_1_UNUSED_63_44_SMASK				0xFFFFF00000000000ull
#define FXR_TP_ERR_CLR_1_VALUE_SHIFT					0
#define FXR_TP_ERR_CLR_1_VALUE_MASK					0xFFFFFFFFFFFull
#define FXR_TP_ERR_CLR_1_VALUE_SMASK					0xFFFFFFFFFFFull
/*
* Table #26 of fxr_top - TP_ERR_FRC_1
* This is the Error Clear CSR. Writing a 1 to a valid bit will clear the 
* corresponding bit in the TP_ERR_STS_0 CSR.
*/
#define FXR_TP_ERR_FRC_1						(FXR_LM_TP_CSRS + 0x000000000210)
#define FXR_TP_ERR_FRC_1_RESETCSR					0x0000000000000000ull
#define FXR_TP_ERR_FRC_1_UNUSED_63_44_SHIFT				44
#define FXR_TP_ERR_FRC_1_UNUSED_63_44_MASK				0xFFFFFull
#define FXR_TP_ERR_FRC_1_UNUSED_63_44_SMASK				0xFFFFF00000000000ull
#define FXR_TP_ERR_FRC_1_VALUE_SHIFT					0
#define FXR_TP_ERR_FRC_1_VALUE_MASK					0xFFFFFFFFFFFull
#define FXR_TP_ERR_FRC_1_VALUE_SMASK					0xFFFFFFFFFFFull
/*
* Table #27 of fxr_top - TP_ERR_EN_HOST_1
* This is the Error Enable for the Host Interrupt. If a bit is set, the 
* corresponding error bit in TP_ERR_STS_1 will cause an interrupt on the HOST 
* interrupt signal.
*/
#define FXR_TP_ERR_EN_HOST_1						(FXR_LM_TP_CSRS + 0x000000000218)
#define FXR_TP_ERR_EN_HOST_1_RESETCSR					0x0000000000000000ull
#define FXR_TP_ERR_EN_HOST_1_UNUSED_63_44_SHIFT				44
#define FXR_TP_ERR_EN_HOST_1_UNUSED_63_44_MASK				0xFFFFFull
#define FXR_TP_ERR_EN_HOST_1_UNUSED_63_44_SMASK				0xFFFFF00000000000ull
#define FXR_TP_ERR_EN_HOST_1_VALUE_SHIFT				0
#define FXR_TP_ERR_EN_HOST_1_VALUE_MASK					0xFFFFFFFFFFFull
#define FXR_TP_ERR_EN_HOST_1_VALUE_SMASK				0xFFFFFFFFFFFull
/*
* Table #28 of fxr_top - TP_ERR_FIRST_HOST_1
* This is the First Error CSR for the Host Interrupt. When this CSR is clear, it 
* will capture the next enabled (via the TP_ERR_EN_HOST) TP_ERR_STS_1 bits when 
* a new HOST Interrupt occurs, subsequent interrupts are ignored.#%%#Address = 
* #%%#0x220#%%#, First interrupt register for Interrupt Status Addr 
* #%%#0x200#%%#.
*/
#define FXR_TP_ERR_FIRST_HOST_1						(FXR_LM_TP_CSRS + 0x000000000220)
#define FXR_TP_ERR_FIRST_HOST_1_RESETCSR				0x0000000000000000ull
#define FXR_TP_ERR_FIRST_HOST_1_UNUSED_63_44_SHIFT			44
#define FXR_TP_ERR_FIRST_HOST_1_UNUSED_63_44_MASK			0xFFFFFull
#define FXR_TP_ERR_FIRST_HOST_1_UNUSED_63_44_SMASK			0xFFFFF00000000000ull
#define FXR_TP_ERR_FIRST_HOST_1_VALUE_SHIFT				0
#define FXR_TP_ERR_FIRST_HOST_1_VALUE_MASK				0xFFFFFFFFFFFull
#define FXR_TP_ERR_FIRST_HOST_1_VALUE_SMASK				0xFFFFFFFFFFFull
/*
* Table #29 of fxr_top - TP_ERR_ERROR_INFO
* The TPORT Error information CSR provides various error information. This 
* register captures information regarding all errors that occur. Field continue 
* to accrue information as subsequent errors occur.
*/
#define FXR_TP_ERR_ERROR_INFO						(FXR_LM_TP_CSRS + 0x000000000230)
#define FXR_TP_ERR_ERROR_INFO_RESETCSR					0x0000000000000000ull
#define FXR_TP_ERR_ERROR_INFO_UNUSED_63_60_SHIFT			60
#define FXR_TP_ERR_ERROR_INFO_UNUSED_63_60_MASK				0xFull
#define FXR_TP_ERR_ERROR_INFO_UNUSED_63_60_SMASK			0xF000000000000000ull
#define FXR_TP_ERR_ERROR_INFO_CB3_ERROR_VL_SHIFT			50
#define FXR_TP_ERR_ERROR_INFO_CB3_ERROR_VL_MASK				0x3FFull
#define FXR_TP_ERR_ERROR_INFO_CB3_ERROR_VL_SMASK			0xFFC000000000000ull
#define FXR_TP_ERR_ERROR_INFO_CB3_DATA_ERROR_SHIFT			49
#define FXR_TP_ERR_ERROR_INFO_CB3_DATA_ERROR_MASK			0x1ull
#define FXR_TP_ERR_ERROR_INFO_CB3_DATA_ERROR_SMASK			0x2000000000000ull
#define FXR_TP_ERR_ERROR_INFO_CB3_PKT_ERROR_SHIFT			48
#define FXR_TP_ERR_ERROR_INFO_CB3_PKT_ERROR_MASK			0x1ull
#define FXR_TP_ERR_ERROR_INFO_CB3_PKT_ERROR_SMASK			0x1000000000000ull
#define FXR_TP_ERR_ERROR_INFO_UNUSED_47_44_SHIFT			44
#define FXR_TP_ERR_ERROR_INFO_UNUSED_47_44_MASK				0xFull
#define FXR_TP_ERR_ERROR_INFO_UNUSED_47_44_SMASK			0xF00000000000ull
#define FXR_TP_ERR_ERROR_INFO_CB2_ERROR_VL_SHIFT			34
#define FXR_TP_ERR_ERROR_INFO_CB2_ERROR_VL_MASK				0x3FFull
#define FXR_TP_ERR_ERROR_INFO_CB2_ERROR_VL_SMASK			0xFFC00000000ull
#define FXR_TP_ERR_ERROR_INFO_CB2_DATA_ERROR_SHIFT			33
#define FXR_TP_ERR_ERROR_INFO_CB2_DATA_ERROR_MASK			0x1ull
#define FXR_TP_ERR_ERROR_INFO_CB2_DATA_ERROR_SMASK			0x200000000ull
#define FXR_TP_ERR_ERROR_INFO_CB2_PKT_ERROR_SHIFT			32
#define FXR_TP_ERR_ERROR_INFO_CB2_PKT_ERROR_MASK			0x1ull
#define FXR_TP_ERR_ERROR_INFO_CB2_PKT_ERROR_SMASK			0x100000000ull
#define FXR_TP_ERR_ERROR_INFO_UNUSED_31_28_SHIFT			28
#define FXR_TP_ERR_ERROR_INFO_UNUSED_31_28_MASK				0xFull
#define FXR_TP_ERR_ERROR_INFO_UNUSED_31_28_SMASK			0xF0000000ull
#define FXR_TP_ERR_ERROR_INFO_CB1_ERROR_VL_SHIFT			18
#define FXR_TP_ERR_ERROR_INFO_CB1_ERROR_VL_MASK				0x3FFull
#define FXR_TP_ERR_ERROR_INFO_CB1_ERROR_VL_SMASK			0xFFC0000ull
#define FXR_TP_ERR_ERROR_INFO_CB1_DATA_ERROR_SHIFT			17
#define FXR_TP_ERR_ERROR_INFO_CB1_DATA_ERROR_MASK			0x1ull
#define FXR_TP_ERR_ERROR_INFO_CB1_DATA_ERROR_SMASK			0x20000ull
#define FXR_TP_ERR_ERROR_INFO_CB1_PKT_ERROR_SHIFT			16
#define FXR_TP_ERR_ERROR_INFO_CB1_PKT_ERROR_MASK			0x1ull
#define FXR_TP_ERR_ERROR_INFO_CB1_PKT_ERROR_SMASK			0x10000ull
#define FXR_TP_ERR_ERROR_INFO_UNUSED_15_12_SHIFT			12
#define FXR_TP_ERR_ERROR_INFO_UNUSED_15_12_MASK				0xFull
#define FXR_TP_ERR_ERROR_INFO_UNUSED_15_12_SMASK			0xF000ull
#define FXR_TP_ERR_ERROR_INFO_CB0_ERROR_VL_SHIFT			2
#define FXR_TP_ERR_ERROR_INFO_CB0_ERROR_VL_MASK				0x3FFull
#define FXR_TP_ERR_ERROR_INFO_CB0_ERROR_VL_SMASK			0xFFCull
#define FXR_TP_ERR_ERROR_INFO_CB0_DATA_ERROR_SHIFT			1
#define FXR_TP_ERR_ERROR_INFO_CB0_DATA_ERROR_MASK			0x1ull
#define FXR_TP_ERR_ERROR_INFO_CB0_DATA_ERROR_SMASK			0x2ull
#define FXR_TP_ERR_ERROR_INFO_CB0_PKT_ERROR_SHIFT			0
#define FXR_TP_ERR_ERROR_INFO_CB0_PKT_ERROR_MASK			0x1ull
#define FXR_TP_ERR_ERROR_INFO_CB0_PKT_ERROR_SMASK			0x1ull
/*
* Table #30 of fxr_top - TP_ERR_PKEY_ERROR_INFO
* {PKey[15:0], SLID[15:0]} of the packet that caused the first Tx constraint 
* error. Tx constraint error is defined as a Pkey discard.
*/
#define FXR_TP_ERR_PKEY_ERROR_INFO					(FXR_LM_TP_CSRS + 0x000000000248)
#define FXR_TP_ERR_PKEY_ERROR_INFO_RESETCSR				0x0000000000000000ull
#define FXR_TP_ERR_PKEY_ERROR_INFO_UNUSED_63_36_SHIFT			36
#define FXR_TP_ERR_PKEY_ERROR_INFO_UNUSED_63_36_MASK			0xFFFFFFFull
#define FXR_TP_ERR_PKEY_ERROR_INFO_UNUSED_63_36_SMASK			0xFFFFFFF000000000ull
#define FXR_TP_ERR_PKEY_ERROR_INFO_TX_FIRST_PKEY_SHIFT			20
#define FXR_TP_ERR_PKEY_ERROR_INFO_TX_FIRST_PKEY_MASK			0xFFFFull
#define FXR_TP_ERR_PKEY_ERROR_INFO_TX_FIRST_PKEY_SMASK			0xFFFF00000ull
#define FXR_TP_ERR_PKEY_ERROR_INFO_TX_FIRST_SLID_SHIFT			0
#define FXR_TP_ERR_PKEY_ERROR_INFO_TX_FIRST_SLID_MASK			0xFFFFFull
#define FXR_TP_ERR_PKEY_ERROR_INFO_TX_FIRST_SLID_SMASK			0xFFFFFull
/*
* Table #31 of fxr_top - TP_ERR_SBE_ERROR_CNT
* Total number SBE errors.
*/
#define FXR_TP_ERR_SBE_ERROR_CNT					(FXR_LM_TP_CSRS + 0x000000000250)
#define FXR_TP_ERR_SBE_ERROR_CNT_RESETCSR				0x0000000000000000ull
#define FXR_TP_ERR_SBE_ERROR_CNT_UNUSED_63_24_SHIFT			24
#define FXR_TP_ERR_SBE_ERROR_CNT_UNUSED_63_24_MASK			0xFFFFFFFFFFull
#define FXR_TP_ERR_SBE_ERROR_CNT_UNUSED_63_24_SMASK			0xFFFFFFFFFF000000ull
#define FXR_TP_ERR_SBE_ERROR_CNT_SYND_SHIFT				16
#define FXR_TP_ERR_SBE_ERROR_CNT_SYND_MASK				0xFFull
#define FXR_TP_ERR_SBE_ERROR_CNT_SYND_SMASK				0xFF0000ull
#define FXR_TP_ERR_SBE_ERROR_CNT_COUNT_SHIFT				0
#define FXR_TP_ERR_SBE_ERROR_CNT_COUNT_MASK				0xFFFFull
#define FXR_TP_ERR_SBE_ERROR_CNT_COUNT_SMASK				0xFFFFull
/*
* Table #32 of fxr_top - TP_ERR_MBE_ERROR_CNT
* Total number SBE errors.
*/
#define FXR_TP_ERR_MBE_ERROR_CNT					(FXR_LM_TP_CSRS + 0x000000000258)
#define FXR_TP_ERR_MBE_ERROR_CNT_RESETCSR				0x0000000000000000ull
#define FXR_TP_ERR_MBE_ERROR_CNT_UNUSED_63_24_SHIFT			24
#define FXR_TP_ERR_MBE_ERROR_CNT_UNUSED_63_24_MASK			0xFFFFFFFFFFull
#define FXR_TP_ERR_MBE_ERROR_CNT_UNUSED_63_24_SMASK			0xFFFFFFFFFF000000ull
#define FXR_TP_ERR_MBE_ERROR_CNT_SYND_SHIFT				16
#define FXR_TP_ERR_MBE_ERROR_CNT_SYND_MASK				0xFFull
#define FXR_TP_ERR_MBE_ERROR_CNT_SYND_SMASK				0xFF0000ull
#define FXR_TP_ERR_MBE_ERROR_CNT_COUNT_SHIFT				0
#define FXR_TP_ERR_MBE_ERROR_CNT_COUNT_MASK				0xFFFFull
#define FXR_TP_ERR_MBE_ERROR_CNT_COUNT_SMASK				0xFFFFull
/*
* Table #33 of fxr_top - TP_ERR_PE_ERROR_CNT
* Total number SBE errors.
*/
#define FXR_TP_ERR_PE_ERROR_CNT						(FXR_LM_TP_CSRS + 0x000000000260)
#define FXR_TP_ERR_PE_ERROR_CNT_RESETCSR				0x0000000000000000ull
#define FXR_TP_ERR_PE_ERROR_CNT_UNUSED_63_16_SHIFT			16
#define FXR_TP_ERR_PE_ERROR_CNT_UNUSED_63_16_MASK			0xFFFFFFFFFFFFull
#define FXR_TP_ERR_PE_ERROR_CNT_UNUSED_63_16_SMASK			0xFFFFFFFFFFFF0000ull
#define FXR_TP_ERR_PE_ERROR_CNT_COUNT_SHIFT				0
#define FXR_TP_ERR_PE_ERROR_CNT_COUNT_MASK				0xFFFFull
#define FXR_TP_ERR_PE_ERROR_CNT_COUNT_SMASK				0xFFFFull
/*
* Table #34 of fxr_top - TP_STS_STATE
* The TPORT state registers provide state visibility of internal TPORT 
* functions.
*/
#define FXR_TP_STS_STATE						(FXR_LM_TP_CSRS + 0x000000000280)
#define FXR_TP_STS_STATE_RESETCSR					0x0000000000000000ull
#define FXR_TP_STS_STATE_UNUSED_63_54_SHIFT				54
#define FXR_TP_STS_STATE_UNUSED_63_54_MASK				0x3FFull
#define FXR_TP_STS_STATE_UNUSED_63_54_SMASK				0xFFC0000000000000ull
#define FXR_TP_STS_STATE_LINK_STATE_SHIFT				51
#define FXR_TP_STS_STATE_LINK_STATE_MASK				0x7ull
#define FXR_TP_STS_STATE_LINK_STATE_SMASK				0x38000000000000ull
#define FXR_TP_STS_STATE_OC_FULL_SHIFT					50
#define FXR_TP_STS_STATE_OC_FULL_MASK					0x1ull
#define FXR_TP_STS_STATE_OC_FULL_SMASK					0x4000000000000ull
#define FXR_TP_STS_STATE_HOQ_STALL_STATE_SHIFT				40
#define FXR_TP_STS_STATE_HOQ_STALL_STATE_MASK				0x3FFull
#define FXR_TP_STS_STATE_HOQ_STALL_STATE_SMASK				0x3FF0000000000ull
#define FXR_TP_STS_STATE_SSW_IP_SHIFT					36
#define FXR_TP_STS_STATE_SSW_IP_MASK					0xFull
#define FXR_TP_STS_STATE_SSW_IP_SMASK					0xF000000000ull
#define FXR_TP_STS_STATE_SSW_VL_IP_SHIFT				26
#define FXR_TP_STS_STATE_SSW_VL_IP_MASK					0x3FFull
#define FXR_TP_STS_STATE_SSW_VL_IP_SMASK				0xFFC000000ull
#define FXR_TP_STS_STATE_INTERLEAVE_DEPTH_SHIFT				21
#define FXR_TP_STS_STATE_INTERLEAVE_DEPTH_MASK				0x1Full
#define FXR_TP_STS_STATE_INTERLEAVE_DEPTH_SMASK				0x3E00000ull
#define FXR_TP_STS_STATE_ALL_REQUESTS_IN_OC_SHIFT			20
#define FXR_TP_STS_STATE_ALL_REQUESTS_IN_OC_MASK			0x1ull
#define FXR_TP_STS_STATE_ALL_REQUESTS_IN_OC_SMASK			0x100000ull
#define FXR_TP_STS_STATE_VLT_ARB_WAITING_FOR_CR_SHIFT			10
#define FXR_TP_STS_STATE_VLT_ARB_WAITING_FOR_CR_MASK			0x3FFull
#define FXR_TP_STS_STATE_VLT_ARB_WAITING_FOR_CR_SMASK			0xFFC00ull
#define FXR_TP_STS_STATE_VLT_HOQ_VALID_SHIFT				0
#define FXR_TP_STS_STATE_VLT_HOQ_VALID_MASK				0x3FFull
#define FXR_TP_STS_STATE_VLT_HOQ_VALID_SMASK				0x3FFull
/*
* Table #35 of fxr_top - TP_DBG_LMON_MUX_SEL
* The TPORT Debug control provides various settings for logic monitor and other 
* degrade features.
*/
#define FXR_TP_DBG_LMON_MUX_SEL						(FXR_LM_TP_CSRS + 0x0000000002A0)
#define FXR_TP_DBG_LMON_MUX_SEL_RESETCSR				0x0000000000000000ull
#define FXR_TP_DBG_LMON_MUX_SEL_UNUSED_63_8_SHIFT			8
#define FXR_TP_DBG_LMON_MUX_SEL_UNUSED_63_8_MASK			0xFFFFFFFFFFFFFFull
#define FXR_TP_DBG_LMON_MUX_SEL_UNUSED_63_8_SMASK			0xFFFFFFFFFFFFFF00ull
#define FXR_TP_DBG_LMON_MUX_SEL_MUX_SEL1_SHIFT				4
#define FXR_TP_DBG_LMON_MUX_SEL_MUX_SEL1_MASK				0xFull
#define FXR_TP_DBG_LMON_MUX_SEL_MUX_SEL1_SMASK				0xF0ull
#define FXR_TP_DBG_LMON_MUX_SEL_MUX_SEL0_SHIFT				0
#define FXR_TP_DBG_LMON_MUX_SEL_MUX_SEL0_MASK				0xFull
#define FXR_TP_DBG_LMON_MUX_SEL_MUX_SEL0_SMASK				0xFull
/*
* Table #36 of fxr_top - TP_DBG_ERROR_INJECTION
* This CSR contains the error injection parameters for Tport. 
*/
#define FXR_TP_DBG_ERROR_INJECTION					(FXR_LM_TP_CSRS + 0x0000000002A8)
#define FXR_TP_DBG_ERROR_INJECTION_RESETCSR				0x0000000000000000ull
#define FXR_TP_DBG_ERROR_INJECTION_UNUSED_63_40_SHIFT			40
#define FXR_TP_DBG_ERROR_INJECTION_UNUSED_63_40_MASK			0xFFFFFFull
#define FXR_TP_DBG_ERROR_INJECTION_UNUSED_63_40_SMASK			0xFFFFFF0000000000ull
#define FXR_TP_DBG_ERROR_INJECTION_CHECK_BYTE3_SHIFT			32
#define FXR_TP_DBG_ERROR_INJECTION_CHECK_BYTE3_MASK			0xFFull
#define FXR_TP_DBG_ERROR_INJECTION_CHECK_BYTE3_SMASK			0xFF00000000ull
#define FXR_TP_DBG_ERROR_INJECTION_CHECK_BYTE2_SHIFT			24
#define FXR_TP_DBG_ERROR_INJECTION_CHECK_BYTE2_MASK			0xFFull
#define FXR_TP_DBG_ERROR_INJECTION_CHECK_BYTE2_SMASK			0xFF000000ull
#define FXR_TP_DBG_ERROR_INJECTION_CHECK_BYTE1_SHIFT			16
#define FXR_TP_DBG_ERROR_INJECTION_CHECK_BYTE1_MASK			0xFFull
#define FXR_TP_DBG_ERROR_INJECTION_CHECK_BYTE1_SMASK			0xFF0000ull
#define FXR_TP_DBG_ERROR_INJECTION_CHECK_BYTE0_SHIFT			8
#define FXR_TP_DBG_ERROR_INJECTION_CHECK_BYTE0_MASK			0xFFull
#define FXR_TP_DBG_ERROR_INJECTION_CHECK_BYTE0_SMASK			0xFF00ull
#define FXR_TP_DBG_ERROR_INJECTION_UNUSED_7_6_SHIFT			6
#define FXR_TP_DBG_ERROR_INJECTION_UNUSED_7_6_MASK			0x3ull
#define FXR_TP_DBG_ERROR_INJECTION_UNUSED_7_6_SMASK			0xC0ull
#define FXR_TP_DBG_ERROR_INJECTION_FLIT_TYPE_SHIFT			4
#define FXR_TP_DBG_ERROR_INJECTION_FLIT_TYPE_MASK			0x3ull
#define FXR_TP_DBG_ERROR_INJECTION_FLIT_TYPE_SMASK			0x30ull
#define FXR_TP_DBG_ERROR_INJECTION_ERR_TYPE_SHIFT			3
#define FXR_TP_DBG_ERROR_INJECTION_ERR_TYPE_MASK			0x1ull
#define FXR_TP_DBG_ERROR_INJECTION_ERR_TYPE_SMASK			0x8ull
#define FXR_TP_DBG_ERROR_INJECTION_COLBUS_SHIFT				1
#define FXR_TP_DBG_ERROR_INJECTION_COLBUS_MASK				0x3ull
#define FXR_TP_DBG_ERROR_INJECTION_COLBUS_SMASK				0x6ull
#define FXR_TP_DBG_ERROR_INJECTION_ARMED_SHIFT				0
#define FXR_TP_DBG_ERROR_INJECTION_ARMED_MASK				0x1ull
#define FXR_TP_DBG_ERROR_INJECTION_ARMED_SMASK				0x1ull
/*
* Table #37 of fxr_top - TP_CFG_PERF_CTRL
* The TPORT performance counter control register is used to enable, disable and 
* clear all the performance counters. It also contains event counter status and 
* error information. Performance counters may be written individually as 
* well.
*/
#define FXR_TP_CFG_PERF_CTRL						(FXR_LM_TP_CSRS + 0x0000000002B0)
#define FXR_TP_CFG_PERF_CTRL_RESETCSR					0x0000000000000001ull
#define FXR_TP_CFG_PERF_CTRL_UNUSED_63_26_SHIFT				26
#define FXR_TP_CFG_PERF_CTRL_UNUSED_63_26_MASK				0x3FFFFFFFFFull
#define FXR_TP_CFG_PERF_CTRL_UNUSED_63_26_SMASK				0xFFFFFFFFFC000000ull
#define FXR_TP_CFG_PERF_CTRL_ERRINJ_TRIGGERED_SHIFT			25
#define FXR_TP_CFG_PERF_CTRL_ERRINJ_TRIGGERED_MASK			0x1ull
#define FXR_TP_CFG_PERF_CTRL_ERRINJ_TRIGGERED_SMASK			0x2000000ull
#define FXR_TP_CFG_PERF_CTRL_ERRINJ_RESET_SHIFT				24
#define FXR_TP_CFG_PERF_CTRL_ERRINJ_RESET_MASK				0x1ull
#define FXR_TP_CFG_PERF_CTRL_ERRINJ_RESET_SMASK				0x1000000ull
#define FXR_TP_CFG_PERF_CTRL_ERRINJ_EN_SHIFT				23
#define FXR_TP_CFG_PERF_CTRL_ERRINJ_EN_MASK				0x1ull
#define FXR_TP_CFG_PERF_CTRL_ERRINJ_EN_SMASK				0x800000ull
#define FXR_TP_CFG_PERF_CTRL_ERRINJ_MODE_SHIFT				21
#define FXR_TP_CFG_PERF_CTRL_ERRINJ_MODE_MASK				0x3ull
#define FXR_TP_CFG_PERF_CTRL_ERRINJ_MODE_SMASK				0x600000ull
#define FXR_TP_CFG_PERF_CTRL_ERRINJ_PARITY_SHIFT			17
#define FXR_TP_CFG_PERF_CTRL_ERRINJ_PARITY_MASK				0xFull
#define FXR_TP_CFG_PERF_CTRL_ERRINJ_PARITY_SMASK			0x1E0000ull
#define FXR_TP_CFG_PERF_CTRL_ERRINJ_ADDR_SHIFT				10
#define FXR_TP_CFG_PERF_CTRL_ERRINJ_ADDR_MASK				0x7Full
#define FXR_TP_CFG_PERF_CTRL_ERRINJ_ADDR_SMASK				0x1FC00ull
#define FXR_TP_CFG_PERF_CTRL_PARITY_ERR_ADDR_SHIFT			3
#define FXR_TP_CFG_PERF_CTRL_PARITY_ERR_ADDR_MASK			0x7Full
#define FXR_TP_CFG_PERF_CTRL_PARITY_ERR_ADDR_SMASK			0x3F8ull
#define FXR_TP_CFG_PERF_CTRL_CLR_CNTRS_COMP_SHIFT			2
#define FXR_TP_CFG_PERF_CTRL_CLR_CNTRS_COMP_MASK			0x1ull
#define FXR_TP_CFG_PERF_CTRL_CLR_CNTRS_COMP_SMASK			0x4ull
#define FXR_TP_CFG_PERF_CTRL_CLR_CNTRS_SHIFT				1
#define FXR_TP_CFG_PERF_CTRL_CLR_CNTRS_MASK				0x1ull
#define FXR_TP_CFG_PERF_CTRL_CLR_CNTRS_SMASK				0x2ull
#define FXR_TP_CFG_PERF_CTRL_ENABLE_CNTRS_SHIFT				0
#define FXR_TP_CFG_PERF_CTRL_ENABLE_CNTRS_MASK				0x1ull
#define FXR_TP_CFG_PERF_CTRL_ENABLE_CNTRS_SMASK				0x1ull
/*
* Table #38 of fxr_top - TP_PRF_COUNTERS
* The event counters hold 64 individual counters, each counter has it own unique 
* address and is documented separately. For counters that show an array after 
* them [9], this indicates that the counter is a per VL counter. index[0] 
* represent VL0 and index[9] represents VL15. Valid VL's range from 
* 0-8,15.
*/
#define FXR_TP_PRF_COUNTERS						(FXR_LM_TP_CSRS + 0x000000000400)
#define FXR_TP_PRF_COUNTERS_RESETCSR					0x0000000000000000ull
#define FXR_TP_PRF_COUNTERS_CNT_SHIFT					0
#define FXR_TP_PRF_COUNTERS_CNT_MASK					0xFFFFFFFFFFFFFFFFull
#define FXR_TP_PRF_COUNTERS_CNT_SMASK					0xFFFFFFFFFFFFFFFFull

#endif 		/* DEF_FXR_LINKMUX_TP_SW_DEF */
