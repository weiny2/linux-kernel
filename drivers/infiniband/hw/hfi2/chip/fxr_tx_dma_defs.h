/*
*------------------------------------------------------------------------------
*                                                                              
*  INTEL CONFIDENTIAL                                                          
*                                                                              
*  Copyright 2018 Intel Corporation All Rights Reserved.                 
*                                                                              
*  The source code contained or described herein and all documents related     
*  to the source code ("Material") are owned by Intel Corporation or its    
*  suppliers or licensors. Title to the Material remains with Intel            
*  Corporation or its suppliers and licensors. The Material contains trade     
*  secrets and proprietary and confidential information of Intel or its        
*  suppliers and licensors. The Material is protected by worldwide copyright   
*  and trade secret laws and treaty provisions. No part of the Material may    
*  be used, copied, reproduced, modified, published, uploaded, posted,         
*  transmitted, distributed, or disclosed in any way without Intel's prior     
*  express written permission.                                                 
*                                                                              
*  No license under any patent, copyright, trade secret or other intellectual  
*  property right is granted to or conferred upon you by disclosure or         
*  delivery of the Materials, either expressly, by implication, inducement,    
*  estoppel or otherwise. Any license under such intellectual property rights  
*  must be express and approved by Intel in writing.                           
*                                                                              
*------------------------------------------------------------------------------
*  Auto-generated by /p/hdk/rtl/proj_tools/sl2_tools/sl2_tools-srvr10nm-18ww26b/scripts/i_csrs/i_csrs.pl
*  i_csrs.pl Version 1.5 last modified on Thursday 6/28/18 12:45:58
*  /p/hdk/rtl/proj_tools/sl2_tools/sl2_tools-srvr10nm-18ww26b/scripts/i_csrs/i_csrs.pl -C -RVREGS -ST fxr_tx_dma -o /nfs/sc/disks/slx_0108/pvesv/fxr_autogen/fxr /nfs/sc/disks/slx_0108/pvesv/fxr_autogen/repo_xml/300_Memory_Map.xml /nfs/sc/disks/slx_0108/pvesv/fxr_autogen/repo_xml/326_Memory_Map_TX_DMA.xml
*------------------------------------------------------------------------------
*/

#ifndef DEF_FXR_TX_DMA_SW_DEF
#define DEF_FXR_TX_DMA_SW_DEF

#ifndef FXR_TX_DMA_CSRS
#define FXR_TX_DMA_CSRS							0x000000000000
#endif
#define FXR_NUM_CONTEXTS						256
#define FXR_NUM_PIDS							4096
#define FXR_MAX_CONTEXT							255
#define FXR_TX_CONTEXT_ENTRIES						128
#define FXR_TX_CONTEXT_MAX						127
#define FXR_RX_CONTEXT_ENTRIES						32
#define FXR_RX_CONTEXT_MAX						31
#define FXR_NUM_SL							32
#define FXR_MAX_SL							31
#define TX_DMA_BASE							0
/*
* Table #4 of fxr_top - TXDMA_CFG_THRESHOLD
* This CSR is used to set the number of beginning bytes required to be assembled 
* for packets before starting to send them out to the LM (Link 
* Mux).
*/
#define FXR_TXDMA_CFG_THRESHOLD						(FXR_TX_DMA_CSRS + 0x000000000000)
#define FXR_TXDMA_CFG_THRESHOLD_RESETCSR				0x0000000000000020ull
#define FXR_TXDMA_CFG_THRESHOLD_RESERVED_63_10_SHIFT			10
#define FXR_TXDMA_CFG_THRESHOLD_RESERVED_63_10_MASK			0x3FFFFFFFFFFFFFull
#define FXR_TXDMA_CFG_THRESHOLD_RESERVED_63_10_SMASK			0xFFFFFFFFFFFFFC00ull
#define FXR_TXDMA_CFG_THRESHOLD_THRESHOLD_SHIFT				0
#define FXR_TXDMA_CFG_THRESHOLD_THRESHOLD_MASK				0x3FFull
#define FXR_TXDMA_CFG_THRESHOLD_THRESHOLD_SMASK				0x3FFull
/*
* Table #5 of fxr_top - TXDMA_CFG_BWMETER
* This array of CSRs are used to configure the leaky bucket arbitration logic 
* for each MC/TC. There are 8 CSRs, one per MC/TC and the CSR index to MC/TC 
* correlation is shown in the following list.
*/
#define FXR_TXDMA_CFG_BWMETER						(FXR_TX_DMA_CSRS + 0x000000000008)
#define FXR_TXDMA_CFG_BWMETER_RESETCSR					0x0000FFFF00070000ull
#define FXR_TXDMA_CFG_BWMETER_RESERVED_63_48_SHIFT			48
#define FXR_TXDMA_CFG_BWMETER_RESERVED_63_48_MASK			0xFFFFull
#define FXR_TXDMA_CFG_BWMETER_RESERVED_63_48_SMASK			0xFFFF000000000000ull
#define FXR_TXDMA_CFG_BWMETER_BANDWIDTH_LIMIT_SHIFT			32
#define FXR_TXDMA_CFG_BWMETER_BANDWIDTH_LIMIT_MASK			0xFFFFull
#define FXR_TXDMA_CFG_BWMETER_BANDWIDTH_LIMIT_SMASK			0xFFFF00000000ull
#define FXR_TXDMA_CFG_BWMETER_ENABLE_CAPPING_SHIFT			31
#define FXR_TXDMA_CFG_BWMETER_ENABLE_CAPPING_MASK			0x1ull
#define FXR_TXDMA_CFG_BWMETER_ENABLE_CAPPING_SMASK			0x80000000ull
#define FXR_TXDMA_CFG_BWMETER_RESERVED_30_19_SHIFT			19
#define FXR_TXDMA_CFG_BWMETER_RESERVED_30_19_MASK			0xFFFull
#define FXR_TXDMA_CFG_BWMETER_RESERVED_30_19_SMASK			0x7FF80000ull
#define FXR_TXDMA_CFG_BWMETER_LEAK_AMOUNT_INTEGRAL_SHIFT		16
#define FXR_TXDMA_CFG_BWMETER_LEAK_AMOUNT_INTEGRAL_MASK			0x7ull
#define FXR_TXDMA_CFG_BWMETER_LEAK_AMOUNT_INTEGRAL_SMASK		0x70000ull
#define FXR_TXDMA_CFG_BWMETER_LEAK_AMOUNT_FRACTIONAL_SHIFT		0
#define FXR_TXDMA_CFG_BWMETER_LEAK_AMOUNT_FRACTIONAL_MASK		0xFFFFull
#define FXR_TXDMA_CFG_BWMETER_LEAK_AMOUNT_FRACTIONAL_SMASK		0xFFFFull
/*
* Table #6 of fxr_top - TXDMA_CFG_PKT_DESC_CREDITS
* This CSR is used to set the number of credits available on the OTR to TXDMA 
* packet descriptor interface. There is one field per MC/TC.
*/
#define FXR_TXDMA_CFG_PKT_DESC_CREDITS					(FXR_TX_DMA_CSRS + 0x000000000048)
#define FXR_TXDMA_CFG_PKT_DESC_CREDITS_RESETCSR				0x0000820820820820ull
#define FXR_TXDMA_CFG_PKT_DESC_CREDITS_RESERVED_63_48_SHIFT		48
#define FXR_TXDMA_CFG_PKT_DESC_CREDITS_RESERVED_63_48_MASK		0xFFFFull
#define FXR_TXDMA_CFG_PKT_DESC_CREDITS_RESERVED_63_48_SMASK		0xFFFF000000000000ull
#define FXR_TXDMA_CFG_PKT_DESC_CREDITS_MC1_TC3_CREDITS_SHIFT		42
#define FXR_TXDMA_CFG_PKT_DESC_CREDITS_MC1_TC3_CREDITS_MASK		0x3Full
#define FXR_TXDMA_CFG_PKT_DESC_CREDITS_MC1_TC3_CREDITS_SMASK		0xFC0000000000ull
#define FXR_TXDMA_CFG_PKT_DESC_CREDITS_MC1_TC2_CREDITS_SHIFT		36
#define FXR_TXDMA_CFG_PKT_DESC_CREDITS_MC1_TC2_CREDITS_MASK		0x3Full
#define FXR_TXDMA_CFG_PKT_DESC_CREDITS_MC1_TC2_CREDITS_SMASK		0x3F000000000ull
#define FXR_TXDMA_CFG_PKT_DESC_CREDITS_MC1_TC1_CREDITS_SHIFT		30
#define FXR_TXDMA_CFG_PKT_DESC_CREDITS_MC1_TC1_CREDITS_MASK		0x3Full
#define FXR_TXDMA_CFG_PKT_DESC_CREDITS_MC1_TC1_CREDITS_SMASK		0xFC0000000ull
#define FXR_TXDMA_CFG_PKT_DESC_CREDITS_MC1_TC0_CREDITS_SHIFT		24
#define FXR_TXDMA_CFG_PKT_DESC_CREDITS_MC1_TC0_CREDITS_MASK		0x3Full
#define FXR_TXDMA_CFG_PKT_DESC_CREDITS_MC1_TC0_CREDITS_SMASK		0x3F000000ull
#define FXR_TXDMA_CFG_PKT_DESC_CREDITS_MC0_TC3_CREDITS_SHIFT		18
#define FXR_TXDMA_CFG_PKT_DESC_CREDITS_MC0_TC3_CREDITS_MASK		0x3Full
#define FXR_TXDMA_CFG_PKT_DESC_CREDITS_MC0_TC3_CREDITS_SMASK		0xFC0000ull
#define FXR_TXDMA_CFG_PKT_DESC_CREDITS_MC0_TC2_CREDITS_SHIFT		12
#define FXR_TXDMA_CFG_PKT_DESC_CREDITS_MC0_TC2_CREDITS_MASK		0x3Full
#define FXR_TXDMA_CFG_PKT_DESC_CREDITS_MC0_TC2_CREDITS_SMASK		0x3F000ull
#define FXR_TXDMA_CFG_PKT_DESC_CREDITS_MC0_TC1_CREDITS_SHIFT		6
#define FXR_TXDMA_CFG_PKT_DESC_CREDITS_MC0_TC1_CREDITS_MASK		0x3Full
#define FXR_TXDMA_CFG_PKT_DESC_CREDITS_MC0_TC1_CREDITS_SMASK		0xFC0ull
#define FXR_TXDMA_CFG_PKT_DESC_CREDITS_MC0_TC0_CREDITS_SHIFT		0
#define FXR_TXDMA_CFG_PKT_DESC_CREDITS_MC0_TC0_CREDITS_MASK		0x3Full
#define FXR_TXDMA_CFG_PKT_DESC_CREDITS_MC0_TC0_CREDITS_SMASK		0x3Full
/*
* Table #7 of fxr_top - TXDMA_CFG_MEM_RSP_CREDITS
* This CSR is used to set the number of credits available on the OTR to TXDMA 
* memory response interface.
*/
#define FXR_TXDMA_CFG_MEM_RSP_CREDITS					(FXR_TX_DMA_CSRS + 0x000000000050)
#define FXR_TXDMA_CFG_MEM_RSP_CREDITS_RESETCSR				0x0000000000000008ull
#define FXR_TXDMA_CFG_MEM_RSP_CREDITS_RESERVED_63_4_SHIFT		4
#define FXR_TXDMA_CFG_MEM_RSP_CREDITS_RESERVED_63_4_MASK		0xFFFFFFFFFFFFFFFull
#define FXR_TXDMA_CFG_MEM_RSP_CREDITS_RESERVED_63_4_SMASK		0xFFFFFFFFFFFFFFF0ull
#define FXR_TXDMA_CFG_MEM_RSP_CREDITS_CREDITS_SHIFT			0
#define FXR_TXDMA_CFG_MEM_RSP_CREDITS_CREDITS_MASK			0xFull
#define FXR_TXDMA_CFG_MEM_RSP_CREDITS_CREDITS_SMASK			0xFull
/*
* Table #8 of fxr_top - TXDMA_CFG_PKT_ACK_CREDITS
* This CSR is used to set the number of credits available on the RXE to TXDMA 
* acknowledge interface. There is one field per TC.
*/
#define FXR_TXDMA_CFG_PKT_ACK_CREDITS					(FXR_TX_DMA_CSRS + 0x000000000058)
#define FXR_TXDMA_CFG_PKT_ACK_CREDITS_RESETCSR				0x0000000000084210ull
#define FXR_TXDMA_CFG_PKT_ACK_CREDITS_RESERVED_63_20_SHIFT		20
#define FXR_TXDMA_CFG_PKT_ACK_CREDITS_RESERVED_63_20_MASK		0xFFFFFFFFFFFull
#define FXR_TXDMA_CFG_PKT_ACK_CREDITS_RESERVED_63_20_SMASK		0xFFFFFFFFFFF00000ull
#define FXR_TXDMA_CFG_PKT_ACK_CREDITS_TC3_CREDITS_SHIFT			15
#define FXR_TXDMA_CFG_PKT_ACK_CREDITS_TC3_CREDITS_MASK			0x1Full
#define FXR_TXDMA_CFG_PKT_ACK_CREDITS_TC3_CREDITS_SMASK			0xF8000ull
#define FXR_TXDMA_CFG_PKT_ACK_CREDITS_TC2_CREDITS_SHIFT			10
#define FXR_TXDMA_CFG_PKT_ACK_CREDITS_TC2_CREDITS_MASK			0x1Full
#define FXR_TXDMA_CFG_PKT_ACK_CREDITS_TC2_CREDITS_SMASK			0x7C00ull
#define FXR_TXDMA_CFG_PKT_ACK_CREDITS_TC1_CREDITS_SHIFT			5
#define FXR_TXDMA_CFG_PKT_ACK_CREDITS_TC1_CREDITS_MASK			0x1Full
#define FXR_TXDMA_CFG_PKT_ACK_CREDITS_TC1_CREDITS_SMASK			0x3E0ull
#define FXR_TXDMA_CFG_PKT_ACK_CREDITS_TC0_CREDITS_SHIFT			0
#define FXR_TXDMA_CFG_PKT_ACK_CREDITS_TC0_CREDITS_MASK			0x1Full
#define FXR_TXDMA_CFG_PKT_ACK_CREDITS_TC0_CREDITS_SMASK			0x1Full
/*
* Table #9 of fxr_top - TXDMA_CFG_TIMEOUT
* This CSR is used to set the number of core clocks to wait for a host read 
* response before indicating a timeout has occurred.
*/
#define FXR_TXDMA_CFG_TIMEOUT						(FXR_TX_DMA_CSRS + 0x000000000060)
#define FXR_TXDMA_CFG_TIMEOUT_RESETCSR					0x0000000007270E00ull
#define FXR_TXDMA_CFG_TIMEOUT_RESERVED_63_32_SHIFT			32
#define FXR_TXDMA_CFG_TIMEOUT_RESERVED_63_32_MASK			0xFFFFFFFFull
#define FXR_TXDMA_CFG_TIMEOUT_RESERVED_63_32_SMASK			0xFFFFFFFF00000000ull
#define FXR_TXDMA_CFG_TIMEOUT_TIMEOUT_CNT_SHIFT				0
#define FXR_TXDMA_CFG_TIMEOUT_TIMEOUT_CNT_MASK				0xFFFFFFFFull
#define FXR_TXDMA_CFG_TIMEOUT_TIMEOUT_CNT_SMASK				0xFFFFFFFFull
/*
* Table #10 of fxr_top - TXDMA_CFG_CLEANUP
* This CSR is used to clean up the TXDMA after an unrecoverable error has 
* occurred. Writing a 1 to the #%%#cleanup#%%# field of this CSR initiates a 
* reset of all TXDMA hardware except the RXDMA -> TXDMA acknowledge path, the 
* CSR logic and the credit logic on the various interfaces.
*/
#define FXR_TXDMA_CFG_CLEANUP						(FXR_TX_DMA_CSRS + 0x000000000068)
#define FXR_TXDMA_CFG_CLEANUP_RESETCSR					0x0000000000000000ull
#define FXR_TXDMA_CFG_CLEANUP_RESERVED_63_1_SHIFT			1
#define FXR_TXDMA_CFG_CLEANUP_RESERVED_63_1_MASK			0x7FFFFFFFFFFFFFFFull
#define FXR_TXDMA_CFG_CLEANUP_RESERVED_63_1_SMASK			0xFFFFFFFFFFFFFFFEull
#define FXR_TXDMA_CFG_CLEANUP_CLEANUP_SHIFT				0
#define FXR_TXDMA_CFG_CLEANUP_CLEANUP_MASK				0x1ull
#define FXR_TXDMA_CFG_CLEANUP_CLEANUP_SMASK				0x1ull
/*
* Table #11 of fxr_top - TXDMA_CFG_MAX_PCIE_REQ_SIZE
* This CSR is used to configure the PCIe maximum request size.
*/
#define FXR_TXDMA_CFG_MAX_PCIE_REQ_SIZE					(FXR_TX_DMA_CSRS + 0x000000000070)
#define FXR_TXDMA_CFG_MAX_PCIE_REQ_SIZE_RESETCSR			0x0000000000000000ull
#define FXR_TXDMA_CFG_MAX_PCIE_REQ_SIZE_RESERVED_63_1_SHIFT		1
#define FXR_TXDMA_CFG_MAX_PCIE_REQ_SIZE_RESERVED_63_1_MASK		0x7FFFFFFFFFFFFFFFull
#define FXR_TXDMA_CFG_MAX_PCIE_REQ_SIZE_RESERVED_63_1_SMASK		0xFFFFFFFFFFFFFFFEull
#define FXR_TXDMA_CFG_MAX_PCIE_REQ_SIZE_PCIE_MTU_SHIFT			0
#define FXR_TXDMA_CFG_MAX_PCIE_REQ_SIZE_PCIE_MTU_MASK			0x1ull
#define FXR_TXDMA_CFG_MAX_PCIE_REQ_SIZE_PCIE_MTU_SMASK			0x1ull
/*
* Table #12 of fxr_top - TXDMA_ERR_STS
* This CSR reports error status for the TXDMA.
*/
#define FXR_TXDMA_ERR_STS						(FXR_TX_DMA_CSRS + 0x000000000200)
#define FXR_TXDMA_ERR_STS_RESETCSR					0x0000000000000000ull
#define FXR_TXDMA_ERR_STS_RESERVED_63_35_SHIFT				35
#define FXR_TXDMA_ERR_STS_RESERVED_63_35_MASK				0x1FFFFFFFull
#define FXR_TXDMA_ERR_STS_RESERVED_63_35_SMASK				0xFFFFFFF800000000ull
#define FXR_TXDMA_ERR_STS_INPQ_PARITY_ERR_SHIFT				34
#define FXR_TXDMA_ERR_STS_INPQ_PARITY_ERR_MASK				0x1ull
#define FXR_TXDMA_ERR_STS_INPQ_PARITY_ERR_SMASK				0x400000000ull
#define FXR_TXDMA_ERR_STS_PKT_TRK_PARITY_ERR_SHIFT			33
#define FXR_TXDMA_ERR_STS_PKT_TRK_PARITY_ERR_MASK			0x1ull
#define FXR_TXDMA_ERR_STS_PKT_TRK_PARITY_ERR_SMASK			0x200000000ull
#define FXR_TXDMA_ERR_STS_MEM_TID_PARITY_ERR_SHIFT			32
#define FXR_TXDMA_ERR_STS_MEM_TID_PARITY_ERR_MASK			0x1ull
#define FXR_TXDMA_ERR_STS_MEM_TID_PARITY_ERR_SMASK			0x100000000ull
#define FXR_TXDMA_ERR_STS_MEM_RSP_STS_ERR_SHIFT				31
#define FXR_TXDMA_ERR_STS_MEM_RSP_STS_ERR_MASK				0x1ull
#define FXR_TXDMA_ERR_STS_MEM_RSP_STS_ERR_SMASK				0x80000000ull
#define FXR_TXDMA_ERR_STS_PKT_TRK_UNC_ERR_SHIFT				30
#define FXR_TXDMA_ERR_STS_PKT_TRK_UNC_ERR_MASK				0x1ull
#define FXR_TXDMA_ERR_STS_PKT_TRK_UNC_ERR_SMASK				0x40000000ull
#define FXR_TXDMA_ERR_STS_PKT_TRK_COR_ERR_SHIFT				29
#define FXR_TXDMA_ERR_STS_PKT_TRK_COR_ERR_MASK				0x1ull
#define FXR_TXDMA_ERR_STS_PKT_TRK_COR_ERR_SMASK				0x20000000ull
#define FXR_TXDMA_ERR_STS_BUF_TRK_UNC_ERR_SHIFT				28
#define FXR_TXDMA_ERR_STS_BUF_TRK_UNC_ERR_MASK				0x1ull
#define FXR_TXDMA_ERR_STS_BUF_TRK_UNC_ERR_SMASK				0x10000000ull
#define FXR_TXDMA_ERR_STS_BUF_TRK_COR_ERR_SHIFT				27
#define FXR_TXDMA_ERR_STS_BUF_TRK_COR_ERR_MASK				0x1ull
#define FXR_TXDMA_ERR_STS_BUF_TRK_COR_ERR_SMASK				0x8000000ull
#define FXR_TXDMA_ERR_STS_LM1_CREDIT_ERR_SHIFT				26
#define FXR_TXDMA_ERR_STS_LM1_CREDIT_ERR_MASK				0x1ull
#define FXR_TXDMA_ERR_STS_LM1_CREDIT_ERR_SMASK				0x4000000ull
#define FXR_TXDMA_ERR_STS_LM0_CREDIT_ERR_SHIFT				25
#define FXR_TXDMA_ERR_STS_LM0_CREDIT_ERR_MASK				0x1ull
#define FXR_TXDMA_ERR_STS_LM0_CREDIT_ERR_SMASK				0x2000000ull
#define FXR_TXDMA_ERR_STS_RSPQ_OVERFLOW_SHIFT				24
#define FXR_TXDMA_ERR_STS_RSPQ_OVERFLOW_MASK				0x1ull
#define FXR_TXDMA_ERR_STS_RSPQ_OVERFLOW_SMASK				0x1000000ull
#define FXR_TXDMA_ERR_STS_RSPQ_UNC_ERR_SHIFT				23
#define FXR_TXDMA_ERR_STS_RSPQ_UNC_ERR_MASK				0x1ull
#define FXR_TXDMA_ERR_STS_RSPQ_UNC_ERR_SMASK				0x800000ull
#define FXR_TXDMA_ERR_STS_RSPQ_COR_ERR_SHIFT				22
#define FXR_TXDMA_ERR_STS_RSPQ_COR_ERR_MASK				0x1ull
#define FXR_TXDMA_ERR_STS_RSPQ_COR_ERR_SMASK				0x400000ull
#define FXR_TXDMA_ERR_STS_PKT_BUF_UNC_ERR_SHIFT				21
#define FXR_TXDMA_ERR_STS_PKT_BUF_UNC_ERR_MASK				0x1ull
#define FXR_TXDMA_ERR_STS_PKT_BUF_UNC_ERR_SMASK				0x200000ull
#define FXR_TXDMA_ERR_STS_PKT_BUF_COR_ERR_SHIFT				20
#define FXR_TXDMA_ERR_STS_PKT_BUF_COR_ERR_MASK				0x1ull
#define FXR_TXDMA_ERR_STS_PKT_BUF_COR_ERR_SMASK				0x100000ull
#define FXR_TXDMA_ERR_STS_HDR_UNC_ERR_SHIFT				19
#define FXR_TXDMA_ERR_STS_HDR_UNC_ERR_MASK				0x1ull
#define FXR_TXDMA_ERR_STS_HDR_UNC_ERR_SMASK				0x80000ull
#define FXR_TXDMA_ERR_STS_HDR_COR_ERR_SHIFT				18
#define FXR_TXDMA_ERR_STS_HDR_COR_ERR_MASK				0x1ull
#define FXR_TXDMA_ERR_STS_HDR_COR_ERR_SMASK				0x40000ull
#define FXR_TXDMA_ERR_STS_ORB_UNC_ERR_SHIFT				17
#define FXR_TXDMA_ERR_STS_ORB_UNC_ERR_MASK				0x1ull
#define FXR_TXDMA_ERR_STS_ORB_UNC_ERR_SMASK				0x20000ull
#define FXR_TXDMA_ERR_STS_ORB_COR_ERR_SHIFT				16
#define FXR_TXDMA_ERR_STS_ORB_COR_ERR_MASK				0x1ull
#define FXR_TXDMA_ERR_STS_ORB_COR_ERR_SMASK				0x10000ull
#define FXR_TXDMA_ERR_STS_MEM_RSP_DAT_UNC_ERR_SHIFT			15
#define FXR_TXDMA_ERR_STS_MEM_RSP_DAT_UNC_ERR_MASK			0x1ull
#define FXR_TXDMA_ERR_STS_MEM_RSP_DAT_UNC_ERR_SMASK			0x8000ull
#define FXR_TXDMA_ERR_STS_MEM_RSP_DAT_COR_ERR_SHIFT			14
#define FXR_TXDMA_ERR_STS_MEM_RSP_DAT_COR_ERR_MASK			0x1ull
#define FXR_TXDMA_ERR_STS_MEM_RSP_DAT_COR_ERR_SMASK			0x4000ull
#define FXR_TXDMA_ERR_STS_MEM_RSP_HDR_UNC_ERR_SHIFT			13
#define FXR_TXDMA_ERR_STS_MEM_RSP_HDR_UNC_ERR_MASK			0x1ull
#define FXR_TXDMA_ERR_STS_MEM_RSP_HDR_UNC_ERR_SMASK			0x2000ull
#define FXR_TXDMA_ERR_STS_MEM_RSP_HDR_COR_ERR_SHIFT			12
#define FXR_TXDMA_ERR_STS_MEM_RSP_HDR_COR_ERR_MASK			0x1ull
#define FXR_TXDMA_ERR_STS_MEM_RSP_HDR_COR_ERR_SMASK			0x1000ull
#define FXR_TXDMA_ERR_STS_TIMEOUT_ERR_SHIFT				11
#define FXR_TXDMA_ERR_STS_TIMEOUT_ERR_MASK				0x1ull
#define FXR_TXDMA_ERR_STS_TIMEOUT_ERR_SMASK				0x800ull
#define FXR_TXDMA_ERR_STS_AT_STATUS_ERR_SHIFT				10
#define FXR_TXDMA_ERR_STS_AT_STATUS_ERR_MASK				0x1ull
#define FXR_TXDMA_ERR_STS_AT_STATUS_ERR_SMASK				0x400ull
#define FXR_TXDMA_ERR_STS_INPQ_OVERFLOW_SHIFT				9
#define FXR_TXDMA_ERR_STS_INPQ_OVERFLOW_MASK				0x1ull
#define FXR_TXDMA_ERR_STS_INPQ_OVERFLOW_SMASK				0x200ull
#define FXR_TXDMA_ERR_STS_XLATEQ_UNC_ERR_SHIFT				8
#define FXR_TXDMA_ERR_STS_XLATEQ_UNC_ERR_MASK				0x1ull
#define FXR_TXDMA_ERR_STS_XLATEQ_UNC_ERR_SMASK				0x100ull
#define FXR_TXDMA_ERR_STS_XLATEQ_COR_ERR_SHIFT				7
#define FXR_TXDMA_ERR_STS_XLATEQ_COR_ERR_MASK				0x1ull
#define FXR_TXDMA_ERR_STS_XLATEQ_COR_ERR_SMASK				0x80ull
#define FXR_TXDMA_ERR_STS_INPQ_UNC_ERR_SHIFT				6
#define FXR_TXDMA_ERR_STS_INPQ_UNC_ERR_MASK				0x1ull
#define FXR_TXDMA_ERR_STS_INPQ_UNC_ERR_SMASK				0x40ull
#define FXR_TXDMA_ERR_STS_INPQ_COR_ERR_SHIFT				5
#define FXR_TXDMA_ERR_STS_INPQ_COR_ERR_MASK				0x1ull
#define FXR_TXDMA_ERR_STS_INPQ_COR_ERR_SMASK				0x20ull
#define FXR_TXDMA_ERR_STS_PKT_DESC_GEN_ERR_SHIFT			4
#define FXR_TXDMA_ERR_STS_PKT_DESC_GEN_ERR_MASK				0x1ull
#define FXR_TXDMA_ERR_STS_PKT_DESC_GEN_ERR_SMASK			0x10ull
#define FXR_TXDMA_ERR_STS_PKT_DESC_UNC_DAT_ERR_SHIFT			3
#define FXR_TXDMA_ERR_STS_PKT_DESC_UNC_DAT_ERR_MASK			0x1ull
#define FXR_TXDMA_ERR_STS_PKT_DESC_UNC_DAT_ERR_SMASK			0x8ull
#define FXR_TXDMA_ERR_STS_PKT_DESC_COR_DAT_ERR_SHIFT			2
#define FXR_TXDMA_ERR_STS_PKT_DESC_COR_DAT_ERR_MASK			0x1ull
#define FXR_TXDMA_ERR_STS_PKT_DESC_COR_DAT_ERR_SMASK			0x4ull
#define FXR_TXDMA_ERR_STS_PKT_DESC_UNC_SB_ERR_SHIFT			1
#define FXR_TXDMA_ERR_STS_PKT_DESC_UNC_SB_ERR_MASK			0x1ull
#define FXR_TXDMA_ERR_STS_PKT_DESC_UNC_SB_ERR_SMASK			0x2ull
#define FXR_TXDMA_ERR_STS_PKT_DESC_COR_SB_ERR_SHIFT			0
#define FXR_TXDMA_ERR_STS_PKT_DESC_COR_SB_ERR_MASK			0x1ull
#define FXR_TXDMA_ERR_STS_PKT_DESC_COR_SB_ERR_SMASK			0x1ull
/*
* Table #13 of fxr_top - TXDMA_ERR_CLR
* This CSR is used to clear an error or errors for the TXDMA. Each bit that is 
* written as 1 will clear down the corresponding bit in the #%%#TXDMA_ERR_STS#%%# 
* CSR.
*/
#define FXR_TXDMA_ERR_CLR						(FXR_TX_DMA_CSRS + 0x000000000208)
#define FXR_TXDMA_ERR_CLR_RESETCSR					0x0000000000000000ull
#define FXR_TXDMA_ERR_CLR_RESERVED_63_35_SHIFT				35
#define FXR_TXDMA_ERR_CLR_RESERVED_63_35_MASK				0x1FFFFFFFull
#define FXR_TXDMA_ERR_CLR_RESERVED_63_35_SMASK				0xFFFFFFF800000000ull
#define FXR_TXDMA_ERR_CLR_ERROR_CLR_SHIFT				0
#define FXR_TXDMA_ERR_CLR_ERROR_CLR_MASK				0x7FFFFFFFFull
#define FXR_TXDMA_ERR_CLR_ERROR_CLR_SMASK				0x7FFFFFFFFull
/*
* Table #14 of fxr_top - TXDMA_ERR_FRC
* This CSR is used to force the setting of an error or errors for the TXDMA. 
* Each bit that is written as 1 will set the corresponding bit in the 
* #%%#TXDMA_ERR_STS#%%# CSR. This feature is for testing purposes.
*/
#define FXR_TXDMA_ERR_FRC						(FXR_TX_DMA_CSRS + 0x000000000210)
#define FXR_TXDMA_ERR_FRC_RESETCSR					0x0000000000000000ull
#define FXR_TXDMA_ERR_FRC_RESERVED_63_35_SHIFT				35
#define FXR_TXDMA_ERR_FRC_RESERVED_63_35_MASK				0x1FFFFFFFull
#define FXR_TXDMA_ERR_FRC_RESERVED_63_35_SMASK				0xFFFFFFF800000000ull
#define FXR_TXDMA_ERR_FRC_FORCE_ERR_SHIFT				0
#define FXR_TXDMA_ERR_FRC_FORCE_ERR_MASK				0x7FFFFFFFFull
#define FXR_TXDMA_ERR_FRC_FORCE_ERR_SMASK				0x7FFFFFFFFull
/*
* Table #15 of fxr_top - TXDMA_ERR_EN_HOST
* This CSR is used to enable error interrupts to the host interrupt controller. 
* If a bit is set in this CSR and the corresponding bit sets in the 
* #%%#TXDMA_ERR_STS#%%# CSR an interrupt to the host is generated.
*/
#define FXR_TXDMA_ERR_EN_HOST						(FXR_TX_DMA_CSRS + 0x000000000218)
#define FXR_TXDMA_ERR_EN_HOST_RESETCSR					0x0000000000000000ull
#define FXR_TXDMA_ERR_EN_HOST_RESERVED_63_35_SHIFT			35
#define FXR_TXDMA_ERR_EN_HOST_RESERVED_63_35_MASK			0x1FFFFFFFull
#define FXR_TXDMA_ERR_EN_HOST_RESERVED_63_35_SMASK			0xFFFFFFF800000000ull
#define FXR_TXDMA_ERR_EN_HOST_HOST_EN_SHIFT				0
#define FXR_TXDMA_ERR_EN_HOST_HOST_EN_MASK				0x7FFFFFFFFull
#define FXR_TXDMA_ERR_EN_HOST_HOST_EN_SMASK				0x7FFFFFFFFull
/*
* Table #16 of fxr_top - TXDMA_ERR_FIRST_HOST
* This CSR is used to capture the first event when a cascading error event is 
* encountered. Whenever the host interrupt signal transitions from zero to one 
* this CSR captures the #%%#TXDMA_ERR_STS#%%# bits at the time of the 
* interrupt.
*/
#define FXR_TXDMA_ERR_FIRST_HOST					(FXR_TX_DMA_CSRS + 0x000000000220)
#define FXR_TXDMA_ERR_FIRST_HOST_RESETCSR				0x0000000000000000ull
#define FXR_TXDMA_ERR_FIRST_HOST_RESERVED_63_35_SHIFT			35
#define FXR_TXDMA_ERR_FIRST_HOST_RESERVED_63_35_MASK			0x1FFFFFFFull
#define FXR_TXDMA_ERR_FIRST_HOST_RESERVED_63_35_SMASK			0xFFFFFFF800000000ull
#define FXR_TXDMA_ERR_FIRST_HOST_FIRST_HOST_SHIFT			0
#define FXR_TXDMA_ERR_FIRST_HOST_FIRST_HOST_MASK			0x7FFFFFFFFull
#define FXR_TXDMA_ERR_FIRST_HOST_FIRST_HOST_SMASK			0x7FFFFFFFFull
/*
* Table #17 of fxr_top - TXDMA_ERR_EN_BMC
* This CSR is used to enable error interrupts to the BMC interrupt controller. 
* If a bit is set in this CSR and the corresponding bit sets in the 
* #%%#TXDMA_ERR_STS#%%# CSR an interrupt to the BMC is generated.
*/
#define FXR_TXDMA_ERR_EN_BMC						(FXR_TX_DMA_CSRS + 0x000000000228)
#define FXR_TXDMA_ERR_EN_BMC_RESETCSR					0x0000000000000000ull
#define FXR_TXDMA_ERR_EN_BMC_RESERVED_63_35_SHIFT			35
#define FXR_TXDMA_ERR_EN_BMC_RESERVED_63_35_MASK			0x1FFFFFFFull
#define FXR_TXDMA_ERR_EN_BMC_RESERVED_63_35_SMASK			0xFFFFFFF800000000ull
#define FXR_TXDMA_ERR_EN_BMC_BMC_EN_SHIFT				0
#define FXR_TXDMA_ERR_EN_BMC_BMC_EN_MASK				0x7FFFFFFFFull
#define FXR_TXDMA_ERR_EN_BMC_BMC_EN_SMASK				0x7FFFFFFFFull
/*
* Table #18 of fxr_top - TXDMA_ERR_FIRST_BMC
* This CSR is used to capture the first event when a cascading error event is 
* encountered. Whenever the BMC interrupt signal transitions from zero to one 
* this CSR captures the #%%#TXDMA_ERR_STS#%%# bits at the time of the 
* interrupt.
*/
#define FXR_TXDMA_ERR_FIRST_BMC						(FXR_TX_DMA_CSRS + 0x000000000230)
#define FXR_TXDMA_ERR_FIRST_BMC_RESETCSR				0x0000000000000000ull
#define FXR_TXDMA_ERR_FIRST_BMC_RESERVED_63_35_SHIFT			35
#define FXR_TXDMA_ERR_FIRST_BMC_RESERVED_63_35_MASK			0x1FFFFFFFull
#define FXR_TXDMA_ERR_FIRST_BMC_RESERVED_63_35_SMASK			0xFFFFFFF800000000ull
#define FXR_TXDMA_ERR_FIRST_BMC_FIRST_BMC_SHIFT				0
#define FXR_TXDMA_ERR_FIRST_BMC_FIRST_BMC_MASK				0x7FFFFFFFFull
#define FXR_TXDMA_ERR_FIRST_BMC_FIRST_BMC_SMASK				0x7FFFFFFFFull
/*
* Table #19 of fxr_top - TXDMA_ERR_EN_QUAR
* This CSR is used to enable errors to cause the device to enter quarantine 
* mode. If a bit is set in this CSR and the corresponding bit sets in the 
* #%%#TXDMA_ERR_STS#%%# CSR the device enters quarantine mode.
*/
#define FXR_TXDMA_ERR_EN_QUAR						(FXR_TX_DMA_CSRS + 0x000000000238)
#define FXR_TXDMA_ERR_EN_QUAR_RESETCSR					0x0000000000000000ull
#define FXR_TXDMA_ERR_EN_QUAR_RESERVED_63_35_SHIFT			35
#define FXR_TXDMA_ERR_EN_QUAR_RESERVED_63_35_MASK			0x1FFFFFFFull
#define FXR_TXDMA_ERR_EN_QUAR_RESERVED_63_35_SMASK			0xFFFFFFF800000000ull
#define FXR_TXDMA_ERR_EN_QUAR_QUAR_EN_SHIFT				0
#define FXR_TXDMA_ERR_EN_QUAR_QUAR_EN_MASK				0x7FFFFFFFFull
#define FXR_TXDMA_ERR_EN_QUAR_QUAR_EN_SMASK				0x7FFFFFFFFull
/*
* Table #20 of fxr_top - TXDMA_ERR_FIRST_QUAR
* This CSR is used to capture the first event when a cascading error event is 
* encountered. Whenever the quarantine signal transitions from zero to one this 
* CSR captures the #%%#TXDMA_ERR_STS#%%# bits at the time of the 
* signal.
*/
#define FXR_TXDMA_ERR_FIRST_QUAR					(FXR_TX_DMA_CSRS + 0x000000000240)
#define FXR_TXDMA_ERR_FIRST_QUAR_RESETCSR				0x0000000000000000ull
#define FXR_TXDMA_ERR_FIRST_QUAR_RESERVED_63_35_SHIFT			35
#define FXR_TXDMA_ERR_FIRST_QUAR_RESERVED_63_35_MASK			0x1FFFFFFFull
#define FXR_TXDMA_ERR_FIRST_QUAR_RESERVED_63_35_SMASK			0xFFFFFFF800000000ull
#define FXR_TXDMA_ERR_FIRST_QUAR_FIRST_QUAR_SHIFT			0
#define FXR_TXDMA_ERR_FIRST_QUAR_FIRST_QUAR_MASK			0x7FFFFFFFFull
#define FXR_TXDMA_ERR_FIRST_QUAR_FIRST_QUAR_SMASK			0x7FFFFFFFFull
/*
* Table #21 of fxr_top - TXDMA_ERR_INFO_PKT_DESC_SB_COR
* This CSR is used to log error information in the event of a correctable error 
* on the packet descriptor sideband received from the OTR block. This 
* information is only captured when the corresponding error status bit 
* (#%%#pkt_desc_cor_sb_err#%%#) transitions from a 0 to a 1, if the error status 
* bit was already set the information in this CSR is not updated.
*/
#define FXR_TXDMA_ERR_INFO_PKT_DESC_SB_COR				(FXR_TX_DMA_CSRS + 0x000000000400)
#define FXR_TXDMA_ERR_INFO_PKT_DESC_SB_COR_RESETCSR			0x0000000000000000ull
#define FXR_TXDMA_ERR_INFO_PKT_DESC_SB_COR_RESERVED_63_7_SHIFT		7
#define FXR_TXDMA_ERR_INFO_PKT_DESC_SB_COR_RESERVED_63_7_MASK		0x1FFFFFFFFFFFFFFull
#define FXR_TXDMA_ERR_INFO_PKT_DESC_SB_COR_RESERVED_63_7_SMASK		0xFFFFFFFFFFFFFF80ull
#define FXR_TXDMA_ERR_INFO_PKT_DESC_SB_COR_SYNDROME_SHIFT		0
#define FXR_TXDMA_ERR_INFO_PKT_DESC_SB_COR_SYNDROME_MASK		0x7Full
#define FXR_TXDMA_ERR_INFO_PKT_DESC_SB_COR_SYNDROME_SMASK		0x7Full
/*
* Table #22 of fxr_top - TXDMA_ERR_INFO_PKT_DESC_SB_UNC
* This CSR is used to log error information in the event of a uncorrectable 
* error on the packet descriptor sideband received from the OTR block. This 
* information is only captured when the corresponding error status bit 
* (#%%#pkt_desc_unc_sb_err#%%#) transitions from a 0 to a 1, if the error status 
* bit was already set the information in this CSR is not updated.
*/
#define FXR_TXDMA_ERR_INFO_PKT_DESC_SB_UNC				(FXR_TX_DMA_CSRS + 0x000000000408)
#define FXR_TXDMA_ERR_INFO_PKT_DESC_SB_UNC_RESETCSR			0x0000000000000000ull
#define FXR_TXDMA_ERR_INFO_PKT_DESC_SB_UNC_RESERVED_63_7_SHIFT		7
#define FXR_TXDMA_ERR_INFO_PKT_DESC_SB_UNC_RESERVED_63_7_MASK		0x1FFFFFFFFFFFFFFull
#define FXR_TXDMA_ERR_INFO_PKT_DESC_SB_UNC_RESERVED_63_7_SMASK		0xFFFFFFFFFFFFFF80ull
#define FXR_TXDMA_ERR_INFO_PKT_DESC_SB_UNC_SYNDROME_SHIFT		0
#define FXR_TXDMA_ERR_INFO_PKT_DESC_SB_UNC_SYNDROME_MASK		0x7Full
#define FXR_TXDMA_ERR_INFO_PKT_DESC_SB_UNC_SYNDROME_SMASK		0x7Full
/*
* Table #23 of fxr_top - TXDMA_ERR_INFO_PKT_DESC_DAT_COR
* This CSR is used to log error information in the event of a correctable error 
* on the packet descriptor data received from the OTR block. This information is 
* only captured when the corresponding error status bit (#%%#pkt_desc_cor_dat_err#%%#) 
* transitions from a 0 to a 1, if the error status bit was already set the 
* information in this CSR is not updated.
*/
#define FXR_TXDMA_ERR_INFO_PKT_DESC_DAT_COR				(FXR_TX_DMA_CSRS + 0x000000000410)
#define FXR_TXDMA_ERR_INFO_PKT_DESC_DAT_COR_RESETCSR			0x0000000000000000ull
#define FXR_TXDMA_ERR_INFO_PKT_DESC_DAT_COR_RESERVED_63_12_SHIFT	12
#define FXR_TXDMA_ERR_INFO_PKT_DESC_DAT_COR_RESERVED_63_12_MASK		0xFFFFFFFFFFFFFull
#define FXR_TXDMA_ERR_INFO_PKT_DESC_DAT_COR_RESERVED_63_12_SMASK	0xFFFFFFFFFFFFF000ull
#define FXR_TXDMA_ERR_INFO_PKT_DESC_DAT_COR_SYNDROME_SHIFT		4
#define FXR_TXDMA_ERR_INFO_PKT_DESC_DAT_COR_SYNDROME_MASK		0xFFull
#define FXR_TXDMA_ERR_INFO_PKT_DESC_DAT_COR_SYNDROME_SMASK		0xFF0ull
#define FXR_TXDMA_ERR_INFO_PKT_DESC_DAT_COR_DOMAIN_SHIFT		0
#define FXR_TXDMA_ERR_INFO_PKT_DESC_DAT_COR_DOMAIN_MASK			0xFull
#define FXR_TXDMA_ERR_INFO_PKT_DESC_DAT_COR_DOMAIN_SMASK		0xFull
/*
* Table #24 of fxr_top - TXDMA_ERR_INFO_PKT_DESC_DAT_UNC
* This CSR is used to log error information in the event of a uncorrectable 
* error on the packet descriptor data received from the OTR block. This 
* information is only captured when the corresponding error status bit 
* (#%%#pkt_desc_unc_dat_err#%%#) transitions from a 0 to a 1, if the error 
* status bit was already set the information in this CSR is not 
* updated.
*/
#define FXR_TXDMA_ERR_INFO_PKT_DESC_DAT_UNC				(FXR_TX_DMA_CSRS + 0x000000000418)
#define FXR_TXDMA_ERR_INFO_PKT_DESC_DAT_UNC_RESETCSR			0x0000000000000000ull
#define FXR_TXDMA_ERR_INFO_PKT_DESC_DAT_UNC_RESERVED_63_12_SHIFT	12
#define FXR_TXDMA_ERR_INFO_PKT_DESC_DAT_UNC_RESERVED_63_12_MASK		0xFFFFFFFFFFFFFull
#define FXR_TXDMA_ERR_INFO_PKT_DESC_DAT_UNC_RESERVED_63_12_SMASK	0xFFFFFFFFFFFFF000ull
#define FXR_TXDMA_ERR_INFO_PKT_DESC_DAT_UNC_SYNDROME_SHIFT		4
#define FXR_TXDMA_ERR_INFO_PKT_DESC_DAT_UNC_SYNDROME_MASK		0xFFull
#define FXR_TXDMA_ERR_INFO_PKT_DESC_DAT_UNC_SYNDROME_SMASK		0xFF0ull
#define FXR_TXDMA_ERR_INFO_PKT_DESC_DAT_UNC_DOMAIN_SHIFT		0
#define FXR_TXDMA_ERR_INFO_PKT_DESC_DAT_UNC_DOMAIN_MASK			0xFull
#define FXR_TXDMA_ERR_INFO_PKT_DESC_DAT_UNC_DOMAIN_SMASK		0xFull
/*
* Table #25 of fxr_top - TXDMA_ERR_INFO_INPQ_COR
* This CSR is used to log error information in the event of a correctable error 
* in the packet descriptor input queue memory. This information is only captured 
* when the corresponding error status bit (#%%#inpq_cor_err#%%#) transitions 
* from a 0 to a 1, if the error status bit was already set the information in 
* this CSR is not updated.
*/
#define FXR_TXDMA_ERR_INFO_INPQ_COR					(FXR_TX_DMA_CSRS + 0x000000000420)
#define FXR_TXDMA_ERR_INFO_INPQ_COR_RESETCSR				0x0000000000000000ull
#define FXR_TXDMA_ERR_INFO_INPQ_COR_RESERVED_63_21_SHIFT		21
#define FXR_TXDMA_ERR_INFO_INPQ_COR_RESERVED_63_21_MASK			0x7FFFFFFFFFFull
#define FXR_TXDMA_ERR_INFO_INPQ_COR_RESERVED_63_21_SMASK		0xFFFFFFFFFFE00000ull
#define FXR_TXDMA_ERR_INFO_INPQ_COR_SYNDROME_SHIFT			13
#define FXR_TXDMA_ERR_INFO_INPQ_COR_SYNDROME_MASK			0xFFull
#define FXR_TXDMA_ERR_INFO_INPQ_COR_SYNDROME_SMASK			0x1FE000ull
#define FXR_TXDMA_ERR_INFO_INPQ_COR_DOMAIN_SHIFT			8
#define FXR_TXDMA_ERR_INFO_INPQ_COR_DOMAIN_MASK				0x1Full
#define FXR_TXDMA_ERR_INFO_INPQ_COR_DOMAIN_SMASK			0x1F00ull
#define FXR_TXDMA_ERR_INFO_INPQ_COR_ADDRESS_SHIFT			0
#define FXR_TXDMA_ERR_INFO_INPQ_COR_ADDRESS_MASK			0xFFull
#define FXR_TXDMA_ERR_INFO_INPQ_COR_ADDRESS_SMASK			0xFFull
/*
* Table #26 of fxr_top - TXDMA_ERR_INFO_INPQ_UNC
* This CSR is used to log error information in the event of a correctable error 
* in the packet descriptor input queue memory. This information is only captured 
* when the corresponding error status bit (#%%#inpq_unc_err#%%#) transitions 
* from a 0 to a 1, if the error status bit was already set the information in 
* this CSR is not updated.
*/
#define FXR_TXDMA_ERR_INFO_INPQ_UNC					(FXR_TX_DMA_CSRS + 0x000000000428)
#define FXR_TXDMA_ERR_INFO_INPQ_UNC_RESETCSR				0x0000000000000000ull
#define FXR_TXDMA_ERR_INFO_INPQ_UNC_RESERVED_63_21_SHIFT		21
#define FXR_TXDMA_ERR_INFO_INPQ_UNC_RESERVED_63_21_MASK			0x7FFFFFFFFFFull
#define FXR_TXDMA_ERR_INFO_INPQ_UNC_RESERVED_63_21_SMASK		0xFFFFFFFFFFE00000ull
#define FXR_TXDMA_ERR_INFO_INPQ_UNC_SYNDROME_SHIFT			13
#define FXR_TXDMA_ERR_INFO_INPQ_UNC_SYNDROME_MASK			0xFFull
#define FXR_TXDMA_ERR_INFO_INPQ_UNC_SYNDROME_SMASK			0x1FE000ull
#define FXR_TXDMA_ERR_INFO_INPQ_UNC_DOMAIN_SHIFT			8
#define FXR_TXDMA_ERR_INFO_INPQ_UNC_DOMAIN_MASK				0x1Full
#define FXR_TXDMA_ERR_INFO_INPQ_UNC_DOMAIN_SMASK			0x1F00ull
#define FXR_TXDMA_ERR_INFO_INPQ_UNC_ADDRESS_SHIFT			0
#define FXR_TXDMA_ERR_INFO_INPQ_UNC_ADDRESS_MASK			0xFFull
#define FXR_TXDMA_ERR_INFO_INPQ_UNC_ADDRESS_SMASK			0xFFull
/*
* Table #27 of fxr_top - TXDMA_ERR_INFO_XLATEQ_COR
* This CSR is used to log error information in the event of a correctable error 
* in the translation queue FIFO. This information is only captured when the 
* corresponding error status bit (#%%#xlateq_cor_err#%%#) transitions from a 0 
* to a 1, if the error status bit was already set the information in this CSR is 
* not updated.
*/
#define FXR_TXDMA_ERR_INFO_XLATEQ_COR					(FXR_TX_DMA_CSRS + 0x000000000430)
#define FXR_TXDMA_ERR_INFO_XLATEQ_COR_RESETCSR				0x0000000000000000ull
#define FXR_TXDMA_ERR_INFO_XLATEQ_COR_RESERVED_63_15_SHIFT		15
#define FXR_TXDMA_ERR_INFO_XLATEQ_COR_RESERVED_63_15_MASK		0x1FFFFFFFFFFFFull
#define FXR_TXDMA_ERR_INFO_XLATEQ_COR_RESERVED_63_15_SMASK		0xFFFFFFFFFFFF8000ull
#define FXR_TXDMA_ERR_INFO_XLATEQ_COR_SYNDROME_SHIFT			7
#define FXR_TXDMA_ERR_INFO_XLATEQ_COR_SYNDROME_MASK			0xFFull
#define FXR_TXDMA_ERR_INFO_XLATEQ_COR_SYNDROME_SMASK			0x7F80ull
#define FXR_TXDMA_ERR_INFO_XLATEQ_COR_DOMAIN_SHIFT			5
#define FXR_TXDMA_ERR_INFO_XLATEQ_COR_DOMAIN_MASK			0x3ull
#define FXR_TXDMA_ERR_INFO_XLATEQ_COR_DOMAIN_SMASK			0x60ull
#define FXR_TXDMA_ERR_INFO_XLATEQ_COR_ADDRESS_SHIFT			0
#define FXR_TXDMA_ERR_INFO_XLATEQ_COR_ADDRESS_MASK			0x1Full
#define FXR_TXDMA_ERR_INFO_XLATEQ_COR_ADDRESS_SMASK			0x1Full
/*
* Table #28 of fxr_top - TXDMA_ERR_INFO_XLATEQ_UNC
* This CSR is used to log error information in the event of a correctable error 
* in the translation queue FIFO. This information is only captured when the 
* corresponding error status bit (#%%#xlateq_unc_err#%%#) transitions from a 0 
* to a 1, if the error status bit was already set the information in this CSR is 
* not updated.
*/
#define FXR_TXDMA_ERR_INFO_XLATEQ_UNC					(FXR_TX_DMA_CSRS + 0x000000000438)
#define FXR_TXDMA_ERR_INFO_XLATEQ_UNC_RESETCSR				0x0000000000000000ull
#define FXR_TXDMA_ERR_INFO_XLATEQ_UNC_RESERVED_63_15_SHIFT		15
#define FXR_TXDMA_ERR_INFO_XLATEQ_UNC_RESERVED_63_15_MASK		0x1FFFFFFFFFFFFull
#define FXR_TXDMA_ERR_INFO_XLATEQ_UNC_RESERVED_63_15_SMASK		0xFFFFFFFFFFFF8000ull
#define FXR_TXDMA_ERR_INFO_XLATEQ_UNC_SYNDROME_SHIFT			7
#define FXR_TXDMA_ERR_INFO_XLATEQ_UNC_SYNDROME_MASK			0xFFull
#define FXR_TXDMA_ERR_INFO_XLATEQ_UNC_SYNDROME_SMASK			0x7F80ull
#define FXR_TXDMA_ERR_INFO_XLATEQ_UNC_DOMAIN_SHIFT			5
#define FXR_TXDMA_ERR_INFO_XLATEQ_UNC_DOMAIN_MASK			0x3ull
#define FXR_TXDMA_ERR_INFO_XLATEQ_UNC_DOMAIN_SMASK			0x60ull
#define FXR_TXDMA_ERR_INFO_XLATEQ_UNC_ADDRESS_SHIFT			0
#define FXR_TXDMA_ERR_INFO_XLATEQ_UNC_ADDRESS_MASK			0x1Full
#define FXR_TXDMA_ERR_INFO_XLATEQ_UNC_ADDRESS_SMASK			0x1Full
/*
* Table #29 of fxr_top - TXDMA_ERR_INFO_INPQ_OVF
* This CSR is used to log error information in the event of a overflow error in 
* the input queue FIFO. This information is only captured when the corresponding 
* error status bit (#%%#inpq_overflow#%%#) transitions from a 0 to a 1, if the 
* error status bit was already set the information in this CSR is not 
* updated.
*/
#define FXR_TXDMA_ERR_INFO_INPQ_OVF					(FXR_TX_DMA_CSRS + 0x000000000440)
#define FXR_TXDMA_ERR_INFO_INPQ_OVF_RESETCSR				0x0000000000000000ull
#define FXR_TXDMA_ERR_INFO_INPQ_OVF_RESERVED_63_8_SHIFT			8
#define FXR_TXDMA_ERR_INFO_INPQ_OVF_RESERVED_63_8_MASK			0xFFFFFFFFFFFFFFull
#define FXR_TXDMA_ERR_INFO_INPQ_OVF_RESERVED_63_8_SMASK			0xFFFFFFFFFFFFFF00ull
#define FXR_TXDMA_ERR_INFO_INPQ_OVF_FIFO_SHIFT				0
#define FXR_TXDMA_ERR_INFO_INPQ_OVF_FIFO_MASK				0xFFull
#define FXR_TXDMA_ERR_INFO_INPQ_OVF_FIFO_SMASK				0xFFull
/*
* Table #30 of fxr_top - TXDMA_ERR_INFO_AT_STATUS
* This CSR is used to log error information in the event of a status error 
* returned from AT. This information is only captured when the corresponding 
* error status bit (#%%#at_status_err#%%#) transitions from a 0 to a 1, if the 
* error status bit was already set the information in this CSR is not 
* updated.
*/
#define FXR_TXDMA_ERR_INFO_AT_STATUS					(FXR_TX_DMA_CSRS + 0x000000000448)
#define FXR_TXDMA_ERR_INFO_AT_STATUS_RESETCSR				0x0000000000000000ull
#define FXR_TXDMA_ERR_INFO_AT_STATUS_RESERVED_63_4_SHIFT		4
#define FXR_TXDMA_ERR_INFO_AT_STATUS_RESERVED_63_4_MASK			0xFFFFFFFFFFFFFFFull
#define FXR_TXDMA_ERR_INFO_AT_STATUS_RESERVED_63_4_SMASK		0xFFFFFFFFFFFFFFF0ull
#define FXR_TXDMA_ERR_INFO_AT_STATUS_STATUS_SHIFT			0
#define FXR_TXDMA_ERR_INFO_AT_STATUS_STATUS_MASK			0xFull
#define FXR_TXDMA_ERR_INFO_AT_STATUS_STATUS_SMASK			0xFull
/*
* Table #31 of fxr_top - TXDMA_ERR_INFO_TIMEOUT
* This CSR is used to log error information in the event of a host memory TID 
* timeout error. This information is only captured when the corresponding error 
* status bit (#%%#timeout_err#%%#) transitions from a 0 to a 1, if the error 
* status bit was already set the information in this CSR is not 
* updated.
*/
#define FXR_TXDMA_ERR_INFO_TIMEOUT					(FXR_TX_DMA_CSRS + 0x000000000450)
#define FXR_TXDMA_ERR_INFO_TIMEOUT_RESETCSR				0x0000000000000000ull
#define FXR_TXDMA_ERR_INFO_TIMEOUT_RESERVED_63_9_SHIFT			9
#define FXR_TXDMA_ERR_INFO_TIMEOUT_RESERVED_63_9_MASK			0x7FFFFFFFFFFFFFull
#define FXR_TXDMA_ERR_INFO_TIMEOUT_RESERVED_63_9_SMASK			0xFFFFFFFFFFFFFE00ull
#define FXR_TXDMA_ERR_INFO_TIMEOUT_TID_SHIFT				0
#define FXR_TXDMA_ERR_INFO_TIMEOUT_TID_MASK				0x1FFull
#define FXR_TXDMA_ERR_INFO_TIMEOUT_TID_SMASK				0x1FFull
/*
* Table #32 of fxr_top - TXDMA_ERR_INFO_MEM_RSP_HDR_COR
* This CSR is used to log error information in the event of a correctable error 
* on the header portion of a memory response. This information is only captured 
* when the corresponding error status bit (#%%#mem_rsp_hdr_cor_err#%%#) 
* transitions from a 0 to a 1, if the error status bit was already set the 
* information in this CSR is not updated.
*/
#define FXR_TXDMA_ERR_INFO_MEM_RSP_HDR_COR				(FXR_TX_DMA_CSRS + 0x000000000458)
#define FXR_TXDMA_ERR_INFO_MEM_RSP_HDR_COR_RESETCSR			0x0000000000000000ull
#define FXR_TXDMA_ERR_INFO_MEM_RSP_HDR_COR_RESERVED_63_8_SHIFT		8
#define FXR_TXDMA_ERR_INFO_MEM_RSP_HDR_COR_RESERVED_63_8_MASK		0xFFFFFFFFFFFFFFull
#define FXR_TXDMA_ERR_INFO_MEM_RSP_HDR_COR_RESERVED_63_8_SMASK		0xFFFFFFFFFFFFFF00ull
#define FXR_TXDMA_ERR_INFO_MEM_RSP_HDR_COR_SYNDROME_SHIFT		0
#define FXR_TXDMA_ERR_INFO_MEM_RSP_HDR_COR_SYNDROME_MASK		0xFFull
#define FXR_TXDMA_ERR_INFO_MEM_RSP_HDR_COR_SYNDROME_SMASK		0xFFull
/*
* Table #33 of fxr_top - TXDMA_ERR_INFO_MEM_RSP_HDR_UNC
* This CSR is used to log error information in the event of a uncorrectable 
* error on the header portion of a memory response. This information is only 
* captured when the corresponding error status bit (#%%#mem_rsp_hdr_unc_err#%%#) 
* transitions from a 0 to a 1, if the error status bit was already set the 
* information in this CSR is not updated.
*/
#define FXR_TXDMA_ERR_INFO_MEM_RSP_HDR_UNC				(FXR_TX_DMA_CSRS + 0x000000000460)
#define FXR_TXDMA_ERR_INFO_MEM_RSP_HDR_UNC_RESETCSR			0x0000000000000000ull
#define FXR_TXDMA_ERR_INFO_MEM_RSP_HDR_UNC_RESERVED_63_8_SHIFT		8
#define FXR_TXDMA_ERR_INFO_MEM_RSP_HDR_UNC_RESERVED_63_8_MASK		0xFFFFFFFFFFFFFFull
#define FXR_TXDMA_ERR_INFO_MEM_RSP_HDR_UNC_RESERVED_63_8_SMASK		0xFFFFFFFFFFFFFF00ull
#define FXR_TXDMA_ERR_INFO_MEM_RSP_HDR_UNC_SYNDROME_SHIFT		0
#define FXR_TXDMA_ERR_INFO_MEM_RSP_HDR_UNC_SYNDROME_MASK		0xFFull
#define FXR_TXDMA_ERR_INFO_MEM_RSP_HDR_UNC_SYNDROME_SMASK		0xFFull
/*
* Table #34 of fxr_top - TXDMA_ERR_INFO_MEM_RSP_DAT_COR
* This CSR is used to log error information in the event of a correctable error 
* on the data portion of a memory response. This information is only captured 
* when the corresponding error status bit (#%%#mem_rsp_dat_cor_err#%%#) 
* transitions from a 0 to a 1, if the error status bit was already set the 
* information in this CSR is not updated.
*/
#define FXR_TXDMA_ERR_INFO_MEM_RSP_DAT_COR				(FXR_TX_DMA_CSRS + 0x000000000468)
#define FXR_TXDMA_ERR_INFO_MEM_RSP_DAT_COR_RESETCSR			0x0000000000000000ull
#define FXR_TXDMA_ERR_INFO_MEM_RSP_DAT_COR_RESERVED_63_12_SHIFT		12
#define FXR_TXDMA_ERR_INFO_MEM_RSP_DAT_COR_RESERVED_63_12_MASK		0xFFFFFFFFFFFFFull
#define FXR_TXDMA_ERR_INFO_MEM_RSP_DAT_COR_RESERVED_63_12_SMASK		0xFFFFFFFFFFFFF000ull
#define FXR_TXDMA_ERR_INFO_MEM_RSP_DAT_COR_SYNDROME_SHIFT		4
#define FXR_TXDMA_ERR_INFO_MEM_RSP_DAT_COR_SYNDROME_MASK		0xFFull
#define FXR_TXDMA_ERR_INFO_MEM_RSP_DAT_COR_SYNDROME_SMASK		0xFF0ull
#define FXR_TXDMA_ERR_INFO_MEM_RSP_DAT_COR_DOMAIN_SHIFT			0
#define FXR_TXDMA_ERR_INFO_MEM_RSP_DAT_COR_DOMAIN_MASK			0xFull
#define FXR_TXDMA_ERR_INFO_MEM_RSP_DAT_COR_DOMAIN_SMASK			0xFull
/*
* Table #35 of fxr_top - TXDMA_ERR_INFO_MEM_RSP_DAT_UNC
* This CSR is used to log error information in the event of a uncorrectable 
* error on the data portion of a memory response. This information is only 
* captured when the corresponding error status bit (#%%#mem_rsp_dat_unc_err#%%#) 
* transitions from a 0 to a 1, if the error status bit was already set the 
* information in this CSR is not updated.
*/
#define FXR_TXDMA_ERR_INFO_MEM_RSP_DAT_UNC				(FXR_TX_DMA_CSRS + 0x000000000470)
#define FXR_TXDMA_ERR_INFO_MEM_RSP_DAT_UNC_RESETCSR			0x0000000000000000ull
#define FXR_TXDMA_ERR_INFO_MEM_RSP_DAT_UNC_RESERVED_63_12_SHIFT		12
#define FXR_TXDMA_ERR_INFO_MEM_RSP_DAT_UNC_RESERVED_63_12_MASK		0xFFFFFFFFFFFFFull
#define FXR_TXDMA_ERR_INFO_MEM_RSP_DAT_UNC_RESERVED_63_12_SMASK		0xFFFFFFFFFFFFF000ull
#define FXR_TXDMA_ERR_INFO_MEM_RSP_DAT_UNC_SYNDROME_SHIFT		4
#define FXR_TXDMA_ERR_INFO_MEM_RSP_DAT_UNC_SYNDROME_MASK		0xFFull
#define FXR_TXDMA_ERR_INFO_MEM_RSP_DAT_UNC_SYNDROME_SMASK		0xFF0ull
#define FXR_TXDMA_ERR_INFO_MEM_RSP_DAT_UNC_DOMAIN_SHIFT			0
#define FXR_TXDMA_ERR_INFO_MEM_RSP_DAT_UNC_DOMAIN_MASK			0xFull
#define FXR_TXDMA_ERR_INFO_MEM_RSP_DAT_UNC_DOMAIN_SMASK			0xFull
/*
* Table #36 of fxr_top - TXDMA_ERR_INFO_ORB_COR
* This CSR is used to log error information in the event of a correctable error 
* in the ORB memory. This information is only captured when the corresponding 
* error status bit (#%%#orb_cor_err#%%#) transitions from a 0 to a 1, if the 
* error status bit was already set the information in this CSR is not 
* updated.
*/
#define FXR_TXDMA_ERR_INFO_ORB_COR					(FXR_TX_DMA_CSRS + 0x000000000478)
#define FXR_TXDMA_ERR_INFO_ORB_COR_RESETCSR				0x0000000000000000ull
#define FXR_TXDMA_ERR_INFO_ORB_COR_RESERVED_63_17_SHIFT			17
#define FXR_TXDMA_ERR_INFO_ORB_COR_RESERVED_63_17_MASK			0x7FFFFFFFFFFFull
#define FXR_TXDMA_ERR_INFO_ORB_COR_RESERVED_63_17_SMASK			0xFFFFFFFFFFFE0000ull
#define FXR_TXDMA_ERR_INFO_ORB_COR_SYNDROME_SHIFT			9
#define FXR_TXDMA_ERR_INFO_ORB_COR_SYNDROME_MASK			0xFFull
#define FXR_TXDMA_ERR_INFO_ORB_COR_SYNDROME_SMASK			0x1FE00ull
#define FXR_TXDMA_ERR_INFO_ORB_COR_ADDRESS_SHIFT			0
#define FXR_TXDMA_ERR_INFO_ORB_COR_ADDRESS_MASK				0x1FFull
#define FXR_TXDMA_ERR_INFO_ORB_COR_ADDRESS_SMASK			0x1FFull
/*
* Table #37 of fxr_top - TXDMA_ERR_INFO_ORB_UNC
* This CSR is used to log error information in the event of a uncorrectable 
* error in the ORB memory. This information is only captured when the 
* corresponding error status bit (#%%#orb_unc_err#%%#) transitions from a 0 to a 
* 1, if the error status bit was already set the information in this CSR is not 
* updated.
*/
#define FXR_TXDMA_ERR_INFO_ORB_UNC					(FXR_TX_DMA_CSRS + 0x000000000480)
#define FXR_TXDMA_ERR_INFO_ORB_UNC_RESETCSR				0x0000000000000000ull
#define FXR_TXDMA_ERR_INFO_ORB_UNC_RESERVED_63_17_SHIFT			17
#define FXR_TXDMA_ERR_INFO_ORB_UNC_RESERVED_63_17_MASK			0x7FFFFFFFFFFFull
#define FXR_TXDMA_ERR_INFO_ORB_UNC_RESERVED_63_17_SMASK			0xFFFFFFFFFFFE0000ull
#define FXR_TXDMA_ERR_INFO_ORB_UNC_SYNDROME_SHIFT			9
#define FXR_TXDMA_ERR_INFO_ORB_UNC_SYNDROME_MASK			0xFFull
#define FXR_TXDMA_ERR_INFO_ORB_UNC_SYNDROME_SMASK			0x1FE00ull
#define FXR_TXDMA_ERR_INFO_ORB_UNC_ADDRESS_SHIFT			0
#define FXR_TXDMA_ERR_INFO_ORB_UNC_ADDRESS_MASK				0x1FFull
#define FXR_TXDMA_ERR_INFO_ORB_UNC_ADDRESS_SMASK			0x1FFull
/*
* Table #38 of fxr_top - TXDMA_ERR_INFO_HDR_COR
* This CSR is used to log error information in the event of a correctable error 
* in the header FIFO. This information is only captured when the corresponding 
* error status bit (#%%#hdr_cor_err#%%#) transitions from a 0 to a 1, if the 
* error status bit was already set the information in this CSR is not 
* updated.
*/
#define FXR_TXDMA_ERR_INFO_HDR_COR					(FXR_TX_DMA_CSRS + 0x000000000488)
#define FXR_TXDMA_ERR_INFO_HDR_COR_RESETCSR				0x0000000000000000ull
#define FXR_TXDMA_ERR_INFO_HDR_COR_RESERVED_63_13_SHIFT			13
#define FXR_TXDMA_ERR_INFO_HDR_COR_RESERVED_63_13_MASK			0x7FFFFFFFFFFFFull
#define FXR_TXDMA_ERR_INFO_HDR_COR_RESERVED_63_13_SMASK			0xFFFFFFFFFFFFE000ull
#define FXR_TXDMA_ERR_INFO_HDR_COR_SYNDROME_SHIFT			6
#define FXR_TXDMA_ERR_INFO_HDR_COR_SYNDROME_MASK			0x7Full
#define FXR_TXDMA_ERR_INFO_HDR_COR_SYNDROME_SMASK			0x1FC0ull
#define FXR_TXDMA_ERR_INFO_HDR_COR_DOMAIN_SHIFT				5
#define FXR_TXDMA_ERR_INFO_HDR_COR_DOMAIN_MASK				0x1ull
#define FXR_TXDMA_ERR_INFO_HDR_COR_DOMAIN_SMASK				0x20ull
#define FXR_TXDMA_ERR_INFO_HDR_COR_ADDRESS_SHIFT			0
#define FXR_TXDMA_ERR_INFO_HDR_COR_ADDRESS_MASK				0x1Full
#define FXR_TXDMA_ERR_INFO_HDR_COR_ADDRESS_SMASK			0x1Full
/*
* Table #39 of fxr_top - TXDMA_ERR_INFO_HDR_UNC
* This CSR is used to log error information in the event of a uncorrectable 
* error in the writing combining memory. This information is only captured when 
* the corresponding error status bit (#%%#hdr_unc_err#%%#) transitions from a 0 
* to a 1, if the error status bit was already set the information in this CSR is 
* not updated.
*/
#define FXR_TXDMA_ERR_INFO_HDR_UNC					(FXR_TX_DMA_CSRS + 0x000000000490)
#define FXR_TXDMA_ERR_INFO_HDR_UNC_RESETCSR				0x0000000000000000ull
#define FXR_TXDMA_ERR_INFO_HDR_UNC_RESERVED_63_13_SHIFT			13
#define FXR_TXDMA_ERR_INFO_HDR_UNC_RESERVED_63_13_MASK			0x7FFFFFFFFFFFFull
#define FXR_TXDMA_ERR_INFO_HDR_UNC_RESERVED_63_13_SMASK			0xFFFFFFFFFFFFE000ull
#define FXR_TXDMA_ERR_INFO_HDR_UNC_SYNDROME_SHIFT			6
#define FXR_TXDMA_ERR_INFO_HDR_UNC_SYNDROME_MASK			0x7Full
#define FXR_TXDMA_ERR_INFO_HDR_UNC_SYNDROME_SMASK			0x1FC0ull
#define FXR_TXDMA_ERR_INFO_HDR_UNC_DOMAIN_SHIFT				5
#define FXR_TXDMA_ERR_INFO_HDR_UNC_DOMAIN_MASK				0x1ull
#define FXR_TXDMA_ERR_INFO_HDR_UNC_DOMAIN_SMASK				0x20ull
#define FXR_TXDMA_ERR_INFO_HDR_UNC_ADDRESS_SHIFT			0
#define FXR_TXDMA_ERR_INFO_HDR_UNC_ADDRESS_MASK				0x1Full
#define FXR_TXDMA_ERR_INFO_HDR_UNC_ADDRESS_SMASK			0x1Full
/*
* Table #40 of fxr_top - TXDMA_ERR_INFO_PKT_BUF_COR
* This CSR is used to log error information in the event of a correctable error 
* in the packet buffer memory. This information is only captured when the 
* corresponding error status bit (#%%#pkt_buf_cor_err#%%#) transitions from a 0 
* to a 1, if the error status bit was already set the information in this CSR is 
* not updated.
*/
#define FXR_TXDMA_ERR_INFO_PKT_BUF_COR					(FXR_TX_DMA_CSRS + 0x000000000498)
#define FXR_TXDMA_ERR_INFO_PKT_BUF_COR_RESETCSR				0x0000000000000000ull
#define FXR_TXDMA_ERR_INFO_PKT_BUF_COR_RESERVED_63_26_SHIFT		26
#define FXR_TXDMA_ERR_INFO_PKT_BUF_COR_RESERVED_63_26_MASK		0x3FFFFFFFFFull
#define FXR_TXDMA_ERR_INFO_PKT_BUF_COR_RESERVED_63_26_SMASK		0xFFFFFFFFFC000000ull
#define FXR_TXDMA_ERR_INFO_PKT_BUF_COR_SYNDROME_SHIFT			18
#define FXR_TXDMA_ERR_INFO_PKT_BUF_COR_SYNDROME_MASK			0xFFull
#define FXR_TXDMA_ERR_INFO_PKT_BUF_COR_SYNDROME_SMASK			0x3FC0000ull
#define FXR_TXDMA_ERR_INFO_PKT_BUF_COR_DOMAIN_SHIFT			14
#define FXR_TXDMA_ERR_INFO_PKT_BUF_COR_DOMAIN_MASK			0xFull
#define FXR_TXDMA_ERR_INFO_PKT_BUF_COR_DOMAIN_SMASK			0x3C000ull
#define FXR_TXDMA_ERR_INFO_PKT_BUF_COR_ADDRESS_SHIFT			0
#define FXR_TXDMA_ERR_INFO_PKT_BUF_COR_ADDRESS_MASK			0x3FFFull
#define FXR_TXDMA_ERR_INFO_PKT_BUF_COR_ADDRESS_SMASK			0x3FFFull
/*
* Table #41 of fxr_top - TXDMA_ERR_INFO_PKT_BUF_UNC
* This CSR is used to log error information in the event of a uncorrectable 
* error in the packet buffer memory. This information is only captured when the 
* corresponding error status bit (#%%#pkt_buf_unc_err#%%#) transitions from a 0 
* to a 1, if the error status bit was already set the information in this CSR is 
* not updated.
*/
#define FXR_TXDMA_ERR_INFO_PKT_BUF_UNC					(FXR_TX_DMA_CSRS + 0x0000000004A0)
#define FXR_TXDMA_ERR_INFO_PKT_BUF_UNC_RESETCSR				0x0000000000000000ull
#define FXR_TXDMA_ERR_INFO_PKT_BUF_UNC_RESERVED_63_26_SHIFT		26
#define FXR_TXDMA_ERR_INFO_PKT_BUF_UNC_RESERVED_63_26_MASK		0x3FFFFFFFFFull
#define FXR_TXDMA_ERR_INFO_PKT_BUF_UNC_RESERVED_63_26_SMASK		0xFFFFFFFFFC000000ull
#define FXR_TXDMA_ERR_INFO_PKT_BUF_UNC_SYNDROME_SHIFT			18
#define FXR_TXDMA_ERR_INFO_PKT_BUF_UNC_SYNDROME_MASK			0xFFull
#define FXR_TXDMA_ERR_INFO_PKT_BUF_UNC_SYNDROME_SMASK			0x3FC0000ull
#define FXR_TXDMA_ERR_INFO_PKT_BUF_UNC_DOMAIN_SHIFT			14
#define FXR_TXDMA_ERR_INFO_PKT_BUF_UNC_DOMAIN_MASK			0xFull
#define FXR_TXDMA_ERR_INFO_PKT_BUF_UNC_DOMAIN_SMASK			0x3C000ull
#define FXR_TXDMA_ERR_INFO_PKT_BUF_UNC_ADDRESS_SHIFT			0
#define FXR_TXDMA_ERR_INFO_PKT_BUF_UNC_ADDRESS_MASK			0x3FFFull
#define FXR_TXDMA_ERR_INFO_PKT_BUF_UNC_ADDRESS_SMASK			0x3FFFull
/*
* Table #42 of fxr_top - TXDMA_ERR_INFO_RSPQ_COR
* This CSR is used to log error information in the event of a correctable error 
* in the response queue FIFO. This information is only captured when the 
* corresponding error status bit (#%%#rspq_cor_err#%%#) transitions from a 0 to 
* a 1, if the error status bit was already set the information in this CSR is 
* not updated.
*/
#define FXR_TXDMA_ERR_INFO_RSPQ_COR					(FXR_TX_DMA_CSRS + 0x0000000004A8)
#define FXR_TXDMA_ERR_INFO_RSPQ_COR_RESETCSR				0x0000000000000000ull
#define FXR_TXDMA_ERR_INFO_RSPQ_COR_RESERVED_63_12_SHIFT		12
#define FXR_TXDMA_ERR_INFO_RSPQ_COR_RESERVED_63_12_MASK			0xFFFFFFFFFFFFFull
#define FXR_TXDMA_ERR_INFO_RSPQ_COR_RESERVED_63_12_SMASK		0xFFFFFFFFFFFFF000ull
#define FXR_TXDMA_ERR_INFO_RSPQ_COR_SYNDROME_SHIFT			4
#define FXR_TXDMA_ERR_INFO_RSPQ_COR_SYNDROME_MASK			0xFFull
#define FXR_TXDMA_ERR_INFO_RSPQ_COR_SYNDROME_SMASK			0xFF0ull
#define FXR_TXDMA_ERR_INFO_RSPQ_COR_DOMAIN_SHIFT			0
#define FXR_TXDMA_ERR_INFO_RSPQ_COR_DOMAIN_MASK				0xFull
#define FXR_TXDMA_ERR_INFO_RSPQ_COR_DOMAIN_SMASK			0xFull
/*
* Table #43 of fxr_top - TXDMA_ERR_INFO_RSPQ_UNC
* This CSR is used to log error information in the event of a uncorrectable 
* error in the response queue FIFO. This information is only captured when the 
* corresponding error status bit (#%%#rspq_unc_err#%%#) transitions from a 0 to 
* a 1, if the error status bit was already set the information in this CSR is 
* not updated.
*/
#define FXR_TXDMA_ERR_INFO_RSPQ_UNC					(FXR_TX_DMA_CSRS + 0x0000000004B0)
#define FXR_TXDMA_ERR_INFO_RSPQ_UNC_RESETCSR				0x0000000000000000ull
#define FXR_TXDMA_ERR_INFO_RSPQ_UNC_RESERVED_63_12_SHIFT		12
#define FXR_TXDMA_ERR_INFO_RSPQ_UNC_RESERVED_63_12_MASK			0xFFFFFFFFFFFFFull
#define FXR_TXDMA_ERR_INFO_RSPQ_UNC_RESERVED_63_12_SMASK		0xFFFFFFFFFFFFF000ull
#define FXR_TXDMA_ERR_INFO_RSPQ_UNC_SYNDROME_SHIFT			4
#define FXR_TXDMA_ERR_INFO_RSPQ_UNC_SYNDROME_MASK			0xFFull
#define FXR_TXDMA_ERR_INFO_RSPQ_UNC_SYNDROME_SMASK			0xFF0ull
#define FXR_TXDMA_ERR_INFO_RSPQ_UNC_DOMAIN_SHIFT			0
#define FXR_TXDMA_ERR_INFO_RSPQ_UNC_DOMAIN_MASK				0xFull
#define FXR_TXDMA_ERR_INFO_RSPQ_UNC_DOMAIN_SMASK			0xFull
/*
* Table #44 of fxr_top - TXDMA_ERR_INFO_RSPQ_OVF
* This CSR is used to log error information in the event of a overflow error in 
* the response queue FIFO. This information is only captured when the 
* corresponding error status bit (#%%#rspq_overflow#%%#) transitions from a 0 to 
* a 1, if the error status bit was already set the information in this CSR is 
* not updated.
*/
#define FXR_TXDMA_ERR_INFO_RSPQ_OVF					(FXR_TX_DMA_CSRS + 0x0000000004B8)
#define FXR_TXDMA_ERR_INFO_RSPQ_OVF_RESETCSR				0x0000000000000000ull
#define FXR_TXDMA_ERR_INFO_RSPQ_OVF_RESERVED_63_4_SHIFT			4
#define FXR_TXDMA_ERR_INFO_RSPQ_OVF_RESERVED_63_4_MASK			0xFFFFFFFFFFFFFFFull
#define FXR_TXDMA_ERR_INFO_RSPQ_OVF_RESERVED_63_4_SMASK			0xFFFFFFFFFFFFFFF0ull
#define FXR_TXDMA_ERR_INFO_RSPQ_OVF_FIFO_SHIFT				0
#define FXR_TXDMA_ERR_INFO_RSPQ_OVF_FIFO_MASK				0xFull
#define FXR_TXDMA_ERR_INFO_RSPQ_OVF_FIFO_SMASK				0xFull
/*
* Table #45 of fxr_top - TXDMA_ERR_INFO_LM0_PAR
* This CSR is used to log error information in the event of a parity error on 
* the credit acknowledge signal from LM0. This information is only captured when 
* the corresponding error status bit (#%%#lm0_credit_err#%%#) transitions from a 
* 0 to a 1, if the error status bit was already set the information in this CSR 
* is not updated.
*/
#define FXR_TXDMA_ERR_INFO_LM0_PAR					(FXR_TX_DMA_CSRS + 0x0000000004C0)
#define FXR_TXDMA_ERR_INFO_LM0_PAR_RESETCSR				0x0000000000000000ull
#define FXR_TXDMA_ERR_INFO_LM0_PAR_RESERVED_63_5_SHIFT			5
#define FXR_TXDMA_ERR_INFO_LM0_PAR_RESERVED_63_5_MASK			0x7FFFFFFFFFFFFFFull
#define FXR_TXDMA_ERR_INFO_LM0_PAR_RESERVED_63_5_SMASK			0xFFFFFFFFFFFFFFE0ull
#define FXR_TXDMA_ERR_INFO_LM0_PAR_CREDIT_ACK_PARITY_SHIFT		4
#define FXR_TXDMA_ERR_INFO_LM0_PAR_CREDIT_ACK_PARITY_MASK		0x1ull
#define FXR_TXDMA_ERR_INFO_LM0_PAR_CREDIT_ACK_PARITY_SMASK		0x10ull
#define FXR_TXDMA_ERR_INFO_LM0_PAR_CREDIT_ACK_SHIFT			0
#define FXR_TXDMA_ERR_INFO_LM0_PAR_CREDIT_ACK_MASK			0xFull
#define FXR_TXDMA_ERR_INFO_LM0_PAR_CREDIT_ACK_SMASK			0xFull
/*
* Table #46 of fxr_top - TXDMA_ERR_INFO_LM1_PAR
* This CSR is used to log error information in the event of a parity error on 
* the credit acknowledge signal from LM1. This information is only captured when 
* the corresponding error status bit (#%%#lm1_credit_err#%%#) transitions from a 
* 0 to a 1, if the error status bit was already set the information in this CSR 
* is not updated.
*/
#define FXR_TXDMA_ERR_INFO_LM1_PAR					(FXR_TX_DMA_CSRS + 0x0000000004C8)
#define FXR_TXDMA_ERR_INFO_LM1_PAR_RESETCSR				0x0000000000000000ull
#define FXR_TXDMA_ERR_INFO_LM1_PAR_RESERVED_63_5_SHIFT			5
#define FXR_TXDMA_ERR_INFO_LM1_PAR_RESERVED_63_5_MASK			0x7FFFFFFFFFFFFFFull
#define FXR_TXDMA_ERR_INFO_LM1_PAR_RESERVED_63_5_SMASK			0xFFFFFFFFFFFFFFE0ull
#define FXR_TXDMA_ERR_INFO_LM1_PAR_CREDIT_ACK_PARITY_SHIFT		4
#define FXR_TXDMA_ERR_INFO_LM1_PAR_CREDIT_ACK_PARITY_MASK		0x1ull
#define FXR_TXDMA_ERR_INFO_LM1_PAR_CREDIT_ACK_PARITY_SMASK		0x10ull
#define FXR_TXDMA_ERR_INFO_LM1_PAR_CREDIT_ACK_SHIFT			0
#define FXR_TXDMA_ERR_INFO_LM1_PAR_CREDIT_ACK_MASK			0xFull
#define FXR_TXDMA_ERR_INFO_LM1_PAR_CREDIT_ACK_SMASK			0xFull
/*
* Table #47 of fxr_top - TXDMA_ERR_INFO_BUF_TRK_COR
* This CSR is used to log error information in the event of a correctable error 
* in the buffer tracking memory. This information is only captured when the 
* corresponding error status bit (#%%#buf_trk_cor_err#%%#) transitions from a 0 
* to a 1, if the error status bit was already set the information in this CSR is 
* not updated.
*/
#define FXR_TXDMA_ERR_INFO_BUF_TRK_COR					(FXR_TX_DMA_CSRS + 0x0000000004D0)
#define FXR_TXDMA_ERR_INFO_BUF_TRK_COR_RESETCSR				0x0000000000000000ull
#define FXR_TXDMA_ERR_INFO_BUF_TRK_COR_RESERVED_63_20_SHIFT		20
#define FXR_TXDMA_ERR_INFO_BUF_TRK_COR_RESERVED_63_20_MASK		0xFFFFFFFFFFFull
#define FXR_TXDMA_ERR_INFO_BUF_TRK_COR_RESERVED_63_20_SMASK		0xFFFFFFFFFFF00000ull
#define FXR_TXDMA_ERR_INFO_BUF_TRK_COR_SYNDROME_SHIFT			14
#define FXR_TXDMA_ERR_INFO_BUF_TRK_COR_SYNDROME_MASK			0x3Full
#define FXR_TXDMA_ERR_INFO_BUF_TRK_COR_SYNDROME_SMASK			0xFC000ull
#define FXR_TXDMA_ERR_INFO_BUF_TRK_COR_ADDRESS_SHIFT			0
#define FXR_TXDMA_ERR_INFO_BUF_TRK_COR_ADDRESS_MASK			0x3FFFull
#define FXR_TXDMA_ERR_INFO_BUF_TRK_COR_ADDRESS_SMASK			0x3FFFull
/*
* Table #48 of fxr_top - TXDMA_ERR_INFO_BUF_TRK_UNC
* This CSR is used to log error information in the event of a uncorrectable 
* error in the buffer tracking memory. This information is only captured when 
* the corresponding error status bit (#%%#buf_trk_unc_err#%%#) transitions from 
* a 0 to a 1, if the error status bit was already set the information in this 
* CSR is not updated.
*/
#define FXR_TXDMA_ERR_INFO_BUF_TRK_UNC					(FXR_TX_DMA_CSRS + 0x0000000004D8)
#define FXR_TXDMA_ERR_INFO_BUF_TRK_UNC_RESETCSR				0x0000000000000000ull
#define FXR_TXDMA_ERR_INFO_BUF_TRK_UNC_RESERVED_63_20_SHIFT		20
#define FXR_TXDMA_ERR_INFO_BUF_TRK_UNC_RESERVED_63_20_MASK		0xFFFFFFFFFFFull
#define FXR_TXDMA_ERR_INFO_BUF_TRK_UNC_RESERVED_63_20_SMASK		0xFFFFFFFFFFF00000ull
#define FXR_TXDMA_ERR_INFO_BUF_TRK_UNC_SYNDROME_SHIFT			14
#define FXR_TXDMA_ERR_INFO_BUF_TRK_UNC_SYNDROME_MASK			0x3Full
#define FXR_TXDMA_ERR_INFO_BUF_TRK_UNC_SYNDROME_SMASK			0xFC000ull
#define FXR_TXDMA_ERR_INFO_BUF_TRK_UNC_ADDRESS_SHIFT			0
#define FXR_TXDMA_ERR_INFO_BUF_TRK_UNC_ADDRESS_MASK			0x3FFFull
#define FXR_TXDMA_ERR_INFO_BUF_TRK_UNC_ADDRESS_SMASK			0x3FFFull
/*
* Table #49 of fxr_top - TXDMA_ERR_INFO_PKT_TRK_COR
* This CSR is used to log error information in the event of a correctable error 
* in the packet tracking memory. This information is only captured when the 
* corresponding error status bit (#%%#pkt_trk_cor_err#%%#) transitions from a 0 
* to a 1, if the error status bit was already set the information in this CSR is 
* not updated.
*/
#define FXR_TXDMA_ERR_INFO_PKT_TRK_COR					(FXR_TX_DMA_CSRS + 0x0000000004E0)
#define FXR_TXDMA_ERR_INFO_PKT_TRK_COR_RESETCSR				0x0000000000000000ull
#define FXR_TXDMA_ERR_INFO_PKT_TRK_COR_RESERVED_63_15_SHIFT		15
#define FXR_TXDMA_ERR_INFO_PKT_TRK_COR_RESERVED_63_15_MASK		0x1FFFFFFFFFFFFull
#define FXR_TXDMA_ERR_INFO_PKT_TRK_COR_RESERVED_63_15_SMASK		0xFFFFFFFFFFFF8000ull
#define FXR_TXDMA_ERR_INFO_PKT_TRK_COR_SYNDROME_SHIFT			8
#define FXR_TXDMA_ERR_INFO_PKT_TRK_COR_SYNDROME_MASK			0x7Full
#define FXR_TXDMA_ERR_INFO_PKT_TRK_COR_SYNDROME_SMASK			0x7F00ull
#define FXR_TXDMA_ERR_INFO_PKT_TRK_COR_ADDRESS_SHIFT			0
#define FXR_TXDMA_ERR_INFO_PKT_TRK_COR_ADDRESS_MASK			0xFFull
#define FXR_TXDMA_ERR_INFO_PKT_TRK_COR_ADDRESS_SMASK			0xFFull
/*
* Table #50 of fxr_top - TXDMA_ERR_INFO_PKT_TRK_UNC
* This CSR is used to log error information in the event of a uncorrectable 
* error in the packet tracking memory. This information is only captured when 
* the corresponding error status bit (#%%#pkt_trk_unc_err#%%#) transitions from 
* a 0 to a 1, if the error status bit was already set the information in this 
* CSR is not updated.
*/
#define FXR_TXDMA_ERR_INFO_PKT_TRK_UNC					(FXR_TX_DMA_CSRS + 0x0000000004E8)
#define FXR_TXDMA_ERR_INFO_PKT_TRK_UNC_RESETCSR				0x0000000000000000ull
#define FXR_TXDMA_ERR_INFO_PKT_TRK_UNC_RESERVED_63_15_SHIFT		15
#define FXR_TXDMA_ERR_INFO_PKT_TRK_UNC_RESERVED_63_15_MASK		0x1FFFFFFFFFFFFull
#define FXR_TXDMA_ERR_INFO_PKT_TRK_UNC_RESERVED_63_15_SMASK		0xFFFFFFFFFFFF8000ull
#define FXR_TXDMA_ERR_INFO_PKT_TRK_UNC_SYNDROME_SHIFT			8
#define FXR_TXDMA_ERR_INFO_PKT_TRK_UNC_SYNDROME_MASK			0x7Full
#define FXR_TXDMA_ERR_INFO_PKT_TRK_UNC_SYNDROME_SMASK			0x7F00ull
#define FXR_TXDMA_ERR_INFO_PKT_TRK_UNC_ADDRESS_SHIFT			0
#define FXR_TXDMA_ERR_INFO_PKT_TRK_UNC_ADDRESS_MASK			0xFFull
#define FXR_TXDMA_ERR_INFO_PKT_TRK_UNC_ADDRESS_SMASK			0xFFull
/*
* Table #51 of fxr_top - TXDMA_ERR_INFO_MEM_RSP_STATUS
* This CSR is used to log error information in the event of a status error on a 
* memory response. This information is only captured when the corresponding 
* error status bit (#%%#mem_rsp_sts_err#%%#) transitions from a 0 to a 1, if the 
* error status bit was already set the information in this CSR is not 
* updated.
*/
#define FXR_TXDMA_ERR_INFO_MEM_RSP_STATUS				(FXR_TX_DMA_CSRS + 0x0000000004F0)
#define FXR_TXDMA_ERR_INFO_MEM_RSP_STATUS_RESETCSR			0x0000000000000000ull
#define FXR_TXDMA_ERR_INFO_MEM_RSP_STATUS_RESERVED_63_18_SHIFT		18
#define FXR_TXDMA_ERR_INFO_MEM_RSP_STATUS_RESERVED_63_18_MASK		0x3FFFFFFFFFFFull
#define FXR_TXDMA_ERR_INFO_MEM_RSP_STATUS_RESERVED_63_18_SMASK		0xFFFFFFFFFFFC0000ull
#define FXR_TXDMA_ERR_INFO_MEM_RSP_STATUS_STATUS_SHIFT			9
#define FXR_TXDMA_ERR_INFO_MEM_RSP_STATUS_STATUS_MASK			0x1FFull
#define FXR_TXDMA_ERR_INFO_MEM_RSP_STATUS_STATUS_SMASK			0x3FE00ull
#define FXR_TXDMA_ERR_INFO_MEM_RSP_STATUS_TID_SHIFT			0
#define FXR_TXDMA_ERR_INFO_MEM_RSP_STATUS_TID_MASK			0x1FFull
#define FXR_TXDMA_ERR_INFO_MEM_RSP_STATUS_TID_SMASK			0x1FFull
/*
* Table #52 of fxr_top - TXDMA_STS_XLATE_CREDITS
* This CSR reports the current number of free credits available at the AT 
* translation request interface.
*/
#define FXR_TXDMA_STS_XLATE_CREDITS					(FXR_TX_DMA_CSRS + 0x000000000600)
#define FXR_TXDMA_STS_XLATE_CREDITS_RESETCSR				0x0000000000000000ull
#define FXR_TXDMA_STS_XLATE_CREDITS_RESERVED_63_4_SHIFT			4
#define FXR_TXDMA_STS_XLATE_CREDITS_RESERVED_63_4_MASK			0xFFFFFFFFFFFFFFFull
#define FXR_TXDMA_STS_XLATE_CREDITS_RESERVED_63_4_SMASK			0xFFFFFFFFFFFFFFF0ull
#define FXR_TXDMA_STS_XLATE_CREDITS_CREDITS_SHIFT			0
#define FXR_TXDMA_STS_XLATE_CREDITS_CREDITS_MASK			0xFull
#define FXR_TXDMA_STS_XLATE_CREDITS_CREDITS_SMASK			0xFull
/*
* Table #53 of fxr_top - TXDMA_STS_MEM_REQ_CREDITS
* This CSR reports the current number of free credits available at the OTR 
* memory request interface.
*/
#define FXR_TXDMA_STS_MEM_REQ_CREDITS					(FXR_TX_DMA_CSRS + 0x000000000608)
#define FXR_TXDMA_STS_MEM_REQ_CREDITS_RESETCSR				0x0000000000000000ull
#define FXR_TXDMA_STS_MEM_REQ_CREDITS_RESERVED_63_4_SHIFT		4
#define FXR_TXDMA_STS_MEM_REQ_CREDITS_RESERVED_63_4_MASK		0xFFFFFFFFFFFFFFFull
#define FXR_TXDMA_STS_MEM_REQ_CREDITS_RESERVED_63_4_SMASK		0xFFFFFFFFFFFFFFF0ull
#define FXR_TXDMA_STS_MEM_REQ_CREDITS_CREDITS_SHIFT			0
#define FXR_TXDMA_STS_MEM_REQ_CREDITS_CREDITS_MASK			0xFull
#define FXR_TXDMA_STS_MEM_REQ_CREDITS_CREDITS_SMASK			0xFull
/*
* Table #54 of fxr_top - TXDMA_STS_MC0_PKT_CREDITS
* This CSR reports the current number of free credits available at the LM MC0 
* packet interface. Each TC has its own credits.
*/
#define FXR_TXDMA_STS_MC0_PKT_CREDITS					(FXR_TX_DMA_CSRS + 0x000000000610)
#define FXR_TXDMA_STS_MC0_PKT_CREDITS_RESETCSR				0x0000000000000000ull
#define FXR_TXDMA_STS_MC0_PKT_CREDITS_RESERVED_63_20_SHIFT		20
#define FXR_TXDMA_STS_MC0_PKT_CREDITS_RESERVED_63_20_MASK		0xFFFFFFFFFFFull
#define FXR_TXDMA_STS_MC0_PKT_CREDITS_RESERVED_63_20_SMASK		0xFFFFFFFFFFF00000ull
#define FXR_TXDMA_STS_MC0_PKT_CREDITS_TC3_CREDITS_SHIFT			15
#define FXR_TXDMA_STS_MC0_PKT_CREDITS_TC3_CREDITS_MASK			0x1Full
#define FXR_TXDMA_STS_MC0_PKT_CREDITS_TC3_CREDITS_SMASK			0xF8000ull
#define FXR_TXDMA_STS_MC0_PKT_CREDITS_TC2_CREDITS_SHIFT			10
#define FXR_TXDMA_STS_MC0_PKT_CREDITS_TC2_CREDITS_MASK			0x1Full
#define FXR_TXDMA_STS_MC0_PKT_CREDITS_TC2_CREDITS_SMASK			0x7C00ull
#define FXR_TXDMA_STS_MC0_PKT_CREDITS_TC1_CREDITS_SHIFT			5
#define FXR_TXDMA_STS_MC0_PKT_CREDITS_TC1_CREDITS_MASK			0x1Full
#define FXR_TXDMA_STS_MC0_PKT_CREDITS_TC1_CREDITS_SMASK			0x3E0ull
#define FXR_TXDMA_STS_MC0_PKT_CREDITS_TC0_CREDITS_SHIFT			0
#define FXR_TXDMA_STS_MC0_PKT_CREDITS_TC0_CREDITS_MASK			0x1Full
#define FXR_TXDMA_STS_MC0_PKT_CREDITS_TC0_CREDITS_SMASK			0x1Full
/*
* Table #55 of fxr_top - TXDMA_STS_MC1_PKT_CREDITS
* This CSR reports the current number of free credits available at the LM MC1 
* packet interface. Each TC has its own credits.
*/
#define FXR_TXDMA_STS_MC1_PKT_CREDITS					(FXR_TX_DMA_CSRS + 0x000000000618)
#define FXR_TXDMA_STS_MC1_PKT_CREDITS_RESETCSR				0x0000000000000000ull
#define FXR_TXDMA_STS_MC1_PKT_CREDITS_RESERVED_63_20_SHIFT		20
#define FXR_TXDMA_STS_MC1_PKT_CREDITS_RESERVED_63_20_MASK		0xFFFFFFFFFFFull
#define FXR_TXDMA_STS_MC1_PKT_CREDITS_RESERVED_63_20_SMASK		0xFFFFFFFFFFF00000ull
#define FXR_TXDMA_STS_MC1_PKT_CREDITS_TC3_CREDITS_SHIFT			15
#define FXR_TXDMA_STS_MC1_PKT_CREDITS_TC3_CREDITS_MASK			0x1Full
#define FXR_TXDMA_STS_MC1_PKT_CREDITS_TC3_CREDITS_SMASK			0xF8000ull
#define FXR_TXDMA_STS_MC1_PKT_CREDITS_TC2_CREDITS_SHIFT			10
#define FXR_TXDMA_STS_MC1_PKT_CREDITS_TC2_CREDITS_MASK			0x1Full
#define FXR_TXDMA_STS_MC1_PKT_CREDITS_TC2_CREDITS_SMASK			0x7C00ull
#define FXR_TXDMA_STS_MC1_PKT_CREDITS_TC1_CREDITS_SHIFT			5
#define FXR_TXDMA_STS_MC1_PKT_CREDITS_TC1_CREDITS_MASK			0x1Full
#define FXR_TXDMA_STS_MC1_PKT_CREDITS_TC1_CREDITS_SMASK			0x3E0ull
#define FXR_TXDMA_STS_MC1_PKT_CREDITS_TC0_CREDITS_SHIFT			0
#define FXR_TXDMA_STS_MC1_PKT_CREDITS_TC0_CREDITS_MASK			0x1Full
#define FXR_TXDMA_STS_MC1_PKT_CREDITS_TC0_CREDITS_SMASK			0x1Full
/*
* Table #56 of fxr_top - TXDMA_STS_OTR_ACK_CREDITS
* This CSR reports the current number of free credits available at the OTR 
* packet acknowledge interface.
*/
#define FXR_TXDMA_STS_OTR_ACK_CREDITS					(FXR_TX_DMA_CSRS + 0x000000000620)
#define FXR_TXDMA_STS_OTR_ACK_CREDITS_RESETCSR				0x0000000000000000ull
#define FXR_TXDMA_STS_OTR_ACK_CREDITS_RESERVED_63_32_SHIFT		32
#define FXR_TXDMA_STS_OTR_ACK_CREDITS_RESERVED_63_32_MASK		0xFFFFFFFFull
#define FXR_TXDMA_STS_OTR_ACK_CREDITS_RESERVED_63_32_SMASK		0xFFFFFFFF00000000ull
#define FXR_TXDMA_STS_OTR_ACK_CREDITS_MC1_TC3_CREDITS_SHIFT		28
#define FXR_TXDMA_STS_OTR_ACK_CREDITS_MC1_TC3_CREDITS_MASK		0xFull
#define FXR_TXDMA_STS_OTR_ACK_CREDITS_MC1_TC3_CREDITS_SMASK		0xF0000000ull
#define FXR_TXDMA_STS_OTR_ACK_CREDITS_MC1_TC2_CREDITS_SHIFT		24
#define FXR_TXDMA_STS_OTR_ACK_CREDITS_MC1_TC2_CREDITS_MASK		0xFull
#define FXR_TXDMA_STS_OTR_ACK_CREDITS_MC1_TC2_CREDITS_SMASK		0xF000000ull
#define FXR_TXDMA_STS_OTR_ACK_CREDITS_MC1_TC1_CREDITS_SHIFT		20
#define FXR_TXDMA_STS_OTR_ACK_CREDITS_MC1_TC1_CREDITS_MASK		0xFull
#define FXR_TXDMA_STS_OTR_ACK_CREDITS_MC1_TC1_CREDITS_SMASK		0xF00000ull
#define FXR_TXDMA_STS_OTR_ACK_CREDITS_MC1_TC0_CREDITS_SHIFT		16
#define FXR_TXDMA_STS_OTR_ACK_CREDITS_MC1_TC0_CREDITS_MASK		0xFull
#define FXR_TXDMA_STS_OTR_ACK_CREDITS_MC1_TC0_CREDITS_SMASK		0xF0000ull
#define FXR_TXDMA_STS_OTR_ACK_CREDITS_MC0_TC3_CREDITS_SHIFT		12
#define FXR_TXDMA_STS_OTR_ACK_CREDITS_MC0_TC3_CREDITS_MASK		0xFull
#define FXR_TXDMA_STS_OTR_ACK_CREDITS_MC0_TC3_CREDITS_SMASK		0xF000ull
#define FXR_TXDMA_STS_OTR_ACK_CREDITS_MC0_TC2_CREDITS_SHIFT		8
#define FXR_TXDMA_STS_OTR_ACK_CREDITS_MC0_TC2_CREDITS_MASK		0xFull
#define FXR_TXDMA_STS_OTR_ACK_CREDITS_MC0_TC2_CREDITS_SMASK		0xF00ull
#define FXR_TXDMA_STS_OTR_ACK_CREDITS_MC0_TC1_CREDITS_SHIFT		4
#define FXR_TXDMA_STS_OTR_ACK_CREDITS_MC0_TC1_CREDITS_MASK		0xFull
#define FXR_TXDMA_STS_OTR_ACK_CREDITS_MC0_TC1_CREDITS_SMASK		0xF0ull
#define FXR_TXDMA_STS_OTR_ACK_CREDITS_MC0_TC0_CREDITS_SHIFT		0
#define FXR_TXDMA_STS_OTR_ACK_CREDITS_MC0_TC0_CREDITS_MASK		0xFull
#define FXR_TXDMA_STS_OTR_ACK_CREDITS_MC0_TC0_CREDITS_SMASK		0xFull
/*
* Table #57 of fxr_top - TXDMA_STS_MC0_TC0
* This CSR reports the current status of MC0 TC0.
*/
#define FXR_TXDMA_STS_MC0_TC0						(FXR_TX_DMA_CSRS + 0x000000000628)
#define FXR_TXDMA_STS_MC0_TC0_RESETCSR					0x0000000000000000ull
#define FXR_TXDMA_STS_MC0_TC0_RESERVED_63_28_SHIFT			28
#define FXR_TXDMA_STS_MC0_TC0_RESERVED_63_28_MASK			0xFFFFFFFFFull
#define FXR_TXDMA_STS_MC0_TC0_RESERVED_63_28_SMASK			0xFFFFFFFFF0000000ull
#define FXR_TXDMA_STS_MC0_TC0_SLOT_FULL_SHIFT				27
#define FXR_TXDMA_STS_MC0_TC0_SLOT_FULL_MASK				0x1ull
#define FXR_TXDMA_STS_MC0_TC0_SLOT_FULL_SMASK				0x8000000ull
#define FXR_TXDMA_STS_MC0_TC0_PACKET_ENABLE_SHIFT			26
#define FXR_TXDMA_STS_MC0_TC0_PACKET_ENABLE_MASK			0x1ull
#define FXR_TXDMA_STS_MC0_TC0_PACKET_ENABLE_SMASK			0x4000000ull
#define FXR_TXDMA_STS_MC0_TC0_PACKET_EGRESS_IP_SHIFT			25
#define FXR_TXDMA_STS_MC0_TC0_PACKET_EGRESS_IP_MASK			0x1ull
#define FXR_TXDMA_STS_MC0_TC0_PACKET_EGRESS_IP_SMASK			0x2000000ull
#define FXR_TXDMA_STS_MC0_TC0_PACKET_FILL_IP_SHIFT			24
#define FXR_TXDMA_STS_MC0_TC0_PACKET_FILL_IP_MASK			0x1ull
#define FXR_TXDMA_STS_MC0_TC0_PACKET_FILL_IP_SMASK			0x1000000ull
#define FXR_TXDMA_STS_MC0_TC0_SLOTS_IN_USE_SHIFT			12
#define FXR_TXDMA_STS_MC0_TC0_SLOTS_IN_USE_MASK				0xFFFull
#define FXR_TXDMA_STS_MC0_TC0_SLOTS_IN_USE_SMASK			0xFFF000ull
#define FXR_TXDMA_STS_MC0_TC0_XLATE_FILL_COUNT_SHIFT			9
#define FXR_TXDMA_STS_MC0_TC0_XLATE_FILL_COUNT_MASK			0x7ull
#define FXR_TXDMA_STS_MC0_TC0_XLATE_FILL_COUNT_SMASK			0xE00ull
#define FXR_TXDMA_STS_MC0_TC0_INPQ_VA_COUNT_SHIFT			6
#define FXR_TXDMA_STS_MC0_TC0_INPQ_VA_COUNT_MASK			0x7ull
#define FXR_TXDMA_STS_MC0_TC0_INPQ_VA_COUNT_SMASK			0x1C0ull
#define FXR_TXDMA_STS_MC0_TC0_INPQ_FILL_COUNT_SHIFT			0
#define FXR_TXDMA_STS_MC0_TC0_INPQ_FILL_COUNT_MASK			0x3Full
#define FXR_TXDMA_STS_MC0_TC0_INPQ_FILL_COUNT_SMASK			0x3Full
/*
* Table #58 of fxr_top - TXDMA_STS_MC0_TC1
* This CSR reports the current status of MC0 TC1.
*/
#define FXR_TXDMA_STS_MC0_TC1						(FXR_TX_DMA_CSRS + 0x000000000630)
#define FXR_TXDMA_STS_MC0_TC1_RESETCSR					0x0000000000000000ull
#define FXR_TXDMA_STS_MC0_TC1_RESERVED_63_28_SHIFT			28
#define FXR_TXDMA_STS_MC0_TC1_RESERVED_63_28_MASK			0xFFFFFFFFFull
#define FXR_TXDMA_STS_MC0_TC1_RESERVED_63_28_SMASK			0xFFFFFFFFF0000000ull
#define FXR_TXDMA_STS_MC0_TC1_SLOT_FULL_SHIFT				27
#define FXR_TXDMA_STS_MC0_TC1_SLOT_FULL_MASK				0x1ull
#define FXR_TXDMA_STS_MC0_TC1_SLOT_FULL_SMASK				0x8000000ull
#define FXR_TXDMA_STS_MC0_TC1_PACKET_ENABLE_SHIFT			26
#define FXR_TXDMA_STS_MC0_TC1_PACKET_ENABLE_MASK			0x1ull
#define FXR_TXDMA_STS_MC0_TC1_PACKET_ENABLE_SMASK			0x4000000ull
#define FXR_TXDMA_STS_MC0_TC1_PACKET_EGRESS_IP_SHIFT			25
#define FXR_TXDMA_STS_MC0_TC1_PACKET_EGRESS_IP_MASK			0x1ull
#define FXR_TXDMA_STS_MC0_TC1_PACKET_EGRESS_IP_SMASK			0x2000000ull
#define FXR_TXDMA_STS_MC0_TC1_PACKET_FILL_IP_SHIFT			24
#define FXR_TXDMA_STS_MC0_TC1_PACKET_FILL_IP_MASK			0x1ull
#define FXR_TXDMA_STS_MC0_TC1_PACKET_FILL_IP_SMASK			0x1000000ull
#define FXR_TXDMA_STS_MC0_TC1_SLOTS_IN_USE_SHIFT			12
#define FXR_TXDMA_STS_MC0_TC1_SLOTS_IN_USE_MASK				0xFFFull
#define FXR_TXDMA_STS_MC0_TC1_SLOTS_IN_USE_SMASK			0xFFF000ull
#define FXR_TXDMA_STS_MC0_TC1_XLATE_FILL_COUNT_SHIFT			9
#define FXR_TXDMA_STS_MC0_TC1_XLATE_FILL_COUNT_MASK			0x7ull
#define FXR_TXDMA_STS_MC0_TC1_XLATE_FILL_COUNT_SMASK			0xE00ull
#define FXR_TXDMA_STS_MC0_TC1_INPQ_VA_COUNT_SHIFT			6
#define FXR_TXDMA_STS_MC0_TC1_INPQ_VA_COUNT_MASK			0x7ull
#define FXR_TXDMA_STS_MC0_TC1_INPQ_VA_COUNT_SMASK			0x1C0ull
#define FXR_TXDMA_STS_MC0_TC1_INPQ_FILL_COUNT_SHIFT			0
#define FXR_TXDMA_STS_MC0_TC1_INPQ_FILL_COUNT_MASK			0x3Full
#define FXR_TXDMA_STS_MC0_TC1_INPQ_FILL_COUNT_SMASK			0x3Full
/*
* Table #59 of fxr_top - TXDMA_STS_MC0_TC2
* This CSR reports the current status of MC0 TC2.
*/
#define FXR_TXDMA_STS_MC0_TC2						(FXR_TX_DMA_CSRS + 0x000000000638)
#define FXR_TXDMA_STS_MC0_TC2_RESETCSR					0x0000000000000000ull
#define FXR_TXDMA_STS_MC0_TC2_RESERVED_63_28_SHIFT			28
#define FXR_TXDMA_STS_MC0_TC2_RESERVED_63_28_MASK			0xFFFFFFFFFull
#define FXR_TXDMA_STS_MC0_TC2_RESERVED_63_28_SMASK			0xFFFFFFFFF0000000ull
#define FXR_TXDMA_STS_MC0_TC2_SLOT_FULL_SHIFT				27
#define FXR_TXDMA_STS_MC0_TC2_SLOT_FULL_MASK				0x1ull
#define FXR_TXDMA_STS_MC0_TC2_SLOT_FULL_SMASK				0x8000000ull
#define FXR_TXDMA_STS_MC0_TC2_PACKET_ENABLE_SHIFT			26
#define FXR_TXDMA_STS_MC0_TC2_PACKET_ENABLE_MASK			0x1ull
#define FXR_TXDMA_STS_MC0_TC2_PACKET_ENABLE_SMASK			0x4000000ull
#define FXR_TXDMA_STS_MC0_TC2_PACKET_EGRESS_IP_SHIFT			25
#define FXR_TXDMA_STS_MC0_TC2_PACKET_EGRESS_IP_MASK			0x1ull
#define FXR_TXDMA_STS_MC0_TC2_PACKET_EGRESS_IP_SMASK			0x2000000ull
#define FXR_TXDMA_STS_MC0_TC2_PACKET_FILL_IP_SHIFT			24
#define FXR_TXDMA_STS_MC0_TC2_PACKET_FILL_IP_MASK			0x1ull
#define FXR_TXDMA_STS_MC0_TC2_PACKET_FILL_IP_SMASK			0x1000000ull
#define FXR_TXDMA_STS_MC0_TC2_SLOTS_IN_USE_SHIFT			12
#define FXR_TXDMA_STS_MC0_TC2_SLOTS_IN_USE_MASK				0xFFFull
#define FXR_TXDMA_STS_MC0_TC2_SLOTS_IN_USE_SMASK			0xFFF000ull
#define FXR_TXDMA_STS_MC0_TC2_XLATE_FILL_COUNT_SHIFT			9
#define FXR_TXDMA_STS_MC0_TC2_XLATE_FILL_COUNT_MASK			0x7ull
#define FXR_TXDMA_STS_MC0_TC2_XLATE_FILL_COUNT_SMASK			0xE00ull
#define FXR_TXDMA_STS_MC0_TC2_INPQ_VA_COUNT_SHIFT			6
#define FXR_TXDMA_STS_MC0_TC2_INPQ_VA_COUNT_MASK			0x7ull
#define FXR_TXDMA_STS_MC0_TC2_INPQ_VA_COUNT_SMASK			0x1C0ull
#define FXR_TXDMA_STS_MC0_TC2_INPQ_FILL_COUNT_SHIFT			0
#define FXR_TXDMA_STS_MC0_TC2_INPQ_FILL_COUNT_MASK			0x3Full
#define FXR_TXDMA_STS_MC0_TC2_INPQ_FILL_COUNT_SMASK			0x3Full
/*
* Table #60 of fxr_top - TXDMA_STS_MC0_TC3
* This CSR reports the current status of MC0 TC3.
*/
#define FXR_TXDMA_STS_MC0_TC3						(FXR_TX_DMA_CSRS + 0x000000000640)
#define FXR_TXDMA_STS_MC0_TC3_RESETCSR					0x0000000000000000ull
#define FXR_TXDMA_STS_MC0_TC3_RESERVED_63_28_SHIFT			28
#define FXR_TXDMA_STS_MC0_TC3_RESERVED_63_28_MASK			0xFFFFFFFFFull
#define FXR_TXDMA_STS_MC0_TC3_RESERVED_63_28_SMASK			0xFFFFFFFFF0000000ull
#define FXR_TXDMA_STS_MC0_TC3_SLOT_FULL_SHIFT				27
#define FXR_TXDMA_STS_MC0_TC3_SLOT_FULL_MASK				0x1ull
#define FXR_TXDMA_STS_MC0_TC3_SLOT_FULL_SMASK				0x8000000ull
#define FXR_TXDMA_STS_MC0_TC3_PACKET_ENABLE_SHIFT			26
#define FXR_TXDMA_STS_MC0_TC3_PACKET_ENABLE_MASK			0x1ull
#define FXR_TXDMA_STS_MC0_TC3_PACKET_ENABLE_SMASK			0x4000000ull
#define FXR_TXDMA_STS_MC0_TC3_PACKET_EGRESS_IP_SHIFT			25
#define FXR_TXDMA_STS_MC0_TC3_PACKET_EGRESS_IP_MASK			0x1ull
#define FXR_TXDMA_STS_MC0_TC3_PACKET_EGRESS_IP_SMASK			0x2000000ull
#define FXR_TXDMA_STS_MC0_TC3_PACKET_FILL_IP_SHIFT			24
#define FXR_TXDMA_STS_MC0_TC3_PACKET_FILL_IP_MASK			0x1ull
#define FXR_TXDMA_STS_MC0_TC3_PACKET_FILL_IP_SMASK			0x1000000ull
#define FXR_TXDMA_STS_MC0_TC3_SLOTS_IN_USE_SHIFT			12
#define FXR_TXDMA_STS_MC0_TC3_SLOTS_IN_USE_MASK				0xFFFull
#define FXR_TXDMA_STS_MC0_TC3_SLOTS_IN_USE_SMASK			0xFFF000ull
#define FXR_TXDMA_STS_MC0_TC3_XLATE_FILL_COUNT_SHIFT			9
#define FXR_TXDMA_STS_MC0_TC3_XLATE_FILL_COUNT_MASK			0x7ull
#define FXR_TXDMA_STS_MC0_TC3_XLATE_FILL_COUNT_SMASK			0xE00ull
#define FXR_TXDMA_STS_MC0_TC3_INPQ_VA_COUNT_SHIFT			6
#define FXR_TXDMA_STS_MC0_TC3_INPQ_VA_COUNT_MASK			0x7ull
#define FXR_TXDMA_STS_MC0_TC3_INPQ_VA_COUNT_SMASK			0x1C0ull
#define FXR_TXDMA_STS_MC0_TC3_INPQ_FILL_COUNT_SHIFT			0
#define FXR_TXDMA_STS_MC0_TC3_INPQ_FILL_COUNT_MASK			0x3Full
#define FXR_TXDMA_STS_MC0_TC3_INPQ_FILL_COUNT_SMASK			0x3Full
/*
* Table #61 of fxr_top - TXDMA_STS_MC1_TC0
* This CSR reports the current status of MC1 TC0.
*/
#define FXR_TXDMA_STS_MC1_TC0						(FXR_TX_DMA_CSRS + 0x000000000648)
#define FXR_TXDMA_STS_MC1_TC0_RESETCSR					0x0000000000000000ull
#define FXR_TXDMA_STS_MC1_TC0_RESERVED_63_33_SHIFT			33
#define FXR_TXDMA_STS_MC1_TC0_RESERVED_63_33_MASK			0x7FFFFFFFull
#define FXR_TXDMA_STS_MC1_TC0_RESERVED_63_33_SMASK			0xFFFFFFFE00000000ull
#define FXR_TXDMA_STS_MC1_TC0_ACK_FILL_CNT_SHIFT			28
#define FXR_TXDMA_STS_MC1_TC0_ACK_FILL_CNT_MASK				0x1Full
#define FXR_TXDMA_STS_MC1_TC0_ACK_FILL_CNT_SMASK			0x1F0000000ull
#define FXR_TXDMA_STS_MC1_TC0_SLOT_FULL_SHIFT				27
#define FXR_TXDMA_STS_MC1_TC0_SLOT_FULL_MASK				0x1ull
#define FXR_TXDMA_STS_MC1_TC0_SLOT_FULL_SMASK				0x8000000ull
#define FXR_TXDMA_STS_MC1_TC0_PACKET_ENABLE_SHIFT			26
#define FXR_TXDMA_STS_MC1_TC0_PACKET_ENABLE_MASK			0x1ull
#define FXR_TXDMA_STS_MC1_TC0_PACKET_ENABLE_SMASK			0x4000000ull
#define FXR_TXDMA_STS_MC1_TC0_PACKET_EGRESS_IP_SHIFT			25
#define FXR_TXDMA_STS_MC1_TC0_PACKET_EGRESS_IP_MASK			0x1ull
#define FXR_TXDMA_STS_MC1_TC0_PACKET_EGRESS_IP_SMASK			0x2000000ull
#define FXR_TXDMA_STS_MC1_TC0_PACKET_FILL_IP_SHIFT			24
#define FXR_TXDMA_STS_MC1_TC0_PACKET_FILL_IP_MASK			0x1ull
#define FXR_TXDMA_STS_MC1_TC0_PACKET_FILL_IP_SMASK			0x1000000ull
#define FXR_TXDMA_STS_MC1_TC0_SLOTS_IN_USE_SHIFT			12
#define FXR_TXDMA_STS_MC1_TC0_SLOTS_IN_USE_MASK				0xFFFull
#define FXR_TXDMA_STS_MC1_TC0_SLOTS_IN_USE_SMASK			0xFFF000ull
#define FXR_TXDMA_STS_MC1_TC0_XLATE_FILL_COUNT_SHIFT			9
#define FXR_TXDMA_STS_MC1_TC0_XLATE_FILL_COUNT_MASK			0x7ull
#define FXR_TXDMA_STS_MC1_TC0_XLATE_FILL_COUNT_SMASK			0xE00ull
#define FXR_TXDMA_STS_MC1_TC0_INPQ_VA_COUNT_SHIFT			6
#define FXR_TXDMA_STS_MC1_TC0_INPQ_VA_COUNT_MASK			0x7ull
#define FXR_TXDMA_STS_MC1_TC0_INPQ_VA_COUNT_SMASK			0x1C0ull
#define FXR_TXDMA_STS_MC1_TC0_INPQ_FILL_COUNT_SHIFT			0
#define FXR_TXDMA_STS_MC1_TC0_INPQ_FILL_COUNT_MASK			0x3Full
#define FXR_TXDMA_STS_MC1_TC0_INPQ_FILL_COUNT_SMASK			0x3Full
/*
* Table #62 of fxr_top - TXDMA_STS_MC1_TC1
* This CSR reports the current status of MC1 TC1.
*/
#define FXR_TXDMA_STS_MC1_TC1						(FXR_TX_DMA_CSRS + 0x000000000650)
#define FXR_TXDMA_STS_MC1_TC1_RESETCSR					0x0000000000000000ull
#define FXR_TXDMA_STS_MC1_TC1_RESERVED_63_33_SHIFT			33
#define FXR_TXDMA_STS_MC1_TC1_RESERVED_63_33_MASK			0x7FFFFFFFull
#define FXR_TXDMA_STS_MC1_TC1_RESERVED_63_33_SMASK			0xFFFFFFFE00000000ull
#define FXR_TXDMA_STS_MC1_TC1_ACK_FILL_CNT_SHIFT			28
#define FXR_TXDMA_STS_MC1_TC1_ACK_FILL_CNT_MASK				0x1Full
#define FXR_TXDMA_STS_MC1_TC1_ACK_FILL_CNT_SMASK			0x1F0000000ull
#define FXR_TXDMA_STS_MC1_TC1_SLOT_FULL_SHIFT				27
#define FXR_TXDMA_STS_MC1_TC1_SLOT_FULL_MASK				0x1ull
#define FXR_TXDMA_STS_MC1_TC1_SLOT_FULL_SMASK				0x8000000ull
#define FXR_TXDMA_STS_MC1_TC1_PACKET_ENABLE_SHIFT			26
#define FXR_TXDMA_STS_MC1_TC1_PACKET_ENABLE_MASK			0x1ull
#define FXR_TXDMA_STS_MC1_TC1_PACKET_ENABLE_SMASK			0x4000000ull
#define FXR_TXDMA_STS_MC1_TC1_PACKET_EGRESS_IP_SHIFT			25
#define FXR_TXDMA_STS_MC1_TC1_PACKET_EGRESS_IP_MASK			0x1ull
#define FXR_TXDMA_STS_MC1_TC1_PACKET_EGRESS_IP_SMASK			0x2000000ull
#define FXR_TXDMA_STS_MC1_TC1_PACKET_FILL_IP_SHIFT			24
#define FXR_TXDMA_STS_MC1_TC1_PACKET_FILL_IP_MASK			0x1ull
#define FXR_TXDMA_STS_MC1_TC1_PACKET_FILL_IP_SMASK			0x1000000ull
#define FXR_TXDMA_STS_MC1_TC1_SLOTS_IN_USE_SHIFT			12
#define FXR_TXDMA_STS_MC1_TC1_SLOTS_IN_USE_MASK				0xFFFull
#define FXR_TXDMA_STS_MC1_TC1_SLOTS_IN_USE_SMASK			0xFFF000ull
#define FXR_TXDMA_STS_MC1_TC1_XLATE_FILL_COUNT_SHIFT			9
#define FXR_TXDMA_STS_MC1_TC1_XLATE_FILL_COUNT_MASK			0x7ull
#define FXR_TXDMA_STS_MC1_TC1_XLATE_FILL_COUNT_SMASK			0xE00ull
#define FXR_TXDMA_STS_MC1_TC1_INPQ_VA_COUNT_SHIFT			6
#define FXR_TXDMA_STS_MC1_TC1_INPQ_VA_COUNT_MASK			0x7ull
#define FXR_TXDMA_STS_MC1_TC1_INPQ_VA_COUNT_SMASK			0x1C0ull
#define FXR_TXDMA_STS_MC1_TC1_INPQ_FILL_COUNT_SHIFT			0
#define FXR_TXDMA_STS_MC1_TC1_INPQ_FILL_COUNT_MASK			0x3Full
#define FXR_TXDMA_STS_MC1_TC1_INPQ_FILL_COUNT_SMASK			0x3Full
/*
* Table #63 of fxr_top - TXDMA_STS_MC1_TC2
* This CSR reports the current status of MC1 TC2.
*/
#define FXR_TXDMA_STS_MC1_TC2						(FXR_TX_DMA_CSRS + 0x000000000658)
#define FXR_TXDMA_STS_MC1_TC2_RESETCSR					0x0000000000000000ull
#define FXR_TXDMA_STS_MC1_TC2_RESERVED_63_33_SHIFT			33
#define FXR_TXDMA_STS_MC1_TC2_RESERVED_63_33_MASK			0x7FFFFFFFull
#define FXR_TXDMA_STS_MC1_TC2_RESERVED_63_33_SMASK			0xFFFFFFFE00000000ull
#define FXR_TXDMA_STS_MC1_TC2_ACK_FILL_CNT_SHIFT			28
#define FXR_TXDMA_STS_MC1_TC2_ACK_FILL_CNT_MASK				0x1Full
#define FXR_TXDMA_STS_MC1_TC2_ACK_FILL_CNT_SMASK			0x1F0000000ull
#define FXR_TXDMA_STS_MC1_TC2_SLOT_FULL_SHIFT				27
#define FXR_TXDMA_STS_MC1_TC2_SLOT_FULL_MASK				0x1ull
#define FXR_TXDMA_STS_MC1_TC2_SLOT_FULL_SMASK				0x8000000ull
#define FXR_TXDMA_STS_MC1_TC2_PACKET_ENABLE_SHIFT			26
#define FXR_TXDMA_STS_MC1_TC2_PACKET_ENABLE_MASK			0x1ull
#define FXR_TXDMA_STS_MC1_TC2_PACKET_ENABLE_SMASK			0x4000000ull
#define FXR_TXDMA_STS_MC1_TC2_PACKET_EGRESS_IP_SHIFT			25
#define FXR_TXDMA_STS_MC1_TC2_PACKET_EGRESS_IP_MASK			0x1ull
#define FXR_TXDMA_STS_MC1_TC2_PACKET_EGRESS_IP_SMASK			0x2000000ull
#define FXR_TXDMA_STS_MC1_TC2_PACKET_FILL_IP_SHIFT			24
#define FXR_TXDMA_STS_MC1_TC2_PACKET_FILL_IP_MASK			0x1ull
#define FXR_TXDMA_STS_MC1_TC2_PACKET_FILL_IP_SMASK			0x1000000ull
#define FXR_TXDMA_STS_MC1_TC2_SLOTS_IN_USE_SHIFT			12
#define FXR_TXDMA_STS_MC1_TC2_SLOTS_IN_USE_MASK				0xFFFull
#define FXR_TXDMA_STS_MC1_TC2_SLOTS_IN_USE_SMASK			0xFFF000ull
#define FXR_TXDMA_STS_MC1_TC2_XLATE_FILL_COUNT_SHIFT			9
#define FXR_TXDMA_STS_MC1_TC2_XLATE_FILL_COUNT_MASK			0x7ull
#define FXR_TXDMA_STS_MC1_TC2_XLATE_FILL_COUNT_SMASK			0xE00ull
#define FXR_TXDMA_STS_MC1_TC2_INPQ_VA_COUNT_SHIFT			6
#define FXR_TXDMA_STS_MC1_TC2_INPQ_VA_COUNT_MASK			0x7ull
#define FXR_TXDMA_STS_MC1_TC2_INPQ_VA_COUNT_SMASK			0x1C0ull
#define FXR_TXDMA_STS_MC1_TC2_INPQ_FILL_COUNT_SHIFT			0
#define FXR_TXDMA_STS_MC1_TC2_INPQ_FILL_COUNT_MASK			0x3Full
#define FXR_TXDMA_STS_MC1_TC2_INPQ_FILL_COUNT_SMASK			0x3Full
/*
* Table #64 of fxr_top - TXDMA_STS_MC1_TC3
* This CSR reports the current status of MC1 TC3.
*/
#define FXR_TXDMA_STS_MC1_TC3						(FXR_TX_DMA_CSRS + 0x000000000660)
#define FXR_TXDMA_STS_MC1_TC3_RESETCSR					0x0000000000000000ull
#define FXR_TXDMA_STS_MC1_TC3_RESERVED_63_33_SHIFT			33
#define FXR_TXDMA_STS_MC1_TC3_RESERVED_63_33_MASK			0x7FFFFFFFull
#define FXR_TXDMA_STS_MC1_TC3_RESERVED_63_33_SMASK			0xFFFFFFFE00000000ull
#define FXR_TXDMA_STS_MC1_TC3_ACK_FILL_CNT_SHIFT			28
#define FXR_TXDMA_STS_MC1_TC3_ACK_FILL_CNT_MASK				0x1Full
#define FXR_TXDMA_STS_MC1_TC3_ACK_FILL_CNT_SMASK			0x1F0000000ull
#define FXR_TXDMA_STS_MC1_TC3_SLOT_FULL_SHIFT				27
#define FXR_TXDMA_STS_MC1_TC3_SLOT_FULL_MASK				0x1ull
#define FXR_TXDMA_STS_MC1_TC3_SLOT_FULL_SMASK				0x8000000ull
#define FXR_TXDMA_STS_MC1_TC3_PACKET_ENABLE_SHIFT			26
#define FXR_TXDMA_STS_MC1_TC3_PACKET_ENABLE_MASK			0x1ull
#define FXR_TXDMA_STS_MC1_TC3_PACKET_ENABLE_SMASK			0x4000000ull
#define FXR_TXDMA_STS_MC1_TC3_PACKET_EGRESS_IP_SHIFT			25
#define FXR_TXDMA_STS_MC1_TC3_PACKET_EGRESS_IP_MASK			0x1ull
#define FXR_TXDMA_STS_MC1_TC3_PACKET_EGRESS_IP_SMASK			0x2000000ull
#define FXR_TXDMA_STS_MC1_TC3_PACKET_FILL_IP_SHIFT			24
#define FXR_TXDMA_STS_MC1_TC3_PACKET_FILL_IP_MASK			0x1ull
#define FXR_TXDMA_STS_MC1_TC3_PACKET_FILL_IP_SMASK			0x1000000ull
#define FXR_TXDMA_STS_MC1_TC3_SLOTS_IN_USE_SHIFT			12
#define FXR_TXDMA_STS_MC1_TC3_SLOTS_IN_USE_MASK				0xFFFull
#define FXR_TXDMA_STS_MC1_TC3_SLOTS_IN_USE_SMASK			0xFFF000ull
#define FXR_TXDMA_STS_MC1_TC3_XLATE_FILL_COUNT_SHIFT			9
#define FXR_TXDMA_STS_MC1_TC3_XLATE_FILL_COUNT_MASK			0x7ull
#define FXR_TXDMA_STS_MC1_TC3_XLATE_FILL_COUNT_SMASK			0xE00ull
#define FXR_TXDMA_STS_MC1_TC3_INPQ_VA_COUNT_SHIFT			6
#define FXR_TXDMA_STS_MC1_TC3_INPQ_VA_COUNT_MASK			0x7ull
#define FXR_TXDMA_STS_MC1_TC3_INPQ_VA_COUNT_SMASK			0x1C0ull
#define FXR_TXDMA_STS_MC1_TC3_INPQ_FILL_COUNT_SHIFT			0
#define FXR_TXDMA_STS_MC1_TC3_INPQ_FILL_COUNT_MASK			0x3Full
#define FXR_TXDMA_STS_MC1_TC3_INPQ_FILL_COUNT_SMASK			0x3Full
/*
* Table #65 of fxr_top - TXDMA_STS_PKT_IDX0
* This CSR reports the current status of bits 63:0 of the packet index valid 
* mask.
*/
#define FXR_TXDMA_STS_PKT_IDX0						(FXR_TX_DMA_CSRS + 0x000000000668)
#define FXR_TXDMA_STS_PKT_IDX0_RESETCSR					0x0000000000000000ull
#define FXR_TXDMA_STS_PKT_IDX0_PKT_IDX_VAL_MSK_SHIFT			0
#define FXR_TXDMA_STS_PKT_IDX0_PKT_IDX_VAL_MSK_MASK			0xFFFFFFFFFFFFFFFFull
#define FXR_TXDMA_STS_PKT_IDX0_PKT_IDX_VAL_MSK_SMASK			0xFFFFFFFFFFFFFFFFull
/*
* Table #66 of fxr_top - TXDMA_STS_PKT_IDX1
* This CSR reports the current status of bits 127:64 of the packet index valid 
* mask.
*/
#define FXR_TXDMA_STS_PKT_IDX1						(FXR_TX_DMA_CSRS + 0x000000000670)
#define FXR_TXDMA_STS_PKT_IDX1_RESETCSR					0x0000000000000000ull
#define FXR_TXDMA_STS_PKT_IDX1_PKT_IDX_VAL_MSK_SHIFT			0
#define FXR_TXDMA_STS_PKT_IDX1_PKT_IDX_VAL_MSK_MASK			0xFFFFFFFFFFFFFFFFull
#define FXR_TXDMA_STS_PKT_IDX1_PKT_IDX_VAL_MSK_SMASK			0xFFFFFFFFFFFFFFFFull
/*
* Table #67 of fxr_top - TXDMA_STS_PKT_IDX2
* This CSR reports the current status of bits 191:128 of the packet index valid 
* mask.
*/
#define FXR_TXDMA_STS_PKT_IDX2						(FXR_TX_DMA_CSRS + 0x000000000678)
#define FXR_TXDMA_STS_PKT_IDX2_RESETCSR					0x0000000000000000ull
#define FXR_TXDMA_STS_PKT_IDX2_PKT_IDX_VAL_MSK_SHIFT			0
#define FXR_TXDMA_STS_PKT_IDX2_PKT_IDX_VAL_MSK_MASK			0xFFFFFFFFFFFFFFFFull
#define FXR_TXDMA_STS_PKT_IDX2_PKT_IDX_VAL_MSK_SMASK			0xFFFFFFFFFFFFFFFFull
/*
* Table #68 of fxr_top - TXDMA_STS_PKT_IDX3
* This CSR reports the current status of bits 255:192 of the packet index valid 
* mask.
*/
#define FXR_TXDMA_STS_PKT_IDX3						(FXR_TX_DMA_CSRS + 0x000000000680)
#define FXR_TXDMA_STS_PKT_IDX3_RESETCSR					0x0000000000000000ull
#define FXR_TXDMA_STS_PKT_IDX3_PKT_IDX_VAL_MSK_SHIFT			0
#define FXR_TXDMA_STS_PKT_IDX3_PKT_IDX_VAL_MSK_MASK			0xFFFFFFFFFFFFFFFFull
#define FXR_TXDMA_STS_PKT_IDX3_PKT_IDX_VAL_MSK_SMASK			0xFFFFFFFFFFFFFFFFull
/*
* Table #69 of fxr_top - TXDMA_STS_WCE0
* This CSR reports the current status of bits 63:0 of the write combining entry 
* valid mask.
*/
#define FXR_TXDMA_STS_WCE0						(FXR_TX_DMA_CSRS + 0x000000000688)
#define FXR_TXDMA_STS_WCE0_RESETCSR					0x0000000000000000ull
#define FXR_TXDMA_STS_WCE0_WCE_VAL_MSK_SHIFT				0
#define FXR_TXDMA_STS_WCE0_WCE_VAL_MSK_MASK				0xFFFFFFFFFFFFFFFFull
#define FXR_TXDMA_STS_WCE0_WCE_VAL_MSK_SMASK				0xFFFFFFFFFFFFFFFFull
/*
* Table #70 of fxr_top - TXDMA_STS_WCE1
* This CSR reports the current status of bits 127:64 of the write combining 
* entry valid mask.
*/
#define FXR_TXDMA_STS_WCE1						(FXR_TX_DMA_CSRS + 0x000000000690)
#define FXR_TXDMA_STS_WCE1_RESETCSR					0x0000000000000000ull
#define FXR_TXDMA_STS_WCE1_WCE_VAL_MSK_SHIFT				0
#define FXR_TXDMA_STS_WCE1_WCE_VAL_MSK_MASK				0xFFFFFFFFFFFFFFFFull
#define FXR_TXDMA_STS_WCE1_WCE_VAL_MSK_SMASK				0xFFFFFFFFFFFFFFFFull
/*
* Table #71 of fxr_top - TXDMA_STS_WCE2
* This CSR reports the current status of bits 191:128 of the write combining 
* entry valid mask.
*/
#define FXR_TXDMA_STS_WCE2						(FXR_TX_DMA_CSRS + 0x000000000698)
#define FXR_TXDMA_STS_WCE2_RESETCSR					0x0000000000000000ull
#define FXR_TXDMA_STS_WCE2_WCE_VAL_MSK_SHIFT				0
#define FXR_TXDMA_STS_WCE2_WCE_VAL_MSK_MASK				0xFFFFFFFFFFFFFFFFull
#define FXR_TXDMA_STS_WCE2_WCE_VAL_MSK_SMASK				0xFFFFFFFFFFFFFFFFull
/*
* Table #72 of fxr_top - TXDMA_STS_WCE3
* This CSR reports the current status of bits 255:192 of the write combining 
* entry valid mask.
*/
#define FXR_TXDMA_STS_WCE3						(FXR_TX_DMA_CSRS + 0x0000000006A0)
#define FXR_TXDMA_STS_WCE3_RESETCSR					0x0000000000000000ull
#define FXR_TXDMA_STS_WCE3_WCE_VAL_MSK_SHIFT				0
#define FXR_TXDMA_STS_WCE3_WCE_VAL_MSK_MASK				0xFFFFFFFFFFFFFFFFull
#define FXR_TXDMA_STS_WCE3_WCE_VAL_MSK_SMASK				0xFFFFFFFFFFFFFFFFull
/*
* Table #73 of fxr_top - TXDMA_STS_WCE4
* This CSR reports the current status of bits 319:256 of the write combining 
* entry valid mask.
*/
#define FXR_TXDMA_STS_WCE4						(FXR_TX_DMA_CSRS + 0x0000000006A8)
#define FXR_TXDMA_STS_WCE4_RESETCSR					0x0000000000000000ull
#define FXR_TXDMA_STS_WCE4_WCE_VAL_MSK_SHIFT				0
#define FXR_TXDMA_STS_WCE4_WCE_VAL_MSK_MASK				0xFFFFFFFFFFFFFFFFull
#define FXR_TXDMA_STS_WCE4_WCE_VAL_MSK_SMASK				0xFFFFFFFFFFFFFFFFull
/*
* Table #74 of fxr_top - TXDMA_STS_WCE5
* This CSR reports the current status of bits 383:320 of the write combining 
* entry valid mask.
*/
#define FXR_TXDMA_STS_WCE5						(FXR_TX_DMA_CSRS + 0x0000000006B0)
#define FXR_TXDMA_STS_WCE5_RESETCSR					0x0000000000000000ull
#define FXR_TXDMA_STS_WCE5_WCE_VAL_MSK_SHIFT				0
#define FXR_TXDMA_STS_WCE5_WCE_VAL_MSK_MASK				0xFFFFFFFFFFFFFFFFull
#define FXR_TXDMA_STS_WCE5_WCE_VAL_MSK_SMASK				0xFFFFFFFFFFFFFFFFull
/*
* Table #75 of fxr_top - TXDMA_STS_WCE6
* This CSR reports the current status of bits 447:384 of the write combining 
* entry valid mask.
*/
#define FXR_TXDMA_STS_WCE6						(FXR_TX_DMA_CSRS + 0x0000000006B8)
#define FXR_TXDMA_STS_WCE6_RESETCSR					0x0000000000000000ull
#define FXR_TXDMA_STS_WCE6_WCE_VAL_MSK_SHIFT				0
#define FXR_TXDMA_STS_WCE6_WCE_VAL_MSK_MASK				0xFFFFFFFFFFFFFFFFull
#define FXR_TXDMA_STS_WCE6_WCE_VAL_MSK_SMASK				0xFFFFFFFFFFFFFFFFull
/*
* Table #76 of fxr_top - TXDMA_STS_WCE7
* This CSR reports the current status of bits 511:448 of the write combining 
* entry valid mask.
*/
#define FXR_TXDMA_STS_WCE7						(FXR_TX_DMA_CSRS + 0x0000000006C0)
#define FXR_TXDMA_STS_WCE7_RESETCSR					0x0000000000000000ull
#define FXR_TXDMA_STS_WCE7_WCE_VAL_MSK_SHIFT				0
#define FXR_TXDMA_STS_WCE7_WCE_VAL_MSK_MASK				0xFFFFFFFFFFFFFFFFull
#define FXR_TXDMA_STS_WCE7_WCE_VAL_MSK_SMASK				0xFFFFFFFFFFFFFFFFull
/*
* Table #77 of fxr_top - TXDMA_STS_MEM_REQ_TID0
* This CSR reports the current status of bits 63:0 of the memory request TID 
* valid mask.
*/
#define FXR_TXDMA_STS_MEM_REQ_TID0					(FXR_TX_DMA_CSRS + 0x0000000006C8)
#define FXR_TXDMA_STS_MEM_REQ_TID0_RESETCSR				0x0000000000000000ull
#define FXR_TXDMA_STS_MEM_REQ_TID0_TID_VAL_MSK_SHIFT			0
#define FXR_TXDMA_STS_MEM_REQ_TID0_TID_VAL_MSK_MASK			0xFFFFFFFFFFFFFFFFull
#define FXR_TXDMA_STS_MEM_REQ_TID0_TID_VAL_MSK_SMASK			0xFFFFFFFFFFFFFFFFull
/*
* Table #78 of fxr_top - TXDMA_STS_MEM_REQ_TID1
* This CSR reports the current status of bits 127:64 of the memory request TID 
* valid mask.
*/
#define FXR_TXDMA_STS_MEM_REQ_TID1					(FXR_TX_DMA_CSRS + 0x0000000006D0)
#define FXR_TXDMA_STS_MEM_REQ_TID1_RESETCSR				0x0000000000000000ull
#define FXR_TXDMA_STS_MEM_REQ_TID1_TID_VAL_MSK_SHIFT			0
#define FXR_TXDMA_STS_MEM_REQ_TID1_TID_VAL_MSK_MASK			0xFFFFFFFFFFFFFFFFull
#define FXR_TXDMA_STS_MEM_REQ_TID1_TID_VAL_MSK_SMASK			0xFFFFFFFFFFFFFFFFull
/*
* Table #79 of fxr_top - TXDMA_STS_MEM_REQ_TID2
* This CSR reports the current status of bits 191:128 of the memory request TID 
* valid mask.
*/
#define FXR_TXDMA_STS_MEM_REQ_TID2					(FXR_TX_DMA_CSRS + 0x0000000006D8)
#define FXR_TXDMA_STS_MEM_REQ_TID2_RESETCSR				0x0000000000000000ull
#define FXR_TXDMA_STS_MEM_REQ_TID2_TID_VAL_MSK_SHIFT			0
#define FXR_TXDMA_STS_MEM_REQ_TID2_TID_VAL_MSK_MASK			0xFFFFFFFFFFFFFFFFull
#define FXR_TXDMA_STS_MEM_REQ_TID2_TID_VAL_MSK_SMASK			0xFFFFFFFFFFFFFFFFull
/*
* Table #80 of fxr_top - TXDMA_STS_MEM_REQ_TID3
* This CSR reports the current status of bits 255:192 of the memory request TID 
* valid mask.
*/
#define FXR_TXDMA_STS_MEM_REQ_TID3					(FXR_TX_DMA_CSRS + 0x0000000006E0)
#define FXR_TXDMA_STS_MEM_REQ_TID3_RESETCSR				0x0000000000000000ull
#define FXR_TXDMA_STS_MEM_REQ_TID3_TID_VAL_MSK_SHIFT			0
#define FXR_TXDMA_STS_MEM_REQ_TID3_TID_VAL_MSK_MASK			0xFFFFFFFFFFFFFFFFull
#define FXR_TXDMA_STS_MEM_REQ_TID3_TID_VAL_MSK_SMASK			0xFFFFFFFFFFFFFFFFull
/*
* Table #81 of fxr_top - TXDMA_STS_MEM_REQ_TID4
* This CSR reports the current status of bits 319:256 of the memory request TID 
* valid mask.
*/
#define FXR_TXDMA_STS_MEM_REQ_TID4					(FXR_TX_DMA_CSRS + 0x0000000006E8)
#define FXR_TXDMA_STS_MEM_REQ_TID4_RESETCSR				0x0000000000000000ull
#define FXR_TXDMA_STS_MEM_REQ_TID4_TID_VAL_MSK_SHIFT			0
#define FXR_TXDMA_STS_MEM_REQ_TID4_TID_VAL_MSK_MASK			0xFFFFFFFFFFFFFFFFull
#define FXR_TXDMA_STS_MEM_REQ_TID4_TID_VAL_MSK_SMASK			0xFFFFFFFFFFFFFFFFull
/*
* Table #82 of fxr_top - TXDMA_STS_PA_ID
* This CSR reports the current status of the physical address ID valid 
* mask.
*/
#define FXR_TXDMA_STS_PA_ID						(FXR_TX_DMA_CSRS + 0x0000000006F0)
#define FXR_TXDMA_STS_PA_ID_RESETCSR					0x0000000000000000ull
#define FXR_TXDMA_STS_PA_ID_RESERVED_63_32_SHIFT			32
#define FXR_TXDMA_STS_PA_ID_RESERVED_63_32_MASK				0xFFFFFFFFull
#define FXR_TXDMA_STS_PA_ID_RESERVED_63_32_SMASK			0xFFFFFFFF00000000ull
#define FXR_TXDMA_STS_PA_ID_ID_VAL_MSK_SHIFT				0
#define FXR_TXDMA_STS_PA_ID_ID_VAL_MSK_MASK				0xFFFFFFFFull
#define FXR_TXDMA_STS_PA_ID_ID_VAL_MSK_SMASK				0xFFFFFFFFull
/*
* Table #83 of fxr_top - TXDMA_STS_FROZE
* This CSR reports the current status of whether the TXDMA is frozen and has 
* outstanding requests.
*/
#define FXR_TXDMA_STS_FROZE						(FXR_TX_DMA_CSRS + 0x0000000006F8)
#define FXR_TXDMA_STS_FROZE_RESETCSR					0x0000000000000000ull
#define FXR_TXDMA_STS_FROZE_RESERVED_63_3_SHIFT				3
#define FXR_TXDMA_STS_FROZE_RESERVED_63_3_MASK				0x1FFFFFFFFFFFFFFFull
#define FXR_TXDMA_STS_FROZE_RESERVED_63_3_SMASK				0xFFFFFFFFFFFFFFF8ull
#define FXR_TXDMA_STS_FROZE_MEM_REQ_IP_SHIFT				2
#define FXR_TXDMA_STS_FROZE_MEM_REQ_IP_MASK				0x1ull
#define FXR_TXDMA_STS_FROZE_MEM_REQ_IP_SMASK				0x4ull
#define FXR_TXDMA_STS_FROZE_AT_REQ_IP_SHIFT				1
#define FXR_TXDMA_STS_FROZE_AT_REQ_IP_MASK				0x1ull
#define FXR_TXDMA_STS_FROZE_AT_REQ_IP_SMASK				0x2ull
#define FXR_TXDMA_STS_FROZE_FROZE_SHIFT					0
#define FXR_TXDMA_STS_FROZE_FROZE_MASK					0x1ull
#define FXR_TXDMA_STS_FROZE_FROZE_SMASK					0x1ull
/*
* Table #84 of fxr_top - TXDMA_DBG_INPQ_CTRL
* This CSR allows indirect access to the TXDMA input queue arrays. These arrays 
* should not be written to during normal operation, doing so may cause silent 
* data corruption. This register is for debug use only. Note that this array is 
* 339 bits wide. The data and ECC for the read or write to this register is 
* contained in the next six CSRs.
*/
#define FXR_TXDMA_DBG_INPQ_CTRL						(FXR_TX_DMA_CSRS + 0x000000000800)
#define FXR_TXDMA_DBG_INPQ_CTRL_RESETCSR				0x0060000000000000ull
#define FXR_TXDMA_DBG_INPQ_CTRL_VALID_SHIFT				63
#define FXR_TXDMA_DBG_INPQ_CTRL_VALID_MASK				0x1ull
#define FXR_TXDMA_DBG_INPQ_CTRL_VALID_SMASK				0x8000000000000000ull
#define FXR_TXDMA_DBG_INPQ_CTRL_WRITE_SHIFT				62
#define FXR_TXDMA_DBG_INPQ_CTRL_WRITE_MASK				0x1ull
#define FXR_TXDMA_DBG_INPQ_CTRL_WRITE_SMASK				0x4000000000000000ull
#define FXR_TXDMA_DBG_INPQ_CTRL_ECC_SHIFT				61
#define FXR_TXDMA_DBG_INPQ_CTRL_ECC_MASK				0x1ull
#define FXR_TXDMA_DBG_INPQ_CTRL_ECC_SMASK				0x2000000000000000ull
#define FXR_TXDMA_DBG_INPQ_CTRL_RESERVED_60_SHIFT			60
#define FXR_TXDMA_DBG_INPQ_CTRL_RESERVED_60_MASK			0x1ull
#define FXR_TXDMA_DBG_INPQ_CTRL_RESERVED_60_SMASK			0x1000000000000000ull
#define FXR_TXDMA_DBG_INPQ_CTRL_PAYLOAD_REGS_SHIFT			52
#define FXR_TXDMA_DBG_INPQ_CTRL_PAYLOAD_REGS_MASK			0xFFull
#define FXR_TXDMA_DBG_INPQ_CTRL_PAYLOAD_REGS_SMASK			0xFF0000000000000ull
#define FXR_TXDMA_DBG_INPQ_CTRL_RESERVED_51_8_SHIFT			8
#define FXR_TXDMA_DBG_INPQ_CTRL_RESERVED_51_8_MASK			0xFFFFFFFFFFFull
#define FXR_TXDMA_DBG_INPQ_CTRL_RESERVED_51_8_SMASK			0xFFFFFFFFFFF00ull
#define FXR_TXDMA_DBG_INPQ_CTRL_ADDRESS_SHIFT				0
#define FXR_TXDMA_DBG_INPQ_CTRL_ADDRESS_MASK				0xFFull
#define FXR_TXDMA_DBG_INPQ_CTRL_ADDRESS_SMASK				0xFFull
/*
* Table #85 of fxr_top - TXDMA_DBG_INPQ_PAYLOAD0
* This CSR contains bits 63:0 of data payload for #%%#TXDMA_DBG_INPQ_CTRL#%%#.
*/
#define FXR_TXDMA_DBG_INPQ_PAYLOAD0					(FXR_TX_DMA_CSRS + 0x000000000808)
#define FXR_TXDMA_DBG_INPQ_PAYLOAD0_RESETCSR				0x0000000000000000ull
#define FXR_TXDMA_DBG_INPQ_PAYLOAD0_DATA_SHIFT				0
#define FXR_TXDMA_DBG_INPQ_PAYLOAD0_DATA_MASK				0xFFFFFFFFFFFFFFFFull
#define FXR_TXDMA_DBG_INPQ_PAYLOAD0_DATA_SMASK				0xFFFFFFFFFFFFFFFFull
/*
* Table #86 of fxr_top - TXDMA_DBG_INPQ_PAYLOAD1
* This CSR contains bits 127:64 of data payload for #%%#TXDMA_DBG_INPQ_CTRL#%%#.
*/
#define FXR_TXDMA_DBG_INPQ_PAYLOAD1					(FXR_TX_DMA_CSRS + 0x000000000810)
#define FXR_TXDMA_DBG_INPQ_PAYLOAD1_RESETCSR				0x0000000000000000ull
#define FXR_TXDMA_DBG_INPQ_PAYLOAD1_DATA_SHIFT				0
#define FXR_TXDMA_DBG_INPQ_PAYLOAD1_DATA_MASK				0xFFFFFFFFFFFFFFFFull
#define FXR_TXDMA_DBG_INPQ_PAYLOAD1_DATA_SMASK				0xFFFFFFFFFFFFFFFFull
/*
* Table #87 of fxr_top - TXDMA_DBG_INPQ_PAYLOAD2
* This CSR contains bits 191:128 of data payload for #%%#TXDMA_DBG_INPQ_CTRL#%%#.
*/
#define FXR_TXDMA_DBG_INPQ_PAYLOAD2					(FXR_TX_DMA_CSRS + 0x000000000818)
#define FXR_TXDMA_DBG_INPQ_PAYLOAD2_RESETCSR				0x0000000000000000ull
#define FXR_TXDMA_DBG_INPQ_PAYLOAD2_DATA_SHIFT				0
#define FXR_TXDMA_DBG_INPQ_PAYLOAD2_DATA_MASK				0xFFFFFFFFFFFFFFFFull
#define FXR_TXDMA_DBG_INPQ_PAYLOAD2_DATA_SMASK				0xFFFFFFFFFFFFFFFFull
/*
* Table #88 of fxr_top - TXDMA_DBG_INPQ_PAYLOAD3
* This CSR contains bits 255:191 of data payload for #%%#TXDMA_DBG_INPQ_CTRL#%%#.
*/
#define FXR_TXDMA_DBG_INPQ_PAYLOAD3					(FXR_TX_DMA_CSRS + 0x000000000820)
#define FXR_TXDMA_DBG_INPQ_PAYLOAD3_RESETCSR				0x0000000000000000ull
#define FXR_TXDMA_DBG_INPQ_PAYLOAD3_DATA_SHIFT				0
#define FXR_TXDMA_DBG_INPQ_PAYLOAD3_DATA_MASK				0xFFFFFFFFFFFFFFFFull
#define FXR_TXDMA_DBG_INPQ_PAYLOAD3_DATA_SMASK				0xFFFFFFFFFFFFFFFFull
/*
* Table #89 of fxr_top - TXDMA_DBG_INPQ_PAYLOAD4
* This CSR contains bits 299:256 of data payload for #%%#TXDMA_DBG_INPQ_CTRL#%%#.
*/
#define FXR_TXDMA_DBG_INPQ_PAYLOAD4					(FXR_TX_DMA_CSRS + 0x000000000828)
#define FXR_TXDMA_DBG_INPQ_PAYLOAD4_RESETCSR				0x0000000000000000ull
#define FXR_TXDMA_DBG_INPQ_PAYLOAD4_RESERVED_63_44_SHIFT		44
#define FXR_TXDMA_DBG_INPQ_PAYLOAD4_RESERVED_63_44_MASK			0xFFFFFull
#define FXR_TXDMA_DBG_INPQ_PAYLOAD4_RESERVED_63_44_SMASK		0xFFFFF00000000000ull
#define FXR_TXDMA_DBG_INPQ_PAYLOAD4_DATA_SHIFT				0
#define FXR_TXDMA_DBG_INPQ_PAYLOAD4_DATA_MASK				0xFFFFFFFFFFFull
#define FXR_TXDMA_DBG_INPQ_PAYLOAD4_DATA_SMASK				0xFFFFFFFFFFFull
/*
* Table #90 of fxr_top - TXDMA_DBG_INPQ_ECC
* This CSR contains the ECC fields for #%%#TXDMA_DBG_INPQ_CTRL#%%#.
*/
#define FXR_TXDMA_DBG_INPQ_ECC						(FXR_TX_DMA_CSRS + 0x000000000830)
#define FXR_TXDMA_DBG_INPQ_ECC_RESETCSR					0x0000000000000000ull
#define FXR_TXDMA_DBG_INPQ_ECC_RESERVED_63_39_SHIFT			39
#define FXR_TXDMA_DBG_INPQ_ECC_RESERVED_63_39_MASK			0x1FFFFFFull
#define FXR_TXDMA_DBG_INPQ_ECC_RESERVED_63_39_SMASK			0xFFFFFF8000000000ull
#define FXR_TXDMA_DBG_INPQ_ECC_ECC4_SHIFT				32
#define FXR_TXDMA_DBG_INPQ_ECC_ECC4_MASK				0x7Full
#define FXR_TXDMA_DBG_INPQ_ECC_ECC4_SMASK				0x7F00000000ull
#define FXR_TXDMA_DBG_INPQ_ECC_ECC3_SHIFT				24
#define FXR_TXDMA_DBG_INPQ_ECC_ECC3_MASK				0xFFull
#define FXR_TXDMA_DBG_INPQ_ECC_ECC3_SMASK				0xFF000000ull
#define FXR_TXDMA_DBG_INPQ_ECC_ECC2_SHIFT				16
#define FXR_TXDMA_DBG_INPQ_ECC_ECC2_MASK				0xFFull
#define FXR_TXDMA_DBG_INPQ_ECC_ECC2_SMASK				0xFF0000ull
#define FXR_TXDMA_DBG_INPQ_ECC_ECC1_SHIFT				8
#define FXR_TXDMA_DBG_INPQ_ECC_ECC1_MASK				0xFFull
#define FXR_TXDMA_DBG_INPQ_ECC_ECC1_SMASK				0xFF00ull
#define FXR_TXDMA_DBG_INPQ_ECC_ECC0_SHIFT				0
#define FXR_TXDMA_DBG_INPQ_ECC_ECC0_MASK				0xFFull
#define FXR_TXDMA_DBG_INPQ_ECC_ECC0_SMASK				0xFFull
/*
* Table #91 of fxr_top - TXDMA_DBG_XLATE_CTRL
* This CSR allows indirect access to the TXDMA translation request FIFOs. These 
* arrays should not be written to during normal operation, doing so may cause 
* silent data corruption. This register is for debug use only. Note that this 
* array is 149 bits wide. The data and ECC for the read or write to this 
* register is contained in the next four CSRs.
*/
#define FXR_TXDMA_DBG_XLATE_CTRL					(FXR_TX_DMA_CSRS + 0x000000000838)
#define FXR_TXDMA_DBG_XLATE_CTRL_RESETCSR				0x0040000000000000ull
#define FXR_TXDMA_DBG_XLATE_CTRL_VALID_SHIFT				63
#define FXR_TXDMA_DBG_XLATE_CTRL_VALID_MASK				0x1ull
#define FXR_TXDMA_DBG_XLATE_CTRL_VALID_SMASK				0x8000000000000000ull
#define FXR_TXDMA_DBG_XLATE_CTRL_WRITE_SHIFT				62
#define FXR_TXDMA_DBG_XLATE_CTRL_WRITE_MASK				0x1ull
#define FXR_TXDMA_DBG_XLATE_CTRL_WRITE_SMASK				0x4000000000000000ull
#define FXR_TXDMA_DBG_XLATE_CTRL_ECC_SHIFT				61
#define FXR_TXDMA_DBG_XLATE_CTRL_ECC_MASK				0x1ull
#define FXR_TXDMA_DBG_XLATE_CTRL_ECC_SMASK				0x2000000000000000ull
#define FXR_TXDMA_DBG_XLATE_CTRL_RESERVED_60_SHIFT			60
#define FXR_TXDMA_DBG_XLATE_CTRL_RESERVED_60_MASK			0x1ull
#define FXR_TXDMA_DBG_XLATE_CTRL_RESERVED_60_SMASK			0x1000000000000000ull
#define FXR_TXDMA_DBG_XLATE_CTRL_PAYLOAD_REGS_SHIFT			52
#define FXR_TXDMA_DBG_XLATE_CTRL_PAYLOAD_REGS_MASK			0xFFull
#define FXR_TXDMA_DBG_XLATE_CTRL_PAYLOAD_REGS_SMASK			0xFF0000000000000ull
#define FXR_TXDMA_DBG_XLATE_CTRL_RESERVED_51_5_SHIFT			5
#define FXR_TXDMA_DBG_XLATE_CTRL_RESERVED_51_5_MASK			0x7FFFFFFFFFFFull
#define FXR_TXDMA_DBG_XLATE_CTRL_RESERVED_51_5_SMASK			0xFFFFFFFFFFFE0ull
#define FXR_TXDMA_DBG_XLATE_CTRL_ADDRESS_SHIFT				0
#define FXR_TXDMA_DBG_XLATE_CTRL_ADDRESS_MASK				0x1Full
#define FXR_TXDMA_DBG_XLATE_CTRL_ADDRESS_SMASK				0x1Full
/*
* Table #92 of fxr_top - TXDMA_DBG_XLATE_PAYLOAD0
* This CSR contains bits 63:0 of data payload for #%%#TXDMA_DBG_XLATE_CTRL#%%#.
*/
#define FXR_TXDMA_DBG_XLATE_PAYLOAD0					(FXR_TX_DMA_CSRS + 0x000000000840)
#define FXR_TXDMA_DBG_XLATE_PAYLOAD0_RESETCSR				0x0000000000000000ull
#define FXR_TXDMA_DBG_XLATE_PAYLOAD0_DATA_SHIFT				0
#define FXR_TXDMA_DBG_XLATE_PAYLOAD0_DATA_MASK				0xFFFFFFFFFFFFFFFFull
#define FXR_TXDMA_DBG_XLATE_PAYLOAD0_DATA_SMASK				0xFFFFFFFFFFFFFFFFull
/*
* Table #93 of fxr_top - TXDMA_DBG_XLATE_PAYLOAD1
* This CSR contains bits 127:64 of data payload for #%%#TXDMA_DBG_XLATE_CTRL#%%#.
*/
#define FXR_TXDMA_DBG_XLATE_PAYLOAD1					(FXR_TX_DMA_CSRS + 0x000000000848)
#define FXR_TXDMA_DBG_XLATE_PAYLOAD1_RESETCSR				0x0000000000000000ull
#define FXR_TXDMA_DBG_XLATE_PAYLOAD1_DATA_SHIFT				0
#define FXR_TXDMA_DBG_XLATE_PAYLOAD1_DATA_MASK				0xFFFFFFFFFFFFFFFFull
#define FXR_TXDMA_DBG_XLATE_PAYLOAD1_DATA_SMASK				0xFFFFFFFFFFFFFFFFull
/*
* Table #94 of fxr_top - TXDMA_DBG_XLATE_PAYLOAD2
* This CSR contains bits 132:128 of data payload for #%%#TXDMA_DBG_XLATE_CTRL#%%#.
*/
#define FXR_TXDMA_DBG_XLATE_PAYLOAD2					(FXR_TX_DMA_CSRS + 0x000000000850)
#define FXR_TXDMA_DBG_XLATE_PAYLOAD2_RESETCSR				0x0000000000000000ull
#define FXR_TXDMA_DBG_XLATE_PAYLOAD2_RESERVED_63_5_SHIFT		5
#define FXR_TXDMA_DBG_XLATE_PAYLOAD2_RESERVED_63_5_MASK			0x7FFFFFFFFFFFFFFull
#define FXR_TXDMA_DBG_XLATE_PAYLOAD2_RESERVED_63_5_SMASK		0xFFFFFFFFFFFFFFE0ull
#define FXR_TXDMA_DBG_XLATE_PAYLOAD2_DATA_SHIFT				0
#define FXR_TXDMA_DBG_XLATE_PAYLOAD2_DATA_MASK				0x1Full
#define FXR_TXDMA_DBG_XLATE_PAYLOAD2_DATA_SMASK				0x1Full
/*
* Table #95 of fxr_top - TXDMA_DBG_XLATE_ECC
* This CSR contains the ECC fields for #%%#TXDMA_DBG_XLATE_CTRL#%%#.
*/
#define FXR_TXDMA_DBG_XLATE_ECC						(FXR_TX_DMA_CSRS + 0x000000000858)
#define FXR_TXDMA_DBG_XLATE_ECC_RESETCSR				0x0000000000000000ull
#define FXR_TXDMA_DBG_XLATE_ECC_RESERVED_63_16_SHIFT			16
#define FXR_TXDMA_DBG_XLATE_ECC_RESERVED_63_16_MASK			0xFFFFFFFFFFFFull
#define FXR_TXDMA_DBG_XLATE_ECC_RESERVED_63_16_SMASK			0xFFFFFFFFFFFF0000ull
#define FXR_TXDMA_DBG_XLATE_ECC_ECC1_SHIFT				8
#define FXR_TXDMA_DBG_XLATE_ECC_ECC1_MASK				0xFFull
#define FXR_TXDMA_DBG_XLATE_ECC_ECC1_SMASK				0xFF00ull
#define FXR_TXDMA_DBG_XLATE_ECC_ECC0_SHIFT				0
#define FXR_TXDMA_DBG_XLATE_ECC_ECC0_MASK				0xFFull
#define FXR_TXDMA_DBG_XLATE_ECC_ECC0_SMASK				0xFFull
/*
* Table #96 of fxr_top - TXDMA_DBG_ORB_CTRL
* This CSR allows indirect access to the TXDMA ORB array. This array should not 
* be written to during normal operation, doing so may cause silent data 
* corruption. This register is for debug use only. Note that this array is 72 
* bits wide. The data and ECC for the read or write to this register is 
* contained in the next three CSRs.
*/
#define FXR_TXDMA_DBG_ORB_CTRL						(FXR_TX_DMA_CSRS + 0x000000000860)
#define FXR_TXDMA_DBG_ORB_CTRL_RESETCSR					0x0020000000000000ull
#define FXR_TXDMA_DBG_ORB_CTRL_VALID_SHIFT				63
#define FXR_TXDMA_DBG_ORB_CTRL_VALID_MASK				0x1ull
#define FXR_TXDMA_DBG_ORB_CTRL_VALID_SMASK				0x8000000000000000ull
#define FXR_TXDMA_DBG_ORB_CTRL_WRITE_SHIFT				62
#define FXR_TXDMA_DBG_ORB_CTRL_WRITE_MASK				0x1ull
#define FXR_TXDMA_DBG_ORB_CTRL_WRITE_SMASK				0x4000000000000000ull
#define FXR_TXDMA_DBG_ORB_CTRL_ECC_SHIFT				61
#define FXR_TXDMA_DBG_ORB_CTRL_ECC_MASK					0x1ull
#define FXR_TXDMA_DBG_ORB_CTRL_ECC_SMASK				0x2000000000000000ull
#define FXR_TXDMA_DBG_ORB_CTRL_RESERVED_60_SHIFT			60
#define FXR_TXDMA_DBG_ORB_CTRL_RESERVED_60_MASK				0x1ull
#define FXR_TXDMA_DBG_ORB_CTRL_RESERVED_60_SMASK			0x1000000000000000ull
#define FXR_TXDMA_DBG_ORB_CTRL_PAYLOAD_REGS_SHIFT			52
#define FXR_TXDMA_DBG_ORB_CTRL_PAYLOAD_REGS_MASK			0xFFull
#define FXR_TXDMA_DBG_ORB_CTRL_PAYLOAD_REGS_SMASK			0xFF0000000000000ull
#define FXR_TXDMA_DBG_ORB_CTRL_RESERVED_51_9_SHIFT			9
#define FXR_TXDMA_DBG_ORB_CTRL_RESERVED_51_9_MASK			0x7FFFFFFFFFFull
#define FXR_TXDMA_DBG_ORB_CTRL_RESERVED_51_9_SMASK			0xFFFFFFFFFFE00ull
#define FXR_TXDMA_DBG_ORB_CTRL_ADDRESS_SHIFT				0
#define FXR_TXDMA_DBG_ORB_CTRL_ADDRESS_MASK				0x1FFull
#define FXR_TXDMA_DBG_ORB_CTRL_ADDRESS_SMASK				0x1FFull
/*
* Table #97 of fxr_top - TXDMA_DBG_ORB_PAYLOAD0
* This CSR contains bits 63:0 of data payload for #%%#TXDMA_DBG_ORB_CTRL#%%#.
*/
#define FXR_TXDMA_DBG_ORB_PAYLOAD0					(FXR_TX_DMA_CSRS + 0x000000000868)
#define FXR_TXDMA_DBG_ORB_PAYLOAD0_RESETCSR				0x0000000000000000ull
#define FXR_TXDMA_DBG_ORB_PAYLOAD0_DATA_SHIFT				0
#define FXR_TXDMA_DBG_ORB_PAYLOAD0_DATA_MASK				0xFFFFFFFFFFFFFFFFull
#define FXR_TXDMA_DBG_ORB_PAYLOAD0_DATA_SMASK				0xFFFFFFFFFFFFFFFFull
/*
* Table #98 of fxr_top - TXDMA_DBG_ORB_ECC
* This CSR contains the ECC field for #%%#TXDMA_DBG_ORB_CTRL#%%#.
*/
#define FXR_TXDMA_DBG_ORB_ECC						(FXR_TX_DMA_CSRS + 0x000000000870)
#define FXR_TXDMA_DBG_ORB_ECC_RESETCSR					0x0000000000000000ull
#define FXR_TXDMA_DBG_ORB_ECC_RESERVED_63_8_SHIFT			8
#define FXR_TXDMA_DBG_ORB_ECC_RESERVED_63_8_MASK			0xFFFFFFFFFFFFFFull
#define FXR_TXDMA_DBG_ORB_ECC_RESERVED_63_8_SMASK			0xFFFFFFFFFFFFFF00ull
#define FXR_TXDMA_DBG_ORB_ECC_ECC_SHIFT					0
#define FXR_TXDMA_DBG_ORB_ECC_ECC_MASK					0xFFull
#define FXR_TXDMA_DBG_ORB_ECC_ECC_SMASK					0xFFull
/*
* Table #99 of fxr_top - TXDMA_DBG_HDR_CTRL
* This CSR allows indirect access to the TXDMA header FIFOs. These FIFOs should 
* not be written to during normal operation, doing so may cause silent data 
* corruption. This register is for debug use only. Note that this array is 341 
* bits wide. The data and ECC for the read or write to this register is 
* contained in the next six CSRs.
*/
#define FXR_TXDMA_DBG_HDR_CTRL						(FXR_TX_DMA_CSRS + 0x000000000878)
#define FXR_TXDMA_DBG_HDR_CTRL_RESETCSR					0x0060000000000000ull
#define FXR_TXDMA_DBG_HDR_CTRL_VALID_SHIFT				63
#define FXR_TXDMA_DBG_HDR_CTRL_VALID_MASK				0x1ull
#define FXR_TXDMA_DBG_HDR_CTRL_VALID_SMASK				0x8000000000000000ull
#define FXR_TXDMA_DBG_HDR_CTRL_WRITE_SHIFT				62
#define FXR_TXDMA_DBG_HDR_CTRL_WRITE_MASK				0x1ull
#define FXR_TXDMA_DBG_HDR_CTRL_WRITE_SMASK				0x4000000000000000ull
#define FXR_TXDMA_DBG_HDR_CTRL_ECC_SHIFT				61
#define FXR_TXDMA_DBG_HDR_CTRL_ECC_MASK					0x1ull
#define FXR_TXDMA_DBG_HDR_CTRL_ECC_SMASK				0x2000000000000000ull
#define FXR_TXDMA_DBG_HDR_CTRL_RESERVED_60_SHIFT			60
#define FXR_TXDMA_DBG_HDR_CTRL_RESERVED_60_MASK				0x1ull
#define FXR_TXDMA_DBG_HDR_CTRL_RESERVED_60_SMASK			0x1000000000000000ull
#define FXR_TXDMA_DBG_HDR_CTRL_PAYLOAD_REGS_SHIFT			52
#define FXR_TXDMA_DBG_HDR_CTRL_PAYLOAD_REGS_MASK			0xFFull
#define FXR_TXDMA_DBG_HDR_CTRL_PAYLOAD_REGS_SMASK			0xFF0000000000000ull
#define FXR_TXDMA_DBG_HDR_CTRL_RESERVED_51_6_SHIFT			6
#define FXR_TXDMA_DBG_HDR_CTRL_RESERVED_51_6_MASK			0x3FFFFFFFFFFFull
#define FXR_TXDMA_DBG_HDR_CTRL_RESERVED_51_6_SMASK			0xFFFFFFFFFFFC0ull
#define FXR_TXDMA_DBG_HDR_CTRL_ADDRESS_SHIFT				0
#define FXR_TXDMA_DBG_HDR_CTRL_ADDRESS_MASK				0x3Full
#define FXR_TXDMA_DBG_HDR_CTRL_ADDRESS_SMASK				0x3Full
/*
* Table #100 of fxr_top - TXDMA_DBG_HDR_PAYLOAD0
* This CSR contains bits 63:0 of data payload for #%%#TXDMA_DBG_HDR_CTRL#%%#.
*/
#define FXR_TXDMA_DBG_HDR_PAYLOAD0					(FXR_TX_DMA_CSRS + 0x000000000880)
#define FXR_TXDMA_DBG_HDR_PAYLOAD0_RESETCSR				0x0000000000000000ull
#define FXR_TXDMA_DBG_HDR_PAYLOAD0_DATA_SHIFT				0
#define FXR_TXDMA_DBG_HDR_PAYLOAD0_DATA_MASK				0xFFFFFFFFFFFFFFFFull
#define FXR_TXDMA_DBG_HDR_PAYLOAD0_DATA_SMASK				0xFFFFFFFFFFFFFFFFull
/*
* Table #101 of fxr_top - TXDMA_DBG_HDR_PAYLOAD1
* This CSR contains bits 127:64 of data payload for #%%#TXDMA_DBG_HDR_CTRL#%%#.
*/
#define FXR_TXDMA_DBG_HDR_PAYLOAD1					(FXR_TX_DMA_CSRS + 0x000000000888)
#define FXR_TXDMA_DBG_HDR_PAYLOAD1_RESETCSR				0x0000000000000000ull
#define FXR_TXDMA_DBG_HDR_PAYLOAD1_DATA_SHIFT				0
#define FXR_TXDMA_DBG_HDR_PAYLOAD1_DATA_MASK				0xFFFFFFFFFFFFFFFFull
#define FXR_TXDMA_DBG_HDR_PAYLOAD1_DATA_SMASK				0xFFFFFFFFFFFFFFFFull
/*
* Table #102 of fxr_top - TXDMA_DBG_HDR_PAYLOAD2
* This CSR contains bits 191:128 of data payload for #%%#TXDMA_DBG_HDR_CTRL#%%#.
*/
#define FXR_TXDMA_DBG_HDR_PAYLOAD2					(FXR_TX_DMA_CSRS + 0x000000000890)
#define FXR_TXDMA_DBG_HDR_PAYLOAD2_RESETCSR				0x0000000000000000ull
#define FXR_TXDMA_DBG_HDR_PAYLOAD2_DATA_SHIFT				0
#define FXR_TXDMA_DBG_HDR_PAYLOAD2_DATA_MASK				0xFFFFFFFFFFFFFFFFull
#define FXR_TXDMA_DBG_HDR_PAYLOAD2_DATA_SMASK				0xFFFFFFFFFFFFFFFFull
/*
* Table #103 of fxr_top - TXDMA_DBG_HDR_PAYLOAD3
* This CSR contains bits 255:191 of data payload for #%%#TXDMA_DBG_HDR_CTRL#%%#.
*/
#define FXR_TXDMA_DBG_HDR_PAYLOAD3					(FXR_TX_DMA_CSRS + 0x000000000898)
#define FXR_TXDMA_DBG_HDR_PAYLOAD3_RESETCSR				0x0000000000000000ull
#define FXR_TXDMA_DBG_HDR_PAYLOAD3_DATA_SHIFT				0
#define FXR_TXDMA_DBG_HDR_PAYLOAD3_DATA_MASK				0xFFFFFFFFFFFFFFFFull
#define FXR_TXDMA_DBG_HDR_PAYLOAD3_DATA_SMASK				0xFFFFFFFFFFFFFFFFull
/*
* Table #104 of fxr_top - TXDMA_DBG_HDR_PAYLOAD4
* This CSR contains bits 301:256 of data payload for #%%#TXDMA_DBG_HDR_CTRL#%%#.
*/
#define FXR_TXDMA_DBG_HDR_PAYLOAD4					(FXR_TX_DMA_CSRS + 0x0000000008A0)
#define FXR_TXDMA_DBG_HDR_PAYLOAD4_RESETCSR				0x0000000000000000ull
#define FXR_TXDMA_DBG_HDR_PAYLOAD4_RESERVED_63_46_SHIFT			46
#define FXR_TXDMA_DBG_HDR_PAYLOAD4_RESERVED_63_46_MASK			0x3FFFFull
#define FXR_TXDMA_DBG_HDR_PAYLOAD4_RESERVED_63_46_SMASK			0xFFFFC00000000000ull
#define FXR_TXDMA_DBG_HDR_PAYLOAD4_DATA_SHIFT				0
#define FXR_TXDMA_DBG_HDR_PAYLOAD4_DATA_MASK				0x3FFFFFFFFFFFull
#define FXR_TXDMA_DBG_HDR_PAYLOAD4_DATA_SMASK				0x3FFFFFFFFFFFull
/*
* Table #105 of fxr_top - TXDMA_DBG_HDR_ECC
* This CSR contains the ECC fields for #%%#TXDMA_DBG_HDR_CTRL#%%#.
*/
#define FXR_TXDMA_DBG_HDR_ECC						(FXR_TX_DMA_CSRS + 0x0000000008A8)
#define FXR_TXDMA_DBG_HDR_ECC_RESETCSR					0x0000000000000000ull
#define FXR_TXDMA_DBG_HDR_ECC_RESERVED_63_39_SHIFT			39
#define FXR_TXDMA_DBG_HDR_ECC_RESERVED_63_39_MASK			0x1FFFFFFull
#define FXR_TXDMA_DBG_HDR_ECC_RESERVED_63_39_SMASK			0xFFFFFF8000000000ull
#define FXR_TXDMA_DBG_HDR_ECC_ECC4_SHIFT				32
#define FXR_TXDMA_DBG_HDR_ECC_ECC4_MASK					0x7Full
#define FXR_TXDMA_DBG_HDR_ECC_ECC4_SMASK				0x7F00000000ull
#define FXR_TXDMA_DBG_HDR_ECC_ECC3_SHIFT				24
#define FXR_TXDMA_DBG_HDR_ECC_ECC3_MASK					0xFFull
#define FXR_TXDMA_DBG_HDR_ECC_ECC3_SMASK				0xFF000000ull
#define FXR_TXDMA_DBG_HDR_ECC_ECC2_SHIFT				16
#define FXR_TXDMA_DBG_HDR_ECC_ECC2_MASK					0xFFull
#define FXR_TXDMA_DBG_HDR_ECC_ECC2_SMASK				0xFF0000ull
#define FXR_TXDMA_DBG_HDR_ECC_ECC1_SHIFT				8
#define FXR_TXDMA_DBG_HDR_ECC_ECC1_MASK					0xFFull
#define FXR_TXDMA_DBG_HDR_ECC_ECC1_SMASK				0xFF00ull
#define FXR_TXDMA_DBG_HDR_ECC_ECC0_SHIFT				0
#define FXR_TXDMA_DBG_HDR_ECC_ECC0_MASK					0xFFull
#define FXR_TXDMA_DBG_HDR_ECC_ECC0_SMASK				0xFFull
/*
* Table #106 of fxr_top - TXDMA_DBG_PKT_CTRL
* This CSR allows indirect access to the TXDMA packet buffer arrays. These 
* arrays should not be written to during normal operation, doing so may cause 
* silent data corruption. This register is for debug use only. Note that this 
* array is 288 bits wide. The data and ECC for the read or write to this 
* register is contained in the next five CSRs.
*/
#define FXR_TXDMA_DBG_PKT_CTRL						(FXR_TX_DMA_CSRS + 0x0000000008B0)
#define FXR_TXDMA_DBG_PKT_CTRL_RESETCSR					0x0050000000000000ull
#define FXR_TXDMA_DBG_PKT_CTRL_VALID_SHIFT				63
#define FXR_TXDMA_DBG_PKT_CTRL_VALID_MASK				0x1ull
#define FXR_TXDMA_DBG_PKT_CTRL_VALID_SMASK				0x8000000000000000ull
#define FXR_TXDMA_DBG_PKT_CTRL_WRITE_SHIFT				62
#define FXR_TXDMA_DBG_PKT_CTRL_WRITE_MASK				0x1ull
#define FXR_TXDMA_DBG_PKT_CTRL_WRITE_SMASK				0x4000000000000000ull
#define FXR_TXDMA_DBG_PKT_CTRL_ECC_SHIFT				61
#define FXR_TXDMA_DBG_PKT_CTRL_ECC_MASK					0x1ull
#define FXR_TXDMA_DBG_PKT_CTRL_ECC_SMASK				0x2000000000000000ull
#define FXR_TXDMA_DBG_PKT_CTRL_RESERVED_60_SHIFT			60
#define FXR_TXDMA_DBG_PKT_CTRL_RESERVED_60_MASK				0x1ull
#define FXR_TXDMA_DBG_PKT_CTRL_RESERVED_60_SMASK			0x1000000000000000ull
#define FXR_TXDMA_DBG_PKT_CTRL_PAYLOAD_REGS_SHIFT			52
#define FXR_TXDMA_DBG_PKT_CTRL_PAYLOAD_REGS_MASK			0xFFull
#define FXR_TXDMA_DBG_PKT_CTRL_PAYLOAD_REGS_SMASK			0xFF0000000000000ull
#define FXR_TXDMA_DBG_PKT_CTRL_RESERVED_51_14_SHIFT			14
#define FXR_TXDMA_DBG_PKT_CTRL_RESERVED_51_14_MASK			0x3FFFFFFFFFull
#define FXR_TXDMA_DBG_PKT_CTRL_RESERVED_51_14_SMASK			0xFFFFFFFFFC000ull
#define FXR_TXDMA_DBG_PKT_CTRL_ADDRESS_SHIFT				0
#define FXR_TXDMA_DBG_PKT_CTRL_ADDRESS_MASK				0x3FFFull
#define FXR_TXDMA_DBG_PKT_CTRL_ADDRESS_SMASK				0x3FFFull
/*
* Table #107 of fxr_top - TXDMA_DBG_PKT_PAYLOAD0
* This CSR contains bits 63:0 of data payload for #%%#TXDMA_DBG_PKT_CTRL#%%#.
*/
#define FXR_TXDMA_DBG_PKT_PAYLOAD0					(FXR_TX_DMA_CSRS + 0x0000000008B8)
#define FXR_TXDMA_DBG_PKT_PAYLOAD0_RESETCSR				0x0000000000000000ull
#define FXR_TXDMA_DBG_PKT_PAYLOAD0_DATA_SHIFT				0
#define FXR_TXDMA_DBG_PKT_PAYLOAD0_DATA_MASK				0xFFFFFFFFFFFFFFFFull
#define FXR_TXDMA_DBG_PKT_PAYLOAD0_DATA_SMASK				0xFFFFFFFFFFFFFFFFull
/*
* Table #108 of fxr_top - TXDMA_DBG_PKT_PAYLOAD1
* This CSR contains bits 127:64 of data payload for #%%#TXDMA_DBG_PKT_CTRL#%%#.
*/
#define FXR_TXDMA_DBG_PKT_PAYLOAD1					(FXR_TX_DMA_CSRS + 0x0000000008C0)
#define FXR_TXDMA_DBG_PKT_PAYLOAD1_RESETCSR				0x0000000000000000ull
#define FXR_TXDMA_DBG_PKT_PAYLOAD1_DATA_SHIFT				0
#define FXR_TXDMA_DBG_PKT_PAYLOAD1_DATA_MASK				0xFFFFFFFFFFFFFFFFull
#define FXR_TXDMA_DBG_PKT_PAYLOAD1_DATA_SMASK				0xFFFFFFFFFFFFFFFFull
/*
* Table #109 of fxr_top - TXDMA_DBG_PKT_PAYLOAD2
* This CSR contains bits 191:128 of data payload for #%%#TXDMA_DBG_PKT_CTRL#%%#.
*/
#define FXR_TXDMA_DBG_PKT_PAYLOAD2					(FXR_TX_DMA_CSRS + 0x0000000008C8)
#define FXR_TXDMA_DBG_PKT_PAYLOAD2_RESETCSR				0x0000000000000000ull
#define FXR_TXDMA_DBG_PKT_PAYLOAD2_DATA_SHIFT				0
#define FXR_TXDMA_DBG_PKT_PAYLOAD2_DATA_MASK				0xFFFFFFFFFFFFFFFFull
#define FXR_TXDMA_DBG_PKT_PAYLOAD2_DATA_SMASK				0xFFFFFFFFFFFFFFFFull
/*
* Table #110 of fxr_top - TXDMA_DBG_PKT_PAYLOAD3
* This CSR contains bits 255:191 of data payload for #%%#TXDMA_DBG_PKT_CTRL#%%#.
*/
#define FXR_TXDMA_DBG_PKT_PAYLOAD3					(FXR_TX_DMA_CSRS + 0x0000000008D0)
#define FXR_TXDMA_DBG_PKT_PAYLOAD3_RESETCSR				0x0000000000000000ull
#define FXR_TXDMA_DBG_PKT_PAYLOAD3_DATA_SHIFT				0
#define FXR_TXDMA_DBG_PKT_PAYLOAD3_DATA_MASK				0xFFFFFFFFFFFFFFFFull
#define FXR_TXDMA_DBG_PKT_PAYLOAD3_DATA_SMASK				0xFFFFFFFFFFFFFFFFull
/*
* Table #111 of fxr_top - TXDMA_DBG_PKT_ECC
* This CSR contains the ECC fields for #%%#TXDMA_DBG_PKT_CTRL#%%#.
*/
#define FXR_TXDMA_DBG_PKT_ECC						(FXR_TX_DMA_CSRS + 0x0000000008D8)
#define FXR_TXDMA_DBG_PKT_ECC_RESETCSR					0x0000000000000000ull
#define FXR_TXDMA_DBG_PKT_ECC_RESERVED_63_32_SHIFT			32
#define FXR_TXDMA_DBG_PKT_ECC_RESERVED_63_32_MASK			0xFFFFFFFFull
#define FXR_TXDMA_DBG_PKT_ECC_RESERVED_63_32_SMASK			0xFFFFFFFF00000000ull
#define FXR_TXDMA_DBG_PKT_ECC_ECC3_SHIFT				24
#define FXR_TXDMA_DBG_PKT_ECC_ECC3_MASK					0xFFull
#define FXR_TXDMA_DBG_PKT_ECC_ECC3_SMASK				0xFF000000ull
#define FXR_TXDMA_DBG_PKT_ECC_ECC2_SHIFT				16
#define FXR_TXDMA_DBG_PKT_ECC_ECC2_MASK					0xFFull
#define FXR_TXDMA_DBG_PKT_ECC_ECC2_SMASK				0xFF0000ull
#define FXR_TXDMA_DBG_PKT_ECC_ECC1_SHIFT				8
#define FXR_TXDMA_DBG_PKT_ECC_ECC1_MASK					0xFFull
#define FXR_TXDMA_DBG_PKT_ECC_ECC1_SMASK				0xFF00ull
#define FXR_TXDMA_DBG_PKT_ECC_ECC0_SHIFT				0
#define FXR_TXDMA_DBG_PKT_ECC_ECC0_MASK					0xFFull
#define FXR_TXDMA_DBG_PKT_ECC_ECC0_SMASK				0xFFull
/*
* Table #112 of fxr_top - TXDMA_DBG_RSP_CTRL
* This CSR allows indirect access to the TXDMA response acknowledge arrays. 
* These arrays should not be written to during normal operation, doing so may 
* cause silent data corruption. This register is for debug use only. Note that 
* this array is 288 bits wide. The data and ECC for the read or write to this 
* register is contained in the next five CSRs.
*/
#define FXR_TXDMA_DBG_RSP_CTRL						(FXR_TX_DMA_CSRS + 0x0000000008E0)
#define FXR_TXDMA_DBG_RSP_CTRL_RESETCSR					0x0050000000000000ull
#define FXR_TXDMA_DBG_RSP_CTRL_VALID_SHIFT				63
#define FXR_TXDMA_DBG_RSP_CTRL_VALID_MASK				0x1ull
#define FXR_TXDMA_DBG_RSP_CTRL_VALID_SMASK				0x8000000000000000ull
#define FXR_TXDMA_DBG_RSP_CTRL_WRITE_SHIFT				62
#define FXR_TXDMA_DBG_RSP_CTRL_WRITE_MASK				0x1ull
#define FXR_TXDMA_DBG_RSP_CTRL_WRITE_SMASK				0x4000000000000000ull
#define FXR_TXDMA_DBG_RSP_CTRL_ECC_SHIFT				61
#define FXR_TXDMA_DBG_RSP_CTRL_ECC_MASK					0x1ull
#define FXR_TXDMA_DBG_RSP_CTRL_ECC_SMASK				0x2000000000000000ull
#define FXR_TXDMA_DBG_RSP_CTRL_RESERVED_60_SHIFT			60
#define FXR_TXDMA_DBG_RSP_CTRL_RESERVED_60_MASK				0x1ull
#define FXR_TXDMA_DBG_RSP_CTRL_RESERVED_60_SMASK			0x1000000000000000ull
#define FXR_TXDMA_DBG_RSP_CTRL_PAYLOAD_REGS_SHIFT			52
#define FXR_TXDMA_DBG_RSP_CTRL_PAYLOAD_REGS_MASK			0xFFull
#define FXR_TXDMA_DBG_RSP_CTRL_PAYLOAD_REGS_SMASK			0xFF0000000000000ull
#define FXR_TXDMA_DBG_RSP_CTRL_RESERVED_51_6_SHIFT			6
#define FXR_TXDMA_DBG_RSP_CTRL_RESERVED_51_6_MASK			0x3FFFFFFFFFFFull
#define FXR_TXDMA_DBG_RSP_CTRL_RESERVED_51_6_SMASK			0xFFFFFFFFFFFC0ull
#define FXR_TXDMA_DBG_RSP_CTRL_ADDRESS_SHIFT				0
#define FXR_TXDMA_DBG_RSP_CTRL_ADDRESS_MASK				0x3Full
#define FXR_TXDMA_DBG_RSP_CTRL_ADDRESS_SMASK				0x3Full
/*
* Table #113 of fxr_top - TXDMA_DBG_RSP_PAYLOAD0
* This CSR contains bits 63:0 of data payload for #%%#TXDMA_DBG_RSP_CTRL#%%#.
*/
#define FXR_TXDMA_DBG_RSP_PAYLOAD0					(FXR_TX_DMA_CSRS + 0x0000000008E8)
#define FXR_TXDMA_DBG_RSP_PAYLOAD0_RESETCSR				0x0000000000000000ull
#define FXR_TXDMA_DBG_RSP_PAYLOAD0_DATA_SHIFT				0
#define FXR_TXDMA_DBG_RSP_PAYLOAD0_DATA_MASK				0xFFFFFFFFFFFFFFFFull
#define FXR_TXDMA_DBG_RSP_PAYLOAD0_DATA_SMASK				0xFFFFFFFFFFFFFFFFull
/*
* Table #114 of fxr_top - TXDMA_DBG_RSP_PAYLOAD1
* This CSR contains bits 127:64 of data payload for #%%#TXDMA_DBG_RSP_CTRL#%%#.
*/
#define FXR_TXDMA_DBG_RSP_PAYLOAD1					(FXR_TX_DMA_CSRS + 0x0000000008F0)
#define FXR_TXDMA_DBG_RSP_PAYLOAD1_RESETCSR				0x0000000000000000ull
#define FXR_TXDMA_DBG_RSP_PAYLOAD1_DATA_SHIFT				0
#define FXR_TXDMA_DBG_RSP_PAYLOAD1_DATA_MASK				0xFFFFFFFFFFFFFFFFull
#define FXR_TXDMA_DBG_RSP_PAYLOAD1_DATA_SMASK				0xFFFFFFFFFFFFFFFFull
/*
* Table #115 of fxr_top - TXDMA_DBG_RSP_PAYLOAD2
* This CSR contains bits 191:128 of data payload for #%%#TXDMA_DBG_RSP_CTRL#%%#.
*/
#define FXR_TXDMA_DBG_RSP_PAYLOAD2					(FXR_TX_DMA_CSRS + 0x0000000008F8)
#define FXR_TXDMA_DBG_RSP_PAYLOAD2_RESETCSR				0x0000000000000000ull
#define FXR_TXDMA_DBG_RSP_PAYLOAD2_DATA_SHIFT				0
#define FXR_TXDMA_DBG_RSP_PAYLOAD2_DATA_MASK				0xFFFFFFFFFFFFFFFFull
#define FXR_TXDMA_DBG_RSP_PAYLOAD2_DATA_SMASK				0xFFFFFFFFFFFFFFFFull
/*
* Table #116 of fxr_top - TXDMA_DBG_RSP_PAYLOAD3
* This CSR contains bits 255:191 of data payload for #%%#TXDMA_DBG_RSP_CTRL#%%#.
*/
#define FXR_TXDMA_DBG_RSP_PAYLOAD3					(FXR_TX_DMA_CSRS + 0x000000000900)
#define FXR_TXDMA_DBG_RSP_PAYLOAD3_RESETCSR				0x0000000000000000ull
#define FXR_TXDMA_DBG_RSP_PAYLOAD3_DATA_SHIFT				0
#define FXR_TXDMA_DBG_RSP_PAYLOAD3_DATA_MASK				0xFFFFFFFFFFFFFFFFull
#define FXR_TXDMA_DBG_RSP_PAYLOAD3_DATA_SMASK				0xFFFFFFFFFFFFFFFFull
/*
* Table #117 of fxr_top - TXDMA_DBG_RSP_ECC
* This CSR contains the ECC fields for #%%#TXDMA_DBG_RSP_CTRL#%%#.
*/
#define FXR_TXDMA_DBG_RSP_ECC						(FXR_TX_DMA_CSRS + 0x000000000908)
#define FXR_TXDMA_DBG_RSP_ECC_RESETCSR					0x0000000000000000ull
#define FXR_TXDMA_DBG_RSP_ECC_RESERVED_63_32_SHIFT			32
#define FXR_TXDMA_DBG_RSP_ECC_RESERVED_63_32_MASK			0xFFFFFFFFull
#define FXR_TXDMA_DBG_RSP_ECC_RESERVED_63_32_SMASK			0xFFFFFFFF00000000ull
#define FXR_TXDMA_DBG_RSP_ECC_ECC3_SHIFT				24
#define FXR_TXDMA_DBG_RSP_ECC_ECC3_MASK					0xFFull
#define FXR_TXDMA_DBG_RSP_ECC_ECC3_SMASK				0xFF000000ull
#define FXR_TXDMA_DBG_RSP_ECC_ECC2_SHIFT				16
#define FXR_TXDMA_DBG_RSP_ECC_ECC2_MASK					0xFFull
#define FXR_TXDMA_DBG_RSP_ECC_ECC2_SMASK				0xFF0000ull
#define FXR_TXDMA_DBG_RSP_ECC_ECC1_SHIFT				8
#define FXR_TXDMA_DBG_RSP_ECC_ECC1_MASK					0xFFull
#define FXR_TXDMA_DBG_RSP_ECC_ECC1_SMASK				0xFF00ull
#define FXR_TXDMA_DBG_RSP_ECC_ECC0_SHIFT				0
#define FXR_TXDMA_DBG_RSP_ECC_ECC0_MASK					0xFFull
#define FXR_TXDMA_DBG_RSP_ECC_ECC0_SMASK				0xFFull
/*
* Table #118 of fxr_top - TXDMA_DBG_BTRK_CTRL
* This CSR allows indirect access to the TXDMA buffer tracking array. This array 
* should not be written to during normal operation, doing so may cause silent 
* data corruption. This register is for debug use only. Note that this array is 
* 22 bits wide. The data and ECC for the read or write to this register is 
* contained in the next two CSRs.
*/
#define FXR_TXDMA_DBG_BTRK_CTRL						(FXR_TX_DMA_CSRS + 0x000000000910)
#define FXR_TXDMA_DBG_BTRK_CTRL_RESETCSR				0x0020000000000000ull
#define FXR_TXDMA_DBG_BTRK_CTRL_VALID_SHIFT				63
#define FXR_TXDMA_DBG_BTRK_CTRL_VALID_MASK				0x1ull
#define FXR_TXDMA_DBG_BTRK_CTRL_VALID_SMASK				0x8000000000000000ull
#define FXR_TXDMA_DBG_BTRK_CTRL_WRITE_SHIFT				62
#define FXR_TXDMA_DBG_BTRK_CTRL_WRITE_MASK				0x1ull
#define FXR_TXDMA_DBG_BTRK_CTRL_WRITE_SMASK				0x4000000000000000ull
#define FXR_TXDMA_DBG_BTRK_CTRL_ECC_SHIFT				61
#define FXR_TXDMA_DBG_BTRK_CTRL_ECC_MASK				0x1ull
#define FXR_TXDMA_DBG_BTRK_CTRL_ECC_SMASK				0x2000000000000000ull
#define FXR_TXDMA_DBG_BTRK_CTRL_RESERVED_60_SHIFT			60
#define FXR_TXDMA_DBG_BTRK_CTRL_RESERVED_60_MASK			0x1ull
#define FXR_TXDMA_DBG_BTRK_CTRL_RESERVED_60_SMASK			0x1000000000000000ull
#define FXR_TXDMA_DBG_BTRK_CTRL_PAYLOAD_REGS_SHIFT			52
#define FXR_TXDMA_DBG_BTRK_CTRL_PAYLOAD_REGS_MASK			0xFFull
#define FXR_TXDMA_DBG_BTRK_CTRL_PAYLOAD_REGS_SMASK			0xFF0000000000000ull
#define FXR_TXDMA_DBG_BTRK_CTRL_RESERVED_51_14_SHIFT			14
#define FXR_TXDMA_DBG_BTRK_CTRL_RESERVED_51_14_MASK			0x3FFFFFFFFFull
#define FXR_TXDMA_DBG_BTRK_CTRL_RESERVED_51_14_SMASK			0xFFFFFFFFFC000ull
#define FXR_TXDMA_DBG_BTRK_CTRL_ADDRESS_SHIFT				0
#define FXR_TXDMA_DBG_BTRK_CTRL_ADDRESS_MASK				0x3FFFull
#define FXR_TXDMA_DBG_BTRK_CTRL_ADDRESS_SMASK				0x3FFFull
/*
* Table #119 of fxr_top - TXDMA_DBG_BTRK_PAYLOAD0
* This CSR contains data payload for #%%#TXDMA_DBG_BTRK_CTRL#%%#.
*/
#define FXR_TXDMA_DBG_BTRK_PAYLOAD0					(FXR_TX_DMA_CSRS + 0x000000000918)
#define FXR_TXDMA_DBG_BTRK_PAYLOAD0_RESETCSR				0x0000000000000000ull
#define FXR_TXDMA_DBG_BTRK_PAYLOAD0_RESERVED_63_16_SHIFT		16
#define FXR_TXDMA_DBG_BTRK_PAYLOAD0_RESERVED_63_16_MASK			0xFFFFFFFFFFFFull
#define FXR_TXDMA_DBG_BTRK_PAYLOAD0_RESERVED_63_16_SMASK		0xFFFFFFFFFFFF0000ull
#define FXR_TXDMA_DBG_BTRK_PAYLOAD0_DATA_SHIFT				0
#define FXR_TXDMA_DBG_BTRK_PAYLOAD0_DATA_MASK				0xFFFFull
#define FXR_TXDMA_DBG_BTRK_PAYLOAD0_DATA_SMASK				0xFFFFull
/*
* Table #120 of fxr_top - TXDMA_DBG_BTRK_ECC
* This CSR contains the ECC field for #%%#TXDMA_DBG_BTRK_CTRL#%%#.
*/
#define FXR_TXDMA_DBG_BTRK_ECC						(FXR_TX_DMA_CSRS + 0x000000000920)
#define FXR_TXDMA_DBG_BTRK_ECC_RESETCSR					0x0000000000000000ull
#define FXR_TXDMA_DBG_BTRK_ECC_RESERVED_63_6_SHIFT			6
#define FXR_TXDMA_DBG_BTRK_ECC_RESERVED_63_6_MASK			0x3FFFFFFFFFFFFFFull
#define FXR_TXDMA_DBG_BTRK_ECC_RESERVED_63_6_SMASK			0xFFFFFFFFFFFFFFC0ull
#define FXR_TXDMA_DBG_BTRK_ECC_ECC_SHIFT				0
#define FXR_TXDMA_DBG_BTRK_ECC_ECC_MASK					0x3Full
#define FXR_TXDMA_DBG_BTRK_ECC_ECC_SMASK				0x3Full
/*
* Table #121 of fxr_top - TXDMA_DBG_PTRK_CTRL
* This CSR allows indirect access to the TXDMA packet tracking array. This array 
* should not be written to during normal operation, doing so may cause silent 
* data corruption. This register is for debug use only. Note that this array is 
* 34 bits wide. The data and ECC for the read or write to this register is 
* contained in the next two CSRs.
*/
#define FXR_TXDMA_DBG_PTRK_CTRL						(FXR_TX_DMA_CSRS + 0x000000000928)
#define FXR_TXDMA_DBG_PTRK_CTRL_RESETCSR				0x0020000000000000ull
#define FXR_TXDMA_DBG_PTRK_CTRL_VALID_SHIFT				63
#define FXR_TXDMA_DBG_PTRK_CTRL_VALID_MASK				0x1ull
#define FXR_TXDMA_DBG_PTRK_CTRL_VALID_SMASK				0x8000000000000000ull
#define FXR_TXDMA_DBG_PTRK_CTRL_WRITE_SHIFT				62
#define FXR_TXDMA_DBG_PTRK_CTRL_WRITE_MASK				0x1ull
#define FXR_TXDMA_DBG_PTRK_CTRL_WRITE_SMASK				0x4000000000000000ull
#define FXR_TXDMA_DBG_PTRK_CTRL_ECC_SHIFT				61
#define FXR_TXDMA_DBG_PTRK_CTRL_ECC_MASK				0x1ull
#define FXR_TXDMA_DBG_PTRK_CTRL_ECC_SMASK				0x2000000000000000ull
#define FXR_TXDMA_DBG_PTRK_CTRL_RESERVED_60_SHIFT			60
#define FXR_TXDMA_DBG_PTRK_CTRL_RESERVED_60_MASK			0x1ull
#define FXR_TXDMA_DBG_PTRK_CTRL_RESERVED_60_SMASK			0x1000000000000000ull
#define FXR_TXDMA_DBG_PTRK_CTRL_PAYLOAD_REGS_SHIFT			52
#define FXR_TXDMA_DBG_PTRK_CTRL_PAYLOAD_REGS_MASK			0xFFull
#define FXR_TXDMA_DBG_PTRK_CTRL_PAYLOAD_REGS_SMASK			0xFF0000000000000ull
#define FXR_TXDMA_DBG_PTRK_CTRL_RESERVED_51_8_SHIFT			8
#define FXR_TXDMA_DBG_PTRK_CTRL_RESERVED_51_8_MASK			0xFFFFFFFFFFFull
#define FXR_TXDMA_DBG_PTRK_CTRL_RESERVED_51_8_SMASK			0xFFFFFFFFFFF00ull
#define FXR_TXDMA_DBG_PTRK_CTRL_ADDRESS_SHIFT				0
#define FXR_TXDMA_DBG_PTRK_CTRL_ADDRESS_MASK				0xFFull
#define FXR_TXDMA_DBG_PTRK_CTRL_ADDRESS_SMASK				0xFFull
/*
* Table #122 of fxr_top - TXDMA_DBG_PTRK_PAYLOAD0
* This CSR contains data payload for #%%#TXDMA_DBG_PTRK_CTRL#%%#.
*/
#define FXR_TXDMA_DBG_PTRK_PAYLOAD0					(FXR_TX_DMA_CSRS + 0x000000000930)
#define FXR_TXDMA_DBG_PTRK_PAYLOAD0_RESETCSR				0x0000000000000000ull
#define FXR_TXDMA_DBG_PTRK_PAYLOAD0_RESERVED_63_27_SHIFT		27
#define FXR_TXDMA_DBG_PTRK_PAYLOAD0_RESERVED_63_27_MASK			0x1FFFFFFFFFull
#define FXR_TXDMA_DBG_PTRK_PAYLOAD0_RESERVED_63_27_SMASK		0xFFFFFFFFF8000000ull
#define FXR_TXDMA_DBG_PTRK_PAYLOAD0_DATA_SHIFT				0
#define FXR_TXDMA_DBG_PTRK_PAYLOAD0_DATA_MASK				0x7FFFFFFull
#define FXR_TXDMA_DBG_PTRK_PAYLOAD0_DATA_SMASK				0x7FFFFFFull
/*
* Table #123 of fxr_top - TXDMA_DBG_PTRK_ECC
* This CSR contains the ECC field for #%%#TXDMA_DBG_PTRK_CTRL#%%#.
*/
#define FXR_TXDMA_DBG_PTRK_ECC						(FXR_TX_DMA_CSRS + 0x000000000938)
#define FXR_TXDMA_DBG_PTRK_ECC_RESETCSR					0x0000000000000000ull
#define FXR_TXDMA_DBG_PTRK_ECC_RESERVED_63_7_SHIFT			7
#define FXR_TXDMA_DBG_PTRK_ECC_RESERVED_63_7_MASK			0x1FFFFFFFFFFFFFFull
#define FXR_TXDMA_DBG_PTRK_ECC_RESERVED_63_7_SMASK			0xFFFFFFFFFFFFFF80ull
#define FXR_TXDMA_DBG_PTRK_ECC_ECC_SHIFT				0
#define FXR_TXDMA_DBG_PTRK_ECC_ECC_MASK					0x7Full
#define FXR_TXDMA_DBG_PTRK_ECC_ECC_SMASK				0x7Full
/*
* Table #124 of fxr_top - TXDMA_DBG_TX_FLITS_CNTR_CTL
* This CSR controls the MC and TC selected by the TXDMA_TX_FLITS_TCMC_W,X,Y,Z 
* performance counters.
*/
#define FXR_TXDMA_DBG_TX_FLITS_CNTR_CTL					(FXR_TX_DMA_CSRS + 0x000000000940)
#define FXR_TXDMA_DBG_TX_FLITS_CNTR_CTL_RESETCSR			0x0000000000000A60ull
#define FXR_TXDMA_DBG_TX_FLITS_CNTR_CTL_RESERVED_63_12_SHIFT		12
#define FXR_TXDMA_DBG_TX_FLITS_CNTR_CTL_RESERVED_63_12_MASK		0xFFFFFFFFFFFFFull
#define FXR_TXDMA_DBG_TX_FLITS_CNTR_CTL_RESERVED_63_12_SMASK		0xFFFFFFFFFFFFF000ull
#define FXR_TXDMA_DBG_TX_FLITS_CNTR_CTL_TCMC_Z_SHIFT			9
#define FXR_TXDMA_DBG_TX_FLITS_CNTR_CTL_TCMC_Z_MASK			0x7ull
#define FXR_TXDMA_DBG_TX_FLITS_CNTR_CTL_TCMC_Z_SMASK			0xE00ull
#define FXR_TXDMA_DBG_TX_FLITS_CNTR_CTL_TCMC_Y_SHIFT			6
#define FXR_TXDMA_DBG_TX_FLITS_CNTR_CTL_TCMC_Y_MASK			0x7ull
#define FXR_TXDMA_DBG_TX_FLITS_CNTR_CTL_TCMC_Y_SMASK			0x1C0ull
#define FXR_TXDMA_DBG_TX_FLITS_CNTR_CTL_TCMC_X_SHIFT			3
#define FXR_TXDMA_DBG_TX_FLITS_CNTR_CTL_TCMC_X_MASK			0x7ull
#define FXR_TXDMA_DBG_TX_FLITS_CNTR_CTL_TCMC_X_SMASK			0x38ull
#define FXR_TXDMA_DBG_TX_FLITS_CNTR_CTL_TCMC_W_SHIFT			0
#define FXR_TXDMA_DBG_TX_FLITS_CNTR_CTL_TCMC_W_MASK			0x7ull
#define FXR_TXDMA_DBG_TX_FLITS_CNTR_CTL_TCMC_W_SMASK			0x7ull
/*
* Table #125 of fxr_top - TXDMA_DBG_STALL_EMPTY_CNTR_CTL
* This CSR controls the MC and TC selected by the TXDMA_STALL_EMPTY_EVENTS_X,Y 
* performance counters.
*/
#define FXR_TXDMA_DBG_STALL_EMPTY_CNTR_CTL				(FXR_TX_DMA_CSRS + 0x000000000948)
#define FXR_TXDMA_DBG_STALL_EMPTY_CNTR_CTL_RESETCSR			0x0000000000000020ull
#define FXR_TXDMA_DBG_STALL_EMPTY_CNTR_CTL_RESERVED_63_6_SHIFT		6
#define FXR_TXDMA_DBG_STALL_EMPTY_CNTR_CTL_RESERVED_63_6_MASK		0x3FFFFFFFFFFFFFFull
#define FXR_TXDMA_DBG_STALL_EMPTY_CNTR_CTL_RESERVED_63_6_SMASK		0xFFFFFFFFFFFFFFC0ull
#define FXR_TXDMA_DBG_STALL_EMPTY_CNTR_CTL_TCMC_Y_SHIFT			3
#define FXR_TXDMA_DBG_STALL_EMPTY_CNTR_CTL_TCMC_Y_MASK			0x7ull
#define FXR_TXDMA_DBG_STALL_EMPTY_CNTR_CTL_TCMC_Y_SMASK			0x38ull
#define FXR_TXDMA_DBG_STALL_EMPTY_CNTR_CTL_TCMC_X_SHIFT			0
#define FXR_TXDMA_DBG_STALL_EMPTY_CNTR_CTL_TCMC_X_MASK			0x7ull
#define FXR_TXDMA_DBG_STALL_EMPTY_CNTR_CTL_TCMC_X_SMASK			0x7ull
/*
* Table #126 of fxr_top - TXDMA_DBG_STALL_CREDITS_CNTR_CTL
* This CSR controls the MC and TC selected by the TXDMA_STALL_CREDITS_X,Y 
* performance counters.
*/
#define FXR_TXDMA_DBG_STALL_CREDITS_CNTR_CTL				(FXR_TX_DMA_CSRS + 0x000000000950)
#define FXR_TXDMA_DBG_STALL_CREDITS_CNTR_CTL_RESETCSR			0x0000000000000020ull
#define FXR_TXDMA_DBG_STALL_CREDITS_CNTR_CTL_RESERVED_63_6_SHIFT	6
#define FXR_TXDMA_DBG_STALL_CREDITS_CNTR_CTL_RESERVED_63_6_MASK		0x3FFFFFFFFFFFFFFull
#define FXR_TXDMA_DBG_STALL_CREDITS_CNTR_CTL_RESERVED_63_6_SMASK	0xFFFFFFFFFFFFFFC0ull
#define FXR_TXDMA_DBG_STALL_CREDITS_CNTR_CTL_TCMC_Y_SHIFT		3
#define FXR_TXDMA_DBG_STALL_CREDITS_CNTR_CTL_TCMC_Y_MASK		0x7ull
#define FXR_TXDMA_DBG_STALL_CREDITS_CNTR_CTL_TCMC_Y_SMASK		0x38ull
#define FXR_TXDMA_DBG_STALL_CREDITS_CNTR_CTL_TCMC_X_SHIFT		0
#define FXR_TXDMA_DBG_STALL_CREDITS_CNTR_CTL_TCMC_X_MASK		0x7ull
#define FXR_TXDMA_DBG_STALL_CREDITS_CNTR_CTL_TCMC_X_SMASK		0x7ull
/*
* Table #127 of fxr_top - TXDMA_DBG_MC0_0_PKT_CNTR_FLIT_MATCH
* These are the flit match bits for the MC0 packet counter 0 performance 
* counter. Note that is register is 256 bits wide.
*/
#define FXR_TXDMA_DBG_MC0_0_PKT_CNTR_FLIT_MATCH				(FXR_TX_DMA_CSRS + 0x000000000958)
#define FXR_TXDMA_DBG_MC0_0_PKT_CNTR_FLIT_MATCH_RESETCSR		0x0000000000000000ull
#define FXR_TXDMA_DBG_MC0_0_PKT_CNTR_FLIT_MATCH_MATCH_SHIFT		0
#define FXR_TXDMA_DBG_MC0_0_PKT_CNTR_FLIT_MATCH_MATCH_MASK		0xFFFFFFFFFFFFFFFFull
#define FXR_TXDMA_DBG_MC0_0_PKT_CNTR_FLIT_MATCH_MATCH_SMASK		0xFFFFFFFFFFFFFFFFull
/*
* Table #128 of fxr_top - TXDMA_DBG_MC0_0_PKT_CNTR_FLIT_MASK
* These are the flit mask bits for the MC0 packet counter 0 performance counter. 
* Note that is register is 256 bits wide.
*/
#define FXR_TXDMA_DBG_MC0_0_PKT_CNTR_FLIT_MASK				(FXR_TX_DMA_CSRS + 0x000000000978)
#define FXR_TXDMA_DBG_MC0_0_PKT_CNTR_FLIT_MASK_RESETCSR			0xFFFFFFFFFFFFFFFFull
#define FXR_TXDMA_DBG_MC0_0_PKT_CNTR_FLIT_MASK_MASK_SHIFT		0
#define FXR_TXDMA_DBG_MC0_0_PKT_CNTR_FLIT_MASK_MASK_MASK		0xFFFFFFFFFFFFFFFFull
#define FXR_TXDMA_DBG_MC0_0_PKT_CNTR_FLIT_MASK_MASK_SMASK		0xFFFFFFFFFFFFFFFFull
/*
* Table #129 of fxr_top - TXDMA_DBG_MC0_1_PKT_CNTR_FLIT_MATCH
* These are the flit match bits for the MC0 packet counter 1 performance 
* counter. Note that is register is 256 bits wide.
*/
#define FXR_TXDMA_DBG_MC0_1_PKT_CNTR_FLIT_MATCH				(FXR_TX_DMA_CSRS + 0x000000000998)
#define FXR_TXDMA_DBG_MC0_1_PKT_CNTR_FLIT_MATCH_RESETCSR		0x0000000000000000ull
#define FXR_TXDMA_DBG_MC0_1_PKT_CNTR_FLIT_MATCH_MATCH_SHIFT		0
#define FXR_TXDMA_DBG_MC0_1_PKT_CNTR_FLIT_MATCH_MATCH_MASK		0xFFFFFFFFFFFFFFFFull
#define FXR_TXDMA_DBG_MC0_1_PKT_CNTR_FLIT_MATCH_MATCH_SMASK		0xFFFFFFFFFFFFFFFFull
/*
* Table #130 of fxr_top - TXDMA_DBG_MC0_1_PKT_CNTR_FLIT_MASK
* These are the flit mask bits for the MC0 packet counter 1 performance counter. 
* Note that is register is 256 bits wide.
*/
#define FXR_TXDMA_DBG_MC0_1_PKT_CNTR_FLIT_MASK				(FXR_TX_DMA_CSRS + 0x0000000009B8)
#define FXR_TXDMA_DBG_MC0_1_PKT_CNTR_FLIT_MASK_RESETCSR			0xFFFFFFFFFFFFFFFFull
#define FXR_TXDMA_DBG_MC0_1_PKT_CNTR_FLIT_MASK_MASK_SHIFT		0
#define FXR_TXDMA_DBG_MC0_1_PKT_CNTR_FLIT_MASK_MASK_MASK		0xFFFFFFFFFFFFFFFFull
#define FXR_TXDMA_DBG_MC0_1_PKT_CNTR_FLIT_MASK_MASK_SMASK		0xFFFFFFFFFFFFFFFFull
/*
* Table #131 of fxr_top - TXDMA_DBG_MC0_2_PKT_CNTR_FLIT_MATCH
* These are the flit match bits for the MC0 packet counter 2 performance 
* counter. Note that is register is 256 bits wide.
*/
#define FXR_TXDMA_DBG_MC0_2_PKT_CNTR_FLIT_MATCH				(FXR_TX_DMA_CSRS + 0x0000000009D8)
#define FXR_TXDMA_DBG_MC0_2_PKT_CNTR_FLIT_MATCH_RESETCSR		0x0000000000000000ull
#define FXR_TXDMA_DBG_MC0_2_PKT_CNTR_FLIT_MATCH_MATCH_SHIFT		0
#define FXR_TXDMA_DBG_MC0_2_PKT_CNTR_FLIT_MATCH_MATCH_MASK		0xFFFFFFFFFFFFFFFFull
#define FXR_TXDMA_DBG_MC0_2_PKT_CNTR_FLIT_MATCH_MATCH_SMASK		0xFFFFFFFFFFFFFFFFull
/*
* Table #132 of fxr_top - TXDMA_DBG_MC0_2_PKT_CNTR_FLIT_MASK
* These are the flit mask bits for the MC0 packet counter 2 performance counter. 
* Note that is register is 256 bits wide.
*/
#define FXR_TXDMA_DBG_MC0_2_PKT_CNTR_FLIT_MASK				(FXR_TX_DMA_CSRS + 0x0000000009F8)
#define FXR_TXDMA_DBG_MC0_2_PKT_CNTR_FLIT_MASK_RESETCSR			0xFFFFFFFFFFFFFFFFull
#define FXR_TXDMA_DBG_MC0_2_PKT_CNTR_FLIT_MASK_MASK_SHIFT		0
#define FXR_TXDMA_DBG_MC0_2_PKT_CNTR_FLIT_MASK_MASK_MASK		0xFFFFFFFFFFFFFFFFull
#define FXR_TXDMA_DBG_MC0_2_PKT_CNTR_FLIT_MASK_MASK_SMASK		0xFFFFFFFFFFFFFFFFull
/*
* Table #133 of fxr_top - TXDMA_DBG_MC0_3_PKT_CNTR_FLIT_MATCH
* These are the flit match bits for the MC0 packet counter 3 performance 
* counter. Note that is register is 256 bits wide.
*/
#define FXR_TXDMA_DBG_MC0_3_PKT_CNTR_FLIT_MATCH				(FXR_TX_DMA_CSRS + 0x000000000A18)
#define FXR_TXDMA_DBG_MC0_3_PKT_CNTR_FLIT_MATCH_RESETCSR		0x0000000000000000ull
#define FXR_TXDMA_DBG_MC0_3_PKT_CNTR_FLIT_MATCH_MATCH_SHIFT		0
#define FXR_TXDMA_DBG_MC0_3_PKT_CNTR_FLIT_MATCH_MATCH_MASK		0xFFFFFFFFFFFFFFFFull
#define FXR_TXDMA_DBG_MC0_3_PKT_CNTR_FLIT_MATCH_MATCH_SMASK		0xFFFFFFFFFFFFFFFFull
/*
* Table #134 of fxr_top - TXDMA_DBG_MC0_3_PKT_CNTR_FLIT_MASK
* These are the flit mask bits for the MC0 packet counter 3 performance counter. 
* Note that is register is 256 bits wide.
*/
#define FXR_TXDMA_DBG_MC0_3_PKT_CNTR_FLIT_MASK				(FXR_TX_DMA_CSRS + 0x000000000A38)
#define FXR_TXDMA_DBG_MC0_3_PKT_CNTR_FLIT_MASK_RESETCSR			0xFFFFFFFFFFFFFFFFull
#define FXR_TXDMA_DBG_MC0_3_PKT_CNTR_FLIT_MASK_MASK_SHIFT		0
#define FXR_TXDMA_DBG_MC0_3_PKT_CNTR_FLIT_MASK_MASK_MASK		0xFFFFFFFFFFFFFFFFull
#define FXR_TXDMA_DBG_MC0_3_PKT_CNTR_FLIT_MASK_MASK_SMASK		0xFFFFFFFFFFFFFFFFull
/*
* Table #135 of fxr_top - TXDMA_DBG_MC1_0_PKT_CNTR_FLIT_MATCH
* These are the flit match bits for the MC1 packet counter 0 performance 
* counter. Note that is register is 256 bits wide.
*/
#define FXR_TXDMA_DBG_MC1_0_PKT_CNTR_FLIT_MATCH				(FXR_TX_DMA_CSRS + 0x000000000A58)
#define FXR_TXDMA_DBG_MC1_0_PKT_CNTR_FLIT_MATCH_RESETCSR		0x0000000000000000ull
#define FXR_TXDMA_DBG_MC1_0_PKT_CNTR_FLIT_MATCH_MATCH_SHIFT		0
#define FXR_TXDMA_DBG_MC1_0_PKT_CNTR_FLIT_MATCH_MATCH_MASK		0xFFFFFFFFFFFFFFFFull
#define FXR_TXDMA_DBG_MC1_0_PKT_CNTR_FLIT_MATCH_MATCH_SMASK		0xFFFFFFFFFFFFFFFFull
/*
* Table #136 of fxr_top - TXDMA_DBG_MC1_0_PKT_CNTR_FLIT_MASK
* These are the flit mask bits for the MC1 packet counter 0 performance counter. 
* Note that is register is 256 bits wide.
*/
#define FXR_TXDMA_DBG_MC1_0_PKT_CNTR_FLIT_MASK				(FXR_TX_DMA_CSRS + 0x000000000A78)
#define FXR_TXDMA_DBG_MC1_0_PKT_CNTR_FLIT_MASK_RESETCSR			0xFFFFFFFFFFFFFFFFull
#define FXR_TXDMA_DBG_MC1_0_PKT_CNTR_FLIT_MASK_MASK_SHIFT		0
#define FXR_TXDMA_DBG_MC1_0_PKT_CNTR_FLIT_MASK_MASK_MASK		0xFFFFFFFFFFFFFFFFull
#define FXR_TXDMA_DBG_MC1_0_PKT_CNTR_FLIT_MASK_MASK_SMASK		0xFFFFFFFFFFFFFFFFull
/*
* Table #137 of fxr_top - TXDMA_DBG_MC1_1_PKT_CNTR_FLIT_MATCH
* These are the flit match bits for the MC1 packet counter 1 performance 
* counter. Note that is register is 256 bits wide.
*/
#define FXR_TXDMA_DBG_MC1_1_PKT_CNTR_FLIT_MATCH				(FXR_TX_DMA_CSRS + 0x000000000A98)
#define FXR_TXDMA_DBG_MC1_1_PKT_CNTR_FLIT_MATCH_RESETCSR		0x0000000000000000ull
#define FXR_TXDMA_DBG_MC1_1_PKT_CNTR_FLIT_MATCH_MATCH_SHIFT		0
#define FXR_TXDMA_DBG_MC1_1_PKT_CNTR_FLIT_MATCH_MATCH_MASK		0xFFFFFFFFFFFFFFFFull
#define FXR_TXDMA_DBG_MC1_1_PKT_CNTR_FLIT_MATCH_MATCH_SMASK		0xFFFFFFFFFFFFFFFFull
/*
* Table #138 of fxr_top - TXDMA_DBG_MC1_1_PKT_CNTR_FLIT_MASK
* These are the flit mask bits for the MC1 packet counter 1 performance counter. 
* Note that is register is 256 bits wide.
*/
#define FXR_TXDMA_DBG_MC1_1_PKT_CNTR_FLIT_MASK				(FXR_TX_DMA_CSRS + 0x000000000AB8)
#define FXR_TXDMA_DBG_MC1_1_PKT_CNTR_FLIT_MASK_RESETCSR			0xFFFFFFFFFFFFFFFFull
#define FXR_TXDMA_DBG_MC1_1_PKT_CNTR_FLIT_MASK_MASK_SHIFT		0
#define FXR_TXDMA_DBG_MC1_1_PKT_CNTR_FLIT_MASK_MASK_MASK		0xFFFFFFFFFFFFFFFFull
#define FXR_TXDMA_DBG_MC1_1_PKT_CNTR_FLIT_MASK_MASK_SMASK		0xFFFFFFFFFFFFFFFFull
/*
* Table #139 of fxr_top - TXDMA_DBG_MC0_PKT_CNTR_CTL
* These are the match/mask fields for the MC0 packet counters as well as 
* controlling how the packet counters are ganged to match/mask on different 
* flits of the packet. Ganging allows something like packet counter 0 
* match/masks on flit 0 and enabling packet counter 1 to match/mask on flit 
* 1.
*/
#define FXR_TXDMA_DBG_MC0_PKT_CNTR_CTL					(FXR_TX_DMA_CSRS + 0x000000000AD8)
#define FXR_TXDMA_DBG_MC0_PKT_CNTR_CTL_RESETCSR				0x000000000000C840ull
#define FXR_TXDMA_DBG_MC0_PKT_CNTR_CTL_RESERVED_63_27_SHIFT		27
#define FXR_TXDMA_DBG_MC0_PKT_CNTR_CTL_RESERVED_63_27_MASK		0x1FFFFFFFFFull
#define FXR_TXDMA_DBG_MC0_PKT_CNTR_CTL_RESERVED_63_27_SMASK		0xFFFFFFFFF8000000ull
#define FXR_TXDMA_DBG_MC0_PKT_CNTR_CTL_PKT_CNTR_CTL_SHIFT		24
#define FXR_TXDMA_DBG_MC0_PKT_CNTR_CTL_PKT_CNTR_CTL_MASK		0x7ull
#define FXR_TXDMA_DBG_MC0_PKT_CNTR_CTL_PKT_CNTR_CTL_SMASK		0x7000000ull
#define FXR_TXDMA_DBG_MC0_PKT_CNTR_CTL_FLIT_INDEX_3_SHIFT		22
#define FXR_TXDMA_DBG_MC0_PKT_CNTR_CTL_FLIT_INDEX_3_MASK		0x3ull
#define FXR_TXDMA_DBG_MC0_PKT_CNTR_CTL_FLIT_INDEX_3_SMASK		0xC00000ull
#define FXR_TXDMA_DBG_MC0_PKT_CNTR_CTL_FLIT_INDEX_2_SHIFT		20
#define FXR_TXDMA_DBG_MC0_PKT_CNTR_CTL_FLIT_INDEX_2_MASK		0x3ull
#define FXR_TXDMA_DBG_MC0_PKT_CNTR_CTL_FLIT_INDEX_2_SMASK		0x300000ull
#define FXR_TXDMA_DBG_MC0_PKT_CNTR_CTL_FLIT_INDEX_1_SHIFT		18
#define FXR_TXDMA_DBG_MC0_PKT_CNTR_CTL_FLIT_INDEX_1_MASK		0x3ull
#define FXR_TXDMA_DBG_MC0_PKT_CNTR_CTL_FLIT_INDEX_1_SMASK		0xC0000ull
#define FXR_TXDMA_DBG_MC0_PKT_CNTR_CTL_FLIT_INDEX_0_SHIFT		16
#define FXR_TXDMA_DBG_MC0_PKT_CNTR_CTL_FLIT_INDEX_0_MASK		0x3ull
#define FXR_TXDMA_DBG_MC0_PKT_CNTR_CTL_FLIT_INDEX_0_SMASK		0x30000ull
#define FXR_TXDMA_DBG_MC0_PKT_CNTR_CTL_TC_MATCH_3_SHIFT			14
#define FXR_TXDMA_DBG_MC0_PKT_CNTR_CTL_TC_MATCH_3_MASK			0x3ull
#define FXR_TXDMA_DBG_MC0_PKT_CNTR_CTL_TC_MATCH_3_SMASK			0xC000ull
#define FXR_TXDMA_DBG_MC0_PKT_CNTR_CTL_TC_MASK_3_SHIFT			12
#define FXR_TXDMA_DBG_MC0_PKT_CNTR_CTL_TC_MASK_3_MASK			0x3ull
#define FXR_TXDMA_DBG_MC0_PKT_CNTR_CTL_TC_MASK_3_SMASK			0x3000ull
#define FXR_TXDMA_DBG_MC0_PKT_CNTR_CTL_TC_MATCH_2_SHIFT			10
#define FXR_TXDMA_DBG_MC0_PKT_CNTR_CTL_TC_MATCH_2_MASK			0x3ull
#define FXR_TXDMA_DBG_MC0_PKT_CNTR_CTL_TC_MATCH_2_SMASK			0xC00ull
#define FXR_TXDMA_DBG_MC0_PKT_CNTR_CTL_TC_MASK_2_SHIFT			8
#define FXR_TXDMA_DBG_MC0_PKT_CNTR_CTL_TC_MASK_2_MASK			0x3ull
#define FXR_TXDMA_DBG_MC0_PKT_CNTR_CTL_TC_MASK_2_SMASK			0x300ull
#define FXR_TXDMA_DBG_MC0_PKT_CNTR_CTL_TC_MATCH_1_SHIFT			6
#define FXR_TXDMA_DBG_MC0_PKT_CNTR_CTL_TC_MATCH_1_MASK			0x3ull
#define FXR_TXDMA_DBG_MC0_PKT_CNTR_CTL_TC_MATCH_1_SMASK			0xC0ull
#define FXR_TXDMA_DBG_MC0_PKT_CNTR_CTL_TC_MASK_1_SHIFT			4
#define FXR_TXDMA_DBG_MC0_PKT_CNTR_CTL_TC_MASK_1_MASK			0x3ull
#define FXR_TXDMA_DBG_MC0_PKT_CNTR_CTL_TC_MASK_1_SMASK			0x30ull
#define FXR_TXDMA_DBG_MC0_PKT_CNTR_CTL_TC_MATCH_0_SHIFT			2
#define FXR_TXDMA_DBG_MC0_PKT_CNTR_CTL_TC_MATCH_0_MASK			0x3ull
#define FXR_TXDMA_DBG_MC0_PKT_CNTR_CTL_TC_MATCH_0_SMASK			0xCull
#define FXR_TXDMA_DBG_MC0_PKT_CNTR_CTL_TC_MASK_0_SHIFT			0
#define FXR_TXDMA_DBG_MC0_PKT_CNTR_CTL_TC_MASK_0_MASK			0x3ull
#define FXR_TXDMA_DBG_MC0_PKT_CNTR_CTL_TC_MASK_0_SMASK			0x3ull
/*
* Table #140 of fxr_top - TXDMA_DBG_MC1_PKT_CNTR_CTL
* These are the match/mask fields for the MC1 packet counters as well as 
* controlling how the packet counters are ganged to match/mask on different 
* flits of the packet. Ganging allows something like packet counter 0 
* match/masks on flit 0 and enabling packet counter 1 to match/mask on flit 
* 1.
*/
#define FXR_TXDMA_DBG_MC1_PKT_CNTR_CTL					(FXR_TX_DMA_CSRS + 0x000000000AE0)
#define FXR_TXDMA_DBG_MC1_PKT_CNTR_CTL_RESETCSR				0x0000000000000040ull
#define FXR_TXDMA_DBG_MC1_PKT_CNTR_CTL_RESERVED_63_13_SHIFT		13
#define FXR_TXDMA_DBG_MC1_PKT_CNTR_CTL_RESERVED_63_13_MASK		0x7FFFFFFFFFFFFull
#define FXR_TXDMA_DBG_MC1_PKT_CNTR_CTL_RESERVED_63_13_SMASK		0xFFFFFFFFFFFFE000ull
#define FXR_TXDMA_DBG_MC1_PKT_CNTR_CTL_PKT_CNTR_CTL_SHIFT		12
#define FXR_TXDMA_DBG_MC1_PKT_CNTR_CTL_PKT_CNTR_CTL_MASK		0x1ull
#define FXR_TXDMA_DBG_MC1_PKT_CNTR_CTL_PKT_CNTR_CTL_SMASK		0x1000ull
#define FXR_TXDMA_DBG_MC1_PKT_CNTR_CTL_FLIT_INDEX_1_SHIFT		10
#define FXR_TXDMA_DBG_MC1_PKT_CNTR_CTL_FLIT_INDEX_1_MASK		0x3ull
#define FXR_TXDMA_DBG_MC1_PKT_CNTR_CTL_FLIT_INDEX_1_SMASK		0xC00ull
#define FXR_TXDMA_DBG_MC1_PKT_CNTR_CTL_FLIT_INDEX_0_SHIFT		8
#define FXR_TXDMA_DBG_MC1_PKT_CNTR_CTL_FLIT_INDEX_0_MASK		0x3ull
#define FXR_TXDMA_DBG_MC1_PKT_CNTR_CTL_FLIT_INDEX_0_SMASK		0x300ull
#define FXR_TXDMA_DBG_MC1_PKT_CNTR_CTL_TC_MATCH_1_SHIFT			6
#define FXR_TXDMA_DBG_MC1_PKT_CNTR_CTL_TC_MATCH_1_MASK			0x3ull
#define FXR_TXDMA_DBG_MC1_PKT_CNTR_CTL_TC_MATCH_1_SMASK			0xC0ull
#define FXR_TXDMA_DBG_MC1_PKT_CNTR_CTL_TC_MASK_1_SHIFT			4
#define FXR_TXDMA_DBG_MC1_PKT_CNTR_CTL_TC_MASK_1_MASK			0x3ull
#define FXR_TXDMA_DBG_MC1_PKT_CNTR_CTL_TC_MASK_1_SMASK			0x30ull
#define FXR_TXDMA_DBG_MC1_PKT_CNTR_CTL_TC_MATCH_0_SHIFT			2
#define FXR_TXDMA_DBG_MC1_PKT_CNTR_CTL_TC_MATCH_0_MASK			0x3ull
#define FXR_TXDMA_DBG_MC1_PKT_CNTR_CTL_TC_MATCH_0_SMASK			0xCull
#define FXR_TXDMA_DBG_MC1_PKT_CNTR_CTL_TC_MASK_0_SHIFT			0
#define FXR_TXDMA_DBG_MC1_PKT_CNTR_CTL_TC_MASK_0_MASK			0x3ull
#define FXR_TXDMA_DBG_MC1_PKT_CNTR_CTL_TC_MASK_0_SMASK			0x3ull

#endif 		/* DEF_FXR_TX_DMA_SW_DEF */
