menuconfig NFIT_DEVICES
	bool "NVDIMM (NFIT) Support"
	help
	  Support for non-volatile memory devices defined by the NVDIMM
	  Firmware Interface Table. (NFIT)  On platforms that define an
	  NFIT, via ACPI, or other means, a "nd_bus" is registered to
	  advertise PM (persistent memory) namespaces (/dev/pmemX) and
	  BLOCK (sliding block data window) namespaces (/dev/ndX). A PM
	  namespace refers to a system-physical-address-range than may
	  span multiple DIMMs and support DAX (see CONFIG_DAX).  A BLOCK
	  namespace refers to a NVDIMM control region which exposes a
	  register-based windowed access mode to non-volatile memory.
	  See the NVDIMM Firmware Interface Table specification for more
	  details.

if NFIT_DEVICES

config ND_CORE
	tristate "Core: Generic 'nd' Device Model"
	help
	  Platform agnostic device model for an NFIT-defined bus.
	  Publishes resources for a NFIT-persistent-memory driver and/or
	  NFIT-block-data-window driver to attach.  Exposes a device
	  topology under a "ndX" bus device and a "/dev/ndctl<N>"
	  dimm-ioctl message passing interface per registered NFIT
	  instance.  A userspace library "ndctl" provides an API to
	  enumerate/manage this subsystem.

config ND_MANUAL_DSM
	bool "ND Manual DSM: Manually run vendor specific _DSM commands"
	help
	  Manually run vendor specific _DSM commands by directly interacting
	  with the Falcon Valley mailbox registers, as opposed to using the
	  ACPI _DSM method via the BIOS.  This is meant to be a stopgap while
	  _DSM support is being implemented in the BIOS, and should eventually
	  be removed from our driver.

config NFIT_ACPI
	tristate "NFIT ACPI: Discover ACPI-Namespace NFIT Devices"
	select ND_CORE
	depends on ACPI
	help
	  Infrastructure to probe the ACPI namespace for NVDIMMs and
	  register the platform-global NFIT blob with the core.  Also
	  enables the core to craft ACPI._DSM messages for platform/dimm
	  configuration.

config NFIT_LOCAL_DEV
	bool

config NFIT_LOCAL
	tristate "NFIT LOCAL: Enable user-defined NFIT loading"
	select ND_CORE
	select NFIT_LOCAL_DEV
	help
	  Enable this option and create an NFIT with the 'ndctl
	  create-nfit' utility.   Use this facility for cases where platform
	  firmware does not describe persistent memory ranges, or
	  otherwise need to custom-define persistent memory ranges.

	  Say 'm' here and a module named "local_nfit" will be created
	  that will load a firmware file named "local_nfit.bin" in to the nd
	  subsystem.

	  Say 'y' here to build "local_nfit" into the kernel
	  and consider also using the CONFIG_EXTRA_FIRMWARE facility to
	  provide "local_nfit.bin" in the kernel image directly.

config NFIT_TEST
	tristate "NFIT TEST: Manufactured NFIT for interface testing"
	select ND_CORE
	depends on !(NFIT_ACPI=y || NFIT_ACPI=m || NFIT_LOCAL_DEV)
	depends on DMA_CMA
	help
	  For development purposes register a manufactured
	  NFIT table to verify the resulting device model topology.
	  Note, this module arranges for ioremap_cache() to be
	  overridden locally to allow simulation of system-memory as an
	  io-memory-resource.

	  Note, this test expects to be able to find at least
	  72MB of CMA space (CONFIG_CMA_SIZE_MBYTES) or it will fail to
	  load.  Given CMA space can also be defined as a percentage of
	  system memory it is awkward to add a "depends on
	  CMA_SIZE_MBYTES >= 72" dependency.

	  Say N unless you are doing development of the 'nd' subsystem.

config ND_BTT_DEVS
	def_bool y

endif
