menuconfig NFIT_DEVICES
	bool "NVDIMM (NFIT) Support"
	help
	  Support for non-volatile memory devices defined by the NVDIMM
	  Firmware Interface Table. (NFIT)  On platforms that define an
	  NFIT, via ACPI, or other means, a "nd_bus" is registered to
	  advertise PM (persistent memory) namespaces (/dev/pmemX) and
	  BLOCK (sliding block data window) namespaces (/dev/ndX). A PM
	  namespace refers to a system-physical-address-range than may
	  span multiple DIMMs and support DAX (see CONFIG_DAX).  A BLOCK
	  namespace refers to a NVDIMM control region which exposes a
	  register-based windowed access mode to non-volatile memory.
	  See the NVDIMM Firmware Interface Table specification for more
	  details.

if NFIT_DEVICES

config ND_CORE
	tristate "Core: Generic 'nd' Device Model"
	help
	  Platform agnostic device model for an NFIT-defined bus.
	  Publishes resources for a NFIT-persistent-memory driver and/or
	  NFIT-block-data-window driver to attach.  Exposes a device
	  topology under a "ndX" bus device and a "/dev/ndctl<N>"
	  dimm-ioctl message passing interface per registered NFIT
	  instance.  A userspace library "ndctl" provides an API to
	  enumerate/manage this subsystem.

config NFIT_ACPI
	tristate "NFIT ACPI: Discover ACPI-Namespace NFIT Devices"
	select ND_CORE
	depends on ACPI
	help
	  Infrastructure to probe the ACPI namespace for NVDIMMs and
	  register the platform-global NFIT blob with the core.  Also
	  enables the core to craft ACPI._DSM messages for platform/dimm
	  configuration.

config NFIT_TEST
	tristate "NFIT TEST: Manufactured NFIT for interface testing"
	select ND_CORE
	depends on !(NFIT_ACPI=y || NFIT_ACPI=m)
	depends on DMA_CMA
	help
	  For development purposes register a manufactured
	  NFIT table to verify the resulting device model topology.
	  Note, this module arranges for ioremap_cache() to be
	  overridden locally to allow simulation of system-memory as an
	  io-memory-resource.

	  Note, this test expects to be able to find at least
	  72MB of CMA space (CONFIG_CMA_SIZE_MBYTES) or it will fail to
	  load.  Given CMA space can also be defined as a percentage of
	  system memory it is awkward to add a "depends on
	  CMA_SIZE_MBYTES >= 72" dependency.

	  Say N unless you are doing development of the 'nd' subsystem.

config NFIT_REGION
	tristate "NFIT: Region Support"
	depends on ND_CORE
	default ND_CORE
	help
	  The "NFIT Region Driver" is an intermediary driver that
	  translates NFIT defined regions into "namespace" devices that
	  are consumed by peristent memory block drivers.  A "namespace"
	  is a sub-division of a region.

	  NVDIMM memory regions, in some instances, alias with each
	  other.  When this occurs a label (metadata superblock) stored
	  on the dimm resolves that aliasing.  This driver provides
	  facilities to parse the label and publishes a sysfs interface
	  for adding/deleting/modifying "namespaces" (as defined by the
	  NVDIMM Label Specification).

	  Say Y if you want to use a NVDIMM described by NFIT

config NFIT_PMEM
	bool "Use NFIT for PMEM"
	depends on ND_CORE
	default ND_CORE
	help
	  Say Y: Use the platform provided NVDIMM Firmware Interface
	         Table for pmem device discovery.

	  Say N: Use the kernel command line and config options to a
	         memory range for pmem.

config BLK_DEV_PMEM
	tristate "Persistent memory block device support"
	default ND_CORE
	help
	  Saying Y here will allow you to use a contiguous range of reserved
	  memory as one or more block devices.  Memory for PMEM should be
	  reserved using the "memmap" kernel parameter.

	  To compile this driver as a module, choose M here: the module will be
	  called pmem.

	  Most normal users won't need this functionality, and can thus say N
	  here.

config BLK_DEV_PMEM_START
	int "Offset in GiB of where to start claiming space"
	default "0"
	depends on BLK_DEV_PMEM
	depends on !NFIT_PMEM
	help
	  Starting offset in GiB that PMEM should use when claiming memory.  This
	  memory needs to be reserved from the OS at boot time using the
	  "memmap" kernel parameter.

	  If you provide PMEM with volatile memory it will act as a volatile
	  RAM disk and your data will not be persistent.

config BLK_DEV_PMEM_COUNT
	int "Default number of PMEM disks"
	default "4"
	depends on BLK_DEV_PMEM
	depends on !NFIT_PMEM
	help
	  Number of equal sized block devices that PMEM should create.

config BLK_DEV_PMEM_SIZE
	int "Size in GiB of space to claim"
	depends on BLK_DEV_PMEM
	depends on !NFIT_PMEM
	default "0"
	help
	  Amount of memory in GiB that PMEM should use when creating block
	  devices.  This memory needs to be reserved from the OS at
	  boot time using the "memmap" kernel parameter.

endif
