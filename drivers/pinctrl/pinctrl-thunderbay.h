// SPDX-License-Identifier: GPL-2.0
/*
 * Intel Thunderbay SoC pinctrl/GPIO driver
 *
 * Copyright (C) 2020 Intel Corporation
 * Author: S, Kiran Kumar1 <kiran.kumar1.s@intel.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 */

#ifndef PINCTRL_THUNDERBAY_H
#define PINCTRL_THUNDERBAY_H

/* THB GPIO Base address, Size is 64 KB */
#define THB_GPIO_APB_REGISTER_BASE_ADDR  0x80450000

#define THB_GPIO_DATA_INOUTx_OFFSET (0x8000)

#define THB_GPIO_DATA_IN (0x1)

#define THB_GPIO_PIN_OFFSET(pin_num) (pin_num * (0x4))

/* bit 0:2 - IS: Input Selection.*/
#define THB_GPIO_INPUT_SELECTION_MASK (0x7)

/* bit 3 - ID: Input Disable.
Note: if inputs are floating then the input of the pad should be disabled */
#define THB_GPIO_INPUT_DISABLE_MASK (0x8)

/* bit 4:6 - OS: Output Selection.
Note: These bit are only valid when bit[8] (PS) is set to 1â€™b0 (Port mode).
Otherwise these bits have no effect.*/
#define THB_GPIO_OUTPUT_SELECTION_MASK (0x70)

/* bit 7 - FBD: Feedback Disable. Note if ID=1 then FBD has no impact*/
#define THB_GPIO_FEEDBACK_DISABLE_MASK (0x80)

/* bit 8 - PS: Port Select */
#define THB_GPIO_PORT_SELECT_MASK (0x100)

/* bit 10 - DP: Direction of Pad*/
#define THB_GPIO_PAD_DIRECTION_MASK (0x400)

/* bit 11 - SPU: Strong Pull function of pad */
#define THB_GPIO_SPU_MASK (0x800)

/* bit 12 - PPEN: Pull Enable funtion of pad  */
#define THB_GPIO_PULL_ENABLE_MASK (0x1000)

/* bit 13 - PUQ: Pull Up function of Pad */
#define THB_GPIO_PULL_UP_MASK (0x2000)

/* bit 14 - PD: Pull Down function of Pad */
#define THB_GPIO_PULL_DOWN_MASK (0x4000)

/* bit 15 - ENAQ: Output function of Pad */
#define THB_GPIO_ENAQ_MASK (0x8000)

/* bit 16-19: Drive Strength for the Pad */
#define THB_GPIO_DRIVE_STRENGTH_MASK (0xF0000)

/* bit 20 - ModeI2CnCMOSq: Mode for operating the pad in I2C or CMOS*/
#define THB_GPIO_I2C_CMOS_MASK (0x100000)
#define THB_GPIO_SLEW_RATE_MASK (0x100000)

/* bit 21 - Mode1p8n1p2b: Mode for operating voltage selection of I2C pad*/
#define THB_GPIO_I2C_PAD_VOLTAGE_MASK (0x200000)
#define THB_GPIO_SCHMITT_TRIGGER_MASK (0x200000)

/* Reg:0-9, 60-61 */
#define THB_GPIO_I2C_CTRL_REG_x(pinnr) (((pinnr <= 9) || ((pinnr >= 60) && (pinnr < 62))) ? 1 : 0 )

/* Reg:10-59, 62-66 */
#define THB_GPIO_CTRL_REG_x(pinnr) ((((pinnr >= 10) && (pinnr < 60)) || ((pinnr >= 62) && (pinnr <=66))) ? 1 : 0 )

/* TODO: Update below table for mode:0-4
 *now only mode 0 values are updated */
static const u32 thb_modex_pinval [67] [5] = {
	{0x00000800, 0x00000811, 0x0, 0x0 ,0x0 },
	{0x00000800, 0x00000811, 0x0, 0x0 ,0x0 },
	{0x00000800, 0x00000811, 0x0, 0x0 ,0x0 },
	{0x00000800, 0x00000811, 0x0, 0x0 ,0x0 },
	{0x00000800, 0x00000811, 0x0, 0x0 ,0x0 },
	{0x00000800, 0x00000811, 0x0, 0x0 ,0x0 },
	{0x00000800, 0x00000811, 0x0, 0x0 ,0x0 },
	{0x00000800, 0x00000811, 0x0, 0x0 ,0x0 },
	{0x00000800, 0x00000811, 0x0, 0x0 ,0x0 },
	{0x00000800, 0x00000811, 0x0, 0x0 ,0x0 },
	{0x00370000, 0x00370011, 0x0, 0x0 ,0x0 },
	{0x00370000, 0x00370011, 0x0, 0x0 ,0x0 },
	{0x00370000, 0x00370011, 0x0, 0x0 ,0x0 },
	{0x00370000, 0x00370011, 0x0, 0x0 ,0x0 },
	{0x00370000, 0x00370011, 0x0, 0x0 ,0x0 },
	{0x00370000, 0x00370011, 0x0, 0x0 ,0x0 },
	{0x00370000, 0x00370011, 0x0, 0x0 ,0x0 },
	{0x00370000, 0x00370011, 0x0, 0x0 ,0x0 },
	{0x00170000, 0x0, 0x0, 0x0 ,0x0 },
	{0x00170000, 0x0, 0x0, 0x0 ,0x0 },
	{0x00170000, 0x0, 0x0, 0x0 ,0x0 },
	{0x00170000, 0x0, 0x0, 0x0 ,0x0 },
	{0x00170000, 0x0, 0x0, 0x0 ,0x0 },
	{0x00170000, 0x0, 0x0, 0x0 ,0x0 },
	{0x00170000, 0x0, 0x0, 0x0 ,0x0 },
	{0x00170000, 0x0, 0x0, 0x0 ,0x0 },
	{0x00170000, 0x0, 0x0, 0x0 ,0x0 },
	{0x00170000, 0x0, 0x0, 0x0 ,0x0 },
	{0x00170000, 0x0, 0x0, 0x0 ,0x0 },
	{0x00170000, 0x0, 0x0, 0x0 ,0x0 },
	{0x00170000, 0x0, 0x0, 0x0 ,0x0 },
	{0x00170000, 0x0, 0x0, 0x0 ,0x0 },
	{0x00170000, 0x0, 0x0, 0x0 ,0x0 },
	{0x00170000, 0x0, 0x0, 0x0 ,0x0 },
	{0x00170000, 0x0, 0x0, 0x0 ,0x0 },
	{0x00170000, 0x0, 0x0, 0x0 ,0x0 },
	{0x00170000, 0x0, 0x0, 0x0 ,0x0 },
	{0x00170000, 0x0, 0x0, 0x0 ,0x0 },
	{0x00170000, 0x0, 0x0, 0x0 ,0x0 },
	{0x00170000, 0x0, 0x0, 0x0 ,0x0 },
	{0x00170000, 0x0, 0x0, 0x0 ,0x0 },
	{0x00170000, 0x0, 0x0, 0x0 ,0x0 },
	{0x00170000, 0x0, 0x0, 0x0 ,0x0 },
	{0x00170000, 0x0, 0x0, 0x0 ,0x0 },
	{0x00170000, 0x0, 0x0, 0x0 ,0x0 },
	{0x00170000, 0x0, 0x0, 0x0 ,0x0 },
	{0x00170000, 0x0, 0x0, 0x0 ,0x0 },
	{0x00170000, 0x0, 0x0, 0x0 ,0x0 },
	{0x00170000, 0x0, 0x0, 0x0 ,0x0 },
	{0x00170000, 0x0, 0x0, 0x0 ,0x0 },
	{0x00170000, 0x0, 0x0, 0x0 ,0x0 },
	{0x00170000, 0x0, 0x0, 0x0 ,0x0 },
	{0x00170000, 0x0, 0x0, 0x0 ,0x0 },
	{0x00170000, 0x0, 0x0, 0x0 ,0x0 },
	{0x00170000, 0x0, 0x0, 0x0 ,0x0 },
	{0x00170000, 0x0, 0x0, 0x0 ,0x0 },
	{0x00170000, 0x0, 0x0, 0x0 ,0x0 },
	{0x00170000, 0x0, 0x0, 0x0 ,0x0 },
	{0x00370000, 0x0, 0x0, 0x0 ,0x0 },
	{0x00370000, 0x0, 0x0, 0x0 ,0x0 },
	{0x00000800, 0x0, 0x0, 0x0 ,0x0 },
	{0x00000800, 0x0, 0x0, 0x0 ,0x0 },
	{0x00370000, 0x0, 0x0, 0x0 ,0x0 },
	{0x00370000, 0x0, 0x0, 0x0 ,0x0 },
	{0x00370000, 0x0, 0x0, 0x0 ,0x0 },
	{0x00370000, 0x0, 0x0, 0x0 ,0x0 },
	{0x00370000, 0x0, 0x0, 0x0 ,0x0 },
};


struct thunderbay_mux_desc {
	u8 mode;
	const char *name;
};

#define THUNDERBAY_PIN_DESC(pin_number, pin_name, ...) {	\
	.number = pin_number,				\
	.name =	pin_name,				\
	.drv_data = &(struct thunderbay_mux_desc[]) {	\
			__VA_ARGS__, { } },		\
}							\

#define THUNDERBAY_MUX(pin_mode, pin_function) {		\
	.mode = pin_mode,				\
	.name = pin_function,				\
}							\

#define THUNDERBAY_NUM_IRQ_LINES	8

struct thunderbay_pinctrl {
	struct pinctrl_dev		*pctrl;
	void __iomem			*base0;
	struct device			*dev;
	struct gpio_chip		chip;
	const struct thunderbay_pin_soc	*soc;
	int irq[THUNDERBAY_NUM_IRQ_LINES];
	raw_spinlock_t          lock;
	const struct thb_pinctrl_group *groups;
	unsigned int			ngroups;
	const struct thb_pinmux_function *funcs;
	unsigned int			nfuncs;
};

struct thb_pinctrl_group {
	const char *name;
	const unsigned int *pins;
	const unsigned int npins;
};

struct thb_pinmux_function {
	const char *name;
	const char * const *groups;
	unsigned int ngroups;
};

struct thunderbay_pin_soc {
	const struct pinctrl_pin_desc		*pins;
	unsigned int				npins;
};

struct gpio_irq_source {
	bool active;
	unsigned int source;
	unsigned int line;
	unsigned int pins[4];
	unsigned int trigger;
	unsigned int gpios_conn;
};

int thunderbay_pinctrl_probe (struct platform_device *pdev);

#endif /* PINCTRL_THUNDERBAY_H */
