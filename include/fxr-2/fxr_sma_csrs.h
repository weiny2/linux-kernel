//                                                                             
// File:       fxr_sma_csrs.h                                                  
// Creator:    pvesvslx                                                        
// Time:       Friday Aug 1, 2014 [11:06:20 am]                                
//                                                                             
// Path:       /tmp/pvesvslx/nebulon_run/30229                                 
// Arguments:  /p/com/eda/denali/blueprint/3.7.4/Linux/blueprint -chdr -I      
//             /p/slx/eda/intel/nebulon/2.05_fdo/include -I                    
//             /p/slx/pvesv/fxr_autogen/fxr fxr_sma.rdl                        
//                                                                             
// Sources:    /tmp/pvesvslx/nebulon_run/30229/fxr_sma.rdlh                    
//             /tmp/pvesvslx/nebulon_run/30229/lib_udp.rdl                     
//             /tmp/pvesvslx/nebulon_run/30229/fxr_sma.rdl                     
//             /p/com/eda/intel/nebulon/2.05p1/generators/generator_common.pm  
//             /p/com/eda/intel/nebulon/2.05p1/generators/chdr.pm              
//                                                                             
// Blueprint:   3.7.4 (Tue Jun 23 00:17:01 PDT 2009)                           
// Machine:    scci56217                                                       
// OS:         Linux 2.6.16.60-0.58.1.3835.0.PTF.638363-smp                    
// Description:                                                                
//                                                                             
//Subnet management agent address map                                          
//                                                                             
// Copyright (C) 2014 Denali Software Inc.  All rights reserved                
// THIS FILE IS AUTOMATICALLY GENERATED BY DENALI BLUEPRINT, DO NOT EDIT       
//                                                                             



// SM_HEARTBEAT desc:  This is a CSR provided to allow the CPU to write a periodic,
// monotonically increasing (with wrap) heartbeat and a relatively slow
// pace.
typedef volatile union {
    struct {
        uint64_t  HEARTBEAT            :  32;    //  This is the heartbeat value.
        uint64_t  Reserved_63_32       :  32;    //  Reserved

    };
    uint64_t                         val;
} SM_HEARTBEAT_t;

// --------------------------------------------------------------------------------------------------------------------------------

// SM_HOST_MAILBOX_ADDRESS desc:  This CSR holds the address (GPA or HPA) of the mailbox on the host.
typedef volatile union {
    struct {
        uint64_t  HOST_ADDRESS         :  52;    //  This is the address.
        uint64_t  Reserved_63_52       :  12;    //  Reserved

    };
    uint64_t                         val;
} SM_HOST_MAILBOX_ADDRESS_t;

// --------------------------------------------------------------------------------------------------------------------------------

// SM_HOST_MAILBOX_SIZE desc:  This CSR holds the size (in bytes) of the mailbox on the host.
typedef volatile union {
    struct {
        uint64_t  MBOX_SIZE            :  32;    //  This is the size of the
                                                 // mailbox.
        uint64_t  Reserved_63_32       :  32;    //  Reserved

    };
    uint64_t                         val;
} SM_HOST_MAILBOX_SIZE_t;

// --------------------------------------------------------------------------------------------------------------------------------

// SM_MAILBOX_INT desc:  This CSR holds 4 bits indicating if a mailbox caused an interrupt.
typedef volatile union {
    struct {
        uint64_t  MBOX0_INT            :   1;    //  Mailbox 0 caused an interrupt
        uint64_t  MBOX1_INT            :   1;    //  Mailbox 1 caused an interrupt
        uint64_t  MBOX2_INT            :   1;    //  Mailbox 2 caused an interrupt
        uint64_t  MBOX0_INT_3          :   1;    //  Mailbox 3 caused an interrupt
        uint64_t  Reserved_63_4        :  60;    //  Reserved

    };
    uint64_t                         val;
} SM_MAILBOX_INT_t;

// --------------------------------------------------------------------------------------------------------------------------------

// SM_DOORBELL desc:  This CSR is a general doorbell used for communication from the host
// to the SMA or from on FXR.
typedef volatile union {
    struct {
        uint64_t  DOORBELL             :  64;    //  This is a generic doorbell
                                                 // used by software as it sees
                                                 // fit.

    };
    uint64_t                         val;
} SM_DOORBELL_t;

// --------------------------------------------------------------------------------------------------------------------------------

// SM_MAILBOX_0 desc:  An array of 8 byte entries for a mailbox
typedef volatile union {
    struct {
        uint64_t  MBOX_ENTRY           :  64;    //  Mailbox entry

    };
    uint64_t                         val;
} SM_MAILBOX_0_t;

// --------------------------------------------------------------------------------------------------------------------------------

// SM_MAILBOX_1 desc:  An array of 8 byte entries for a mailbox
typedef volatile union {
    struct {
        uint64_t  MBOX_ENTRY           :  64;    //  Mailbox entry

    };
    uint64_t                         val;
} SM_MAILBOX_1_t;

// --------------------------------------------------------------------------------------------------------------------------------

// SM_MAILBOX_2 desc:  An array of 8 byte entries for a mailbox
typedef volatile union {
    struct {
        uint64_t  MBOX_ENTRY           :  64;    //  Mailbox entry

    };
    uint64_t                         val;
} SM_MAILBOX_2_t;

// --------------------------------------------------------------------------------------------------------------------------------

// SM_MAILBOX_3 desc:  An array of 8 byte entries for a mailbox
typedef volatile union {
    struct {
        uint64_t  MBOX_ENTRY           :  64;    //  Mailbox entry

    };
    uint64_t                         val;
} SM_MAILBOX_3_t;

// --------------------------------------------------------------------------------------------------------------------------------

// SM_OOB_MAILBOX_0 desc:  An array of 8 byte entries for a mailbox. The size matches the host
// SMA mailbox.
typedef volatile union {
    struct {
        uint64_t  MBOX_ENTRY           :  64;    //  Mailbox entry

    };
    uint64_t                         val;
} SM_OOB_MAILBOX_0_t;

// --------------------------------------------------------------------------------------------------------------------------------

// SM_OOB_MAILBOX_1 desc:  An array of 8 byte entries for a mailbox. The size matches the host
// SMA mailbox.
typedef volatile union {
    struct {
        uint64_t  MBOX_ENTRY           :  64;    //  Mailbox entry

    };
    uint64_t                         val;
} SM_OOB_MAILBOX_1_t;

// --------------------------------------------------------------------------------------------------------------------------------

// SM_OOB_MAILBOX_2 desc:  An array of 8 byte entries for a mailbox. The size matches the host
// SMA mailbox.
typedef volatile union {
    struct {
        uint64_t  MBOX_ENTRY           :  64;    //  Mailbox entry

    };
    uint64_t                         val;
} SM_OOB_MAILBOX_2_t;

// --------------------------------------------------------------------------------------------------------------------------------

// SM_OOB_MAILBOX_3 desc:  An array of 8 byte entries for a mailbox. The size matches the host
// SMA mailbox.
typedef volatile union {
    struct {
        uint64_t  MBOX_ENTRY           :  64;    //  Mailbox entry

    };
    uint64_t                         val;
} SM_OOB_MAILBOX_3_t;

// --------------------------------------------------------------------------------------------------------------------------------

// starting the array instantiation section
typedef struct {
    SM_HEARTBEAT_t             SM_HEARTBEAT;     // offset 4'h0, width 64
    SM_HOST_MAILBOX_ADDRESS_t  SM_HOST_MAILBOX_ADDRESS; // offset 4'h8, width 64
    SM_HOST_MAILBOX_SIZE_t     SM_HOST_MAILBOX_SIZE; // offset 8'h10, width 64
    SM_MAILBOX_INT_t           SM_MAILBOX_INT;   // offset 8'h18, width 64
    SM_DOORBELL_t              SM_DOORBELL[8];   // offset 8'h20, width 64
    SM_MAILBOX_0_t             SM_MAILBOX_0[384]; // offset 16'h1000, width 64
    SM_MAILBOX_1_t             SM_MAILBOX_1[384]; // offset 16'h2000, width 64
    SM_MAILBOX_2_t             SM_MAILBOX_2[384]; // offset 16'h3000, width 64
    SM_MAILBOX_3_t             SM_MAILBOX_3[384]; // offset 16'h4000, width 64
    SM_OOB_MAILBOX_0_t         SM_OOB_MAILBOX_0[384]; // offset 16'h8000, width 64
    SM_OOB_MAILBOX_1_t         SM_OOB_MAILBOX_1[384]; // offset 16'h9000, width 64
    SM_OOB_MAILBOX_2_t         SM_OOB_MAILBOX_2[384]; // offset 20'h0A000, width 64
    SM_OOB_MAILBOX_3_t         SM_OOB_MAILBOX_3[384]; // offset 20'h0B000, width 64
} fxr_sma_csrs_t;                                // size:  20'h0BC00
