//                                                                             
// File:       fxr_tx_ci_csrs.h                                                
// Creator:    pvesvslx                                                        
// Time:       Friday Apr 25, 2014 [1:12:56 pm]                                
//                                                                             
// Path:       /tmp/pvesvslx/nebulon_run/12747                                 
// Arguments:  /p/com/eda/denali/blueprint/3.7.4/Linux/blueprint -chdr -I      
//             /p/slx/eda/intel/nebulon/2.05_fdo/include -I                    
//             /p/slx/pvesv/fxr_autogen/fxr -xml fxr_tx_ci.rdl                 
//                                                                             
// Sources:    /tmp/pvesvslx/nebulon_run/12747/fxr_tx_ci.rdlh                  
//             /tmp/pvesvslx/nebulon_run/12747/lib_udp.rdl                     
//             /tmp/pvesvslx/nebulon_run/12747/fxr_tx_ci.rdl                   
//             /p/com/eda/intel/nebulon/2.05p1/generators/generator_common.pm  
//             /p/com/eda/intel/nebulon/2.05p1/generators/xml.pm               
//             /p/com/eda/intel/nebulon/2.05p1/generators/walk_through.pm      
//             /p/com/eda/intel/nebulon/2.05p1/generators/chdr.pm              
//                                                                             
// Blueprint:   3.7.4 (Tue Jun 23 00:17:01 PDT 2009)                           
// Machine:    scci56220                                                       
// OS:         Linux 2.6.16.60-0.58.1.3835.0.PTF.638363-smp                    
// Description:                                                                
//                                                                             
//Transmit command interface address map                                       
//                                                                             
// Copyright (C) 2014 Denali Software Inc.  All rights reserved                
// THIS FILE IS AUTOMATICALLY GENERATED BY DENALI BLUEPRINT, DO NOT EDIT       
//                                                                             



// TX_CQ_AUTHENTICATION_CSR desc:  This structure contains 8 entries per CQ, addressed by the command
// authorization index together with the CQ number. Each entry contains
// an SRANK and USER_ID.
typedef volatile union {
    struct {
        uint64_t  USER_ID              :  32;    //  Host physical address to
                                                 // write the updated TX head
                                                 // pointer Updated RX head
                                                 // pointers are written to this
                                                 // address plus 0x08.USER_ID
        uint64_t  SRANK                :  32;    //  Indicates address is
                                                 // validSRANK

    };
    uint64_t                         val;
} TX_CQ_AUTHENTICATION_CSR_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CONFIG_CSR desc:  This is a per command queue CSR that controls how the CQ operates.
typedef volatile union {
    struct {
        uint64_t  PID                  :  12;    //  Process ID associated with
                                                 // this command queue. Default is
                                                 // to assign access to the kernel
                                                 // (reserved PID 0). Commands
                                                 // must use this PID as their
                                                 // IPID unless the CQ is
                                                 // privileged.
        uint64_t  PRIV_LEVEL           :   1;    //  Supervisor=0, User=1.
                                                 // Supervisor privilege level is
                                                 // required to write the DLID
                                                 // relocation table.
        uint64_t  ENABLE               :   1;    //  A CQ that is not enabled can
                                                 // be written, but slot full
                                                 // counts will always be zero.
        uint64_t  RSV                  :   1;    //  Reserved
        uint64_t  PHYS_DLID            :   1;    //  Allow physical DLID.
        uint64_t  DLID_BASE            :  16;    //  DLID relocation table base
                                                 // address. This value is left
                                                 // shifted based on the DLID
                                                 // relocation table block
                                                 // granularity. After shifting,it
                                                 // is added to the DLID specified
                                                 // in the commandThe sum is used
                                                 // to index the DLID relocation
                                                 // table. Not used for Physical
                                                 // DLIDs.
        uint64_t  SL_ENABLE            :  32;    //  Service level enable,
                                                 // specifying which service
                                                 // levels commands are allowed to
                                                 // use.

    };
    uint64_t                         val;
} TX_CQ_CONFIG_CSR_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_HEAD_UPDATE_ADDR desc:  This is a per command queue entry that controls where CQ head updates
// are written in memory. The address is used for both TX and RX head
// pointer updates.
typedef volatile union {
    struct {
        uint64_t  HD_PTR_HOST_ADDR     :  52;    //  Host physical address to
                                                 // write the updated TX head
                                                 // pointer Updated RX head
                                                 // pointers are written to this
                                                 // address plus 0x08.
        uint64_t  VALID                :   1;    //  Indicates address is valid
        uint64_t  RSV                  :  11;    //  Reserved

    };
    uint64_t                         val;
} TX_CQ_HEAD_UPDATE_ADDR_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_TAIL desc:  This is a per command queue entry for reading the CQ tail pointer.
// Hardware does not have an explicit tail pointer, instead it keeps
// track of filled slots. On reads, hardware will return a pointer to
// the first slot after its head pointer that is not full. Writes are
// ignored.
typedef volatile union {
    struct {
        uint64_t  TAIL                 :   7;    //  Command queue tail slot
        uint64_t  RSV                  :  57;    //  Reserved

    };
    uint64_t                         val;
} TX_CQ_TAIL_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_HEAD_UPDATE_CNTRL desc:  This CSR controls how often TX CQ head pointers are written to
// memory.
typedef volatile union {
    struct {
        uint64_t  RATE_CTRL            :   2;    //  Head pointer update frequency
                                                 // control, sets number of head
                                                 // pointer increments before head
                                                 // pointer is updated in memory.
                                                 // Value of 0, 1, 2, and 3
                                                 // correspond to updating on
                                                 // increments of 1, 2, 4, and 8,.
        uint64_t  RSV                  :  62;    //  Reserved

    };
    uint64_t                         val;
} TX_CQ_HEAD_UPDATE_CNTRL_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_SL0_TO_TC desc:  For port 0, this CSR maps service levels 0-7 to a service class,
// message class, and traffic class.
typedef volatile union {
    struct {
        uint64_t  SL0_P0_TC            :   2;    //  Service level 0 and port 0 to
                                                 // traffic class mapping
        uint64_t  SL0_P0_MC            :   1;    //  Service level 0 and port 0 to
                                                 // message class mapping
        uint64_t  SL0_P0_SC            :   5;    //  Service level 0 and port 0 to
                                                 // service class mapping
        uint64_t  SL1_P0_TC            :   2;    //  Service level 1 and port 0 to
                                                 // traffic class mapping
        uint64_t  SL1_P0_MC            :   1;    //  Service level 1 and port 0 to
                                                 // message class mapping
        uint64_t  SL1_P0_SC            :   5;    //  Service level 1 and port 0 to
                                                 // service class mapping
        uint64_t  SL2_P0_TC            :   2;    //  Service level 2 and port 0 to
                                                 // traffic class mapping
        uint64_t  SL2_P0_MC            :   1;    //  Service level 2 and port 0 to
                                                 // message class mapping
        uint64_t  SL2_P0_SC            :   5;    //  Service level 2 and port 0 to
                                                 // service class mapping
        uint64_t  SL3_P0_TC            :   2;    //  Service level 3 and port 0 to
                                                 // traffic class mapping
        uint64_t  SL3_P0_MC            :   1;    //  Service level 3 and port 0 to
                                                 // message class mapping
        uint64_t  SL3_P0_SC            :   5;    //  Service level 3 and port 0 to
                                                 // service class mapping
        uint64_t  SL4_P0_TC            :   2;    //  Service level 4 and port 0 to
                                                 // traffic class mapping
        uint64_t  SL4_P0_MC            :   1;    //  Service level 4 and port 0 to
                                                 // message class mapping
        uint64_t  SL4_P0_SC            :   5;    //  Service level 4 and port 0 to
                                                 // service class mapping
        uint64_t  SL5_P0_TC            :   2;    //  Service level 5 and port 0 to
                                                 // traffic class mapping
        uint64_t  SL5_P0_MC            :   1;    //  Service level 5 and port 0 to
                                                 // message class mapping
        uint64_t  SL5_P0_SC            :   5;    //  Service level 5 and port 0 to
                                                 // service class mapping
        uint64_t  SL6_P0_TC            :   2;    //  Service level 6 and port 0 to
                                                 // traffic class mapping
        uint64_t  SL6_P0_MC            :   1;    //  Service level 6 and port 0 to
                                                 // message class mapping
        uint64_t  SL6_P0_SC            :   5;    //  Service level 6 and port 0 to
                                                 // service class mapping
        uint64_t  SL7_P0_TC            :   2;    //  Service level 7 and port 0 to
                                                 // traffic class mapping
        uint64_t  SL7_P0_MC            :   1;    //  Service level 7 and port 0 to
                                                 // message class mapping
        uint64_t  SL7_P0_SC            :   5;    //  Service level 7 and port 0 to
                                                 // service class mapping

    };
    uint64_t                         val;
} TX_SL0_TO_TC_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_SL1_TO_TC desc:  For port 0, this CSR maps service levels 8-15 to a service class,
// message class, and traffic class.
typedef volatile union {
    struct {
        uint64_t  SL8_P0_TC            :   2;    //  Service level 8 and port 0 to
                                                 // traffic class mapping
        uint64_t  SL8_P0_MC            :   1;    //  Service level 8 and port 0 to
                                                 // message class mapping
        uint64_t  SL8_P0_SC            :   5;    //  Service level 8 and port 0 to
                                                 // service class mapping
        uint64_t  SL9_P0_TC            :   2;    //  Service level 9 and port 0 to
                                                 // traffic class mapping
        uint64_t  SL9_P0_MC            :   1;    //  Service level 9 and port 0 to
                                                 // message class mapping
        uint64_t  SL9_P0_SC            :   5;    //  Service level 9 and port 0 to
                                                 // service class mapping
        uint64_t  SL10_P0_TC           :   2;    //  Service level 10 and port 0
                                                 // to traffic class mapping
        uint64_t  SL10_P0_MC           :   1;    //  Service level 10 and port 0
                                                 // to message class mapping
        uint64_t  SL10_P0_SC           :   5;    //  Service level 10 and port 0
                                                 // to service class mapping
        uint64_t  SL11_P0_TC           :   2;    //  Service level 11 and port 0
                                                 // to traffic class mapping
        uint64_t  SL11_P0_MC           :   1;    //  Service level 11 and port 0
                                                 // to message class mapping
        uint64_t  SL11_P0_SC           :   5;    //  Service level 11 and port 0
                                                 // to service class mapping
        uint64_t  SL12_P0_TC           :   2;    //  Service level 12 and port 0
                                                 // to traffic class mapping
        uint64_t  SL12_P0_MC           :   1;    //  Service level 12 and port 0
                                                 // to message class mapping
        uint64_t  SL12_P0_SC           :   5;    //  Service level 12 and port 0
                                                 // to service class mapping
        uint64_t  SL13_P0_TC           :   2;    //  Service level 13 and port 0
                                                 // to traffic class mapping
        uint64_t  SL13_P0_MC           :   1;    //  Service level 13 and port 0
                                                 // to message class mapping
        uint64_t  SL13_P0_SC           :   5;    //  Service level 13 and port 0
                                                 // to service class mapping
        uint64_t  SL14_P0_TC           :   2;    //  Service level 14 and port 0
                                                 // to traffic class mapping
        uint64_t  SL14_P0_MC           :   1;    //  Service level 14 and port 0
                                                 // to message class mapping
        uint64_t  SL14_P0_SC           :   5;    //  Service level 14 and port 0
                                                 // to service class mapping
        uint64_t  SL15_P0_TC           :   2;    //  Service level 15 and port 0
                                                 // to traffic class mapping
        uint64_t  SL15_P0_MC           :   1;    //  Service level 15 and port 0
                                                 // to message class mapping
        uint64_t  SL15_P0_SC           :   5;    //  Service level 15 and port
                                                 // 1port 0 to service class
                                                 // mapping

    };
    uint64_t                         val;
} TX_SL1_TO_TC_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_SL2_TO_TC desc:  For port 0, this CSR maps service levels 8-15 to a service class,
// message class, and traffic class.
typedef volatile union {
    struct {
        uint64_t  SL16_P0_TC           :   2;    //  Service level 16 and port 0
                                                 // to traffic class mapping
        uint64_t  SL16_P0_MC           :   1;    //  Service level 16 and port 0
                                                 // to message class mapping
        uint64_t  SL16_P0_SC           :   5;    //  Service level 16 and port 0
                                                 // to service class mapping
        uint64_t  SL17_P0_TC           :   2;    //  Service level 17 and port 0
                                                 // to traffic class mapping
        uint64_t  SL17_P0_MC           :   1;    //  Service level 17 and port 0
                                                 // to message class mapping
        uint64_t  SL17_P0_SC           :   5;    //  Service level 17 and port 0
                                                 // to service class mapping
        uint64_t  SL18_P0_TC           :   2;    //  Service level 18 and port 0
                                                 // to traffic class mapping
        uint64_t  SL18_P0_MC           :   1;    //  Service level 18 and port 0
                                                 // to message class mapping
        uint64_t  SL18_P0_SC           :   5;    //  Service level 18 and port 0
                                                 // to service class mapping
        uint64_t  SL19_P0_TC           :   2;    //  Service level 19 and port 0
                                                 // to traffic class mapping
        uint64_t  SL19_P0_MC           :   1;    //  Service level 19 and port 0
                                                 // to message class mapping
        uint64_t  SL19_P0_SC           :   5;    //  Service level 19 and port 0
                                                 // to service class mapping
        uint64_t  SL20_P0_TC           :   2;    //  Service level 20 and port 0
                                                 // to traffic class mapping
        uint64_t  SL20_P0_MC           :   1;    //  Service level 20 and port 0
                                                 // to message class mapping
        uint64_t  SL20_P0_SC           :   5;    //  Service level 20 and port 0
                                                 // to service class mapping
        uint64_t  SL21_P0_TC           :   2;    //  Service level 21 and port 0
                                                 // to traffic class mapping
        uint64_t  SL21_P0_MC           :   1;    //  Service level 21 and port 0
                                                 // to message class mapping
        uint64_t  SL21_P0_SC           :   5;    //  Service level 21 and port 0
                                                 // to service class mapping
        uint64_t  SL22_P0_TC           :   2;    //  Service level 22 and port 0
                                                 // to traffic class mapping
        uint64_t  SL22_P0_MC           :   1;    //  Service level 22 and port 0
                                                 // to message class mapping
        uint64_t  SL22_P0_SC           :   5;    //  Service level 22 and port 0
                                                 // to service class mapping
        uint64_t  SL23_P0_TC           :   2;    //  Service level 23 and port 0
                                                 // to traffic class mapping
        uint64_t  SL23_P0_MC           :   1;    //  Service level 23 and port 0
                                                 // to message class mapping
        uint64_t  SL23_P0_SC           :   5;    //  Service level 23 and port 0
                                                 // to service class mapping

    };
    uint64_t                         val;
} TX_SL2_TO_TC_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_SL3_TO_TC desc:  For port 0, this CSR maps service levels 16-23 to a service class,
// message class, and traffic class.
typedef volatile union {
    struct {
        uint64_t  SL24_P0_TC           :   2;    //  Service level 24 and port 0
                                                 // to traffic class mapping
        uint64_t  SL24_P0_MC           :   1;    //  Service level 24 and port 0
                                                 // to message class mapping
        uint64_t  SL24_P0_SC           :   5;    //  Service level 24 and port 0
                                                 // to service class mapping
        uint64_t  SL25_P0_TC           :   2;    //  Service level 25 and port 0
                                                 // to traffic class mapping
        uint64_t  SL25_P0_MC           :   1;    //  Service level 25 and port 0
                                                 // to message class mapping
        uint64_t  SL25_P0_SC           :   5;    //  Service level 25 and port 0
                                                 // to service class mapping
        uint64_t  SL26_P0_TC           :   2;    //  Service level 26 and port 0
                                                 // to traffic class mapping
        uint64_t  SL26_P0_MC           :   1;    //  Service level 26 and port 0
                                                 // to message class mapping
        uint64_t  SL26_P0_SC           :   5;    //  Service level 26 and port 0
                                                 // to service class mapping
        uint64_t  SL27_P0_TC           :   2;    //  Service level 27 and port 0
                                                 // to traffic class mapping
        uint64_t  SL27_P0_MC           :   1;    //  Service level 27 and port 0
                                                 // to message class mapping
        uint64_t  SL27_P0_SC           :   5;    //  Service level 27 and port 0
                                                 // to service class mapping
        uint64_t  SL28_P0_TC           :   2;    //  Service level 28 and port 0
                                                 // to traffic class mapping
        uint64_t  SL28_P0_MC           :   1;    //  Service level 28 and port 0
                                                 // to message class mapping
        uint64_t  SL28_P0_SC           :   5;    //  Service level 28 and port 0
                                                 // to service class mapping
        uint64_t  SL29_P0_TC           :   2;    //  Service level 29 and port 0
                                                 // to traffic class mapping
        uint64_t  SL29_P0_MC           :   1;    //  Service level 29 and port 0
                                                 // to message class mapping
        uint64_t  SL29_P0_SC           :   5;    //  Service level 29 and port 0
                                                 // to service class mapping
        uint64_t  SL30_P0_TC           :   2;    //  Service level 30 and port 0
                                                 // to traffic class mapping
        uint64_t  SL30_P0_MC           :   1;    //  Service level 30 and port 0
                                                 // to message class mapping
        uint64_t  SL30_P0_SC           :   5;    //  Service level 30 and port 0
                                                 // to service class mapping
        uint64_t  SL31_P0_TC           :   2;    //  Service level 31 and port 0
                                                 // to traffic class mapping
        uint64_t  SL31_P0_MC           :   1;    //  Service level 31 and port 0
                                                 // to message class mapping
        uint64_t  SL31_P0_SC           :   5;    //  Service level 31 and port 0
                                                 // to service class mapping

    };
    uint64_t                         val;
} TX_SL3_TO_TC_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_SL4_TO_TC desc:  For port 1, this CSR maps service levels 0-7 to a service class,
// message class, and traffic class.
typedef volatile union {
    struct {
        uint64_t  SL0_P1_TC            :   2;    //  Service level 0 and port 1 to
                                                 // traffic class mapping
        uint64_t  SL0_P1_MC            :   1;    //  Service level 0 and port 1 to
                                                 // message class mapping
        uint64_t  SL0_P1_SC            :   5;    //  Service level 0 and port 1 to
                                                 // service class mapping
        uint64_t  SL1_P1_TC            :   2;    //  Service level 1 and port 1 to
                                                 // traffic class mapping
        uint64_t  SL1_P1_MC            :   1;    //  Service level 1 and port 1 to
                                                 // message class mapping
        uint64_t  SL1_P1_SC            :   5;    //  Service level 1 and port 1 to
                                                 // service class mapping
        uint64_t  SL2_P1_TC            :   2;    //  Service level 2 and port 1 to
                                                 // traffic class mapping
        uint64_t  SL2_P1_MC            :   1;    //  Service level 2 and port 1 to
                                                 // message class mapping
        uint64_t  SL2_P1_SC            :   5;    //  Service level 2 and port 1 to
                                                 // service class mapping
        uint64_t  SL3_P1_TC            :   2;    //  Service level 3 and port 1 to
                                                 // traffic class mapping
        uint64_t  SL3_P1_MC            :   1;    //  Service level 3 and port 1 to
                                                 // message class mapping
        uint64_t  SL3_P1_SC            :   5;    //  Service level 3 and port 1 to
                                                 // service class mapping
        uint64_t  SL4_P1_TC            :   2;    //  Service level 4 and port 1 to
                                                 // traffic class mapping
        uint64_t  SL4_P1_MC            :   1;    //  Service level 4 and port 1 to
                                                 // message class mapping
        uint64_t  SL4_P1_SC            :   5;    //  Service level 4 and port 1 to
                                                 // service class mapping
        uint64_t  SL5_P1_TC            :   2;    //  Service level 5 and port 1 to
                                                 // traffic class mapping
        uint64_t  SL5_P1_MC            :   1;    //  Service level 5 and port 1 to
                                                 // message class mapping
        uint64_t  SL5_P1_SC            :   5;    //  Service level 5 and port 1 to
                                                 // service class mapping
        uint64_t  SL6_P1_TC            :   2;    //  Service level 6 and port 1 to
                                                 // traffic class mapping
        uint64_t  SL6_P1_MC            :   1;    //  Service level 6 and port 1 to
                                                 // message class mapping
        uint64_t  SL6_P1_SC            :   5;    //  Service level 6 and port 1 to
                                                 // service class mapping
        uint64_t  SL7_P1_TC            :   2;    //  Service level 7 and port 1 to
                                                 // traffic class mapping
        uint64_t  SL7_P1_MC            :   1;    //  Service level 7 and port 1 to
                                                 // message class mapping
        uint64_t  SL7_P1_SC            :   5;    //  Service level 7 and port 1 to
                                                 // service class mapping

    };
    uint64_t                         val;
} TX_SL4_TO_TC_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_SL5_TO_TC desc:  For port 1, this CSR maps service levels 8-15 to a service class,
// message class, and traffic class.
typedef volatile union {
    struct {
        uint64_t  SL8_P1_TC            :   2;    //  Service level 8 and port 1 to
                                                 // traffic class mapping
        uint64_t  SL8_P1_MC            :   1;    //  Service level 8 and port 1 to
                                                 // message class mapping
        uint64_t  SL8_P1_SC            :   5;    //  Service level 8 and port 1 to
                                                 // service class mapping
        uint64_t  SL9_P1_TC            :   2;    //  Service level 9 and port 1 to
                                                 // traffic class mapping
        uint64_t  SL9_P1_MC            :   1;    //  Service level 9 and port 1 to
                                                 // message class mapping
        uint64_t  SL9_P1_SC            :   5;    //  Service level 9 and port 1 to
                                                 // service class mapping
        uint64_t  SL10_P1_TC           :   2;    //  Service level 10 and port 1
                                                 // to traffic class mapping
        uint64_t  SL10_P1_MC           :   1;    //  Service level 10 and port 1
                                                 // to message class mapping
        uint64_t  SL10_P1_SC           :   5;    //  Service level 10 and port 1
                                                 // to service class mapping
        uint64_t  SL11_P1_TC           :   2;    //  Service level 11 and port 1
                                                 // to traffic class mapping
        uint64_t  SL11_P1_MC           :   1;    //  Service level 11 and port 1
                                                 // to message class mapping
        uint64_t  SL11_P1_SC           :   5;    //  Service level 11 and port 1
                                                 // to service class mapping
        uint64_t  SL12_P1_TC           :   2;    //  Service level 12 and port 1
                                                 // to traffic class mapping
        uint64_t  SL12_P1_MC           :   1;    //  Service level 12 and port 1
                                                 // to message class mapping
        uint64_t  SL12_P1_SC           :   5;    //  Service level 12 and port 1
                                                 // to service class mapping
        uint64_t  SL13_P1_TC           :   2;    //  Service level 13 and port 1
                                                 // to traffic class mapping
        uint64_t  SL13_P1_MC           :   1;    //  Service level 13 and port 1
                                                 // to message class mapping
        uint64_t  SL13_P1_SC           :   5;    //  Service level 13 and port 1
                                                 // to service class mapping
        uint64_t  SL14_P1_TC           :   2;    //  Service level 14 and port 1
                                                 // to traffic class mapping
        uint64_t  SL14_P1_MC           :   1;    //  Service level 14 and port 1
                                                 // to message class mapping
        uint64_t  SL14_P1_SC           :   5;    //  Service level 14 and port 1
                                                 // to service class mapping
        uint64_t  SL15_P1_TC           :   2;    //  Service level 15 and port 1
                                                 // to traffic class mapping
        uint64_t  SL15_P1_MC           :   1;    //  Service level 15 and port 1
                                                 // to message class mapping
        uint64_t  SL15_P1_SC           :   5;    //  Service level 15 and port 1
                                                 // to service class mapping

    };
    uint64_t                         val;
} TX_SL5_TO_TC_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_SL6_TO_TC desc:  For port 1, this CSR maps service levels 16-23 to a service class,
// message class, and traffic class.
typedef volatile union {
    struct {
        uint64_t  SL16_P1_TC           :   2;    //  Service level 16 and port 1
                                                 // to traffic class mapping
        uint64_t  SL16_P1_MC           :   1;    //  Service level 16 and port 1
                                                 // to message class mapping
        uint64_t  SL16_P1_SC           :   5;    //  Service level 16 and port 1
                                                 // to service class mapping
        uint64_t  SL17_P1_TC           :   2;    //  Service level 17 and port 1
                                                 // to traffic class mapping
        uint64_t  SL17_P1_MC           :   1;    //  Service level 17 and port 1
                                                 // to message class mapping
        uint64_t  SL17_P1_SC           :   5;    //  Service level 17 and port 1
                                                 // to service class mapping
        uint64_t  SL18_P1_TC           :   2;    //  Service level 18 and port 1
                                                 // to traffic class mapping
        uint64_t  SL18_P1_MC           :   1;    //  Service level 18 and port 1
                                                 // to message class mapping
        uint64_t  SL18_P1_SC           :   5;    //  Service level 18 and port 1
                                                 // to service class mapping
        uint64_t  SL19_P1_TC           :   2;    //  Service level 19 and port 1
                                                 // to traffic class mapping
        uint64_t  SL19_P1_MC           :   1;    //  Service level 19 and port 1
                                                 // to message class mapping
        uint64_t  SL19_P1_SC           :   5;    //  Service level 19 and port 1
                                                 // to service class mapping
        uint64_t  SL20_P1_TC           :   2;    //  Service level 20 and port 1
                                                 // to traffic class mapping
        uint64_t  SL20_P1_MC           :   1;    //  Service level 20 and port 1
                                                 // to message class mapping
        uint64_t  SL20_P1_SC           :   5;    //  Service level 20 and port 1
                                                 // to service class mapping
        uint64_t  SL21_P1_TC           :   2;    //  Service level 21 and port 1
                                                 // to traffic class mapping
        uint64_t  SL21_P1_MC           :   1;    //  Service level 21 and port 1
                                                 // to message class mapping
        uint64_t  SL21_P1_SC           :   5;    //  Service level 21 and port 1
                                                 // to service class mapping
        uint64_t  SL22_P1_TC           :   2;    //  Service level 22 and port 1
                                                 // to traffic class mapping
        uint64_t  SL22_P1_MC           :   1;    //  Service level 22 and port 1
                                                 // to message class mapping
        uint64_t  SL22_P1_SC           :   5;    //  Service level 22 and port 1
                                                 // to service class mapping
        uint64_t  SL23_P1_TC           :   2;    //  Service level 23 and port 1
                                                 // to traffic class mapping
        uint64_t  SL23_P1_MC           :   1;    //  Service level 23 and port 1
                                                 // to message class mapping
        uint64_t  SL23_P1_SC           :   5;    //  Service level 23 and port 1
                                                 // to service class mapping

    };
    uint64_t                         val;
} TX_SL6_TO_TC_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_SL7_TO_TC desc:  For port 1, this CSR maps service levels 24-31 to a service class,
// message class, and traffic class.
typedef volatile union {
    struct {
        uint64_t  SL24_P1_TC           :   2;    //  Service level 24 and port 1
                                                 // to traffic class mapping
        uint64_t  SL24_P1_MC           :   1;    //  Service level 24 and port 1
                                                 // to message class mapping
        uint64_t  SL24_P1_SC           :   5;    //  Service level 24 and port 1
                                                 // to traffic class mapping
        uint64_t  SL25_P1_TC           :   2;    //  Service level 25 and port 1
                                                 // to traffic class mapping
        uint64_t  SL25_P1_MC           :   1;    //  Service level 25 and port 1
                                                 // to message class mapping
        uint64_t  SL25_P1_SC           :   5;    //  Service level 25 and port 1
                                                 // to service class mapping
        uint64_t  SL26_P1_TC           :   2;    //  Service level 26 and port 1
                                                 // to traffic class mapping
        uint64_t  SL26_P1_MC           :   1;    //  Service level 26 and port 1
                                                 // to message class mapping
        uint64_t  SL26_P1_SC           :   5;    //  Service level 26 and port 1
                                                 // to service class mapping
        uint64_t  SL27_P1_TC           :   2;    //  Service level 27 and port 1
                                                 // to traffic class mapping
        uint64_t  SL27_P1_MC           :   1;    //  Service level 27 and port 1
                                                 // to message class mapping
        uint64_t  SL27_P1_SC           :   5;    //  Service level 27 and port 1
                                                 // to service class mapping
        uint64_t  SL28_P1_TC           :   2;    //  Service level 28 and port 1
                                                 // to traffic class mapping
        uint64_t  SL28_P1_MC           :   1;    //  Service level 28 and port 1
                                                 // to message class mapping
        uint64_t  SL28_P1_SC           :   5;    //  Service level 28 and port 1
                                                 // to service class mapping
        uint64_t  SL29_P1_TC           :   2;    //  Service level 29 and port 1
                                                 // to traffic class mapping
        uint64_t  SL29_P1_MC           :   1;    //  Service level 29 and port 1
                                                 // to message class mapping
        uint64_t  SL29_P1_SC           :   5;    //  Service level 29 and port 1
                                                 // to service class mapping
        uint64_t  SL30_P1_TC           :   2;    //  Service level 30 and port 1
                                                 // to traffic class mapping
        uint64_t  SL30_P1_MC           :   1;    //  Service level 30 and port 1
                                                 // to message class mapping
        uint64_t  SL30_P1_SC           :   5;    //  Service level 30 and port 1
                                                 // to service class mapping
        uint64_t  SL31_P1_TC           :   2;    //  Service level 31 and port 1
                                                 // to traffic class mapping
        uint64_t  SL31_P1_MC           :   1;    //  Service level 31 and port 1
                                                 // to message class mapping
        uint64_t  SL31_P1_SC           :   5;    //  Service level 31 and port 1
                                                 // to service class mapping

    };
    uint64_t                         val;
} TX_SL7_TO_TC_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_DRAIN desc:  A write to this CSR initiates a drain operation for one transmit CQ.
// Starting from specified CQ's current head pointer until the specified
// drain slot, commands that are complete are sent into the TX pipeline
// as usual.The first incomplete command and all following commands are
// discarded.
typedef volatile union {
    struct {
        uint64_t  DRAIN_CQ             :   8;    //  CQ for drain operation
        uint64_t  DRAIN_SLOT           :   7;    //  Ending slot for drain
                                                 // operation
        uint64_t  RSV                  :   1;    //  Reserved
        uint64_t  DRAIN_ACTIVE         :   1;    //  Drain operation active. Set
                                                 // by hardware when this CSR is
                                                 // written, cleared when the
                                                 // drain operation finishes.
        uint64_t  DRAIN_DONE           :   1;    //  Drain operation done. Cleared
                                                 // by hardware when this CSR is
                                                 // written and set when the drain
                                                 // operation finishes.
        uint64_t  RSV_63               :  46;    //  Reserved

    };
    uint64_t                         val;
} TX_CQ_DRAIN_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_RESET desc:  A write to this CSR resets the specified CQ. The head pointer and all
// slot full counts are cleared.
typedef volatile union {
    struct {
        uint64_t  RESET_CQ             :   8;    //  CQ to be reset
        uint64_t  RSV                  :  56;    //  Reserved

    };
    uint64_t                         val;
} TX_CQ_RESET_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_TO_LIMIT desc:  Specifies the amount of time for a command, once started, to finish
// writing a CQ.
typedef volatile union {
    struct {
        uint64_t  RSV                  :  20;    //  Reserved, timeout value is
                                                 // limited to increments of one
                                                 // million
        uint64_t  TO_LIMIT             :  17;    //  Timeout value, in number of
                                                 // FXR clock ticks
        uint64_t  RSV_63               :  27;    //  Reserved

    };
    uint64_t                         val;
} TX_CQ_TO_LIMIT_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_DLID_GRANULARITY desc:  Specifies the DLID relocation table per entry block size. For systems
// that use 16 or fewer bits for LID addresses, the granularity should
// be set to 0. For greater than 16 bit LID addressing, the granularity
// should be set to the number of LID addresses - 16.
typedef volatile union {
    struct {
        uint64_t  GRANULARITY          :   4;    //  DLID replacement granularity
                                                 // 0--1 1--2 2--4 3--8 4--16
                                                 // 5--32 6--64 7--128 8--256
        uint64_t  RSV                  :  60;    //  Reserved

    };
    uint64_t                         val;
} TX_DLID_GRANULARITY_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_0 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_0_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_1 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_1_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_2 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_2_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_3 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_3_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_4 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_4_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_5 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_5_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_6 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_6_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_7 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_7_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_8 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_8_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_9 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_9_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_10 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_10_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_11 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_11_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_12 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_12_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_13 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_13_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_14 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_14_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_15 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_15_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_16 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_16_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_17 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_17_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_18 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_18_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_19 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_19_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_20 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_20_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_21 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_21_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_22 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_22_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_23 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_23_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_24 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_24_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_25 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_25_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_26 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_26_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_27 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_27_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_28 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_28_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_29 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_29_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_30 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_30_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_31 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_31_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_32 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_32_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_33 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_33_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_34 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_34_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_35 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_35_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_36 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_36_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_37 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_37_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_38 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_38_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_39 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_39_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_40 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_40_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_41 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_41_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_42 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_42_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_43 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_43_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_44 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_44_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_45 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_45_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_46 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_46_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_47 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_47_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_48 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_48_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_49 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_49_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_50 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_50_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_51 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_51_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_52 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_52_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_53 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_53_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_54 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_54_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_55 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_55_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_56 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_56_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_57 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_57_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_58 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_58_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_59 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_59_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_60 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_60_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_61 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_61_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_62 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_62_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_63 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_63_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_64 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_64_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_65 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_65_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_66 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_66_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_67 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_67_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_68 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_68_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_69 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_69_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_70 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_70_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_71 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_71_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_72 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_72_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_73 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_73_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_74 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_74_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_75 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_75_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_76 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_76_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_77 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_77_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_78 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_78_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_79 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_79_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_80 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_80_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_81 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_81_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_82 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_82_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_83 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_83_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_84 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_84_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_85 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_85_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_86 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_86_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_87 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_87_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_88 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_88_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_89 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_89_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_90 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_90_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_91 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_91_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_92 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_92_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_93 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_93_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_94 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_94_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_95 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_95_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_96 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_96_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_97 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_97_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_98 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_98_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_99 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_99_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_100 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_100_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_101 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_101_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_102 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_102_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_103 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_103_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_104 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_104_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_105 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_105_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_106 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_106_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_107 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_107_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_108 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_108_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_109 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_109_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_110 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_110_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_111 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_111_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_112 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_112_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_113 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_113_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_114 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_114_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_115 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_115_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_116 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_116_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_117 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_117_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_118 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_118_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_119 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_119_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_120 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_120_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_121 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_121_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_122 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_122_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_123 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_123_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_124 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_124_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_125 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_125_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_126 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_126_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_127 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_127_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_128 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_128_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_129 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_129_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_130 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_130_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_131 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_131_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_132 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_132_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_133 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_133_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_134 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_134_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_135 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_135_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_136 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_136_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_137 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_137_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_138 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_138_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_139 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_139_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_140 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_140_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_141 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_141_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_142 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_142_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_143 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_143_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_144 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_144_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_145 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_145_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_146 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_146_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_147 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_147_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_148 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_148_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_149 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_149_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_150 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_150_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_151 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_151_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_152 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_152_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_153 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_153_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_154 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_154_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_155 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_155_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_156 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_156_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_157 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_157_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_158 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_158_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_159 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_159_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_160 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_160_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_161 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_161_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_162 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_162_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_163 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_163_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_164 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_164_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_165 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_165_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_166 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_166_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_167 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_167_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_168 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_168_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_169 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_169_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_170 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_170_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_171 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_171_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_172 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_172_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_173 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_173_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_174 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_174_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_175 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_175_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_176 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_176_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_177 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_177_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_178 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_178_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_179 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_179_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_180 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_180_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_181 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_181_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_182 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_182_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_183 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_183_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_184 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_184_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_185 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_185_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_186 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_186_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_187 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_187_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_188 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_188_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_189 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_189_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_190 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_190_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_191 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_191_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_192 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_192_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_193 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_193_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_194 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_194_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_195 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_195_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_196 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_196_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_197 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_197_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_198 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_198_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_199 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_199_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_200 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_200_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_201 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_201_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_202 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_202_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_203 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_203_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_204 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_204_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_205 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_205_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_206 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_206_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_207 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_207_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_208 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_208_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_209 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_209_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_210 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_210_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_211 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_211_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_212 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_212_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_213 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_213_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_214 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_214_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_215 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_215_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_216 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_216_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_217 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_217_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_218 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_218_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_219 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_219_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_220 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_220_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_221 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_221_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_222 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_222_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_223 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_223_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_224 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_224_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_225 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_225_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_226 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_226_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_227 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_227_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_228 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_228_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_229 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_229_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_230 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_230_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_231 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_231_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_232 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_232_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_233 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_233_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_234 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_234_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_235 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_235_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_236 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_236_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_237 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_237_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_238 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_238_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_239 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_239_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_240 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_240_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_241 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_241_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_242 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_242_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_243 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_243_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_244 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_244_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_245 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_245_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_246 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_246_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_247 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_247_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_248 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_248_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_249 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_249_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_250 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_250_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_251 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_251_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_252 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_252_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_253 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_253_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_254 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_254_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_CQ_CSR_255 desc:  This CSR is used to describe the address region that is mapped to the
// transmit command queues and uses the CSR access path.
typedef volatile union {
    struct {
        uint64_t  TX_CQ_QWORD          :  64;    //  Quad word in the transmit
                                                 // command queue.

    };
    uint64_t                         val;
} TX_CQ_CSR_255_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TX_DLID_RT desc:  This CSR is used to describe the address region that is mapped to the
// DLID relocation table.
typedef volatile union {
    struct {
        uint64_t  BLK_PHYS_DLID        :  24;    //  Block physical DLID
        uint64_t  RPLC_PHYS_DLID       :  24;    //  Replacement physical DLID
        uint64_t  RPLC_MATCH           :   8;    //  Address match for replacement
        uint64_t  RPLC_BLK_SIZE        :   3;    //  Replacement block size. 0--1
                                                 // 1--2 2--4 3--8 4--16
                                                 // 5--32 6--64 7--128
                                                 // RPLC_BLK_SIZE should be less
                                                 // than granularity
        uint64_t  PORT_ONE             :   1;    //  Network port to use if
                                                 // SINGLE_PORT is set.
        uint64_t  SINGLE_PORT          :   1;    //  Access to DLID is available
                                                 // through one network port only.
        uint64_t  RSV                  :   3;    //  Reserved

    };
    uint64_t                         val;
} TX_DLID_RT_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TXCI_CQ_ERROR_GENERAL desc:  TXCI_CQ_ERROR_GENERAL
typedef volatile union {
    struct {
        uint64_t  inv_write_flush      :   1;    //  A write occured to a CQ that
                                                 // was being drained. The write
                                                 // did not occur
        uint64_t  inv_write_inactive   :   1;    //  A CQ write occured to a CQ
                                                 // that was inactive. The write
                                                 // occured, but the write pointer
                                                 // did not get updated
        uint64_t  Reserved_15_2        :  14;    //  Reserved
        uint64_t  address              :   7;    //  Address within a CQ
        uint64_t  Reserved_23          :   1;    //  Reserved
        uint64_t  cq_num               :   8;    //  CQ number that experienced
                                                 // the problem
        uint64_t  Reserved_63_32       :  32;    //  Reserved

    };
    uint64_t                         val;
} TXCI_CQ_ERROR_GENERAL_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TXCI_CSR_MBE desc:  TXCI_CSR_ERROR_MBE
typedef volatile union {
    struct {
        uint64_t  syndrome_command_queuecsr :   8;    //  Syndrome of last MBE of
                                                 // command queue CSRs
        uint64_t  cq_num_command_queue_csr :   6;    //  CQ number that experienced
                                                 // the command queue CSR error
        uint64_t  Reserved_63_14       :  50;    //  Reserved

    };
    uint64_t                         val;
} TXCI_CSR_MBE_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TXCI_CQ_ERROR_MBE desc:  TXCI_CQ_ERROR_MBE
typedef volatile union {
    struct {
        uint64_t  syndrome_qword0      :   8;    //  Syndrome of last MBE
        uint64_t  address              :   7;    //  Address within a CQ
        uint64_t  Reserved_15          :   1;    //  Reserved
        uint64_t  qword                :   4;    //  QWord position of the last
                                                 // MBE
        uint64_t  Reserved_23_20       :   4;    //  Reserved
        uint64_t  cq_num               :   8;    //  CQ number that experienced
                                                 // the problem
        uint64_t  cnt                  :   8;    //  Saturating counter of MBE's
                                                 // from all sources
        uint64_t  Reserved_63_40       :  24;    //  Reserved

    };
    uint64_t                         val;
} TXCI_CQ_ERROR_MBE_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TXCI_ST_ERROR_MBE desc:  TXCI_ST_ERROR_MBE
typedef volatile union {
    struct {
        uint64_t  syndrome_slot_qword_tracking :   8;    //  Syndrome of last MBE of slot
                                                 // qword tracking SRAM
        uint64_t  address_slot_qword_tracking :   6;    //  Address within slot qword
                                                 // tracking SRAM (8 bits max)
        uint64_t  Reserved_15_14       :   2;    //  Reserved
        uint64_t  cq_num_slot_qword_tracking :   7;    //  CQ number that experienced
                                                 // the slot qword tracking
                                                 // problem(7 bits max)
        uint64_t  Reserved_31_23       :   9;    //  Reserved
        uint64_t  syndrome_slot_full_tracking :   4;    //  Syndrome of slot full
                                                 // tracking RAM
        uint64_t  cq_num_slot_full_tracking :   4;    //  CQ number that experienced
                                                 // the slot qword tracking
                                                 // problem
        uint64_t  address_slot_full_tracking :   7;    //  Address within slot full
                                                 // tracking RAM
        uint64_t  Reserved_63_47       :  17;    //  Reserved

    };
    uint64_t                         val;
} TXCI_ST_ERROR_MBE_t;

// --------------------------------------------------------------------------------------------------------------------------------

// TXCI_DLID_ERROR_MBE desc:  TXCI_DLID_ERROR_MBE
typedef volatile union {
    struct {
        uint64_t  syndrome_qword0      :   8;    //  Syndrome of last MBE
        uint64_t  address              :   8;    //  Address within a DLID -TODO
                                                 // double check address
        uint64_t  Reserved_39_16       :  24;    //  Reserved
        uint64_t  Reserved_63_40       :  24;    //  Reserved

    };
    uint64_t                         val;
} TXCI_DLID_ERROR_MBE_t;

// --------------------------------------------------------------------------------------------------------------------------------

// starting the array instantiation section
typedef struct {
    TX_CQ_AUTHENTICATION_CSR_t TX_CQ_AUTHENTICATION_CSR[2048]; // offset 4'h0, width 64
    TX_CQ_CONFIG_CSR_t         TX_CQ_CONFIG_CSR[256]; // offset 16'h4000, width 64
    TX_CQ_HEAD_UPDATE_ADDR_t   TX_CQ_HEAD_UPDATE_ADDR[256]; // offset 16'h4800, width 64
    TX_CQ_TAIL_t               TX_CQ_TAIL[256];  // offset 16'h5000, width 64
    TX_CQ_HEAD_UPDATE_CNTRL_t  TX_CQ_HEAD_UPDATE_CNTRL; // offset 16'h5800, width 64
    TX_SL0_TO_TC_t             TX_SL0_TO_TC;     // offset 16'h5808, width 64
    TX_SL1_TO_TC_t             TX_SL1_TO_TC;     // offset 16'h5810, width 64
    TX_SL2_TO_TC_t             TX_SL2_TO_TC;     // offset 16'h5818, width 64
    TX_SL3_TO_TC_t             TX_SL3_TO_TC;     // offset 16'h5820, width 64
    TX_SL4_TO_TC_t             TX_SL4_TO_TC;     // offset 16'h5828, width 64
    TX_SL5_TO_TC_t             TX_SL5_TO_TC;     // offset 16'h5830, width 64
    TX_SL6_TO_TC_t             TX_SL6_TO_TC;     // offset 16'h5838, width 64
    TX_SL7_TO_TC_t             TX_SL7_TO_TC;     // offset 16'h5840, width 64
    TX_CQ_DRAIN_t              TX_CQ_DRAIN;      // offset 16'h5848, width 64
    TX_CQ_RESET_t              TX_CQ_RESET;      // offset 16'h5850, width 64
    TX_CQ_TO_LIMIT_t           TX_CQ_TO_LIMIT;   // offset 16'h5858, width 64
    TX_DLID_GRANULARITY_t      TX_DLID_GRANULARITY; // offset 16'h5860, width 64
    TX_CQ_CSR_0_t              TX_CQ_CSR_0[1024]; // offset 24'h100000, width 64
    TX_CQ_CSR_1_t              TX_CQ_CSR_1[1024]; // offset 24'h102000, width 64
    TX_CQ_CSR_2_t              TX_CQ_CSR_2[1024]; // offset 24'h104000, width 64
    TX_CQ_CSR_3_t              TX_CQ_CSR_3[1024]; // offset 24'h106000, width 64
    TX_CQ_CSR_4_t              TX_CQ_CSR_4[1024]; // offset 24'h108000, width 64
    TX_CQ_CSR_5_t              TX_CQ_CSR_5[1024]; // offset 24'h10A000, width 64
    TX_CQ_CSR_6_t              TX_CQ_CSR_6[1024]; // offset 24'h10C000, width 64
    TX_CQ_CSR_7_t              TX_CQ_CSR_7[1024]; // offset 24'h10E000, width 64
    TX_CQ_CSR_8_t              TX_CQ_CSR_8[1024]; // offset 24'h110000, width 64
    TX_CQ_CSR_9_t              TX_CQ_CSR_9[1024]; // offset 24'h112000, width 64
    TX_CQ_CSR_10_t             TX_CQ_CSR_10[1024]; // offset 24'h114000, width 64
    TX_CQ_CSR_11_t             TX_CQ_CSR_11[1024]; // offset 24'h116000, width 64
    TX_CQ_CSR_12_t             TX_CQ_CSR_12[1024]; // offset 24'h118000, width 64
    TX_CQ_CSR_13_t             TX_CQ_CSR_13[1024]; // offset 24'h11A000, width 64
    TX_CQ_CSR_14_t             TX_CQ_CSR_14[1024]; // offset 24'h11C000, width 64
    TX_CQ_CSR_15_t             TX_CQ_CSR_15[1024]; // offset 24'h11E000, width 64
    TX_CQ_CSR_16_t             TX_CQ_CSR_16[1024]; // offset 24'h120000, width 64
    TX_CQ_CSR_17_t             TX_CQ_CSR_17[1024]; // offset 24'h122000, width 64
    TX_CQ_CSR_18_t             TX_CQ_CSR_18[1024]; // offset 24'h124000, width 64
    TX_CQ_CSR_19_t             TX_CQ_CSR_19[1024]; // offset 24'h126000, width 64
    TX_CQ_CSR_20_t             TX_CQ_CSR_20[1024]; // offset 24'h128000, width 64
    TX_CQ_CSR_21_t             TX_CQ_CSR_21[1024]; // offset 24'h12A000, width 64
    TX_CQ_CSR_22_t             TX_CQ_CSR_22[1024]; // offset 24'h12C000, width 64
    TX_CQ_CSR_23_t             TX_CQ_CSR_23[1024]; // offset 24'h12E000, width 64
    TX_CQ_CSR_24_t             TX_CQ_CSR_24[1024]; // offset 24'h130000, width 64
    TX_CQ_CSR_25_t             TX_CQ_CSR_25[1024]; // offset 24'h132000, width 64
    TX_CQ_CSR_26_t             TX_CQ_CSR_26[1024]; // offset 24'h134000, width 64
    TX_CQ_CSR_27_t             TX_CQ_CSR_27[1024]; // offset 24'h136000, width 64
    TX_CQ_CSR_28_t             TX_CQ_CSR_28[1024]; // offset 24'h138000, width 64
    TX_CQ_CSR_29_t             TX_CQ_CSR_29[1024]; // offset 24'h13A000, width 64
    TX_CQ_CSR_30_t             TX_CQ_CSR_30[1024]; // offset 24'h13C000, width 64
    TX_CQ_CSR_31_t             TX_CQ_CSR_31[1024]; // offset 24'h13E000, width 64
    TX_CQ_CSR_32_t             TX_CQ_CSR_32[1024]; // offset 24'h140000, width 64
    TX_CQ_CSR_33_t             TX_CQ_CSR_33[1024]; // offset 24'h142000, width 64
    TX_CQ_CSR_34_t             TX_CQ_CSR_34[1024]; // offset 24'h144000, width 64
    TX_CQ_CSR_35_t             TX_CQ_CSR_35[1024]; // offset 24'h146000, width 64
    TX_CQ_CSR_36_t             TX_CQ_CSR_36[1024]; // offset 24'h148000, width 64
    TX_CQ_CSR_37_t             TX_CQ_CSR_37[1024]; // offset 24'h14A000, width 64
    TX_CQ_CSR_38_t             TX_CQ_CSR_38[1024]; // offset 24'h14C000, width 64
    TX_CQ_CSR_39_t             TX_CQ_CSR_39[1024]; // offset 24'h14E000, width 64
    TX_CQ_CSR_40_t             TX_CQ_CSR_40[1024]; // offset 24'h150000, width 64
    TX_CQ_CSR_41_t             TX_CQ_CSR_41[1024]; // offset 24'h152000, width 64
    TX_CQ_CSR_42_t             TX_CQ_CSR_42[1024]; // offset 24'h154000, width 64
    TX_CQ_CSR_43_t             TX_CQ_CSR_43[1024]; // offset 24'h156000, width 64
    TX_CQ_CSR_44_t             TX_CQ_CSR_44[1024]; // offset 24'h158000, width 64
    TX_CQ_CSR_45_t             TX_CQ_CSR_45[1024]; // offset 24'h15A000, width 64
    TX_CQ_CSR_46_t             TX_CQ_CSR_46[1024]; // offset 24'h15C000, width 64
    TX_CQ_CSR_47_t             TX_CQ_CSR_47[1024]; // offset 24'h15E000, width 64
    TX_CQ_CSR_48_t             TX_CQ_CSR_48[1024]; // offset 24'h160000, width 64
    TX_CQ_CSR_49_t             TX_CQ_CSR_49[1024]; // offset 24'h162000, width 64
    TX_CQ_CSR_50_t             TX_CQ_CSR_50[1024]; // offset 24'h164000, width 64
    TX_CQ_CSR_51_t             TX_CQ_CSR_51[1024]; // offset 24'h166000, width 64
    TX_CQ_CSR_52_t             TX_CQ_CSR_52[1024]; // offset 24'h168000, width 64
    TX_CQ_CSR_53_t             TX_CQ_CSR_53[1024]; // offset 24'h16A000, width 64
    TX_CQ_CSR_54_t             TX_CQ_CSR_54[1024]; // offset 24'h16C000, width 64
    TX_CQ_CSR_55_t             TX_CQ_CSR_55[1024]; // offset 24'h16E000, width 64
    TX_CQ_CSR_56_t             TX_CQ_CSR_56[1024]; // offset 24'h170000, width 64
    TX_CQ_CSR_57_t             TX_CQ_CSR_57[1024]; // offset 24'h172000, width 64
    TX_CQ_CSR_58_t             TX_CQ_CSR_58[1024]; // offset 24'h174000, width 64
    TX_CQ_CSR_59_t             TX_CQ_CSR_59[1024]; // offset 24'h176000, width 64
    TX_CQ_CSR_60_t             TX_CQ_CSR_60[1024]; // offset 24'h178000, width 64
    TX_CQ_CSR_61_t             TX_CQ_CSR_61[1024]; // offset 24'h17A000, width 64
    TX_CQ_CSR_62_t             TX_CQ_CSR_62[1024]; // offset 24'h17C000, width 64
    TX_CQ_CSR_63_t             TX_CQ_CSR_63[1024]; // offset 24'h17E000, width 64
    TX_CQ_CSR_64_t             TX_CQ_CSR_64[1024]; // offset 24'h180000, width 64
    TX_CQ_CSR_65_t             TX_CQ_CSR_65[1024]; // offset 24'h182000, width 64
    TX_CQ_CSR_66_t             TX_CQ_CSR_66[1024]; // offset 24'h184000, width 64
    TX_CQ_CSR_67_t             TX_CQ_CSR_67[1024]; // offset 24'h186000, width 64
    TX_CQ_CSR_68_t             TX_CQ_CSR_68[1024]; // offset 24'h188000, width 64
    TX_CQ_CSR_69_t             TX_CQ_CSR_69[1024]; // offset 24'h18A000, width 64
    TX_CQ_CSR_70_t             TX_CQ_CSR_70[1024]; // offset 24'h18C000, width 64
    TX_CQ_CSR_71_t             TX_CQ_CSR_71[1024]; // offset 24'h18E000, width 64
    TX_CQ_CSR_72_t             TX_CQ_CSR_72[1024]; // offset 24'h190000, width 64
    TX_CQ_CSR_73_t             TX_CQ_CSR_73[1024]; // offset 24'h192000, width 64
    TX_CQ_CSR_74_t             TX_CQ_CSR_74[1024]; // offset 24'h194000, width 64
    TX_CQ_CSR_75_t             TX_CQ_CSR_75[1024]; // offset 24'h196000, width 64
    TX_CQ_CSR_76_t             TX_CQ_CSR_76[1024]; // offset 24'h198000, width 64
    TX_CQ_CSR_77_t             TX_CQ_CSR_77[1024]; // offset 24'h19A000, width 64
    TX_CQ_CSR_78_t             TX_CQ_CSR_78[1024]; // offset 24'h19C000, width 64
    TX_CQ_CSR_79_t             TX_CQ_CSR_79[1024]; // offset 24'h19E000, width 64
    TX_CQ_CSR_80_t             TX_CQ_CSR_80[1024]; // offset 24'h1A0000, width 64
    TX_CQ_CSR_81_t             TX_CQ_CSR_81[1024]; // offset 24'h1A2000, width 64
    TX_CQ_CSR_82_t             TX_CQ_CSR_82[1024]; // offset 24'h1A4000, width 64
    TX_CQ_CSR_83_t             TX_CQ_CSR_83[1024]; // offset 24'h1A6000, width 64
    TX_CQ_CSR_84_t             TX_CQ_CSR_84[1024]; // offset 24'h1A8000, width 64
    TX_CQ_CSR_85_t             TX_CQ_CSR_85[1024]; // offset 24'h1AA000, width 64
    TX_CQ_CSR_86_t             TX_CQ_CSR_86[1024]; // offset 24'h1AC000, width 64
    TX_CQ_CSR_87_t             TX_CQ_CSR_87[1024]; // offset 24'h1AE000, width 64
    TX_CQ_CSR_88_t             TX_CQ_CSR_88[1024]; // offset 24'h1B0000, width 64
    TX_CQ_CSR_89_t             TX_CQ_CSR_89[1024]; // offset 24'h1B2000, width 64
    TX_CQ_CSR_90_t             TX_CQ_CSR_90[1024]; // offset 24'h1B4000, width 64
    TX_CQ_CSR_91_t             TX_CQ_CSR_91[1024]; // offset 24'h1B6000, width 64
    TX_CQ_CSR_92_t             TX_CQ_CSR_92[1024]; // offset 24'h1B8000, width 64
    TX_CQ_CSR_93_t             TX_CQ_CSR_93[1024]; // offset 24'h1BA000, width 64
    TX_CQ_CSR_94_t             TX_CQ_CSR_94[1024]; // offset 24'h1BC000, width 64
    TX_CQ_CSR_95_t             TX_CQ_CSR_95[1024]; // offset 24'h1BE000, width 64
    TX_CQ_CSR_96_t             TX_CQ_CSR_96[1024]; // offset 24'h1C0000, width 64
    TX_CQ_CSR_97_t             TX_CQ_CSR_97[1024]; // offset 24'h1C2000, width 64
    TX_CQ_CSR_98_t             TX_CQ_CSR_98[1024]; // offset 24'h1C4000, width 64
    TX_CQ_CSR_99_t             TX_CQ_CSR_99[1024]; // offset 24'h1C6000, width 64
    TX_CQ_CSR_100_t            TX_CQ_CSR_100[1024]; // offset 24'h1C8000, width 64
    TX_CQ_CSR_101_t            TX_CQ_CSR_101[1024]; // offset 24'h1CA000, width 64
    TX_CQ_CSR_102_t            TX_CQ_CSR_102[1024]; // offset 24'h1CC000, width 64
    TX_CQ_CSR_103_t            TX_CQ_CSR_103[1024]; // offset 24'h1CE000, width 64
    TX_CQ_CSR_104_t            TX_CQ_CSR_104[1024]; // offset 24'h1D0000, width 64
    TX_CQ_CSR_105_t            TX_CQ_CSR_105[1024]; // offset 24'h1D2000, width 64
    TX_CQ_CSR_106_t            TX_CQ_CSR_106[1024]; // offset 24'h1D4000, width 64
    TX_CQ_CSR_107_t            TX_CQ_CSR_107[1024]; // offset 24'h1D6000, width 64
    TX_CQ_CSR_108_t            TX_CQ_CSR_108[1024]; // offset 24'h1D8000, width 64
    TX_CQ_CSR_109_t            TX_CQ_CSR_109[1024]; // offset 24'h1DA000, width 64
    TX_CQ_CSR_110_t            TX_CQ_CSR_110[1024]; // offset 24'h1DC000, width 64
    TX_CQ_CSR_111_t            TX_CQ_CSR_111[1024]; // offset 24'h1DE000, width 64
    TX_CQ_CSR_112_t            TX_CQ_CSR_112[1024]; // offset 24'h1E0000, width 64
    TX_CQ_CSR_113_t            TX_CQ_CSR_113[1024]; // offset 24'h1E2000, width 64
    TX_CQ_CSR_114_t            TX_CQ_CSR_114[1024]; // offset 24'h1E4000, width 64
    TX_CQ_CSR_115_t            TX_CQ_CSR_115[1024]; // offset 24'h1E6000, width 64
    TX_CQ_CSR_116_t            TX_CQ_CSR_116[1024]; // offset 24'h1E8000, width 64
    TX_CQ_CSR_117_t            TX_CQ_CSR_117[1024]; // offset 24'h1EA000, width 64
    TX_CQ_CSR_118_t            TX_CQ_CSR_118[1024]; // offset 24'h1EC000, width 64
    TX_CQ_CSR_119_t            TX_CQ_CSR_119[1024]; // offset 24'h1EE000, width 64
    TX_CQ_CSR_120_t            TX_CQ_CSR_120[1024]; // offset 24'h1F0000, width 64
    TX_CQ_CSR_121_t            TX_CQ_CSR_121[1024]; // offset 24'h1F2000, width 64
    TX_CQ_CSR_122_t            TX_CQ_CSR_122[1024]; // offset 24'h1F4000, width 64
    TX_CQ_CSR_123_t            TX_CQ_CSR_123[1024]; // offset 24'h1F6000, width 64
    TX_CQ_CSR_124_t            TX_CQ_CSR_124[1024]; // offset 24'h1F8000, width 64
    TX_CQ_CSR_125_t            TX_CQ_CSR_125[1024]; // offset 24'h1FA000, width 64
    TX_CQ_CSR_126_t            TX_CQ_CSR_126[1024]; // offset 24'h1FC000, width 64
    TX_CQ_CSR_127_t            TX_CQ_CSR_127[1024]; // offset 24'h1FE000, width 64
    TX_CQ_CSR_128_t            TX_CQ_CSR_128[1024]; // offset 24'h200000, width 64
    TX_CQ_CSR_129_t            TX_CQ_CSR_129[1024]; // offset 24'h202000, width 64
    TX_CQ_CSR_130_t            TX_CQ_CSR_130[1024]; // offset 24'h204000, width 64
    TX_CQ_CSR_131_t            TX_CQ_CSR_131[1024]; // offset 24'h206000, width 64
    TX_CQ_CSR_132_t            TX_CQ_CSR_132[1024]; // offset 24'h208000, width 64
    TX_CQ_CSR_133_t            TX_CQ_CSR_133[1024]; // offset 24'h20A000, width 64
    TX_CQ_CSR_134_t            TX_CQ_CSR_134[1024]; // offset 24'h20C000, width 64
    TX_CQ_CSR_135_t            TX_CQ_CSR_135[1024]; // offset 24'h20E000, width 64
    TX_CQ_CSR_136_t            TX_CQ_CSR_136[1024]; // offset 24'h210000, width 64
    TX_CQ_CSR_137_t            TX_CQ_CSR_137[1024]; // offset 24'h212000, width 64
    TX_CQ_CSR_138_t            TX_CQ_CSR_138[1024]; // offset 24'h214000, width 64
    TX_CQ_CSR_139_t            TX_CQ_CSR_139[1024]; // offset 24'h216000, width 64
    TX_CQ_CSR_140_t            TX_CQ_CSR_140[1024]; // offset 24'h218000, width 64
    TX_CQ_CSR_141_t            TX_CQ_CSR_141[1024]; // offset 24'h21A000, width 64
    TX_CQ_CSR_142_t            TX_CQ_CSR_142[1024]; // offset 24'h21C000, width 64
    TX_CQ_CSR_143_t            TX_CQ_CSR_143[1024]; // offset 24'h21E000, width 64
    TX_CQ_CSR_144_t            TX_CQ_CSR_144[1024]; // offset 24'h220000, width 64
    TX_CQ_CSR_145_t            TX_CQ_CSR_145[1024]; // offset 24'h222000, width 64
    TX_CQ_CSR_146_t            TX_CQ_CSR_146[1024]; // offset 24'h224000, width 64
    TX_CQ_CSR_147_t            TX_CQ_CSR_147[1024]; // offset 24'h226000, width 64
    TX_CQ_CSR_148_t            TX_CQ_CSR_148[1024]; // offset 24'h228000, width 64
    TX_CQ_CSR_149_t            TX_CQ_CSR_149[1024]; // offset 24'h22A000, width 64
    TX_CQ_CSR_150_t            TX_CQ_CSR_150[1024]; // offset 24'h22C000, width 64
    TX_CQ_CSR_151_t            TX_CQ_CSR_151[1024]; // offset 24'h22E000, width 64
    TX_CQ_CSR_152_t            TX_CQ_CSR_152[1024]; // offset 24'h230000, width 64
    TX_CQ_CSR_153_t            TX_CQ_CSR_153[1024]; // offset 24'h232000, width 64
    TX_CQ_CSR_154_t            TX_CQ_CSR_154[1024]; // offset 24'h234000, width 64
    TX_CQ_CSR_155_t            TX_CQ_CSR_155[1024]; // offset 24'h236000, width 64
    TX_CQ_CSR_156_t            TX_CQ_CSR_156[1024]; // offset 24'h238000, width 64
    TX_CQ_CSR_157_t            TX_CQ_CSR_157[1024]; // offset 24'h23A000, width 64
    TX_CQ_CSR_158_t            TX_CQ_CSR_158[1024]; // offset 24'h23C000, width 64
    TX_CQ_CSR_159_t            TX_CQ_CSR_159[1024]; // offset 24'h23E000, width 64
    TX_CQ_CSR_160_t            TX_CQ_CSR_160[1024]; // offset 24'h240000, width 64
    TX_CQ_CSR_161_t            TX_CQ_CSR_161[1024]; // offset 24'h242000, width 64
    TX_CQ_CSR_162_t            TX_CQ_CSR_162[1024]; // offset 24'h244000, width 64
    TX_CQ_CSR_163_t            TX_CQ_CSR_163[1024]; // offset 24'h246000, width 64
    TX_CQ_CSR_164_t            TX_CQ_CSR_164[1024]; // offset 24'h248000, width 64
    TX_CQ_CSR_165_t            TX_CQ_CSR_165[1024]; // offset 24'h24A000, width 64
    TX_CQ_CSR_166_t            TX_CQ_CSR_166[1024]; // offset 24'h24C000, width 64
    TX_CQ_CSR_167_t            TX_CQ_CSR_167[1024]; // offset 24'h24E000, width 64
    TX_CQ_CSR_168_t            TX_CQ_CSR_168[1024]; // offset 24'h250000, width 64
    TX_CQ_CSR_169_t            TX_CQ_CSR_169[1024]; // offset 24'h252000, width 64
    TX_CQ_CSR_170_t            TX_CQ_CSR_170[1024]; // offset 24'h254000, width 64
    TX_CQ_CSR_171_t            TX_CQ_CSR_171[1024]; // offset 24'h256000, width 64
    TX_CQ_CSR_172_t            TX_CQ_CSR_172[1024]; // offset 24'h258000, width 64
    TX_CQ_CSR_173_t            TX_CQ_CSR_173[1024]; // offset 24'h25A000, width 64
    TX_CQ_CSR_174_t            TX_CQ_CSR_174[1024]; // offset 24'h25C000, width 64
    TX_CQ_CSR_175_t            TX_CQ_CSR_175[1024]; // offset 24'h25E000, width 64
    TX_CQ_CSR_176_t            TX_CQ_CSR_176[1024]; // offset 24'h260000, width 64
    TX_CQ_CSR_177_t            TX_CQ_CSR_177[1024]; // offset 24'h262000, width 64
    TX_CQ_CSR_178_t            TX_CQ_CSR_178[1024]; // offset 24'h264000, width 64
    TX_CQ_CSR_179_t            TX_CQ_CSR_179[1024]; // offset 24'h266000, width 64
    TX_CQ_CSR_180_t            TX_CQ_CSR_180[1024]; // offset 24'h268000, width 64
    TX_CQ_CSR_181_t            TX_CQ_CSR_181[1024]; // offset 24'h26A000, width 64
    TX_CQ_CSR_182_t            TX_CQ_CSR_182[1024]; // offset 24'h26C000, width 64
    TX_CQ_CSR_183_t            TX_CQ_CSR_183[1024]; // offset 24'h26E000, width 64
    TX_CQ_CSR_184_t            TX_CQ_CSR_184[1024]; // offset 24'h270000, width 64
    TX_CQ_CSR_185_t            TX_CQ_CSR_185[1024]; // offset 24'h272000, width 64
    TX_CQ_CSR_186_t            TX_CQ_CSR_186[1024]; // offset 24'h274000, width 64
    TX_CQ_CSR_187_t            TX_CQ_CSR_187[1024]; // offset 24'h276000, width 64
    TX_CQ_CSR_188_t            TX_CQ_CSR_188[1024]; // offset 24'h278000, width 64
    TX_CQ_CSR_189_t            TX_CQ_CSR_189[1024]; // offset 24'h27A000, width 64
    TX_CQ_CSR_190_t            TX_CQ_CSR_190[1024]; // offset 24'h27C000, width 64
    TX_CQ_CSR_191_t            TX_CQ_CSR_191[1024]; // offset 24'h27E000, width 64
    TX_CQ_CSR_192_t            TX_CQ_CSR_192[1024]; // offset 24'h280000, width 64
    TX_CQ_CSR_193_t            TX_CQ_CSR_193[1024]; // offset 24'h282000, width 64
    TX_CQ_CSR_194_t            TX_CQ_CSR_194[1024]; // offset 24'h284000, width 64
    TX_CQ_CSR_195_t            TX_CQ_CSR_195[1024]; // offset 24'h286000, width 64
    TX_CQ_CSR_196_t            TX_CQ_CSR_196[1024]; // offset 24'h288000, width 64
    TX_CQ_CSR_197_t            TX_CQ_CSR_197[1024]; // offset 24'h28A000, width 64
    TX_CQ_CSR_198_t            TX_CQ_CSR_198[1024]; // offset 24'h28C000, width 64
    TX_CQ_CSR_199_t            TX_CQ_CSR_199[1024]; // offset 24'h28E000, width 64
    TX_CQ_CSR_200_t            TX_CQ_CSR_200[1024]; // offset 24'h290000, width 64
    TX_CQ_CSR_201_t            TX_CQ_CSR_201[1024]; // offset 24'h292000, width 64
    TX_CQ_CSR_202_t            TX_CQ_CSR_202[1024]; // offset 24'h294000, width 64
    TX_CQ_CSR_203_t            TX_CQ_CSR_203[1024]; // offset 24'h296000, width 64
    TX_CQ_CSR_204_t            TX_CQ_CSR_204[1024]; // offset 24'h298000, width 64
    TX_CQ_CSR_205_t            TX_CQ_CSR_205[1024]; // offset 24'h29A000, width 64
    TX_CQ_CSR_206_t            TX_CQ_CSR_206[1024]; // offset 24'h29C000, width 64
    TX_CQ_CSR_207_t            TX_CQ_CSR_207[1024]; // offset 24'h29E000, width 64
    TX_CQ_CSR_208_t            TX_CQ_CSR_208[1024]; // offset 24'h2A0000, width 64
    TX_CQ_CSR_209_t            TX_CQ_CSR_209[1024]; // offset 24'h2A2000, width 64
    TX_CQ_CSR_210_t            TX_CQ_CSR_210[1024]; // offset 24'h2A4000, width 64
    TX_CQ_CSR_211_t            TX_CQ_CSR_211[1024]; // offset 24'h2A6000, width 64
    TX_CQ_CSR_212_t            TX_CQ_CSR_212[1024]; // offset 24'h2A8000, width 64
    TX_CQ_CSR_213_t            TX_CQ_CSR_213[1024]; // offset 24'h2AA000, width 64
    TX_CQ_CSR_214_t            TX_CQ_CSR_214[1024]; // offset 24'h2AC000, width 64
    TX_CQ_CSR_215_t            TX_CQ_CSR_215[1024]; // offset 24'h2AE000, width 64
    TX_CQ_CSR_216_t            TX_CQ_CSR_216[1024]; // offset 24'h2B0000, width 64
    TX_CQ_CSR_217_t            TX_CQ_CSR_217[1024]; // offset 24'h2B2000, width 64
    TX_CQ_CSR_218_t            TX_CQ_CSR_218[1024]; // offset 24'h2B4000, width 64
    TX_CQ_CSR_219_t            TX_CQ_CSR_219[1024]; // offset 24'h2B6000, width 64
    TX_CQ_CSR_220_t            TX_CQ_CSR_220[1024]; // offset 24'h2B8000, width 64
    TX_CQ_CSR_221_t            TX_CQ_CSR_221[1024]; // offset 24'h2BA000, width 64
    TX_CQ_CSR_222_t            TX_CQ_CSR_222[1024]; // offset 24'h2BC000, width 64
    TX_CQ_CSR_223_t            TX_CQ_CSR_223[1024]; // offset 24'h2BE000, width 64
    TX_CQ_CSR_224_t            TX_CQ_CSR_224[1024]; // offset 24'h2C0000, width 64
    TX_CQ_CSR_225_t            TX_CQ_CSR_225[1024]; // offset 24'h2C2000, width 64
    TX_CQ_CSR_226_t            TX_CQ_CSR_226[1024]; // offset 24'h2C4000, width 64
    TX_CQ_CSR_227_t            TX_CQ_CSR_227[1024]; // offset 24'h2C6000, width 64
    TX_CQ_CSR_228_t            TX_CQ_CSR_228[1024]; // offset 24'h2C8000, width 64
    TX_CQ_CSR_229_t            TX_CQ_CSR_229[1024]; // offset 24'h2CA000, width 64
    TX_CQ_CSR_230_t            TX_CQ_CSR_230[1024]; // offset 24'h2CC000, width 64
    TX_CQ_CSR_231_t            TX_CQ_CSR_231[1024]; // offset 24'h2CE000, width 64
    TX_CQ_CSR_232_t            TX_CQ_CSR_232[1024]; // offset 24'h2D0000, width 64
    TX_CQ_CSR_233_t            TX_CQ_CSR_233[1024]; // offset 24'h2D2000, width 64
    TX_CQ_CSR_234_t            TX_CQ_CSR_234[1024]; // offset 24'h2D4000, width 64
    TX_CQ_CSR_235_t            TX_CQ_CSR_235[1024]; // offset 24'h2D6000, width 64
    TX_CQ_CSR_236_t            TX_CQ_CSR_236[1024]; // offset 24'h2D8000, width 64
    TX_CQ_CSR_237_t            TX_CQ_CSR_237[1024]; // offset 24'h2DA000, width 64
    TX_CQ_CSR_238_t            TX_CQ_CSR_238[1024]; // offset 24'h2DC000, width 64
    TX_CQ_CSR_239_t            TX_CQ_CSR_239[1024]; // offset 24'h2DE000, width 64
    TX_CQ_CSR_240_t            TX_CQ_CSR_240[1024]; // offset 24'h2E0000, width 64
    TX_CQ_CSR_241_t            TX_CQ_CSR_241[1024]; // offset 24'h2E2000, width 64
    TX_CQ_CSR_242_t            TX_CQ_CSR_242[1024]; // offset 24'h2E4000, width 64
    TX_CQ_CSR_243_t            TX_CQ_CSR_243[1024]; // offset 24'h2E6000, width 64
    TX_CQ_CSR_244_t            TX_CQ_CSR_244[1024]; // offset 24'h2E8000, width 64
    TX_CQ_CSR_245_t            TX_CQ_CSR_245[1024]; // offset 24'h2EA000, width 64
    TX_CQ_CSR_246_t            TX_CQ_CSR_246[1024]; // offset 24'h2EC000, width 64
    TX_CQ_CSR_247_t            TX_CQ_CSR_247[1024]; // offset 24'h2EE000, width 64
    TX_CQ_CSR_248_t            TX_CQ_CSR_248[1024]; // offset 24'h2F0000, width 64
    TX_CQ_CSR_249_t            TX_CQ_CSR_249[1024]; // offset 24'h2F2000, width 64
    TX_CQ_CSR_250_t            TX_CQ_CSR_250[1024]; // offset 24'h2F4000, width 64
    TX_CQ_CSR_251_t            TX_CQ_CSR_251[1024]; // offset 24'h2F6000, width 64
    TX_CQ_CSR_252_t            TX_CQ_CSR_252[1024]; // offset 24'h2F8000, width 64
    TX_CQ_CSR_253_t            TX_CQ_CSR_253[1024]; // offset 24'h2FA000, width 64
    TX_CQ_CSR_254_t            TX_CQ_CSR_254[1024]; // offset 24'h2FC000, width 64
    TX_CQ_CSR_255_t            TX_CQ_CSR_255[1024]; // offset 24'h2FE000, width 64
    TX_DLID_RT_t               TX_DLID_RT[65536]; // offset 24'h300000, width 64
    TXCI_CQ_ERROR_GENERAL_t    TXCI_CQ_ERROR_GENERAL; // offset 24'h380000, width 64
    TXCI_CSR_MBE_t             TXCI_CSR_MBE;     // offset 24'h380008, width 64
    TXCI_CQ_ERROR_MBE_t        TXCI_CQ_ERROR_MBE; // offset 24'h380010, width 64
    TXCI_ST_ERROR_MBE_t        TXCI_ST_ERROR_MBE; // offset 24'h380018, width 64
    TXCI_DLID_ERROR_MBE_t      TXCI_DLID_ERROR_MBE; // offset 24'h380020, width 64
} fxr_tx_ci_csrs_t;                              // size:  24'h380028
