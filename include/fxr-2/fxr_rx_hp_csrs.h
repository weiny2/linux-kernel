//                                                                             
// File:       fxr_rx_hp_csrs.h                                                
// Creator:    pvesvslx                                                        
// Time:       Friday Aug 1, 2014 [11:06:19 am]                                
//                                                                             
// Path:       /tmp/pvesvslx/nebulon_run/30229                                 
// Arguments:  /p/com/eda/denali/blueprint/3.7.4/Linux/blueprint -chdr -I      
//             /p/slx/eda/intel/nebulon/2.05_fdo/include -I                    
//             /p/slx/pvesv/fxr_autogen/fxr fxr_rx_hp.rdl                      
//                                                                             
// Sources:    /tmp/pvesvslx/nebulon_run/30229/lib_udp.rdl                     
//             /tmp/pvesvslx/nebulon_run/30229/fxr_rx_hp.rdl                   
//             /tmp/pvesvslx/nebulon_run/30229/fxr_rx_hp.rdlh                  
//             /p/com/eda/intel/nebulon/2.05p1/generators/generator_common.pm  
//             /p/com/eda/intel/nebulon/2.05p1/generators/chdr.pm              
//                                                                             
// Blueprint:   3.7.4 (Tue Jun 23 00:17:01 PDT 2009)                           
// Machine:    scci56217                                                       
// OS:         Linux 2.6.16.60-0.58.1.3835.0.PTF.638363-smp                    
// Description:                                                                
//                                                                             
//Receive HP address map                                                       
//                                                                             
// Copyright (C) 2014 Denali Software Inc.  All rights reserved                
// THIS FILE IS AUTOMATICALLY GENERATED BY DENALI BLUEPRINT, DO NOT EDIT       
//                                                                             



// RX_HP_CFG_ENTRY_POINTS desc:  This is the entry point array. There are 4 entry points in each 64
// bit access to this array. The entry point address is determined by
// the opcode for the header being processed.
typedef volatile union {
    struct {
        uint64_t  entry_point0         :  15;    //  Entry point into the PD code
                                                 // RAM for the opcode ending
                                                 // 2'b00.
        uint64_t  Reserved_15          :   1;    // 
        uint64_t  entry_point1         :  15;    //  Entry point into the PD code
                                                 // RAM for the opcode ending
                                                 // 2'b01.
        uint64_t  Reserved_31          :   1;    // 
        uint64_t  entry_point2         :  15;    //  Entry point into the PD code
                                                 // RAM for the opcode ending
                                                 // 2'b10.
        uint64_t  Reserved_47          :   1;    // 
        uint64_t  entry_point3         :  15;    //  Entry point into the PD code
                                                 // RAM for the opcode ending
                                                 // 2'b11.
        uint64_t  Reserved_63          :   1;    // 

    };
    uint64_t                         val;
} RX_HP_CFG_ENTRY_POINTS_t;

// --------------------------------------------------------------------------------------------------------------------------------

// RX_HP_CFG_ENTRY_POINT_MAP desc:  This is the entry point map array. Each entry contains an opcode and
// an entry point into the PD Code RAM. If valid, and an opcode match,
// this entry point overrides the normal Entry Point for that opcode.
typedef volatile union {
    struct {
        uint64_t  valid                :   1;    //  Indicated this mapping is
                                                 // valid
        uint64_t  entry_point0         :  15;    //  Entry point into the PD code
                                                 // RAM for the opcode.
        uint64_t  opcode               :   7;    //  Opcode to match against for
                                                 // entry point.
        uint64_t  Reserved_63_23       :  41;    // 

    };
    uint64_t                         val;
} RX_HP_CFG_ENTRY_POINT_MAP_t;

// --------------------------------------------------------------------------------------------------------------------------------

// RX_HP_CFG_VTPID_CAM desc:  This is the vTPID to TPID remapping CAM. UID is used to find a match
// in the CAM. If an entry exists with that UID, The TPID in the packet
// (now considered a vTPID) is added to the TPID_BASE provided in the
// CAM entry to yield a remapped TPID. If the UID does not match in the
// CAM, the TPID in the packet is used without any remapping.
typedef volatile union {
    struct {
        uint64_t  uid                  :  32;    //  UID (CAM tag)
        uint64_t  valid                :   1;    //  The CAM entry is valid. If
                                                 // this is clear, the CAM entry
                                                 // must never match.
        uint64_t  tpid_base            :  12;    //  TPID base (CAM data)
        uint64_t  Reserved_63_45       :  19;    // 

    };
    uint64_t                         val;
} RX_HP_CFG_VTPID_CAM_t;

// --------------------------------------------------------------------------------------------------------------------------------

// RX_HP_DBG_PD_CODE_RAM desc:  This is the Processor Designer Code RAM. .
typedef volatile union {
    struct {
        uint64_t  data                 :  32;    //  Data read or written to the
                                                 // array.
        uint64_t  ecc                  :   8;    //  ecc for the data being read
                                                 // or written
        uint64_t  Reserved_63_40       :  24;    // 

    };
    uint64_t                         val;
} RX_HP_DBG_PD_CODE_RAM_t;

// --------------------------------------------------------------------------------------------------------------------------------

// RX_HP_DBG_PORTALS_TBL_ADDR desc:  This is an RX HP debug CSR. It allows indirect access to the Portals
// Table State. This array can not be written to during normal
// operation. This register is for debug use only. Note that this
// register is 288 bits wide. The data for the read or write to this
// register is contained in the next five CSR's
typedef volatile union {
    struct {
        uint64_t  address              :  12;    //  Address of Entry to be
                                                 // accessed
        uint64_t  write_cmd            :   1;    //  Write = 1, Read = 0.
        uint64_t  Reserved_15_13       :   3;    // 
        uint64_t  cmd_complete         :   1;    //  Set to one after a completed
                                                 // access
        uint64_t  new_cmd              :   1;    //  Indicated the command in this
                                                 // CSR is ready for hardware.
        uint64_t  Reserved_63_18       :  46;    // 

    };
    uint64_t                         val;
} RX_HP_DBG_PORTALS_TBL_ADDR_t;

// --------------------------------------------------------------------------------------------------------------------------------

// RX_HP_DBG_PORTALS_TBL_DATA0 desc:  This is an RX HP debug CSR. This is the data for bits [63:0] of the
// Portals Table being accessed with the RX_HP_DBG_PORTALS_TBL_ADDR
// register. The data from this CSR is written to the Table if the write
// bit is active in that CSR, or this data will contain the read data if
// the write bit is not active.
typedef volatile union {
    struct {
        uint64_t  Data                 :  64;    // 

    };
    uint64_t                         val;
} RX_HP_DBG_PORTALS_TBL_DATA0_t;

// --------------------------------------------------------------------------------------------------------------------------------

// RX_HP_DBG_PORTALS_TBL_DATA1 desc:  This is an RX HP debug CSR. This is the data for bits [127:64] of the
// Portals Table being accessed with the RX_HP_DBG_PORTALS_TBL_ADDR
// register. The data from this CSR is written to the Table if the write
// bit is active in that CSR, or this data will contain the read data if
// the write bit is not active.
typedef volatile union {
    struct {
        uint64_t  Data                 :  64;    // 

    };
    uint64_t                         val;
} RX_HP_DBG_PORTALS_TBL_DATA1_t;

// --------------------------------------------------------------------------------------------------------------------------------

// RX_HP_DBG_PORTALS_TBL_DATA2 desc:  This is an RX HP debug CSR. This is the data for bits [191:128] of
// the Portals Table being accessed with the RX_HP_DBG_PORTALS_TBL_ADDR
// register. The data from this CSR is written to the Table if the write
// bit is active in that CSR, or this data will contain the read data if
// the write bit is not active.
typedef volatile union {
    struct {
        uint64_t  Data                 :  64;    // 

    };
    uint64_t                         val;
} RX_HP_DBG_PORTALS_TBL_DATA2_t;

// --------------------------------------------------------------------------------------------------------------------------------

// RX_HP_DBG_PORTALS_TBL_DATA3 desc:  This is an RX HP debug CSR. This is the data for bits [255:192] of
// the Portals Table being accessed with the RX_HP_DBG_PORTALS_TBL_ADDR
// register. The data from this CSR is written to the Table if the write
// bit is active in that CSR, or this data will contain the read data if
// the write bit is not active.
typedef volatile union {
    struct {
        uint64_t  Data                 :  64;    // 

    };
    uint64_t                         val;
} RX_HP_DBG_PORTALS_TBL_DATA3_t;

// --------------------------------------------------------------------------------------------------------------------------------

// RX_HP_DBG_PORTALS_TBL_DATA4 desc:  This is an RX HP debug CSR. This is the data for bits [287:256] of
// the Portals Table being accessed with the RX_HP_DBG_PORTALS_TBL_ADDR
// register. This is the ECC data for the 32 bytes being accessed. The
// data from this CSR is written to the Table if the write bit is active
// in that CSR, or this data will contain the read data if the write bit
// is not active.
typedef volatile union {
    struct {
        uint64_t  ecc                  :  32;    // 
        uint64_t  Reserved_63_32       :  32;    // 

    };
    uint64_t                         val;
} RX_HP_DBG_PORTALS_TBL_DATA4_t;

// --------------------------------------------------------------------------------------------------------------------------------

// RX_HP_DBG_PORTALS_LIST_ADDR desc:  This is an RX HP debug CSR. It allows indirect access to the Portals
// LIST State. This array can not be written to during normal operation.
// This register is for debug use only. Note that this register is 632
// bits wide. The data for the read or write to this register is
// contained in the next ten CSR's
typedef volatile union {
    struct {
        uint64_t  address              :  15;    //  Address of Entry to be
                                                 // accessed
        uint64_t  write_cmd            :   1;    //  Write = 1, Read = 0.
        uint64_t  cmd_complete         :   1;    //  Set to one after a completed
                                                 // access
        uint64_t  new_cmd              :   1;    //  Indicated the command in this
                                                 // CSR is ready for hardware.
        uint64_t  Reserved_63_18       :  46;    // 

    };
    uint64_t                         val;
} RX_HP_DBG_PORTALS_LIST_ADDR_t;

// --------------------------------------------------------------------------------------------------------------------------------

// RX_HP_DBG_PORTALS_LIST_DATA0 desc:  This is an RX HP debug CSR. This is the data for bits [63:0] of the
// Portals List State being accessed with the
// RX_HP_DBG_PORTALS_LIST_ADDR register. The data from this CSR is
// written to the Table if the write bit is active in that CSR, or this
// data will contain the read data if the write bit is not active.
typedef volatile union {
    struct {
        uint64_t  Data                 :  64;    // 

    };
    uint64_t                         val;
} RX_HP_DBG_PORTALS_LIST_DATA0_t;

// --------------------------------------------------------------------------------------------------------------------------------

// RX_HP_DBG_PORTALS_LIST_DATA1 desc:  This is an RX HP debug CSR. This is the data for bits [127:64] of the
// Portals List State being accessed with the
// RX_HP_DBG_PORTALS_LIST_ADDR register. The data from this CSR is
// written to the Table if the write bit is active in that CSR, or this
// data will contain the read data if the write bit is not active.
typedef volatile union {
    struct {
        uint64_t  Data                 :  64;    // 

    };
    uint64_t                         val;
} RX_HP_DBG_PORTALS_LIST_DATA1_t;

// --------------------------------------------------------------------------------------------------------------------------------

// RX_HP_DBG_PORTALS_LIST_DATA2 desc:  This is an RX HP debug CSR. This is the data for bits [191:128] of
// the Portals List State being accessed with the
// RX_HP_DBG_PORTALS_LIST_ADDR register. The data from this CSR is
// written to the Table if the write bit is active in that CSR, or this
// data will contain the read data if the write bit is not active.
typedef volatile union {
    struct {
        uint64_t  Data                 :  64;    // 

    };
    uint64_t                         val;
} RX_HP_DBG_PORTALS_LIST_DATA2_t;

// --------------------------------------------------------------------------------------------------------------------------------

// RX_HP_DBG_PORTALS_LIST_DATA3 desc:  This is an RX HP debug CSR. This is the data for bits [255:192] of
// the Portals List State being accessed with the
// RX_HP_DBG_PORTALS_LIST_ADDR register. The data from this CSR is
// written to the Table if the write bit is active in that CSR, or this
// data will contain the read data if the write bit is not active.
typedef volatile union {
    struct {
        uint64_t  Data                 :  64;    // 

    };
    uint64_t                         val;
} RX_HP_DBG_PORTALS_LIST_DATA3_t;

// --------------------------------------------------------------------------------------------------------------------------------

// RX_HP_DBG_PORTALS_LIST_DATA4 desc:  This is an RX HP debug CSR. This is the data for bits [319:256] of
// the Portals List State being accessed with the
// RX_HP_DBG_PORTALS_LIST_ADDR register. The data from this CSR is
// written to the Table if the write bit is active in that CSR, or this
// data will contain the read data if the write bit is not active.
typedef volatile union {
    struct {
        uint64_t  Data                 :  64;    // 

    };
    uint64_t                         val;
} RX_HP_DBG_PORTALS_LIST_DATA4_t;

// --------------------------------------------------------------------------------------------------------------------------------

// RX_HP_DBG_PORTALS_LIST_DATA5 desc:  This is an RX HP debug CSR. This is the data for bits [383:320] of
// the Portals List State being accessed with the
// RX_HP_DBG_PORTALS_LIST_ADDR register. The data from this CSR is
// written to the Table if the write bit is active in that CSR, or this
// data will contain the read data if the write bit is not active.
typedef volatile union {
    struct {
        uint64_t  Data                 :  64;    // 

    };
    uint64_t                         val;
} RX_HP_DBG_PORTALS_LIST_DATA5_t;

// --------------------------------------------------------------------------------------------------------------------------------

// RX_HP_DBG_PORTALS_LIST_DATA6 desc:  This is an RX HP debug CSR. This is the data for bits [447:384] of
// the Portals List State being accessed with the
// RX_HP_DBG_PORTALS_LIST_ADDR register. The data from this CSR is
// written to the Table if the write bit is active in that CSR, or this
// data will contain the read data if the write bit is not active.
typedef volatile union {
    struct {
        uint64_t  Data                 :  64;    // 

    };
    uint64_t                         val;
} RX_HP_DBG_PORTALS_LIST_DATA6_t;

// --------------------------------------------------------------------------------------------------------------------------------

// RX_HP_DBG_PORTALS_LIST_DATA7 desc:  This is an RX HP debug CSR. This is the data for bits [511:448] of
// the Portals List State being accessed with the
// RX_HP_DBG_PORTALS_LIST_ADDR register. The data from this CSR is
// written to the Table if the write bit is active in that CSR, or this
// data will contain the read data if the write bit is not active.
typedef volatile union {
    struct {
        uint64_t  Data                 :  64;    // 

    };
    uint64_t                         val;
} RX_HP_DBG_PORTALS_LIST_DATA7_t;

// --------------------------------------------------------------------------------------------------------------------------------

// RX_HP_DBG_PORTALS_LIST_DATA8 desc:  This is an RX HP debug CSR. This is the data for bits [559:512] of
// the Portals List State and the first 16 bits of ECC being accessed
// with the RX_HP_DBG_PORTALS_LIST_ADDR register. The data from this CSR
// is written to the Table if the write bit is active in that CSR, or
// this data will contain the read data if the write bit is not active.
typedef volatile union {
    struct {
        uint64_t  Data                 :  48;    // 
        uint64_t  ecc                  :  16;    // 

    };
    uint64_t                         val;
} RX_HP_DBG_PORTALS_LIST_DATA8_t;

// --------------------------------------------------------------------------------------------------------------------------------

// RX_HP_DBG_PORTALS_LIST_DATA9 desc:  This is an RX HP debug CSR. This is the data for bits [632:576] which
// are all ECC bits of the Portals List State being accessed with the
// RX_HP_DBG_PORTALS_LIST_ADDR register. The data from this CSR is
// written to the Table if the write bit is active in that CSR, or this
// data will contain the read data if the write bit is not active.
typedef volatile union {
    struct {
        uint64_t  Data                 :  56;    // 
        uint64_t  Reserved_63_56       :   8;    // 

    };
    uint64_t                         val;
} RX_HP_DBG_PORTALS_LIST_DATA9_t;

// --------------------------------------------------------------------------------------------------------------------------------

// RX_HP_ERR_CODE_MBE desc:  MBE error counts from the PD Code Array.
typedef volatile union {
    struct {
        uint64_t  syndrome             :   8;    //  Syndrome of last MBE
        uint64_t  address              :  15;    //  Address of last MBE
        uint64_t  pd_num               :   3;    //  Address of PD accessing code
                                                 // for last MBE
        uint64_t  mbe_cnt              :   8;    //  Saturating counter of MBE's
                                                 // from all sources
        uint64_t  Reserved_63_34       :  30;    //  Reserved

    };
    uint64_t                         val;
} RX_HP_ERR_CODE_MBE_t;

// --------------------------------------------------------------------------------------------------------------------------------

// starting the array instantiation section
typedef struct {
    RX_HP_CFG_ENTRY_POINTS_t   RX_HP_CFG_ENTRY_POINTS[32]; // offset 4'h0, width 64
    RX_HP_CFG_ENTRY_POINT_MAP_t RX_HP_CFG_ENTRY_POINT_MAP[16]; // offset 12'h100, width 64
    RX_HP_CFG_VTPID_CAM_t      RX_HP_CFG_VTPID_CAM[16]; // offset 12'h180, width 64
    RX_HP_DBG_PD_CODE_RAM_t    RX_HP_DBG_PD_CODE_RAM[32768]; // offset 12'h200, width 64
    RX_HP_DBG_PORTALS_TBL_ADDR_t RX_HP_DBG_PORTALS_TBL_ADDR; // offset 20'h40200, width 64
    RX_HP_DBG_PORTALS_TBL_DATA0_t RX_HP_DBG_PORTALS_TBL_DATA0; // offset 20'h40208, width 64
    RX_HP_DBG_PORTALS_TBL_DATA1_t RX_HP_DBG_PORTALS_TBL_DATA1; // offset 20'h40210, width 64
    RX_HP_DBG_PORTALS_TBL_DATA2_t RX_HP_DBG_PORTALS_TBL_DATA2; // offset 20'h40218, width 64
    RX_HP_DBG_PORTALS_TBL_DATA3_t RX_HP_DBG_PORTALS_TBL_DATA3; // offset 20'h40220, width 64
    RX_HP_DBG_PORTALS_TBL_DATA4_t RX_HP_DBG_PORTALS_TBL_DATA4; // offset 20'h40228, width 64
    RX_HP_DBG_PORTALS_LIST_ADDR_t RX_HP_DBG_PORTALS_LIST_ADDR; // offset 20'h40230, width 64
    RX_HP_DBG_PORTALS_LIST_DATA0_t RX_HP_DBG_PORTALS_LIST_DATA0; // offset 20'h40238, width 64
    RX_HP_DBG_PORTALS_LIST_DATA1_t RX_HP_DBG_PORTALS_LIST_DATA1; // offset 20'h40240, width 64
    RX_HP_DBG_PORTALS_LIST_DATA2_t RX_HP_DBG_PORTALS_LIST_DATA2; // offset 20'h40248, width 64
    RX_HP_DBG_PORTALS_LIST_DATA3_t RX_HP_DBG_PORTALS_LIST_DATA3; // offset 20'h40250, width 64
    RX_HP_DBG_PORTALS_LIST_DATA4_t RX_HP_DBG_PORTALS_LIST_DATA4; // offset 20'h40258, width 64
    RX_HP_DBG_PORTALS_LIST_DATA5_t RX_HP_DBG_PORTALS_LIST_DATA5; // offset 20'h40260, width 64
    RX_HP_DBG_PORTALS_LIST_DATA6_t RX_HP_DBG_PORTALS_LIST_DATA6; // offset 20'h40268, width 64
    RX_HP_DBG_PORTALS_LIST_DATA7_t RX_HP_DBG_PORTALS_LIST_DATA7; // offset 20'h40270, width 64
    RX_HP_DBG_PORTALS_LIST_DATA8_t RX_HP_DBG_PORTALS_LIST_DATA8; // offset 20'h40278, width 64
    RX_HP_DBG_PORTALS_LIST_DATA9_t RX_HP_DBG_PORTALS_LIST_DATA9; // offset 20'h40280, width 64
    RX_HP_ERR_CODE_MBE_t       RX_HP_ERR_CODE_MBE; // offset 20'h40288, width 64
} fxr_rx_hp_csrs_t;                              // size:  20'h40290
