//                                                                             
// File:       fxr_hi_pcim_csrs.h                                              
// Creator:    pvesvslx                                                        
// Time:       Friday Aug 1, 2014 [11:06:05 am]                                
//                                                                             
// Path:       /tmp/pvesvslx/nebulon_run/30229                                 
// Arguments:  /p/com/eda/denali/blueprint/3.7.4/Linux/blueprint -chdr -I      
//             /p/slx/eda/intel/nebulon/2.05_fdo/include -I                    
//             /p/slx/pvesv/fxr_autogen/fxr fxr_hi_pcim.rdl                    
//                                                                             
// Sources:    /tmp/pvesvslx/nebulon_run/30229/fxr_hi_pcim.rdl                 
//             /tmp/pvesvslx/nebulon_run/30229/lib_udp.rdl                     
//             /tmp/pvesvslx/nebulon_run/30229/fxr_hi_pcim.rdlh                
//             /p/com/eda/intel/nebulon/2.05p1/generators/generator_common.pm  
//             /p/com/eda/intel/nebulon/2.05p1/generators/chdr.pm              
//                                                                             
// Blueprint:   3.7.4 (Tue Jun 23 00:17:01 PDT 2009)                           
// Machine:    scci56217                                                       
// OS:         Linux 2.6.16.60-0.58.1.3835.0.PTF.638363-smp                    
// Description:                                                                
//                                                                             
//Host Interface PCIM CSRs                                                     
//                                                                             
// Copyright (C) 2014 Denali Software Inc.  All rights reserved                
// THIS FILE IS AUTOMATICALLY GENERATED BY DENALI BLUEPRINT, DO NOT EDIT       
//                                                                             



// PCIM_IntStatus desc:  Reports interrupt status. Bit i of interrupt register j corresponds
// to interrupt number 64j + i.
typedef volatile union {
    struct {
        uint64_t  Int                  :  64;    //  Set if interrupt is reported

    };
    uint64_t                         val;
} PCIM_IntStatus_t;

// --------------------------------------------------------------------------------------------------------------------------------

// PCIM_IntMask desc:  Interrupt mask. Bit i of interrupt register j corresponds to
// interrupt number 64j + i.
typedef volatile union {
    struct {
        uint64_t  Int                  :  64;    //  0=disable, 1=enable interrupt

    };
    uint64_t                         val;
} PCIM_IntMask_t;

// --------------------------------------------------------------------------------------------------------------------------------

// PCIM_IntClear desc:  Interrupt clear. Used to clear interrupts. Each bit that is written
// as 1 will clear the interrupt source. It will also clear
// corresponding bit of PCIM_IntBlocked CSR.
typedef volatile union {
    struct {
        uint64_t  Int                  :  64;    //  Write 1 to clear the
                                                 // interrupt. Always reads 0.

    };
    uint64_t                         val;
} PCIM_IntClear_t;

// --------------------------------------------------------------------------------------------------------------------------------

// PCIM_IntForce desc:  Interrupt Force. Used to set interrupts. Each bit that is written as
// 1 will set the interrupt source.
typedef volatile union {
    struct {
        uint64_t  Int                  :  64;    //  Write 1 to set the interrupt.
                                                 // Always reads 0.

    };
    uint64_t                         val;
} PCIM_IntForce_t;

// --------------------------------------------------------------------------------------------------------------------------------

// PCIM_IntBlocked desc:  Interrupt blocked. Reports interrupt blocked status. Bit i of
// interrupt register j corresponds to interrupt number 64j + i.
typedef volatile union {
    struct {
        uint64_t  Int                  :  64;    //  1=Set when interrupt message
                                                 // is issued to the host. Cleared
                                                 // by corresponding IntClear
                                                 // field.

    };
    uint64_t                         val;
} PCIM_IntBlocked_t;

// --------------------------------------------------------------------------------------------------------------------------------

// PCIM_IntMap desc:  Defined mapping of hardware interrupts to MSI-X interrupt vectors.
// Vector I of interrupt map register j corresponds to interrupt number
// 8j+i.
typedef volatile union {
    struct {
        uint64_t  Vector0              :   8;    //  MSI-X vector for this
                                                 // interrupt number.
        uint64_t  Vector1              :   8;    //  MSI-X vector for this
                                                 // interrupt number.
        uint64_t  Vector2              :   8;    //  MSI-X vector for this
                                                 // interrupt number.
        uint64_t  Vector3              :   8;    //  MSI-X vector for this
                                                 // interrupt number.
        uint64_t  Vector4              :   8;    //  MSI-X vector for this
                                                 // interrupt number.
        uint64_t  Vector5              :   8;    //  MSI-X vector for this
                                                 // interrupt number.
        uint64_t  Vector6              :   8;    //  MSI-X vector for this
                                                 // interrupt number.
        uint64_t  Vector7              :   8;    //  MSI-X vector for this
                                                 // interrupt number.

    };
    uint64_t                         val;
} PCIM_IntMap_t;

// --------------------------------------------------------------------------------------------------------------------------------

// PCIM_IntCtl desc:  Interrupt Control. Control bits the affect behavior of interrupt
typedef volatile union {
    struct {
        uint64_t  Auto_Clear           :   1;    //  1 = When interrupt is issued
                                                 // to the host, corresponding
                                                 // IntBlocked and IntStatus are
                                                 // set to 0
        uint64_t  Reserved_63_1        :  63;    //  Reserved

    };
    uint64_t                         val;
} PCIM_IntCtl_t;

// --------------------------------------------------------------------------------------------------------------------------------

// PCIM_MsixTable_Addr desc:  The MSI-X table contains two CSRs per MSI-X vector. Host software
// programs these CSRs to define the 64-bit host memory address and up
// to 32 bits of data value used for interrupt delivery for interrupts
// mapped to that MSI-X vector. The layout of the two CSRs is:
typedef volatile union {
    struct {
        uint64_t  Msg_Lower_Addr_DW    :   2;    // 
        uint64_t  Msg_LowerAddr        :  30;    //  System-specified message
                                                 // lower address bits
        uint64_t  Msg_Upper_Addr       :  32;    //  System-specified message
                                                 // upper address bits

    };
    uint64_t                         val;
} PCIM_MsixTable_Addr_t;

// --------------------------------------------------------------------------------------------------------------------------------

// PCIM_MsixTable_DataCtl desc:  This register contains Data and Vector Control configured by host
// software.
typedef volatile union {
    struct {
        uint64_t  Mask                 :   1;    //  When set(1), function is
                                                 // prohibited from sending a
                                                 // message from this MSI-X table
                                                 // entry.
        uint64_t  Vector_Reserved      :  31;    //  Reserved
        uint64_t  Msg_Data             :  32;    //  System-specified message data

    };
    uint64_t                         val;
} PCIM_MsixTable_DataCtl_t;

// --------------------------------------------------------------------------------------------------------------------------------

// PCIM_MsixPba desc:  The Pending Bit Array (PBA) contains 1 bit for each MSI-X vector.
// This is a total of 256 bits which
typedef volatile union {
    struct {
        uint64_t  Int                  :  64;    //  Status of interrupt pending
                                                 // bit. 1 = function has a
                                                 // pending message for the
                                                 // associated MSI-X table entry.

    };
    uint64_t                         val;
} PCIM_MsixPba_t;

// --------------------------------------------------------------------------------------------------------------------------------

// PCIM_Msix_ITR desc:  Interrupt throttling (ITR) is a mechanism that guarantees a minimum
// gap between two consecutive interrupts. One ITR counter is
// implemented per MSI-X entry.
typedef volatile union {
    struct {
        uint64_t  Enable               :   1;    //  When Enabled(1), ITR counter
                                                 // will count down after
                                                 // corresponding interrupt is
                                                 // issued.
        uint64_t  Time                 :  11;    //  Reflect expiration of the
                                                 // timer. Once timer is expired,
                                                 // it's auto-loaded to ITR
                                                 // Interval.
        uint64_t  Event_Flag           :   1;    //  Triggered by any mapped
                                                 // interrupt cause. Cleared when
                                                 // interrupt is issued.
        uint64_t  Expired              :   1;    //  Set when ITR expired. Cleared
                                                 // when interrupt is issued.
        uint64_t  Reserved_63_14       :  50;    //  Reserved

    };
    uint64_t                         val;
} PCIM_Msix_ITR_t;

// --------------------------------------------------------------------------------------------------------------------------------

// PCIM_Msix_Timeout desc:  Tracks whether interrupt has been processed by the host in the
// maximum allocated time. One timeout counter is implemented per MSI-X
// entry.
typedef volatile union {
    struct {
        uint64_t  Enable               :   1;    //  When Enabled(1), timeout
                                                 // counter will count down after
                                                 // corresponding interrupt is
                                                 // issued.
        uint64_t  Time                 :  11;    //  Reflect expiration of the
                                                 // timer. Once timer is expired,
                                                 // it's auto-loaded to ITR
                                                 // Interval.
        uint64_t  Event_Flag           :   1;    //  Triggered by any mapped
                                                 // interrupt cause. Cleared when
                                                 // interrupt is issued.
        uint64_t  Expired              :   1;    //  Set when ITR expired. Cleared
                                                 // when interrupt is issued.
        uint64_t  Reserved_63_14       :  50;    //  Reserved

    };
    uint64_t                         val;
} PCIM_Msix_Timeout_t;

// --------------------------------------------------------------------------------------------------------------------------------

// starting the array instantiation section
typedef struct {
    PCIM_IntStatus_t           PCIM_IntStatus[4]; // offset 4'h0, width 64
    PCIM_IntMask_t             PCIM_IntMask[4];  // offset 8'h20, width 64
    PCIM_IntClear_t            PCIM_IntClear[4]; // offset 8'h40, width 64
    PCIM_IntForce_t            PCIM_IntForce[4]; // offset 8'h60, width 64
    PCIM_IntBlocked_t          PCIM_IntBlocked[4]; // offset 8'h80, width 64
    PCIM_IntMap_t              PCIM_IntMap[32];  // offset 12'h100, width 64
    PCIM_IntCtl_t              PCIM_IntCtl;      // offset 12'h200, width 64
    PCIM_MsixTable_Addr_t      PCIM_MsixTable_Addr[256]; // offset 12'h400, width 64
    PCIM_MsixTable_DataCtl_t   PCIM_MsixTable_DataCtl[256]; // offset 16'h0C00, width 64
    PCIM_MsixPba_t             PCIM_MsixPba[4];  // offset 16'h1400, width 64
    PCIM_Msix_ITR_t            PCIM_Msix_ITR[256]; // offset 16'h2000, width 64
    PCIM_Msix_Timeout_t        PCIM_Msix_Timeout[256]; // offset 16'h2800, width 64
} fxr_hi_pcim_csrs_t;                            // size:  16'h3000
