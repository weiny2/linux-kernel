/*
* -------------------------------------------------------------------
* --                      Intel Proprietary
* --              Copyright (C) 2014 Intel Corporation
* --                    All Rights Reserved
* -------------------------------------------------------------------
* --           Auto-generated by /p/slx/pvesv/wfr_autogen/utils/scripts/i_csrs/i_csrs.pl 
* --  i_csrs.pl Version 1.5 last modified on Tuesday 7/29/14 09:09:34
* --   /p/slx/pvesv/wfr_autogen/utils/scripts/i_csrs/i_csrs.pl -C -S fxr_rx_dma -o /p/slx/pvesv/fxr_autogen/fxr /p/slx/pvesv/fxr_autogen/Fox_River/xml/300_Memory_Map.xml /p/slx/pvesv/fxr_autogen/Fox_River/xml/333_Memory_Map_RX_DMA.xml  
* --------------------------------------------------------------------
*/

#ifndef DEF_FXR_RX_DMA_SW_DEF
#define DEF_FXR_RX_DMA_SW_DEF

#define FXR_NUM_CONTEXTS				256
#define FXR_NUM_PIDS					4096
#define FXR_MAX_CONTEXT					255
#define FXR_TX_CONTEXT_ENTRIES				128
#define FXR_TX_CONTEXT_MAX				127
#define FXR_RX_CONTEXT_ENTRIES				16
#define FXR_RX_CONTEXT_MAX				15
#define FXR_NUM_SL					32
#define FXR_MAX_SL					31
#define RX_DMA_BASE					0
#define RX_DMA_NUM_BUFFERS				8
#define RX_DMA_NUM_BUF_MSB				7
#define RX_DMA_LINKED_LIST_DEPTH			256
#define RX_DMA_LL_MSB					255
#define RX_DMA_BUFFER_DEPTH				512
#define RX_DMA_BUF_MSB					511
#define RX_DMA_WAR_BUFFER_DEPTH				2048
#define RX_DMA_WAR_MSB					2047
/*
* Table #3 of 333_Memory_Map_RX_DMA.xml - RX_DMA_CFG_BUFFER
* This is an RX DMA configuration CSR. It allows adjusting the depth and 
* initialization method of the DMA buffers.
*/
#define FXR_RX_DMA_CFG_BUFFER				(FXR_RX_DMA_CSRS + 0x000000000000)
#define FXR_RX_DMA_CFG_BUFFER_RESETCSR			0x00000000000001FEull
#define FXR_RX_DMA_CFG_BUFFER_DEPTH_LIMIT_SHIFT		1
#define FXR_RX_DMA_CFG_BUFFER_DEPTH_LIMIT_MASK		0xFFull
#define FXR_RX_DMA_CFG_BUFFER_DEPTH_LIMIT_SMASK		0x1FEull
#define FXR_RX_DMA_CFG_BUFFER_DISABLE_AUTO_INIT_SHIFT	0
#define FXR_RX_DMA_CFG_BUFFER_DISABLE_AUTO_INIT_MASK	0x1ull
#define FXR_RX_DMA_CFG_BUFFER_DISABLE_AUTO_INIT_SMASK	0x1ull
/*
* Table #4 of 333_Memory_Map_RX_DMA.xml - RX_DMA_CFG_CONTROL
* This is an RX DMA configuration CSR. It controls general settings for the 
* RxDMA.
*/
#define FXR_RX_DMA_CFG_CONTROL				(FXR_RX_DMA_CSRS + 0x000000000040)
#define FXR_RX_DMA_CFG_CONTROL_RESETCSR			0x0000000000081500ull
#define FXR_RX_DMA_CFG_CONTROL_MC1_CREDITS_SHIFT	16
#define FXR_RX_DMA_CFG_CONTROL_MC1_CREDITS_MASK		0xFull
#define FXR_RX_DMA_CFG_CONTROL_MC1_CREDITS_SMASK	0xF0000ull
#define FXR_RX_DMA_CFG_CONTROL_MC0_CREDITS_SHIFT	8
#define FXR_RX_DMA_CFG_CONTROL_MC0_CREDITS_MASK		0x7Full
#define FXR_RX_DMA_CFG_CONTROL_MC0_CREDITS_SMASK	0x7F00ull
#define FXR_RX_DMA_CFG_CONTROL_EXT_ACK_SHIFT		0
#define FXR_RX_DMA_CFG_CONTROL_EXT_ACK_MASK		0x1ull
#define FXR_RX_DMA_CFG_CONTROL_EXT_ACK_SMASK		0x1ull
/*
* Table #5 of 333_Memory_Map_RX_DMA.xml - RX_DMA_CFG_BW_SHAPE_MAP
* This is an RX DMA configuration CSR. It allows adjusting the priority 
* selection of MCTC buffer access to the HIArb bus. There are 8 bandwidth meters 
* (buckets) implemented in the RxDMA. They are mapped by default to one meter 
* per MCTC. However, this mapping register would allow them to be mapped 
* differently such that two could share a single bucket if needed..
*/
#define FXR_RX_DMA_CFG_BW_SHAPE_MAP			(FXR_RX_DMA_CSRS + 0x000000000048)
#define FXR_RX_DMA_CFG_BW_SHAPE_MAP_RESETCSR		0x0000000076543210ull
#define FXR_RX_DMA_CFG_BW_SHAPE_MAP_MCTC7_SHIFT		28
#define FXR_RX_DMA_CFG_BW_SHAPE_MAP_MCTC7_MASK		0xFull
#define FXR_RX_DMA_CFG_BW_SHAPE_MAP_MCTC7_SMASK		0xF0000000ull
#define FXR_RX_DMA_CFG_BW_SHAPE_MAP_MCTC6_SHIFT		24
#define FXR_RX_DMA_CFG_BW_SHAPE_MAP_MCTC6_MASK		0xFull
#define FXR_RX_DMA_CFG_BW_SHAPE_MAP_MCTC6_SMASK		0xF000000ull
#define FXR_RX_DMA_CFG_BW_SHAPE_MAP_MCTC5_SHIFT		20
#define FXR_RX_DMA_CFG_BW_SHAPE_MAP_MCTC5_MASK		0xFull
#define FXR_RX_DMA_CFG_BW_SHAPE_MAP_MCTC5_SMASK		0xF00000ull
#define FXR_RX_DMA_CFG_BW_SHAPE_MAP_MCTC4_SHIFT		16
#define FXR_RX_DMA_CFG_BW_SHAPE_MAP_MCTC4_MASK		0xFull
#define FXR_RX_DMA_CFG_BW_SHAPE_MAP_MCTC4_SMASK		0xF0000ull
#define FXR_RX_DMA_CFG_BW_SHAPE_MAP_MCTC3_SHIFT		12
#define FXR_RX_DMA_CFG_BW_SHAPE_MAP_MCTC3_MASK		0xFull
#define FXR_RX_DMA_CFG_BW_SHAPE_MAP_MCTC3_SMASK		0xF000ull
#define FXR_RX_DMA_CFG_BW_SHAPE_MAP_MCTC2_SHIFT		8
#define FXR_RX_DMA_CFG_BW_SHAPE_MAP_MCTC2_MASK		0xFull
#define FXR_RX_DMA_CFG_BW_SHAPE_MAP_MCTC2_SMASK		0xF00ull
#define FXR_RX_DMA_CFG_BW_SHAPE_MAP_MCTC1_SHIFT		4
#define FXR_RX_DMA_CFG_BW_SHAPE_MAP_MCTC1_MASK		0xFull
#define FXR_RX_DMA_CFG_BW_SHAPE_MAP_MCTC1_SMASK		0xF0ull
#define FXR_RX_DMA_CFG_BW_SHAPE_MAP_MCTC0_SHIFT		0
#define FXR_RX_DMA_CFG_BW_SHAPE_MAP_MCTC0_MASK		0xFull
#define FXR_RX_DMA_CFG_BW_SHAPE_MAP_MCTC0_SMASK		0xFull
/*
* Table #6 of 333_Memory_Map_RX_DMA.xml - RX_DMA_CFG_BW_SHAPE_B0
* This is an RX DMA configuration CSR for a bucket used in the bandwidth 
* shaping. The Bucket and the Leak_Counter values are controlled by Hardware, 
* and therefore Read Only. Software can control the Slice which control the 
* percentage of bandwith allowed through this bucket and Overage_Limit which 
* controls how many flits are allowed before blocking is possible. 
* 
*/
#define FXR_RX_DMA_CFG_BW_SHAPE_B0			(FXR_RX_DMA_CSRS + 0x000000000050)
#define FXR_RX_DMA_CFG_BW_SHAPE_B0_RESETCSR		0x00000000001F4000ull
#define FXR_RX_DMA_CFG_BW_SHAPE_B0_LEAK_COUNTER_SHIFT	48
#define FXR_RX_DMA_CFG_BW_SHAPE_B0_LEAK_COUNTER_MASK	0x3Full
#define FXR_RX_DMA_CFG_BW_SHAPE_B0_LEAK_COUNTER_SMASK	0x3F000000000000ull
#define FXR_RX_DMA_CFG_BW_SHAPE_B0_BUCKET_SHIFT		32
#define FXR_RX_DMA_CFG_BW_SHAPE_B0_BUCKET_MASK		0xFFFFull
#define FXR_RX_DMA_CFG_BW_SHAPE_B0_BUCKET_SMASK		0xFFFF00000000ull
#define FXR_RX_DMA_CFG_BW_SHAPE_B0_SLICE_SHIFT		16
#define FXR_RX_DMA_CFG_BW_SHAPE_B0_SLICE_MASK		0xFFull
#define FXR_RX_DMA_CFG_BW_SHAPE_B0_SLICE_SMASK		0xFF0000ull
#define FXR_RX_DMA_CFG_BW_SHAPE_B0_OVERAGE_LIMIT_SHIFT	0
#define FXR_RX_DMA_CFG_BW_SHAPE_B0_OVERAGE_LIMIT_MASK	0xFFFFull
#define FXR_RX_DMA_CFG_BW_SHAPE_B0_OVERAGE_LIMIT_SMASK	0xFFFFull
/*
* Table #7 of 333_Memory_Map_RX_DMA.xml - RX_DMA_CFG_BW_SHAPE_B1
* This is an RX DMA configuration CSR for a bucket used in the bandwidth 
* shaping. The Bucket and the Leak_Counter values are controlled by Hardware, 
* and therefore Read Only. Software can control the Slice which control the 
* percentage of bandwith allowed through this bucket and Overage_Limit which 
* controls how many flits are allowed before blocking is possible. 
* 
*/
#define FXR_RX_DMA_CFG_BW_SHAPE_B1			(FXR_RX_DMA_CSRS + 0x000000000058)
#define FXR_RX_DMA_CFG_BW_SHAPE_B1_RESETCSR		0x00000000001F4000ull
#define FXR_RX_DMA_CFG_BW_SHAPE_B1_LEAK_COUNTER_SHIFT	48
#define FXR_RX_DMA_CFG_BW_SHAPE_B1_LEAK_COUNTER_MASK	0x3Full
#define FXR_RX_DMA_CFG_BW_SHAPE_B1_LEAK_COUNTER_SMASK	0x3F000000000000ull
#define FXR_RX_DMA_CFG_BW_SHAPE_B1_BUCKET_SHIFT		32
#define FXR_RX_DMA_CFG_BW_SHAPE_B1_BUCKET_MASK		0xFFFFull
#define FXR_RX_DMA_CFG_BW_SHAPE_B1_BUCKET_SMASK		0xFFFF00000000ull
#define FXR_RX_DMA_CFG_BW_SHAPE_B1_SLICE_SHIFT		16
#define FXR_RX_DMA_CFG_BW_SHAPE_B1_SLICE_MASK		0xFFull
#define FXR_RX_DMA_CFG_BW_SHAPE_B1_SLICE_SMASK		0xFF0000ull
#define FXR_RX_DMA_CFG_BW_SHAPE_B1_OVERAGE_LIMIT_SHIFT	0
#define FXR_RX_DMA_CFG_BW_SHAPE_B1_OVERAGE_LIMIT_MASK	0xFFFFull
#define FXR_RX_DMA_CFG_BW_SHAPE_B1_OVERAGE_LIMIT_SMASK	0xFFFFull
/*
* Table #8 of 333_Memory_Map_RX_DMA.xml - RX_DMA_CFG_BW_SHAPE_B2
* This is an RX DMA configuration CSR for a bucket used in the bandwidth 
* shaping. The Bucket and the Leak_Counter values are controlled by Hardware, 
* and therefore Read Only. Software can control the Slice which control the 
* percentage of bandwith allowed through this bucket and Overage_Limit which 
* controls how many flits are allowed before blocking is possible. 
* 
*/
#define FXR_RX_DMA_CFG_BW_SHAPE_B2			(FXR_RX_DMA_CSRS + 0x000000000060)
#define FXR_RX_DMA_CFG_BW_SHAPE_B2_RESETCSR		0x00000000001F4000ull
#define FXR_RX_DMA_CFG_BW_SHAPE_B2_LEAK_COUNTER_SHIFT	48
#define FXR_RX_DMA_CFG_BW_SHAPE_B2_LEAK_COUNTER_MASK	0x3Full
#define FXR_RX_DMA_CFG_BW_SHAPE_B2_LEAK_COUNTER_SMASK	0x3F000000000000ull
#define FXR_RX_DMA_CFG_BW_SHAPE_B2_BUCKET_SHIFT		32
#define FXR_RX_DMA_CFG_BW_SHAPE_B2_BUCKET_MASK		0xFFFFull
#define FXR_RX_DMA_CFG_BW_SHAPE_B2_BUCKET_SMASK		0xFFFF00000000ull
#define FXR_RX_DMA_CFG_BW_SHAPE_B2_SLICE_SHIFT		16
#define FXR_RX_DMA_CFG_BW_SHAPE_B2_SLICE_MASK		0xFFull
#define FXR_RX_DMA_CFG_BW_SHAPE_B2_SLICE_SMASK		0xFF0000ull
#define FXR_RX_DMA_CFG_BW_SHAPE_B2_OVERAGE_LIMIT_SHIFT	0
#define FXR_RX_DMA_CFG_BW_SHAPE_B2_OVERAGE_LIMIT_MASK	0xFFFFull
#define FXR_RX_DMA_CFG_BW_SHAPE_B2_OVERAGE_LIMIT_SMASK	0xFFFFull
/*
* Table #9 of 333_Memory_Map_RX_DMA.xml - RX_DMA_CFG_BW_SHAPE_B3
* This is an RX DMA configuration CSR for a bucket used in the bandwidth 
* shaping. The Bucket and the Leak_Counter values are controlled by Hardware, 
* and therefore Read Only. Software can control the Slice which control the 
* percentage of bandwith allowed through this bucket and Overage_Limit which 
* controls how many flits are allowed before blocking is possible. 
* 
*/
#define FXR_RX_DMA_CFG_BW_SHAPE_B3			(FXR_RX_DMA_CSRS + 0x000000000068)
#define FXR_RX_DMA_CFG_BW_SHAPE_B3_RESETCSR		0x00000000001F4000ull
#define FXR_RX_DMA_CFG_BW_SHAPE_B3_LEAK_COUNTER_SHIFT	48
#define FXR_RX_DMA_CFG_BW_SHAPE_B3_LEAK_COUNTER_MASK	0x3Full
#define FXR_RX_DMA_CFG_BW_SHAPE_B3_LEAK_COUNTER_SMASK	0x3F000000000000ull
#define FXR_RX_DMA_CFG_BW_SHAPE_B3_BUCKET_SHIFT		32
#define FXR_RX_DMA_CFG_BW_SHAPE_B3_BUCKET_MASK		0xFFFFull
#define FXR_RX_DMA_CFG_BW_SHAPE_B3_BUCKET_SMASK		0xFFFF00000000ull
#define FXR_RX_DMA_CFG_BW_SHAPE_B3_SLICE_SHIFT		16
#define FXR_RX_DMA_CFG_BW_SHAPE_B3_SLICE_MASK		0xFFull
#define FXR_RX_DMA_CFG_BW_SHAPE_B3_SLICE_SMASK		0xFF0000ull
#define FXR_RX_DMA_CFG_BW_SHAPE_B3_OVERAGE_LIMIT_SHIFT	0
#define FXR_RX_DMA_CFG_BW_SHAPE_B3_OVERAGE_LIMIT_MASK	0xFFFFull
#define FXR_RX_DMA_CFG_BW_SHAPE_B3_OVERAGE_LIMIT_SMASK	0xFFFFull
/*
* Table #10 of 333_Memory_Map_RX_DMA.xml - RX_DMA_CFG_BW_SHAPE_B4
* This is an RX DMA configuration CSR for a bucket used in the bandwidth 
* shaping. The Bucket and the Leak_Counter values are controlled by Hardware, 
* and therefore Read Only. Software can control the Slice which control the 
* percentage of bandwith allowed through this bucket and Overage_Limit which 
* controls how many flits are allowed before blocking is possible. 
* 
*/
#define FXR_RX_DMA_CFG_BW_SHAPE_B4			(FXR_RX_DMA_CSRS + 0x000000000070)
#define FXR_RX_DMA_CFG_BW_SHAPE_B4_RESETCSR		0x00000000001F4000ull
#define FXR_RX_DMA_CFG_BW_SHAPE_B4_LEAK_COUNTER_SHIFT	48
#define FXR_RX_DMA_CFG_BW_SHAPE_B4_LEAK_COUNTER_MASK	0x3Full
#define FXR_RX_DMA_CFG_BW_SHAPE_B4_LEAK_COUNTER_SMASK	0x3F000000000000ull
#define FXR_RX_DMA_CFG_BW_SHAPE_B4_BUCKET_SHIFT		32
#define FXR_RX_DMA_CFG_BW_SHAPE_B4_BUCKET_MASK		0xFFFFull
#define FXR_RX_DMA_CFG_BW_SHAPE_B4_BUCKET_SMASK		0xFFFF00000000ull
#define FXR_RX_DMA_CFG_BW_SHAPE_B4_SLICE_SHIFT		16
#define FXR_RX_DMA_CFG_BW_SHAPE_B4_SLICE_MASK		0xFFull
#define FXR_RX_DMA_CFG_BW_SHAPE_B4_SLICE_SMASK		0xFF0000ull
#define FXR_RX_DMA_CFG_BW_SHAPE_B4_OVERAGE_LIMIT_SHIFT	0
#define FXR_RX_DMA_CFG_BW_SHAPE_B4_OVERAGE_LIMIT_MASK	0xFFFFull
#define FXR_RX_DMA_CFG_BW_SHAPE_B4_OVERAGE_LIMIT_SMASK	0xFFFFull
/*
* Table #11 of 333_Memory_Map_RX_DMA.xml - RX_DMA_CFG_BW_SHAPE_B5
* This is an RX DMA configuration CSR for a bucket used in the bandwidth 
* shaping. The Bucket and the Leak_Counter values are controlled by Hardware, 
* and therefore Read Only. Software can control the Slice which control the 
* percentage of bandwith allowed through this bucket and Overage_Limit which 
* controls how many flits are allowed before blocking is possible. 
* 
*/
#define FXR_RX_DMA_CFG_BW_SHAPE_B5			(FXR_RX_DMA_CSRS + 0x000000000078)
#define FXR_RX_DMA_CFG_BW_SHAPE_B5_RESETCSR		0x00000000001F4000ull
#define FXR_RX_DMA_CFG_BW_SHAPE_B5_LEAK_COUNTER_SHIFT	48
#define FXR_RX_DMA_CFG_BW_SHAPE_B5_LEAK_COUNTER_MASK	0x3Full
#define FXR_RX_DMA_CFG_BW_SHAPE_B5_LEAK_COUNTER_SMASK	0x3F000000000000ull
#define FXR_RX_DMA_CFG_BW_SHAPE_B5_BUCKET_SHIFT		32
#define FXR_RX_DMA_CFG_BW_SHAPE_B5_BUCKET_MASK		0xFFFFull
#define FXR_RX_DMA_CFG_BW_SHAPE_B5_BUCKET_SMASK		0xFFFF00000000ull
#define FXR_RX_DMA_CFG_BW_SHAPE_B5_SLICE_SHIFT		16
#define FXR_RX_DMA_CFG_BW_SHAPE_B5_SLICE_MASK		0xFFull
#define FXR_RX_DMA_CFG_BW_SHAPE_B5_SLICE_SMASK		0xFF0000ull
#define FXR_RX_DMA_CFG_BW_SHAPE_B5_OVERAGE_LIMIT_SHIFT	0
#define FXR_RX_DMA_CFG_BW_SHAPE_B5_OVERAGE_LIMIT_MASK	0xFFFFull
#define FXR_RX_DMA_CFG_BW_SHAPE_B5_OVERAGE_LIMIT_SMASK	0xFFFFull
/*
* Table #12 of 333_Memory_Map_RX_DMA.xml - RX_DMA_CFG_BW_SHAPE_B6
* This is an RX DMA configuration CSR for a bucket used in the bandwidth 
* shaping. The Bucket and the Leak_Counter values are controlled by Hardware, 
* and therefore Read Only. Software can control the Slice which control the 
* percentage of bandwith allowed through this bucket and Overage_Limit which 
* controls how many flits are allowed before blocking is possible. 
* 
*/
#define FXR_RX_DMA_CFG_BW_SHAPE_B6			(FXR_RX_DMA_CSRS + 0x000000000080)
#define FXR_RX_DMA_CFG_BW_SHAPE_B6_RESETCSR		0x00000000001F4000ull
#define FXR_RX_DMA_CFG_BW_SHAPE_B6_LEAK_COUNTER_SHIFT	48
#define FXR_RX_DMA_CFG_BW_SHAPE_B6_LEAK_COUNTER_MASK	0x3Full
#define FXR_RX_DMA_CFG_BW_SHAPE_B6_LEAK_COUNTER_SMASK	0x3F000000000000ull
#define FXR_RX_DMA_CFG_BW_SHAPE_B6_BUCKET_SHIFT		32
#define FXR_RX_DMA_CFG_BW_SHAPE_B6_BUCKET_MASK		0xFFFFull
#define FXR_RX_DMA_CFG_BW_SHAPE_B6_BUCKET_SMASK		0xFFFF00000000ull
#define FXR_RX_DMA_CFG_BW_SHAPE_B6_SLICE_SHIFT		16
#define FXR_RX_DMA_CFG_BW_SHAPE_B6_SLICE_MASK		0xFFull
#define FXR_RX_DMA_CFG_BW_SHAPE_B6_SLICE_SMASK		0xFF0000ull
#define FXR_RX_DMA_CFG_BW_SHAPE_B6_OVERAGE_LIMIT_SHIFT	0
#define FXR_RX_DMA_CFG_BW_SHAPE_B6_OVERAGE_LIMIT_MASK	0xFFFFull
#define FXR_RX_DMA_CFG_BW_SHAPE_B6_OVERAGE_LIMIT_SMASK	0xFFFFull
/*
* Table #13 of 333_Memory_Map_RX_DMA.xml - RX_DMA_CFG_BW_SHAPE_B7
* This is an RX DMA configuration CSR for a bucket used in the bandwidth 
* shaping. The Bucket and the Leak_Counter values are controlled by Hardware, 
* and therefore Read Only. Software can control the Slice which control the 
* percentage of bandwith allowed through this bucket and Overage_Limit which 
* controls how many flits are allowed before blocking is possible. 
* 
*/
#define FXR_RX_DMA_CFG_BW_SHAPE_B7			(FXR_RX_DMA_CSRS + 0x000000000088)
#define FXR_RX_DMA_CFG_BW_SHAPE_B7_RESETCSR		0x00000000001F4000ull
#define FXR_RX_DMA_CFG_BW_SHAPE_B7_LEAK_COUNTER_SHIFT	48
#define FXR_RX_DMA_CFG_BW_SHAPE_B7_LEAK_COUNTER_MASK	0x3Full
#define FXR_RX_DMA_CFG_BW_SHAPE_B7_LEAK_COUNTER_SMASK	0x3F000000000000ull
#define FXR_RX_DMA_CFG_BW_SHAPE_B7_BUCKET_SHIFT		32
#define FXR_RX_DMA_CFG_BW_SHAPE_B7_BUCKET_MASK		0xFFFFull
#define FXR_RX_DMA_CFG_BW_SHAPE_B7_BUCKET_SMASK		0xFFFF00000000ull
#define FXR_RX_DMA_CFG_BW_SHAPE_B7_SLICE_SHIFT		16
#define FXR_RX_DMA_CFG_BW_SHAPE_B7_SLICE_MASK		0xFFull
#define FXR_RX_DMA_CFG_BW_SHAPE_B7_SLICE_SMASK		0xFF0000ull
#define FXR_RX_DMA_CFG_BW_SHAPE_B7_OVERAGE_LIMIT_SHIFT	0
#define FXR_RX_DMA_CFG_BW_SHAPE_B7_OVERAGE_LIMIT_MASK	0xFFFFull
#define FXR_RX_DMA_CFG_BW_SHAPE_B7_OVERAGE_LIMIT_SMASK	0xFFFFull
/*
* Table #14 of 333_Memory_Map_RX_DMA.xml - RX_DMA_DBG_LINKED_LIST
* This is an RX DMA debug CSR. It allows access to all of the linked list DMA 
* queue arrays. These arrays can not be written to during normal operation. This 
* register is for debug use, and for initialization of the linked list if 
* needed. There is an automatic initialization function built in that can be 
* disabled.
*/
#define FXR_RX_DMA_DBG_LINKED_LIST			(FXR_RX_DMA_CSRS + 0x000000000090)
#define FXR_RX_DMA_DBG_LINKED_LIST_RESETCSR		0x0000000000000000ull
#define FXR_RX_DMA_DBG_LINKED_LIST_PARITY_SHIFT		8
#define FXR_RX_DMA_DBG_LINKED_LIST_PARITY_MASK		0x1ull
#define FXR_RX_DMA_DBG_LINKED_LIST_PARITY_SMASK		0x100ull
#define FXR_RX_DMA_DBG_LINKED_LIST_DATA_SHIFT		0
#define FXR_RX_DMA_DBG_LINKED_LIST_DATA_MASK		0xFFull
#define FXR_RX_DMA_DBG_LINKED_LIST_DATA_SMASK		0xFFull
/*
* Table #15 of 333_Memory_Map_RX_DMA.xml - RX_DMA_DBG_TAIL_LIST
* This is an RX DMA debug CSR. It allows access to all of the Tail list. These 
* arrays can not be written to during normal operation. This register is for 
* debug use only.
*/
#define FXR_RX_DMA_DBG_TAIL_LIST			(FXR_RX_DMA_CSRS + 0x000000000890)
#define FXR_RX_DMA_DBG_TAIL_LIST_RESETCSR		0x0000000000000000ull
#define FXR_RX_DMA_DBG_TAIL_LIST_PARITY_SHIFT		9
#define FXR_RX_DMA_DBG_TAIL_LIST_PARITY_MASK		0x1ull
#define FXR_RX_DMA_DBG_TAIL_LIST_PARITY_SMASK		0x200ull
#define FXR_RX_DMA_DBG_TAIL_LIST_TAIL_SHIFT		1
#define FXR_RX_DMA_DBG_TAIL_LIST_TAIL_MASK		0xFFull
#define FXR_RX_DMA_DBG_TAIL_LIST_TAIL_SMASK		0x1FEull
#define FXR_RX_DMA_DBG_TAIL_LIST_FULL_SHIFT		0
#define FXR_RX_DMA_DBG_TAIL_LIST_FULL_MASK		0x1ull
#define FXR_RX_DMA_DBG_TAIL_LIST_FULL_SMASK		0x1ull
/*
* Table #16 of 333_Memory_Map_RX_DMA.xml - RX_DMA_DBG_BUFFER_ADDR
* This is an RX DMA debug CSR. It allows indirect access to all of the DMA 
* buffer arrays. These arrays can not be written to during normal operation. 
* This register is for debug use only. Note that this register is 288 bits wide. 
* The data for the read or write to this register is contained in the next five 
* CSR's
*/
#define FXR_RX_DMA_DBG_BUFFER_ADDR			(FXR_RX_DMA_CSRS + 0x000000001090)
#define FXR_RX_DMA_DBG_BUFFER_ADDR_RESETCSR		0x0050000000000000ull
#define FXR_RX_DMA_DBG_BUFFER_ADDR_VALID_SHIFT		63
#define FXR_RX_DMA_DBG_BUFFER_ADDR_VALID_MASK		0x1ull
#define FXR_RX_DMA_DBG_BUFFER_ADDR_VALID_SMASK		0x8000000000000000ull
#define FXR_RX_DMA_DBG_BUFFER_ADDR_WRITE_SHIFT		62
#define FXR_RX_DMA_DBG_BUFFER_ADDR_WRITE_MASK		0x1ull
#define FXR_RX_DMA_DBG_BUFFER_ADDR_WRITE_SMASK		0x4000000000000000ull
#define FXR_RX_DMA_DBG_BUFFER_ADDR_PAYLOAD_REGS_SHIFT	52
#define FXR_RX_DMA_DBG_BUFFER_ADDR_PAYLOAD_REGS_MASK	0xFFull
#define FXR_RX_DMA_DBG_BUFFER_ADDR_PAYLOAD_REGS_SMASK	0xFF0000000000000ull
#define FXR_RX_DMA_DBG_BUFFER_ADDR_MCTC_SHIFT		49
#define FXR_RX_DMA_DBG_BUFFER_ADDR_MCTC_MASK		0x7ull
#define FXR_RX_DMA_DBG_BUFFER_ADDR_MCTC_SMASK		0xE000000000000ull
#define FXR_RX_DMA_DBG_BUFFER_ADDR_ADDRESS_SHIFT	0
#define FXR_RX_DMA_DBG_BUFFER_ADDR_ADDRESS_MASK		0x1FFFFFFFFFFFFull
#define FXR_RX_DMA_DBG_BUFFER_ADDR_ADDRESS_SMASK	0x1FFFFFFFFFFFFull
/*
* Table #17 of 333_Memory_Map_RX_DMA.xml - RX_DMA_DBG_BUFFER_DATA0
* This is an RX DMA debug CSR. This is the data for bits [63:0] of the RX DMA 
* buffer being accessed with the RX_DMA_DBG_BUFFER_ADDR register. The data from 
* this CSR is written to the DMA buffer if the write bit is active in that CSR, 
* or this data will contain the read data if the write bit is not 
* active.
*/
#define FXR_RX_DMA_DBG_BUFFER_DATA0			(FXR_RX_DMA_CSRS + 0x000000001098)
#define FXR_RX_DMA_DBG_BUFFER_DATA0_RESETCSR		0x0000000000000000ull
#define FXR_RX_DMA_DBG_BUFFER_DATA0_DATA_SHIFT		0
#define FXR_RX_DMA_DBG_BUFFER_DATA0_DATA_MASK		0xFFFFFFFFFFFFFFFFull
#define FXR_RX_DMA_DBG_BUFFER_DATA0_DATA_SMASK		0xFFFFFFFFFFFFFFFFull
/*
* Table #18 of 333_Memory_Map_RX_DMA.xml - RX_DMA_DBG_BUFFER_DATA1
* This is an RX DMA debug CSR. This is the data for bits [127:64] of the RX DMA 
* buffer being accessed with the RX_DMA_DBG_BUFFER_ADDR register. The data from 
* this CSR is written to the DMA buffer if the write bit is active in that CSR, 
* or this data will contain the read data if the write bit is not 
* active.
*/
#define FXR_RX_DMA_DBG_BUFFER_DATA1			(FXR_RX_DMA_CSRS + 0x0000000010A0)
#define FXR_RX_DMA_DBG_BUFFER_DATA1_RESETCSR		0x0000000000000000ull
#define FXR_RX_DMA_DBG_BUFFER_DATA1_DATA_SHIFT		0
#define FXR_RX_DMA_DBG_BUFFER_DATA1_DATA_MASK		0xFFFFFFFFFFFFFFFFull
#define FXR_RX_DMA_DBG_BUFFER_DATA1_DATA_SMASK		0xFFFFFFFFFFFFFFFFull
/*
* Table #19 of 333_Memory_Map_RX_DMA.xml - RX_DMA_DBG_BUFFER_DATA2
* This is an RX DMA debug CSR. This is the data for bits [191:128] of the RX DMA 
* buffer being accessed with the RX_DMA_DBG_BUFFER_ADDR register. The data from 
* this CSR is written to the DMA buffer if the write bit is active in that CSR, 
* or this data will contain the read data if the write bit is not 
* active.
*/
#define FXR_RX_DMA_DBG_BUFFER_DATA2			(FXR_RX_DMA_CSRS + 0x0000000010A8)
#define FXR_RX_DMA_DBG_BUFFER_DATA2_RESETCSR		0x0000000000000000ull
#define FXR_RX_DMA_DBG_BUFFER_DATA2_DATA_SHIFT		0
#define FXR_RX_DMA_DBG_BUFFER_DATA2_DATA_MASK		0xFFFFFFFFFFFFFFFFull
#define FXR_RX_DMA_DBG_BUFFER_DATA2_DATA_SMASK		0xFFFFFFFFFFFFFFFFull
/*
* Table #20 of 333_Memory_Map_RX_DMA.xml - RX_DMA_DBG_BUFFER_DATA3
* This is an RX DMA debug CSR. This is the data for bits [255:192] of the RX DMA 
* buffer being accessed with the RX_DMA_DBG_BUFFER_ADDR register. The data from 
* this CSR is written to the DMA buffer if the write bit is active in that CSR, 
* or this data will contain the read data if the write bit is not 
* active.
*/
#define FXR_RX_DMA_DBG_BUFFER_DATA3			(FXR_RX_DMA_CSRS + 0x0000000010B0)
#define FXR_RX_DMA_DBG_BUFFER_DATA3_RESETCSR		0x0000000000000000ull
#define FXR_RX_DMA_DBG_BUFFER_DATA3_DATA_SHIFT		0
#define FXR_RX_DMA_DBG_BUFFER_DATA3_DATA_MASK		0xFFFFFFFFFFFFFFFFull
#define FXR_RX_DMA_DBG_BUFFER_DATA3_DATA_SMASK		0xFFFFFFFFFFFFFFFFull
/*
* Table #21 of 333_Memory_Map_RX_DMA.xml - RX_DMA_DBG_BUFFER_DATA4
* This is an RX DMA debug CSR. This is the data for bits [287:256] of the RX DMA 
* buffer being accessed with the RX_DMA_DBG_BUFFER_ADDR register. The data from 
* this CSR is written to the DMA buffer if the write bit is active in that CSR, 
* or this data will contain the read data if the write bit is not active. This 
* data is the ECC codes for the stored data in the buffer.
*/
#define FXR_RX_DMA_DBG_BUFFER_DATA4			(FXR_RX_DMA_CSRS + 0x0000000010B8)
#define FXR_RX_DMA_DBG_BUFFER_DATA4_RESETCSR		0x0000000000000000ull
#define FXR_RX_DMA_DBG_BUFFER_DATA4_DATA_SHIFT		0
#define FXR_RX_DMA_DBG_BUFFER_DATA4_DATA_MASK		0xFFFFFFFFull
#define FXR_RX_DMA_DBG_BUFFER_DATA4_DATA_SMASK		0xFFFFFFFFull
/*
* Table #22 of 333_Memory_Map_RX_DMA.xml - RX_DMA_DBG_CMD_POOL_ADDR
* This is an RX DMA debug CSR. It allows indirect access to both of the DMA 
* comand pool arrays. These arrays can not be written to during normal 
* operation. This register is for debug use only. Note that this register is 284 
* bits wide. The data for the read or write to this register is contained in the 
* next five CSR's. Max address for MC0 is 0x1f and the max address for MC1 is 
* 0x3. Anything over that will mirror the lower address range data.
*/
#define FXR_RX_DMA_DBG_CMD_POOL_ADDR			(FXR_RX_DMA_CSRS + 0x0000000010C0)
#define FXR_RX_DMA_DBG_CMD_POOL_ADDR_RESETCSR		0x0050000000000000ull
#define FXR_RX_DMA_DBG_CMD_POOL_ADDR_VALID_SHIFT	63
#define FXR_RX_DMA_DBG_CMD_POOL_ADDR_VALID_MASK		0x1ull
#define FXR_RX_DMA_DBG_CMD_POOL_ADDR_VALID_SMASK	0x8000000000000000ull
#define FXR_RX_DMA_DBG_CMD_POOL_ADDR_WRITE_SHIFT	62
#define FXR_RX_DMA_DBG_CMD_POOL_ADDR_WRITE_MASK		0x1ull
#define FXR_RX_DMA_DBG_CMD_POOL_ADDR_WRITE_SMASK	0x4000000000000000ull
#define FXR_RX_DMA_DBG_CMD_POOL_ADDR_PAYLOAD_REGS_SHIFT	52
#define FXR_RX_DMA_DBG_CMD_POOL_ADDR_PAYLOAD_REGS_MASK	0xFFull
#define FXR_RX_DMA_DBG_CMD_POOL_ADDR_PAYLOAD_REGS_SMASK	0xFF0000000000000ull
#define FXR_RX_DMA_DBG_CMD_POOL_ADDR_MC_SHIFT		51
#define FXR_RX_DMA_DBG_CMD_POOL_ADDR_MC_MASK		0x1ull
#define FXR_RX_DMA_DBG_CMD_POOL_ADDR_MC_SMASK		0x8000000000000ull
#define FXR_RX_DMA_DBG_CMD_POOL_ADDR_ADDRESS_SHIFT	0
#define FXR_RX_DMA_DBG_CMD_POOL_ADDR_ADDRESS_MASK	0x7FFFFFFFFFFFFull
#define FXR_RX_DMA_DBG_CMD_POOL_ADDR_ADDRESS_SMASK	0x7FFFFFFFFFFFFull
/*
* Table #23 of 333_Memory_Map_RX_DMA.xml - RX_DMA_DBG_CMD_POOL_DATA0
* This is an RX DMA debug CSR. This is the data for bits [63:0] of the RX DMA 
* CommandPool being accessed with the RX_DMA_DBG_CMD_POOL_ADDR register. The 
* data from this CSR is written to the buffer if the write bit is active in that 
* CSR, or this data will contain the read data if the write bit is not 
* active.
*/
#define FXR_RX_DMA_DBG_CMD_POOL_DATA0			(FXR_RX_DMA_CSRS + 0x0000000010C8)
#define FXR_RX_DMA_DBG_CMD_POOL_DATA0_RESETCSR		0x0000000000000000ull
#define FXR_RX_DMA_DBG_CMD_POOL_DATA0_DATA_SHIFT	0
#define FXR_RX_DMA_DBG_CMD_POOL_DATA0_DATA_MASK		0xFFFFFFFFFFFFFFFFull
#define FXR_RX_DMA_DBG_CMD_POOL_DATA0_DATA_SMASK	0xFFFFFFFFFFFFFFFFull
/*
* Table #24 of 333_Memory_Map_RX_DMA.xml - RX_DMA_DBG_CMD_POOL_DATA1
* This is an RX DMA debug CSR. This is the data for bits [127:64] of the RX DMA 
* CommandPool being accessed with the RX_DMA_DBG_CMD_POOL_ADDR register. The 
* data from this CSR is written to the buffer if the write bit is active in that 
* CSR, or this data will contain the read data if the write bit is not 
* active.
*/
#define FXR_RX_DMA_DBG_CMD_POOL_DATA1			(FXR_RX_DMA_CSRS + 0x0000000010D0)
#define FXR_RX_DMA_DBG_CMD_POOL_DATA1_RESETCSR		0x0000000000000000ull
#define FXR_RX_DMA_DBG_CMD_POOL_DATA1_DATA_SHIFT	0
#define FXR_RX_DMA_DBG_CMD_POOL_DATA1_DATA_MASK		0xFFFFFFFFFFFFFFFFull
#define FXR_RX_DMA_DBG_CMD_POOL_DATA1_DATA_SMASK	0xFFFFFFFFFFFFFFFFull
/*
* Table #25 of 333_Memory_Map_RX_DMA.xml - RX_DMA_DBG_CMD_POOL_DATA2
* This is an RX DMA debug CSR. This is the data for bits [191:128] of the RX DMA 
* CommandPool being accessed with the RX_DMA_DBG_CMD_POOL_ADDR register. The 
* data from this CSR is written to the buffer if the write bit is active in that 
* CSR, or this data will contain the read data if the write bit is not 
* active.
*/
#define FXR_RX_DMA_DBG_CMD_POOL_DATA2			(FXR_RX_DMA_CSRS + 0x0000000010D8)
#define FXR_RX_DMA_DBG_CMD_POOL_DATA2_RESETCSR		0x0000000000000000ull
#define FXR_RX_DMA_DBG_CMD_POOL_DATA2_DATA_SHIFT	0
#define FXR_RX_DMA_DBG_CMD_POOL_DATA2_DATA_MASK		0xFFFFFFFFFFFFFFFFull
#define FXR_RX_DMA_DBG_CMD_POOL_DATA2_DATA_SMASK	0xFFFFFFFFFFFFFFFFull
/*
* Table #26 of 333_Memory_Map_RX_DMA.xml - RX_DMA_DBG_CMD_POOL_DATA3
* This is an RX DMA debug CSR. This is the data for bits [255:192] of the RX DMA 
* CommandPool being accessed with the RX_DMA_DBG_CMD_POOL_ADDR register. The 
* data from this CSR is written to the buffer if the write bit is active in that 
* CSR, or this data will contain the read data if the write bit is not 
* active.
*/
#define FXR_RX_DMA_DBG_CMD_POOL_DATA3			(FXR_RX_DMA_CSRS + 0x0000000010E0)
#define FXR_RX_DMA_DBG_CMD_POOL_DATA3_RESETCSR		0x0000000000000000ull
#define FXR_RX_DMA_DBG_CMD_POOL_DATA3_DATA_SHIFT	0
#define FXR_RX_DMA_DBG_CMD_POOL_DATA3_DATA_MASK		0xFFFFFFFFFFFFFFFFull
#define FXR_RX_DMA_DBG_CMD_POOL_DATA3_DATA_SMASK	0xFFFFFFFFFFFFFFFFull
/*
* Table #27 of 333_Memory_Map_RX_DMA.xml - RX_DMA_DBG_CMD_POOL_DATA4
* This is an RX DMA debug CSR. This is the data for bits [283:256] of the RX DMA 
* CommandPool being accessed with the RX_DMA_DBG_CMD_POOL_ADDR register. The 
* data from this CSR is written to the buffer if the write bit is active in that 
* CSR, or this data will contain the read data if the write bit is not 
* active.
*/
#define FXR_RX_DMA_DBG_CMD_POOL_DATA4			(FXR_RX_DMA_CSRS + 0x0000000010E8)
#define FXR_RX_DMA_DBG_CMD_POOL_DATA4_RESETCSR		0x0000000000000000ull
#define FXR_RX_DMA_DBG_CMD_POOL_DATA4_DATA_SHIFT	0
#define FXR_RX_DMA_DBG_CMD_POOL_DATA4_DATA_MASK		0xFFFFFFFFFFFFFFFFull
#define FXR_RX_DMA_DBG_CMD_POOL_DATA4_DATA_SMASK	0xFFFFFFFFFFFFFFFFull
/*
* Table #28 of 333_Memory_Map_RX_DMA.xml - RX_DMA_DBG_WAR_BUF
* This is an RX DMA debug CSR. It allows access to the WARRead Buffer. This 
* array can not be written to during normal operation. This register is for 
* debug use only.
*/
#define FXR_RX_DMA_DBG_WAR_BUF				(FXR_RX_DMA_CSRS + 0x0000000010F0)
#define FXR_RX_DMA_DBG_WAR_BUF_RESETCSR			0x0000000000000000ull
#define FXR_RX_DMA_DBG_WAR_BUF_DATA_SHIFT		0
#define FXR_RX_DMA_DBG_WAR_BUF_DATA_MASK		0xFFFFFFFFFFFFFFFFull
#define FXR_RX_DMA_DBG_WAR_BUF_DATA_SMASK		0xFFFFFFFFFFFFFFFFull
/*
* Table #29 of 333_Memory_Map_RX_DMA.xml - RX_DMA_ERR_BUF_MBE
* MBE error counts from the DMA buffers in each Message Class. All errors from a 
* single message class are accumulated into one register.
*/
#define FXR_RX_DMA_ERR_BUF_MBE				(FXR_RX_DMA_CSRS + 0x0000000050F0)
#define FXR_RX_DMA_ERR_BUF_MBE_RESETCSR			0x0000000000000000ull
#define FXR_RX_DMA_ERR_BUF_MBE_MBE_CNT_SHIFT		21
#define FXR_RX_DMA_ERR_BUF_MBE_MBE_CNT_MASK		0xFFull
#define FXR_RX_DMA_ERR_BUF_MBE_MBE_CNT_SMASK		0x1FE00000ull
#define FXR_RX_DMA_ERR_BUF_MBE_TC_SHIFT			19
#define FXR_RX_DMA_ERR_BUF_MBE_TC_MASK			0x3ull
#define FXR_RX_DMA_ERR_BUF_MBE_TC_SMASK			0x180000ull
#define FXR_RX_DMA_ERR_BUF_MBE_QWORD_SHIFT		17
#define FXR_RX_DMA_ERR_BUF_MBE_QWORD_MASK		0x3ull
#define FXR_RX_DMA_ERR_BUF_MBE_QWORD_SMASK		0x60000ull
#define FXR_RX_DMA_ERR_BUF_MBE_ADDRESS_SHIFT		8
#define FXR_RX_DMA_ERR_BUF_MBE_ADDRESS_MASK		0x1FFull
#define FXR_RX_DMA_ERR_BUF_MBE_ADDRESS_SMASK		0x1FF00ull
#define FXR_RX_DMA_ERR_BUF_MBE_SYNDROME_SHIFT		0
#define FXR_RX_DMA_ERR_BUF_MBE_SYNDROME_MASK		0xFFull
#define FXR_RX_DMA_ERR_BUF_MBE_SYNDROME_SMASK		0xFFull
/*
* Table #30 of 333_Memory_Map_RX_DMA.xml - RX_DMA_ERR_LL_PARITY
* Parity error counts from the RX DMA Linked List arrays in each Message Class. 
* All errors from a single message class are accumulated into one 
* register.
*/
#define FXR_RX_DMA_ERR_LL_PARITY			(FXR_RX_DMA_CSRS + 0x000000005100)
#define FXR_RX_DMA_ERR_LL_PARITY_RESETCSR		0x0000000000000000ull
#define FXR_RX_DMA_ERR_LL_PARITY_ERROR_CNT_SHIFT	36
#define FXR_RX_DMA_ERR_LL_PARITY_ERROR_CNT_MASK		0xFFull
#define FXR_RX_DMA_ERR_LL_PARITY_ERROR_CNT_SMASK	0xFF000000000ull
#define FXR_RX_DMA_ERR_LL_PARITY_ADDRESS_TC3_SHIFT	28
#define FXR_RX_DMA_ERR_LL_PARITY_ADDRESS_TC3_MASK	0xFFull
#define FXR_RX_DMA_ERR_LL_PARITY_ADDRESS_TC3_SMASK	0xFF0000000ull
#define FXR_RX_DMA_ERR_LL_PARITY_TC3_PARITY_SHIFT	27
#define FXR_RX_DMA_ERR_LL_PARITY_TC3_PARITY_MASK	0x1ull
#define FXR_RX_DMA_ERR_LL_PARITY_TC3_PARITY_SMASK	0x8000000ull
#define FXR_RX_DMA_ERR_LL_PARITY_ADDRESS_TC2_SHIFT	19
#define FXR_RX_DMA_ERR_LL_PARITY_ADDRESS_TC2_MASK	0xFFull
#define FXR_RX_DMA_ERR_LL_PARITY_ADDRESS_TC2_SMASK	0x7F80000ull
#define FXR_RX_DMA_ERR_LL_PARITY_TC2_PARITY_SHIFT	18
#define FXR_RX_DMA_ERR_LL_PARITY_TC2_PARITY_MASK	0x1ull
#define FXR_RX_DMA_ERR_LL_PARITY_TC2_PARITY_SMASK	0x40000ull
#define FXR_RX_DMA_ERR_LL_PARITY_ADDRESS_TC1_SHIFT	10
#define FXR_RX_DMA_ERR_LL_PARITY_ADDRESS_TC1_MASK	0xFFull
#define FXR_RX_DMA_ERR_LL_PARITY_ADDRESS_TC1_SMASK	0x3FC00ull
#define FXR_RX_DMA_ERR_LL_PARITY_TC1_PARITY_SHIFT	9
#define FXR_RX_DMA_ERR_LL_PARITY_TC1_PARITY_MASK	0x1ull
#define FXR_RX_DMA_ERR_LL_PARITY_TC1_PARITY_SMASK	0x200ull
#define FXR_RX_DMA_ERR_LL_PARITY_ADDRESS_TC0_SHIFT	1
#define FXR_RX_DMA_ERR_LL_PARITY_ADDRESS_TC0_MASK	0xFFull
#define FXR_RX_DMA_ERR_LL_PARITY_ADDRESS_TC0_SMASK	0x1FEull
#define FXR_RX_DMA_ERR_LL_PARITY_TC0_PARITY_SHIFT	0
#define FXR_RX_DMA_ERR_LL_PARITY_TC0_PARITY_MASK	0x1ull
#define FXR_RX_DMA_ERR_LL_PARITY_TC0_PARITY_SMASK	0x1ull
/*
* Table #31 of 333_Memory_Map_RX_DMA.xml - RX_DMA_ERR_TAIL_PARITY
* Parity error counts from the RX DMA Tail List arrays in each Message Class. 
* All errors from a single message class are accumulated into one 
* register.
*/
#define FXR_RX_DMA_ERR_TAIL_PARITY			(FXR_RX_DMA_CSRS + 0x000000005110)
#define FXR_RX_DMA_ERR_TAIL_PARITY_RESETCSR		0x0000000000000000ull
#define FXR_RX_DMA_ERR_TAIL_PARITY_ERROR_CNT_SHIFT	36
#define FXR_RX_DMA_ERR_TAIL_PARITY_ERROR_CNT_MASK	0xFFull
#define FXR_RX_DMA_ERR_TAIL_PARITY_ERROR_CNT_SMASK	0xFF000000000ull
#define FXR_RX_DMA_ERR_TAIL_PARITY_ADDRESS_TC3_SHIFT	28
#define FXR_RX_DMA_ERR_TAIL_PARITY_ADDRESS_TC3_MASK	0xFFull
#define FXR_RX_DMA_ERR_TAIL_PARITY_ADDRESS_TC3_SMASK	0xFF0000000ull
#define FXR_RX_DMA_ERR_TAIL_PARITY_TC3_PARITY_SHIFT	27
#define FXR_RX_DMA_ERR_TAIL_PARITY_TC3_PARITY_MASK	0x1ull
#define FXR_RX_DMA_ERR_TAIL_PARITY_TC3_PARITY_SMASK	0x8000000ull
#define FXR_RX_DMA_ERR_TAIL_PARITY_ADDRESS_TC2_SHIFT	19
#define FXR_RX_DMA_ERR_TAIL_PARITY_ADDRESS_TC2_MASK	0xFFull
#define FXR_RX_DMA_ERR_TAIL_PARITY_ADDRESS_TC2_SMASK	0x7F80000ull
#define FXR_RX_DMA_ERR_TAIL_PARITY_TC2_PARITY_SHIFT	18
#define FXR_RX_DMA_ERR_TAIL_PARITY_TC2_PARITY_MASK	0x1ull
#define FXR_RX_DMA_ERR_TAIL_PARITY_TC2_PARITY_SMASK	0x40000ull
#define FXR_RX_DMA_ERR_TAIL_PARITY_ADDRESS_TC1_SHIFT	10
#define FXR_RX_DMA_ERR_TAIL_PARITY_ADDRESS_TC1_MASK	0xFFull
#define FXR_RX_DMA_ERR_TAIL_PARITY_ADDRESS_TC1_SMASK	0x3FC00ull
#define FXR_RX_DMA_ERR_TAIL_PARITY_TC1_PARITY_SHIFT	9
#define FXR_RX_DMA_ERR_TAIL_PARITY_TC1_PARITY_MASK	0x1ull
#define FXR_RX_DMA_ERR_TAIL_PARITY_TC1_PARITY_SMASK	0x200ull
#define FXR_RX_DMA_ERR_TAIL_PARITY_ADDRESS_TC0_SHIFT	1
#define FXR_RX_DMA_ERR_TAIL_PARITY_ADDRESS_TC0_MASK	0xFFull
#define FXR_RX_DMA_ERR_TAIL_PARITY_ADDRESS_TC0_SMASK	0x1FEull
#define FXR_RX_DMA_ERR_TAIL_PARITY_TC0_PARITY_SHIFT	0
#define FXR_RX_DMA_ERR_TAIL_PARITY_TC0_PARITY_MASK	0x1ull
#define FXR_RX_DMA_ERR_TAIL_PARITY_TC0_PARITY_SMASK	0x1ull
/*
* Table #32 of 333_Memory_Map_RX_DMA.xml - RX_DMA_ERR_GENERAL
* Other errors not related to the above parity and error correction code 
* errors.
*/
#define FXR_RX_DMA_ERR_GENERAL				(FXR_RX_DMA_CSRS + 0x000000005120)
#define FXR_RX_DMA_ERR_GENERAL_RESETCSR			0x0000000000000000ull
#define FXR_RX_DMA_ERR_GENERAL_E2E_DATA_LOST_SHIFT	8
#define FXR_RX_DMA_ERR_GENERAL_E2E_DATA_LOST_MASK	0xFFull
#define FXR_RX_DMA_ERR_GENERAL_E2E_DATA_LOST_SMASK	0xFF00ull
#define FXR_RX_DMA_ERR_GENERAL_MC1_DROP_CMD_SHIFT	1
#define FXR_RX_DMA_ERR_GENERAL_MC1_DROP_CMD_MASK	0x1ull
#define FXR_RX_DMA_ERR_GENERAL_MC1_DROP_CMD_SMASK	0x2ull
#define FXR_RX_DMA_ERR_GENERAL_MC0_DROP_CMD_SHIFT	0
#define FXR_RX_DMA_ERR_GENERAL_MC0_DROP_CMD_MASK	0x1ull
#define FXR_RX_DMA_ERR_GENERAL_MC0_DROP_CMD_SMASK	0x1ull

#endif 		/* DEF_FXR_RX_DMA_SW_DEF */
