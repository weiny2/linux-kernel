//                                                                             
// File:       fxr_tx_otr_csrs.h                                               
// Creator:    pvesvslx                                                        
// Time:       Friday Aug 1, 2014 [11:06:24 am]                                
//                                                                             
// Path:       /tmp/pvesvslx/nebulon_run/30229                                 
// Arguments:  /p/com/eda/denali/blueprint/3.7.4/Linux/blueprint -chdr -I      
//             /p/slx/eda/intel/nebulon/2.05_fdo/include -I                    
//             /p/slx/pvesv/fxr_autogen/fxr fxr_tx_otr.rdl                     
//                                                                             
// Sources:    /tmp/pvesvslx/nebulon_run/30229/fxr_tx_otr.rdlh                 
//             /tmp/pvesvslx/nebulon_run/30229/lib_udp.rdl                     
//             /tmp/pvesvslx/nebulon_run/30229/fxr_tx_otr.rdl                  
//             /p/com/eda/intel/nebulon/2.05p1/generators/generator_common.pm  
//             /p/com/eda/intel/nebulon/2.05p1/generators/chdr.pm              
//                                                                             
// Blueprint:   3.7.4 (Tue Jun 23 00:17:01 PDT 2009)                           
// Machine:    scci56217                                                       
// OS:         Linux 2.6.16.60-0.58.1.3835.0.PTF.638363-smp                    
// Description:                                                                
//                                                                             
//Transmit OTR address map                                                     
//                                                                             
// Copyright (C) 2014 Denali Software Inc.  All rights reserved                
// THIS FILE IS AUTOMATICALLY GENERATED BY DENALI BLUEPRINT, DO NOT EDIT       
//                                                                             



// CFG_MC0_PREFRAG_OPB_IN_Q_CRDTS desc:  This CSR contains the configuration parameters necessary to configure
// the number of credits in the Pre-Fragmentation Engine OPB Input
// Queues for MC0.
typedef volatile union {
    struct {
        uint64_t  TC0_CRDTS            :   8;    //  MC0/TC0 Pre-fragmentation OPB
                                                 // Input Queue Credits
        uint64_t  TC1_CRDTS            :   8;    //  MC0/TC1 Pre-fragmentation OPB
                                                 // Input Queue Credits
        uint64_t  TC2_CRDTS            :   8;    //  MC0/TC2 Pre-fragmentation OPB
                                                 // Input Queue Credits
        uint64_t  TC3_CRDTS            :   8;    //  MC0/TC3 Pre-fragmentation OPB
                                                 // Input Queue Credits
        uint64_t  UNUSED_63_32         :  32;    //  Unused

    };
    uint64_t                         val;
} CFG_MC0_PREFRAG_OPB_IN_Q_CRDTS_t;

// --------------------------------------------------------------------------------------------------------------------------------

// CFG_MC1_PREFRAG_OPB_IN_Q_CRDTS desc:  This CSR contains the configuration parameters necessary to configure
// the number of credits in the Pre-Fragmentation Engine OPB Input
// Queues for MC1.
typedef volatile union {
    struct {
        uint64_t  TC0_CRDTS            :   8;    //  MC0/TC0 Pre-fragmentation OPB
                                                 // Input Queue Credits
        uint64_t  TC1_CRDTS            :   8;    //  MC0/TC1 Pre-fragmentation OPB
                                                 // Input Queue Credits
        uint64_t  TC2_CRDTS            :   8;    //  MC0/TC2 Pre-fragmentation OPB
                                                 // Input Queue Credits
        uint64_t  TC3_CRDTS            :   8;    //  MC0/TC3 Pre-fragmentation OPB
                                                 // Input Queue Credits
        uint64_t  UNUSED_63_32         :  32;    //  Unused

    };
    uint64_t                         val;
} CFG_MC1_PREFRAG_OPB_IN_Q_CRDTS_t;

// --------------------------------------------------------------------------------------------------------------------------------

// CFG_MC0_FP_OPB_IN_Q_CRDTS desc:  This CSR contains the configuration parameters necessary to configure
// the number of credits in the Fast Path OPB Input Queues for MC0.
typedef volatile union {
    struct {
        uint64_t  TC0_CRDTS            :   8;    //  MC0/TC0 Fast Path OPB Input
                                                 // Queue Credits
        uint64_t  TC1_CRDTS            :   8;    //  MC0/TC1 Fast Path OPB Input
                                                 // Queue Credits
        uint64_t  TC2_CRDTS            :   8;    //  MC0/TC2 Fast Path OPB Input
                                                 // Queue Credits
        uint64_t  TC3_CRDTS            :   8;    //  MC0/TC3 Fast Path OPB Input
                                                 // Queue Credits
        uint64_t  UNUSED_63_32         :  32;    //  Unused

    };
    uint64_t                         val;
} CFG_MC0_FP_OPB_IN_Q_CRDTS_t;

// --------------------------------------------------------------------------------------------------------------------------------

// CFG_MC1_FP_OPB_IN_Q_CRDTS desc:  This CSR contains the configuration parameters necessary to configure
// the number of credits in the Fast Path OPB Input Queues for MC1.
typedef volatile union {
    struct {
        uint64_t  TC0_CRDTS            :   8;    //  MC1/TC0 Fast Path OPB Input
                                                 // Queue Credits
        uint64_t  TC1_CRDTS            :   8;    //  MC1/TC1 Fast Path OPB Input
                                                 // Queue Credits
        uint64_t  TC2_CRDTS            :   8;    //  MC1/TC2 Fast Path OPB Input
                                                 // Queue Credits
        uint64_t  TC3_CRDTS            :   8;    //  MC1/TC3 Fast Path OPB Input
                                                 // Queue Credits
        uint64_t  UNUSED_63_32         :  32;    //  Unused

    };
    uint64_t                         val;
} CFG_MC1_FP_OPB_IN_Q_CRDTS_t;

// --------------------------------------------------------------------------------------------------------------------------------

// CFG_MC1P_FP_OPB_IN_Q_CRDTS desc:  This CSR contains the configuration parameters necessary to configure
// the number of credits in the Fast Path OPB Input Queues for MC1'.
typedef volatile union {
    struct {
        uint64_t  TC0_CRDTS            :   8;    //  MC1'/TC0 Fast Path OPB Input
                                                 // Queue Credits
        uint64_t  TC1_CRDTS            :   8;    //  MC1'/TC1 Fast Path OPB Input
                                                 // Queue Credits
        uint64_t  TC2_CRDTS            :   8;    //  MC1'/TC2 Fast Path OPB Input
                                                 // Queue Credits
        uint64_t  TC3_CRDTS            :   8;    //  MC1'/TC3 Fast Path OPB Input
                                                 // Queue Credits
        uint64_t  UNUSED_63_32         :  32;    //  Unused

    };
    uint64_t                         val;
} CFG_MC1P_FP_OPB_IN_Q_CRDTS_t;

// --------------------------------------------------------------------------------------------------------------------------------

// CFG_MC0_POSTFRAG_OPB_IN_Q_CRDTS desc:  This CSR contains the configuration parameters necessary to configure
// the number of credits in the Post-Fragmentation Engine OPB Input
// Queues for MC0.
typedef volatile union {
    struct {
        uint64_t  TC0_CRDTS            :   8;    //  MC0/TC0 Post-fragmentation
                                                 // OPB Input Queue Credits
        uint64_t  TC1_CRDTS            :   8;    //  MC0/TC1 Post-fragmentation
                                                 // OPB Input Queue Credits
        uint64_t  TC2_CRDTS            :   8;    //  MC0/TC2 Post-fragmentation
                                                 // OPB Input Queue Credits
        uint64_t  TC3_CRDTS            :   8;    //  MC0/TC3 Post-fragmentation
                                                 // OPB Input Queue Credits
        uint64_t  UNUSED_63_32         :  32;    //  Unused

    };
    uint64_t                         val;
} CFG_MC0_POSTFRAG_OPB_IN_Q_CRDTS_t;

// --------------------------------------------------------------------------------------------------------------------------------

// CFG_MC1_POSTFRAG_OPB_IN_Q_CRDTS desc:  This CSR contains the configuration parameters necessary to configure
// the number of credits in the Post-Fragmentation Engine OPB Input
// Queues for MC1.
typedef volatile union {
    struct {
        uint64_t  TC0_CRDTS            :   8;    //  MC0/TC0 Post-fragmentation
                                                 // OPB Input Queue Credits
        uint64_t  TC1_CRDTS            :   8;    //  MC0/TC1 Post-fragmentation
                                                 // OPB Input Queue Credits
        uint64_t  TC2_CRDTS            :   8;    //  MC0/TC2 Post-fragmentation
                                                 // OPB Input Queue Credits
        uint64_t  TC3_CRDTS            :   8;    //  MC0/TC3 Post-fragmentation
                                                 // OPB Input Queue Credits
        uint64_t  UNUSED_63_32         :  32;    //  Unused

    };
    uint64_t                         val;
} CFG_MC1_POSTFRAG_OPB_IN_Q_CRDTS_t;

// --------------------------------------------------------------------------------------------------------------------------------

// CFG_DMA_IN_QCRDTS desc:  This CSR contains the configuration parameters necessary to configure
// the number of credits in DMA Input Queues.
typedef volatile union {
    struct {
        uint64_t  MC0TC0_CRDTS         :   8;    //  MC0/TC0 Post-fragmentation
                                                 // OPB Input Queue Credits
        uint64_t  MC0TC1_CRDTS         :   8;    //  MC0/TC1 Post-fragmentation
                                                 // OPB Input Queue Credits
        uint64_t  MC0TC2_CRDTS         :   8;    //  MC0/TC2 Post-fragmentation
                                                 // OPB Input Queue Credits
        uint64_t  MC0TC3_CRDTS         :   8;    //  MC0/TC3 Post-fragmentation
                                                 // OPB Input Queue Credits
        uint64_t  MC1TC0_CRDTS         :   8;    //  MC1/TC0 Post-fragmentation
                                                 // OPB Input Queue Credits
        uint64_t  MC1TC1_CRDTS         :   8;    //  MC1/TC1 Post-fragmentation
                                                 // OPB Input Queue Credits
        uint64_t  MC1TC2_CRDTS         :   8;    //  MC1/TC2 Post-fragmentation
                                                 // OPB Input Queue Credits
        uint64_t  MC1TC3_CRDTS         :   8;    //  MC1/TC3 Post-fragmentation
                                                 // OPB Input Queue Credits

    };
    uint64_t                         val;
} CFG_DMA_IN_QCRDTS_t;

// --------------------------------------------------------------------------------------------------------------------------------

// CFG_RXDMA_INT desc:  This CSR contains the configuration parameters necessary to configure
// the TXOTR to RXDMA Interface.
typedef volatile union {
    struct {
        uint64_t  CRDTS                :   8;    //  TXOTR to RXDMA Credits
        uint64_t  UNUSED_63_8          :  56;    //  Unused

    };
    uint64_t                         val;
} CFG_RXDMA_INT_t;

// --------------------------------------------------------------------------------------------------------------------------------

// CFG_TXCI_INT desc:  This CSR contains the configuration parameters necessary to configure
// the TXOTR to TXCI Interface.
typedef volatile union {
    struct {
        uint64_t  CRDTS                :   9;    //  TXOTR to TXCI Memory
                                                 // Read/Write Credits
        uint64_t  UNUSED_63_9          :  55;    //  Unused

    };
    uint64_t                         val;
} CFG_TXCI_INT_t;

// --------------------------------------------------------------------------------------------------------------------------------

// CFG_AT_INT desc:  This CSR contains the configuration parameters necessary to configure
// the TXOTR to AT Interface.
typedef volatile union {
    struct {
        uint64_t  CRDTS                :   9;    //  TXOTR to AT translation
                                                 // request credits
        uint64_t  UNUSED_63_9          :  55;    //  Unused

    };
    uint64_t                         val;
} CFG_AT_INT_t;

// --------------------------------------------------------------------------------------------------------------------------------

// CFG_MSGID_1 desc:  This CSR contains the configuration parameters necessary to set the
// number of reserved MSG_IDs for each MC/TC combination.
typedef volatile union {
    struct {
        uint64_t  RSVD_MC0_TC0         :   8;    //  The number of MC0/TC0
                                                 // Reserved Message Identifiers
        uint64_t  RSVD_MC0_TC1         :   8;    //  The number of MC0/TC1
                                                 // Reserved Message Identifiers
        uint64_t  RSVD_MC0_TC2         :   8;    //  The number of MC0/TC2
                                                 // Reserved Message Identifiers
        uint64_t  RSVD_MC0_TC3         :   8;    //  The number of MC0/TC3
                                                 // Reserved Message Identifiers
        uint64_t  RSVD_MC1_TC0         :   8;    //  The number of MC1/TC0
                                                 // Reserved Message Identifiers
        uint64_t  RSVD_MC1_TC1         :   8;    //  The number of MC1/TC1
                                                 // Reserved Message Identifiers
        uint64_t  RSVD_MC1_TC2         :   8;    //  The number of MC1/TC2
                                                 // Reserved Message Identifiers
        uint64_t  RSVD_MC1_TC3         :   8;    //  The number of MC1/TC3
                                                 // Reserved Message Identifiers

    };
    uint64_t                         val;
} CFG_MSGID_1_t;

// --------------------------------------------------------------------------------------------------------------------------------

// CFG_MSGID_2 desc:  This CSR contains the configuration parameters necessary to set the
// total shared Message Identifiers that can be allocated
// simultaneously.
typedef volatile union {
    struct {
        uint64_t  SHARED               :  14;    //  The number of Shared Message
                                                 // Identifiers
        uint64_t  UNUSED_63_14         :  50;    //  Unused

    };
    uint64_t                         val;
} CFG_MSGID_2_t;

// --------------------------------------------------------------------------------------------------------------------------------

// CFG_PKTID_1 desc:  This CSR contains the configuration parameters necessary to set the
// number of reserved PKT_IDs for each MC/TC combination.
typedef volatile union {
    struct {
        uint64_t  RSVD_MC0_TC0         :   8;    //  The number of MC0/TC0
                                                 // Reserved Packet Identifiers
        uint64_t  RSVD_MC0_TC1         :   8;    //  The number of MC0/TC1
                                                 // Reserved Packet Identifiers
        uint64_t  RSVD_MC0_TC2         :   8;    //  The number of MC0/TC2
                                                 // Reserved Packet Identifiers
        uint64_t  RSVD_MC0_TC3         :   8;    //  The number of MC0/TC3
                                                 // Reserved Packet Identifiers
        uint64_t  RSVD_MC1_TC0         :   8;    //  The number of MC1/TC0
                                                 // Reserved Packet Identifiers
        uint64_t  RSVD_MC1_TC1         :   8;    //  The number of MC1/TC1
                                                 // Reserved Packet Identifiers
        uint64_t  RSVD_MC1_TC2         :   8;    //  The number of MC1/TC2
                                                 // Reserved Packet Identifiers
        uint64_t  RSVD_MC1_TC3         :   8;    //  The number of MC1/TC3
                                                 // Reserved Packet Identifiers

    };
    uint64_t                         val;
} CFG_PKTID_1_t;

// --------------------------------------------------------------------------------------------------------------------------------

// CFG_PKTID_2 desc:  This CSR contains the configuration parameters necessary to set the
// total shared Packet Identifiers that can be allocated simultaneously.
typedef volatile union {
    struct {
        uint64_t  SHARED               :  14;    //  The number of Shared Packet
                                                 // Identifiers
        uint64_t  UNUSED_63_14         :  50;    //  Unused

    };
    uint64_t                         val;
} CFG_PKTID_2_t;

// --------------------------------------------------------------------------------------------------------------------------------

// starting the array instantiation section
typedef struct {
    CFG_MC0_PREFRAG_OPB_IN_Q_CRDTS_t CFG_MC0_PREFRAG_OPB_IN_Q_CRDTS; // offset 4'h0, width 64
    CFG_MC1_PREFRAG_OPB_IN_Q_CRDTS_t CFG_MC1_PREFRAG_OPB_IN_Q_CRDTS; // offset 4'h8, width 64
    CFG_MC0_FP_OPB_IN_Q_CRDTS_t CFG_MC0_FP_OPB_IN_Q_CRDTS; // offset 8'h10, width 64
    CFG_MC1_FP_OPB_IN_Q_CRDTS_t CFG_MC1_FP_OPB_IN_Q_CRDTS; // offset 8'h18, width 64
    CFG_MC1P_FP_OPB_IN_Q_CRDTS_t CFG_MC1P_FP_OPB_IN_Q_CRDTS; // offset 8'h20, width 64
    CFG_MC0_POSTFRAG_OPB_IN_Q_CRDTS_t CFG_MC0_POSTFRAG_OPB_IN_Q_CRDTS; // offset 8'h28, width 64
    CFG_MC1_POSTFRAG_OPB_IN_Q_CRDTS_t CFG_MC1_POSTFRAG_OPB_IN_Q_CRDTS; // offset 8'h30, width 64
    CFG_DMA_IN_QCRDTS_t        CFG_DMA_IN_QCRDTS; // offset 8'h38, width 64
    CFG_RXDMA_INT_t            CFG_RXDMA_INT;    // offset 8'h40, width 64
    CFG_TXCI_INT_t             CFG_TXCI_INT;     // offset 8'h48, width 64
    CFG_AT_INT_t               CFG_AT_INT;       // offset 8'h50, width 64
    CFG_MSGID_1_t              CFG_MSGID_1;      // offset 8'h58, width 64
    CFG_MSGID_2_t              CFG_MSGID_2;      // offset 8'h60, width 64
    CFG_PKTID_1_t              CFG_PKTID_1;      // offset 8'h68, width 64
    CFG_PKTID_2_t              CFG_PKTID_2;      // offset 8'h70, width 64
} fxr_tx_otr_csrs_t;                             // size:  8'h78
