/*
* Autogenerated by i_csrs.pl on Fri Aug  1 11:06:38 2014
* 
* i_csrs.pl Version 1.5 last modified on Tuesday 7/29/14 09:09:34.
*/

#ifndef DEF_FXR_SW_SW_STRUCT
#define DEF_FXR_SW_SW_STRUCT


typedef        uint64_t        ptl_hdr_data_t;                /* This is header data provided by the caller to the Portals API for a put request. If the value of the header data is 0, the header data field is not included in the packet and the 0 indication is achieved through the HD field. */
typedef        uint64_t        ptl_match_bits_t;                /* These are match bits provided by the caller to the Portals API for a put request on a matching network interface. */
typedef        uint64_t        payload_t;                /* The packet payload including any required padding to bring its length up to an integral multiple of 8 bytes. The amount of padding (in bytes, from 0 to 7 bytes, is indicated in PAD_COUNT). */
typedef        uint64_t        user_pointer_t;                /* Opaque 64 bit field provided by the application and posted in the event. */
typedef        uint64_t        threshold_t;                /* A threshold to use with triggered operations */

/*
*  Structures and Unions from Tables
*/
/*
* Structure from Table titled: Lower bits (currently defined bits) of Portals L4 OPCODE(Union - opcode_low_t) - 5 bits
*                  from File : 131_Portals_Transport_Layer.xml
*/
union opcode_low {
        struct {
                uint64_t        request_op             : 5;        /* [4:0] See Table 10-9 */
                uint64_t        fetch_request_op       : 5;        /* [4:0] See Table 10-10 */
                uint64_t        response_op            : 5;        /* [4:0] See Table 10-11 */
                uint64_t        e2e_ctrl_op            : 5;        /* [4:0] See Table 10-12 */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Portals L4 OPCODE(Struct - opcode_t) - 7 bits
*                  from File : 131_Portals_Transport_Layer.xml
*/
union opcode {
        struct {
                uint64_t        opcode_low             : 5;        /* [4:0] Currently defined 5 bits of the opcode field */
                uint64_t        reserved_6_5           : 2;        /* [6:5] Reserved */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Transmit Command Type: A1 flit (Struct - ptl_l4_a1_t) - 64bits
*                  from File : 131_Portals_Transport_Layer.xml
*/
union ptl_l4_a1 {
        struct {
                uint64_t        slid_low               : 20;        /* [19:0] Lower 20 bits of the source LID */
                uint64_t        length                 : 7;        /* [26:20] Length of the packet in 8B flits */
                uint64_t        l4                     : 4;        /* [30:27] L4 bits for short headers */
                uint64_t        b                      : 1;        /* [31:31] BECN field */
                uint64_t        dlid_low               : 20;        /* [51:32] Lower 20 bits of the destination LID */
                uint64_t        sc                     : 5;        /* [56:52] Service Class */
                uint64_t        rc                     : 3;        /* [59:57] Routing control */
                uint64_t        f                      : 1;        /* [60:60] FECN field */
                uint64_t        l2                     : 2;        /* [62:61] L2 field: always set to 0x0 in this format */
                uint64_t        lt                     : 1;        /* [63:63] ?? */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Transmit Command Type: A2 flit (Struct - ptl_l4_a2_t) - 64bits
*                  from File : 131_Portals_Transport_Layer.xml
*/
union ptl_l4_a2 {
        struct {
                uint64_t        slid_low               : 20;        /* [19:0] Lower 20 bits of the source LID */
                uint64_t        length                 : 11;        /* [30:20] Length of the packet in 8B flits */
                uint64_t        b                      : 1;        /* [31:31] BECN field */
                uint64_t        dlid_low               : 20;        /* [51:32] Lower 20 bits of the destination LID */
                uint64_t        sc                     : 5;        /* [56:52] Service Class */
                uint64_t        rc                     : 3;        /* [59:57] routing control */
                uint64_t        f                      : 1;        /* [60:60] FECN field */
                uint64_t        l2                     : 2;        /* [62:61] L2 field: always set to 0x0 in this format */
                uint64_t        lt                     : 1;        /* [63:63] ?? */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Transmit Command Type: B flit (Struct - ptl_l4_b_t) - 64bits
*                  from File : 131_Portals_Transport_Layer.xml
*/
union ptl_l4_b {
        struct {
                uint64_t        l4                     : 8;        /* [7:0] Layer 4 encoding */
                uint64_t        slid_high              : 4;        /* [11:8] Upper 4 bits of SLID */
                uint64_t        dlid_high              : 4;        /* [15:12] Upper 4 bits of DLID */
                uint64_t        pkey                   : 16;        /* [31:16] Partition Key */
                uint64_t        entropy                : 16;        /* [47:32] Entropy field for L2 */
                uint64_t        age                    : 8;        /* [55:48] Age field for L2 */
                uint64_t        reserved_63_56         : 8;        /* [63:56] Reserved */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Transmit Command Type: C1 flit (Struct - ptl_l4_c1_t) - 64bits
*                  from File : 131_Portals_Transport_Layer.xml
*/
union ptl_l4_c1 {
        struct {
                uint64_t        psn                    : 16;        /* [15:0] Packet sequence number assigned to this packet */
                uint64_t        pkt_id                 : 16;        /* [31:16] Packet ID assigned to this packet (opaque handle assigned by the initiator) */
                uint64_t        msg_id                 : 16;        /* [47:32] Message ID assigned to this packet (opaque handle assigned by the initiator) */
                uint64_t        ptl_idx                : 8;        /* [55:48] Portal Table Index for this message */
                uint64_t        opcode                 : 7;        /* [62:56] Op code associated with this packet */
                uint64_t        hd                     : 1;        /* [63:63] Indicates presence of header data */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Transmit Command Type: C2 flit (Struct - ptl_l4_c2_t) - 64bits
*                  from File : 131_Portals_Transport_Layer.xml
*/
union ptl_l4_c2 {
        struct {
                uint64_t        ordered_psn            : 16;        /* [15:0] Packet sequence number for the ordered channel being used by a control packet */
                uint64_t        pkt_id                 : 16;        /* [31:16] Packet ID assigned to this packet (opaque handle assigned by the initiator) */
                uint64_t        unordered_psn          : 16;        /* [47:32] Packet sequence number for the unordered channel being used by a control packet */
                uint64_t        reserved_55_48         : 8;        /* [55:48] Reserved */
                uint64_t        opcode                 : 7;        /* [62:56] Op code associated with this packet */
                uint64_t        reserved_63_63         : 1;        /* [63:63] Reserved */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Transmit Command Type: C3 flit (Struct - ptl_l4_c3_t) - 64bits
*                  from File : 131_Portals_Transport_Layer.xml
*/
union ptl_l4_c3 {
        struct {
                uint64_t        ack_psn                : 16;        /* [15:0] Packet sequence number being acknowledged by this packet (echoed from packet being acknowledged) */
                uint64_t        ack_pkt_id             : 16;        /* [31:16] Packet ID being acknowledged by this packet (echoed from packet being acknowledged). */
                uint64_t        ack_msg_id             : 16;        /* [47:32] Message ID being acknowledged by this packet (echoed from packet being acknowledged) */
                uint64_t        ack_opcode             : 4;        /* [51:48] Type of E2E acknowledgement being provided by this packet */
                uint64_t        reseerved              : 4;        /* [55:52] Reserved */
                uint64_t        opcode                 : 7;        /* [62:56] Op code associated with this packet */
                uint64_t        reserved_63_63         : 1;        /* [63:63] Reserved */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Transmit Command Type: D1 flit (Struct - ptl_l4_d1_t) - 64bits
*                  from File : 131_Portals_Transport_Layer.xml
*/
union ptl_l4_d1 {
        struct {
                uint64_t        ack_psn                : 16;        /* [15:0] Packet sequence number being acknowledged by this packet (echoed from packet being acknowledged) */
                uint64_t        ack_pkt_id             : 16;        /* [31:16] Packet ID being acknowledged by this packet (echoed from packet being acknowledged) */
                uint64_t        ack_msg_id             : 16;        /* [47:32] Message ID being acknowledged by this packet (echoed from packet being acknowledged). */
                uint64_t        ack_opcode             : 4;        /* [51:48] Type of E2E acknowledgement being provided by this packet */
                uint64_t        pad_count              : 3;        /* [54:52] Pad count to indicate the number of unused bytes in the payload field that were added to pad to 8B flit boundary. */
                uint64_t        ls                     : 1;        /* [55:55] List used by the request. */
                uint64_t        reserved_63_56         : 8;        /* [63:56] Reserved */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Transmit Command Type: D2 flit (Struct - ptl_l4_d2_t) - 64bits
*                  from File : 131_Portals_Transport_Layer.xml
*/
union ptl_l4_d2 {
        struct {
                uint64_t        ack_psn                : 16;        /* [15:0] Packet sequence number being acknowledged by this packet (echoed from packet being acknowledged) */
                uint64_t        ack_pkt_id             : 16;        /* [31:16] Packet ID being acknowledged by this packet (echoed from packet being acknowledged) */
                uint64_t        ack_msg_id             : 16;        /* [47:32] Message ID being acknowledged by this packet (echoed from packet being acknowledged). */
                uint64_t        ack_opcode             : 4;        /* [51:48] Type of E2E acknowledgement being provided by this packet */
                uint64_t        reserved_54_52         : 3;        /* [54:52] Reserved */
                uint64_t        ls                     : 1;        /* [55:55] List used by the request. */
                uint64_t        reserved_63_56         : 8;        /* [63:56] Reserved */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Transmit Command Type: E flit (Struct - ptl_l4_e_t) - 64bits
*                  from File : 131_Portals_Transport_Layer.xml
*/
union ptl_l4_e {
        struct {
                uint64_t        user_id                : 32;        /* [31:0] User Identifier (ID) to be used for access control. */
                uint64_t        srank                  : 32;        /* [63:32] Source Rank (logical source) used for matching */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Transmit Command Type: F flit (Struct - ptl_l4_f_t) - 64bits
*                  from File : 131_Portals_Transport_Layer.xml
*/
union ptl_l4_f {
        struct {
                uint64_t        offset                 : 57;        /* [56:0] Offset used by the incoming packet */
                uint64_t        pad_count              : 3;        /* [59:57] Number of pad bytes in the packet */
                uint64_t        ack_req                : 2;        /* [61:60] Acknowledgement request type for the message */
                uint64_t        ni                     : 2;        /* [63:62] Network Interface used for the message */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Transmit Command Type: G1 flit (Struct - ptl_l4_g1_t) - 64bits
*                  from File : 131_Portals_Transport_Layer.xml
*/
union ptl_l4_g1 {
        struct {
                uint64_t        tpid                   : 12;        /* [11:0] Target Process Identifier (TPID): process ID the message is targeting. Responses echo the TPID of the request into the TPID field of the response */
                uint64_t        ipid                   : 12;        /* [23:12] Initiator PID (IPID): process ID that originated the message. Responses echo the IPID of the request into the IPID field of the response. */
                uint64_t        reserved_31_24         : 8;        /* [31:24] Reserved */
                uint64_t        msg_len                : 32;        /* [63:32] Length of the payload of the message in bytes. */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Transmit Command Type: G2 flit (Struct - ptl_l4_g2_t) - 64bits
*                  from File : 131_Portals_Transport_Layer.xml
*/
union ptl_l4_g2 {
        struct {
                uint64_t        tpid                   : 12;        /* [11:0] Target Process Identifier (TPID): process ID the message is targeting. Responses echo the TPID of the request into the TPID field of the response */
                uint64_t        ipid                   : 12;        /* [23:12] Initiator PID (IPID): process ID that originated the message. Responses echo the IPID of the request into the IPID field of the response. */
                uint64_t        payload                : 40;        /* [63:24] Message payload bytes */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Transmit Command Type: G3 flit (Struct - ptl_l4_g3_t) - 64bits
*                  from File : 131_Portals_Transport_Layer.xml
*/
union ptl_l4_g3 {
        struct {
                uint64_t        tpid                   : 12;        /* [11:0] Target Process Identifier (TPID): process ID the message is targeting. Responses echo the TPID of the request into the TPID field of the response */
                uint64_t        ipid                   : 12;        /* [23:12] Initiator PID (IPID): process ID that originated the message. Responses echo the IPID of the request into the IPID field of the response. */
                uint64_t        operand                : 40;        /* [63:24] Message payload bytes corresponding to an operand */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Transmit Command Type: G4 flit (Struct - ptl_l4_g4_t) - 64bits
*                  from File : 131_Portals_Transport_Layer.xml
*/
union ptl_l4_g4 {
        struct {
                uint64_t        tpid                   : 12;        /* [11:0] Target Process Identifier (TPID): process ID the message is targeting. Responses echo the TPID of the request into the TPID field of the response */
                uint64_t        ipid                   : 12;        /* [23:12] Initiator PID (IPID): process ID that originated the message. Responses echo the IPID of the request into the IPID field of the response. */
                uint64_t        hdr_data_low           : 40;        /* [63:24] Low order 5 bytes of header data */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Transmit Command Type: G6 flit (Struct - ptl_l4_g6_t) - 64bits
*                  from File : 131_Portals_Transport_Layer.xml
*/
union ptl_l4_g6 {
        struct {
                uint64_t        tpid                   : 12;        /* [11:0] Target Process Identifier (TPID): process ID the message is targeting. Responses echo the TPID of the request into the TPID field of the response */
                uint64_t        ipid                   : 12;        /* [23:12] Initiator PID (IPID): process ID that originated the message. Responses echo the IPID of the request into the IPID field of the response. */
                uint64_t        max_dist_high          : 8;        /* [31:24] High 16 bits of the allowed maximum distance */
                uint64_t        mmsg_len               : 32;        /* [63:32] Modified Message Length: number of bytes modified by this request. */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Transmit Command Type: G7 flit (Struct - ptl_l4_g7_t) - 64bits
*                  from File : 131_Portals_Transport_Layer.xml
*/
union ptl_l4_g7 {
        struct {
                uint64_t        tpid                   : 12;        /* [11:0] Target Process Identifier (TPID): process ID the message is targeting. Responses echo the TPID of the request into the TPID field of the response */
                uint64_t        ipid                   : 12;        /* [23:12] Initiator PID (IPID): process ID that originated the message. Responses echo the IPID of the request into the IPID field of the response. */
                uint64_t        max_dist_high          : 8;        /* [31:24] High 8 bits of the allowed maximum distance */
                uint64_t        transmit_delay         : 24;        /* [55:32] 24 bit transmit delay to use - given in microseconds. */
                uint64_t        reserved_63_56         : 8;        /* [63:56] Reserved */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Transmit Command Type: G8 flit (Struct - ptl_l4_g8_t) - 64bits
*                  from File : 131_Portals_Transport_Layer.xml
*/
union ptl_l4_g8 {
        struct {
                uint64_t        reserved_23_0          : 24;        /* [23:0] Reserved */
                uint64_t        max_dist_high          : 8;        /* [31:24] High 8 bits of the allowed maximum distance */
                uint64_t        transmit_delay         : 24;        /* [55:32] 24 bit transmit delay to use - given in microseconds. */
                uint64_t        reserved_63_56         : 8;        /* [63:56] Reserved */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Transmit Command Type: I2 flit (Struct - ptl_l4_i2_t) - 64bits
*                  from File : 131_Portals_Transport_Layer.xml
*/
union ptl_l4_i2 {
        struct {
                uint64_t        hdr_data_high          : 24;        /* [23:0] Upper 3 bytes of header data */
                uint64_t        payload                : 40;        /* [63:24] Message payload bytes */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Transmit Command Type: I3 flit (Struct - ptl_l4_i3_t) - 64bits
*                  from File : 131_Portals_Transport_Layer.xml
*/
union ptl_l4_i3 {
        struct {
                uint64_t        hdr_data_high          : 24;        /* [23:0] Upper 3 bytes of header data */
                uint64_t        operand                : 40;        /* [63:24] Message payload bytes that act as an operand field */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Transmit Command Type: J1 flit (Struct - ptl_l4_j1_t) - 64bits
*                  from File : 131_Portals_Transport_Layer.xml
*/
union ptl_l4_j1 {
        struct {
                uint64_t        mmsg_len               : 32;        /* [31:0] Modified message length */
                uint64_t        target_ref             : 32;        /* [63:32] Target reference: opaque handle placed in a response by the target and echoed by the initiator in subsequent messages. */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Transmit Command Type: J2 flit (Struct - ptl_l4_j2_t) - 64bits
*                  from File : 131_Portals_Transport_Layer.xml
*/
union ptl_l4_j2 {
        struct {
                uint64_t        reserved_31_0          : 32;        /* [31:0] Reserved */
                uint64_t        target_ref             : 32;        /* [63:32] Target reference: opaque handle placed in a response by the target and echoed by the initiator in subsequent messages. */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Transmit Command Type: M flit (Struct - ptl_l4_m_t) - 64bits
*                  from File : 131_Portals_Transport_Layer.xml
*/
union ptl_l4_m {
        struct {
                uint64_t        operand                : 24;        /* [23:0] Message payload bytes that act as an operand field */
                uint64_t        payload                : 40;        /* [63:24] Message payload bytes */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Transmit Command Type: N2 flit (Struct - ptl_l4_n2_t) - 64bits
*                  from File : 131_Portals_Transport_Layer.xml
*/
union ptl_l4_n2 {
        struct {
                uint64_t        expected_psn           : 16;        /* [15:0] The next Packet sequence number (PSN) that is expected at the destination */
                uint64_t        max_dist_low           : 8;        /* [23:16] Low 8 bits of the maximum allowed distance */
                uint64_t        payload                : 40;        /* [63:24] Message payload bytes */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Transmit Command Type: P1 flit (Struct - ptl_l4_p1_t) - 64bits
*                  from File : 131_Portals_Transport_Layer.xml
*/
union ptl_l4_p1 {
        struct {
                uint64_t        payload                : 24;        /* [23:0] Message payload bytes */
                uint64_t        icrc                   : 32;        /* [55:24] Invariant CRC field (32b CRC) */
                uint64_t        atomic_dtype           : 6;        /* [61:56] Atomic Datatype */
                uint64_t        l2_tail                : 2;        /* [63:62] Always 01 */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Transmit Command Type: P2 flit (Struct - ptl_l4_p2_t) - 64bits
*                  from File : 131_Portals_Transport_Layer.xml
*/
union ptl_l4_p2 {
        struct {
                uint64_t        tpid                   : 12;        /* [11:0] Target Process Identifier (TPID): process ID the message is targeting. Responses echo the TPID of the request into the TPID field of the response */
                uint64_t        ipid                   : 12;        /* [23:12] Initiator PID (IPID): process ID that originated the message. Responses echo the IPID of the request into the IPID field of the response. */
                uint64_t        icrc                   : 32;        /* [55:24] Invariant CRC field (32b CRC) */
                uint64_t        atomic_dtype           : 6;        /* [61:56] Atomic Datatype */
                uint64_t        l2_tail                : 2;        /* [63:62] Always 01 */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Transmit Command Type: P3 flit (Struct - ptl_l4_p3_t) - 64bits
*                  from File : 131_Portals_Transport_Layer.xml
*/
union ptl_l4_p3 {
        struct {
                uint64_t        ack_psn                : 16;        /* [15:0] Packet sequence number being acknowledged by this packet (echoed from packet being acknowledged) */
                uint64_t        ack_pkt_id_low         : 8;        /* [23:16] Low 8 bits of the acknowledged packet ID. */
                uint64_t        icrc                   : 32;        /* [55:24] Invariant CRC field (32b CRC) */
                uint64_t        ack_pkt_id_high        : 6;        /* [61:56] Bits 13:8 of the acknowledged packet ID */
                uint64_t        l2_tail                : 2;        /* [63:62] Always 01 */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Transmit Command Type: P4 flit (Struct - ptl_l4_p4_t) - 64bits
*                  from File : 131_Portals_Transport_Layer.xml
*/
union ptl_l4_p4 {
        struct {
                uint64_t        reserved_23_0          : 24;        /* [23:0] Reserved */
                uint64_t        icrc                   : 32;        /* [55:24] Invariant CRC field (32b CRC) */
                uint64_t        atomic_dtype           : 6;        /* [61:56] Atomic Datatype */
                uint64_t        l2_tail                : 2;        /* [63:62] Always 01 */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Transmit Command Type: P5 flit (Struct - ptl_l4_p5_t) - 64bits
*                  from File : 131_Portals_Transport_Layer.xml
*/
union ptl_l4_p5 {
        struct {
                uint64_t        expected_psn           : 16;        /* [15:0] The next Packet sequence number (PSN) that is expected at the destination */
                uint64_t        max_dist_low           : 8;        /* [23:16] Low 8 bits of the maximum allowed distance */
                uint64_t        icrc                   : 32;        /* [55:24] Invariant CRC field (32b CRC) */
                uint64_t        atomic_dtype           : 6;        /* [61:56] Atomic Datatype */
                uint64_t        l2_tail                : 2;        /* [63:62] Always 01 */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Transmit Command Type: P6 flit (Struct - ptl_l4_p6_t) - 64bits
*                  from File : 131_Portals_Transport_Layer.xml
*/
union ptl_l4_p6 {
        struct {
                uint64_t        mtu                    : 3;        /* [2:0] MTU to be used for the message */
                uint64_t        reserved_23_3          : 21;        /* [23:3] Reserved */
                uint64_t        icrc                   : 32;        /* [55:24] Invariant CRC field (32b CRC) */
                uint64_t        atomic_dtype           : 6;        /* [61:56] Atomic Datatype */
                uint64_t        l2_tail                : 2;        /* [63:62] Always 01 */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Physical Source Structure (Struct - phys_process_t) - 36 bits
*                  from File : 200_Software_Interfaces.xml
*/
union phys_process {
        struct {
                uint64_t        slid                   : 24;        /* [23:0] Source LID */
                uint64_t        spid                   : 12;        /* [35:24] Source PID */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Logical Source Structure (Struct - logical_process_t) - 36 bits
*                  from File : 200_Software_Interfaces.xml
*/
union logical_process {
        struct {
                uint64_t        srank                  : 32;        /* [31:0] Source Rank */
                uint64_t        reserved_35_32         : 4;        /* [35:32] Reserved */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Source Structure (Union - ptl_process_t) - 36 bits
*                  from File : 200_Software_Interfaces.xml
*/
union ptl_process {
        struct {
        struct {
                uint64_t        phys_src               : 36;        /* [35:0] Physical interpretation of the source field */
                uint64_t        logical_src            : 36;        /* [35:0] Logical interpretation of the source field */
        };
        } __attribute__ ((__packed__));
        uint64_t val[2];
};

/*
* Structure from Table titled: Portals Transmit Command Field Structure (Struct - ptl_cmd_t) - 7bits
*                  from File : 200_Software_Interfaces.xml
*/
union ptl_cmd {
        struct {
                uint64_t        ttype                  : 2;        /* [1:0] Data transfer mechanism used */
                uint64_t        ptl_opcode_low         : 5;        /* [6:2] Low order 5 bits to use in the Portals L4 OPCODE. Upper bits are set to 0. */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Transmit Command Field Structure (Union - tx_cq_cmd_t) - 7bits
*                  from File : 200_Software_Interfaces.xml
*/
union tx_cq_cmd {
        struct {
                uint64_t        ptl_cmd                : 7;        /* [6:0] Interpreted as a Portals command field */
                uint64_t        nonptl_cmd             : 7;        /* [6:0] Interpreted as a NonPortals command field */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Hardware MD Options Structure (Struct - md_options_t) - 8bits
*                  from File : 200_Software_Interfaces.xml
*/
union md_options {
        struct {
                uint64_t        success_disable        : 1;        /* [0:0] Only post events for operations that fail */
                uint64_t        ct_send                : 1;        /* [1:1] Count send events on this MD (i.e. send buffer availability put, atomic, fetching atomic, and swap operations) */
                uint64_t        ct_reply               : 1;        /* [2:2] Count reply events that occur on this MD (i.e. data is available in the reply buffer for get, fetching atomic, and swap operations) */
                uint64_t        ct_ack                 : 1;        /* [3:3] Count the arrival of Portals acknowledgements on this MD */
                uint64_t        ct_bytes               : 1;        /* [4:4] By default, counting events count events. When set, this option causes bytes to be counted instead for success events. Failure events always increment the count by one. */
                uint64_t        send_disable           : 1;        /* [5:5] Specifies that this memory descriptor should not generate send events (PTL_EVENT_SEND). This flag does not affect counting events. */
                uint64_t        iovec                  : 1;        /* [6:6] Reserved: used by PTL_IOVEC, which must also work for MDs. PTL_IOVEC may only be set for DMA operations. It is irrelevant Buffered operations and may not be set for PIO operations. */
                uint64_t        reserved_7_7           : 1;        /* [7:7] Reserved */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Transmit Command Type: A1 flit (Struct - tx_cq_a1_t) - 64 bits
*                  from File : 200_Software_Interfaces.xml
*/
union tx_cq_a1 {
        struct {
                uint64_t        dlid                   : 24;        /* [23:0] Destination LID for the operation */
                uint64_t        cmd_length             : 10;        /* [33:24] Length of the command (in 8B flits) */
                uint64_t        ctype                  : 4;        /* [37:34] Type of the command */
                uint64_t        sh                     : 1;        /* [38:38] Indicates whether the command uses a small header (TRUE) or not (FALSE) */
                uint64_t        b                      : 1;        /* [39:39] Indicates a BECN should be included in this packet */
                uint64_t        sl                     : 5;        /* [44:40] Service level to be used to choose the TC/MC and Service Class (SC) */
                uint64_t        rc                     : 3;        /* [47:45] Routing class to be passed into the L2 header */
                uint64_t        ptl_idx                : 8;        /* [55:48] Portal table index */
                uint64_t        cmd                    : 7;        /* [62:56] Command from software */
                uint64_t        pt                     : 1;        /* [63:63] Indicates preferred outgoing port number to use. */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Transmit Command Type: A2 flit (Struct - tx_cq_a2_t) - 64 bits
*                  from File : 200_Software_Interfaces.xml
*/
union tx_cq_a2 {
        struct {
                uint64_t        dlid                   : 24;        /* [23:0] Destination LID for the operation */
                uint64_t        tpid                   : 12;        /* [35:24] Target process ID */
                uint64_t        reserved_39_36         : 4;        /* [39:36] Reserved */
                uint64_t        sl                     : 5;        /* [44:40] Service level to be used to choose the TC/MC and Service Class (SC) */
                uint64_t        rc                     : 3;        /* [47:45] Routing class to be passed into the L2 header */
                uint64_t        ptl_idx                : 8;        /* [55:48] Portal table index */
                uint64_t        cmd                    : 7;        /* [62:56] Command from software */
                uint64_t        pt                     : 1;        /* [63:63] Indicates preferred outgoing port number to use. */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Transmit Command Type: A3 flit (Struct - tx_cq_a3_t) - 64 bits
*                  from File : 200_Software_Interfaces.xml
*/
union tx_cq_a3 {
        struct {
                uint64_t        dlid                   : 24;        /* [23:0] Destination LID for the operation */
                uint64_t        ctype                  : 4;        /* [27:24] Type of the command */
                uint64_t        sh                     : 1;        /* [28:28] Indicates whether the command uses a small header (TRUE) or not (FALSE) */
                uint64_t        b                      : 1;        /* [29:29] Indicates a BECN should be included in this packet */
                uint64_t        reserved_31_30         : 2;        /* [31:30] Reserved */
                uint64_t        sl                     : 5;        /* [36:32] Service level to be used to choose the TC/MC and Service Class (SC) */
                uint64_t        rc                     : 3;        /* [39:37] Routing class to be passed into the L2 header */
                uint64_t        cmd                    : 7;        /* [46:40] Command from software */
                uint64_t        pt                     : 1;        /* [47:47] Indicates preferred outgoing port number to use. */
                uint64_t        pkey                   : 16;        /* [63:48]  */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Transmit Command Type: A4 flit (Struct - tx_cq_a4_t) - 64 bits
*                  from File : 200_Software_Interfaces.xml
*/
union tx_cq_a4 {
        struct {
                uint64_t        hdr_rate               : 8;        /* [7:0] Rate at which the suppress header bit will be removed for NonPortals Packets */
                uint64_t        per_pkt_delay          : 8;        /* [15:8] Amount of time to delay between packets for NonPortals Packets. Two options are under consideration:1) Actual delay is 2^N cycles2) Field is split as X.Y, and actual delay is X * 2^Y cycles */
                uint64_t        nonportals_pid         : 8;        /* [23:16] 8 bits of PID mapped into the range 0xF00 to 0xFFF to be used for virtual address translation. */
                uint64_t        cmd_length             : 10;        /* [33:24] Length of the command (in 8B flits) */
                uint64_t        ctype                  : 4;        /* [37:34] Type of the command */
                uint64_t        l2                     : 2;        /* [39:38] Value to use for the L2 field for NonPortals Packets. */
                uint64_t        sl                     : 5;        /* [44:40] Service level to be used to choose the TC/MC and Service Class (SC) */
                uint64_t        reserved_47_45         : 3;        /* [47:45] Must be 0. */
                uint64_t        auth_idx               : 3;        /* [50:48] Authentication index used for testing the Job ID field. */
                uint64_t        slid_low               : 3;        /* [53:51] Low 3 bits of SLID to use for this command */
                uint64_t        reserved_55_54         : 2;        /* [55:54] Reserved */
                uint64_t        cmd                    : 7;        /* [62:56] Command from software */
                uint64_t        pt                     : 1;        /* [63:63] Indicates preferred outgoing port number to use. */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Transmit Command Type: B1 flit (Struct - tx_cq_b1_t) - 64 bits
*                  from File : 200_Software_Interfaces.xml
*/
union tx_cq_b1 {
        struct {
                uint64_t        md_handle              : 11;        /* [10:0] Memory Descriptor (MD) handle used for identifying the transaction in a later cancel */
                uint64_t        auth_idx               : 3;        /* [13:11] Authentication index used for populating the SRANK and User ID fields */
                uint64_t        slid_low               : 2;        /* [15:14] Low 2 bits of the SLID to use for this operation */
                uint64_t        pkey                   : 16;        /* [31:16] PKEY for this message */
                uint64_t        eq_handle              : 11;        /* [42:32] Event Queue (EQ) handle used for posting full events associated with this message */
                uint64_t        ct_handle              : 11;        /* [53:43] Counting Event (CT) handle used for posting counting events associated with this message */
                uint64_t        hd                     : 1;        /* [54:54] Indicates whether header data is included in this message or is zero. */
                uint64_t        pd                     : 1;        /* [55:55] Indicates whether this message uses physical destinations (TRUE) or the destinations go through the DLID relocation table (FALSE) */
                uint64_t        md_options             : 8;        /* [63:56] Options from the MD, which control things like IOVECs and event posting. */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Transmit Command Type: D flit (Struct - tx_cq_d_t) - 64 bits
*                  from File : 200_Software_Interfaces.xml
*/
union tx_cq_d {
        struct {
                uint64_t        remote_offset          : 57;        /* [56:0] Offset to use at the target */
                uint64_t        reserved_59_57         : 3;        /* [59:57]  */
                uint64_t        ack_req                : 2;        /* [61:60] Acknowledgment request */
                uint64_t        ni                     : 2;        /* [63:62] Network interface */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Transmit Command Type: E1 flit (Struct - tx_cq_e1_t) - 64 bits
*                  from File : 200_Software_Interfaces.xml
*/
union tx_cq_e1 {
        struct {
                uint64_t        tpid                   : 12;        /* [11:0] Target process ID */
                uint64_t        ipid                   : 12;        /* [23:12] Initiator process ID */
                uint64_t        atomic_dtype           : 6;        /* [29:24] Atomic datatype */
                uint64_t        reserved_31_30         : 2;        /* [31:30] Reserved */
                uint64_t        message_length         : 32;        /* [63:32] Length of the message payload in bytes */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Transmit Command Type: E2 flit (Struct - tx_cq_e2_t) - 64 bits
*                  from File : 200_Software_Interfaces.xml
*/
union tx_cq_e2 {
        struct {
                uint64_t        tpid                   : 12;        /* [11:0] Target process ID */
                uint64_t        ipid                   : 12;        /* [23:12] Initiator process ID */
                uint64_t        atomic_dtype           : 6;        /* [29:24] Atomic datatype */
                uint64_t        reserved_31_30         : 2;        /* [31:30] Reserved */
                uint64_t        resp_eq_handle         : 11;        /* [42:32] EQ handle for the response events for fetching atomic operations (and swap operations) */
                uint64_t        resp_ct_handle         : 11;        /* [53:43] CT handle for the response events for fetching atomic operations (and swap operations) */
                uint64_t        message_length         : 6;        /* [59:54] Used for the requested length of a compare and swap or fetching atomic operation. Represents the payload (length - 1) in bytes. */
                uint64_t        resp_md_opts           : 4;        /* [63:60] Response MD options */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Transmit Command Type: E3 flit (Struct - tx_cq_e3_t) - 64 bits
*                  from File : 200_Software_Interfaces.xml
*/
union tx_cq_e3 {
        struct {
                uint64_t        tpid                   : 12;        /* [11:0] Target process ID */
                uint64_t        ipid                   : 12;        /* [23:12] Initiator process ID */
                uint64_t        reserved_63_24         : 40;        /* [63:24]  */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Transmit Command Type: E4 flit (Struct - tx_cq_e4_t) - 64 bits
*                  from File : 200_Software_Interfaces.xml
*/
union tx_cq_e4 {
        struct {
                uint64_t        tid_entries            : 12;        /* [11:0] Number of TID entries in the TID array for a PSM TID DMA */
                uint64_t        eq_handle              : 11;        /* [22:12] Event Queue (EQ) handle used for posting full events associated with this message */
                uint64_t        reserved_23_23         : 1;        /* [23:23] Reserved */
                uint64_t        md_options             : 8;        /* [31:24] Options to control things like IOVECs and event posting. Re-uses the MD options format for NonPortals messages. */
                uint64_t        message_length         : 32;        /* [63:32] Length of the message payload in bytes */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Transmit Command Type: F flit (Struct - tx_cq_f_t) - 64 bits
*                  from File : 200_Software_Interfaces.xml
*/
union tx_cq_f {
        struct {
                uint64_t        local_start            : 57;        /* [56:0] Local start address */
                uint64_t        pa                     : 1;        /* [57:57] Indicates start address is a physical address (TRUE) or virtual address (FALSE) */
                uint64_t        reserved_63_58         : 6;        /* [63:58] Reserved */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Transmit Command Type: I flit (Struct - tx_cq_i_t) - 64 bits
*                  from File : 200_Software_Interfaces.xml
*/
union tx_cq_i {
        struct {
                uint64_t        message_length         : 32;        /* [31:0] Length of the message payload in bytes */
                uint64_t        target_reference       : 32;        /* [63:32] Opaque 32 bit field provided by target processing and passed opaquely through rendezvous operatiions. */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Transmit Command Type: J1 flit (Struct - tx_cq_j1_t) - 64 bits
*                  from File : 200_Software_Interfaces.xml
*/
union tx_cq_j1 {
        struct {
                uint64_t        ack_psn                : 16;        /* [15:0] Acknowledged packet sequence number. The acknowledged PSN is also used as the PSN for responses (e.g. Portals Acks, Replies, CTS). */
                uint64_t        ack_msg_id             : 16;        /* [31:16] Acknowledged message identifier */
                uint64_t        ack_pkt_id             : 16;        /* [47:32] Acknowledged packet identifier */
                uint64_t        ack_op                 : 4;        /* [51:48] Acknowledgement operation type */
                uint64_t        reserved_54_52         : 3;        /* [54:52] Reserved */
                uint64_t        ls                     : 1;        /* [55:55] List state indicating the list matched by the request */
                uint64_t        reserved_63_56         : 8;        /* [63:56] Reserved */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Transmit Command Type: J2 flit (Struct - tx_cq_j2_t) - 64 bits
*                  from File : 200_Software_Interfaces.xml
*/
union tx_cq_j2 {
        struct {
                uint64_t        reserved_15_0          : 16;        /* [15:0] Reserved */
                uint64_t        msg_id                 : 16;        /* [31:16] Message ID used in the incoming packet that will be reused by the ACK */
                uint64_t        pkt_id                 : 16;        /* [47:32] Packet ID used in the incoming packet that will be reused by the ACK */
                uint64_t        reserved_63_48         : 16;        /* [63:48] Reserved */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Transmit Command Type: K flit (Struct - tx_cq_k_t) - 64 bits
*                  from File : 200_Software_Interfaces.xml
*/
union tx_cq_k {
        struct {
                uint64_t        expected_psn           : 16;        /* [15:0] PSN that was expected */
                uint64_t        max_dist               : 16;        /* [31:16] Maximum distance allowed at the initiator */
                uint64_t        transmit_delay         : 24;        /* [55:32] 24 bits of the delay into the future to start me. Given in microseconds. */
                uint64_t        reserved_63_56         : 8;        /* [63:56] Reserved */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Transmit Command Type: Lflit (Struct - tx_cq_l_t) - 64 bits
*                  from File : 200_Software_Interfaces.xml
*/
union tx_cq_l {
        struct {
                uint64_t        iov_offset             : 32;        /* [31:0] Offset into the first IOVEC entry where the operation starts */
                uint64_t        iov_entries            : 32;        /* [63:32] Number of entries in the IOVEC. Use for sanity checking on the first transmit of the message. */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Transmit Command Type: P flit (Struct - tx_cq_p_t) - 64 bits
*                  from File : 200_Software_Interfaces.xml
*/
union tx_cq_p {
        struct {
                uint64_t        user_mtu               : 16;        /* [15:0] MTU specified by the user for a PSM message */
                uint64_t        reserved_31_16         : 16;        /* [31:16] Reserved */
                uint64_t        first_pkt_size         : 16;        /* [47:32] Size of the first packet in a PSM message */
                uint64_t        reserved_63_48         : 16;        /* [63:48] Reserved */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Transmit Command Type: LRH flit (Struct - tx_cq_lrh_t) - 64 bits
*                  from File : 200_Software_Interfaces.xml
*/
union tx_cq_lrh {
        struct {
                uint64_t        lver                   : 4;        /* [3:0] Link Version */
                uint64_t        sc_low                 : 4;        /* [7:4] Low four bits of the service class */
                uint64_t        lnh                    : 2;        /* [9:8] Link Next Header */
                uint64_t        reserved_11_10         : 2;        /* [11:10] Reserved */
                uint64_t        sl                     : 4;        /* [15:12] 4 bits of SL that are compatible with Verbs. Checked by TX-CI. */
                uint64_t        dlid_hi                : 8;        /* [23:16] DLID[15:8] */
                uint64_t        dlid_lo                : 8;        /* [31:24] DLID[7:0] */
                uint64_t        pkt_len_hi             : 4;        /* [35:32] PKT_LEN[11:8]. Updated packet-to-packet for multi packet operations */
                uint64_t        reserved_39_36         : 4;        /* [39:36]  */
                uint64_t        pkt_len_lo             : 8;        /* [47:40] PKT_LEN[7:0]. Updated packet-to-packet for multi packet operations */
                uint64_t        slid_hi                : 8;        /* [55:48] Set by OTR on TX based on SLID programmed into HFI */
                uint64_t        slid_lo                : 8;        /* [63:56] Set by OTR on TX based on SLID programmed into HFI and low 3 bits from A4 */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Transmit Command Type: BTH0 flit (Struct - tx_cq_bth0_t) - 64 bits
*                  from File : 200_Software_Interfaces.xml
*/
union tx_cq_bth0 {
        struct {
                uint64_t        opcode                 : 8;        /* [7:0]  */
                uint64_t        tver                   : 4;        /* [11:8]  */
                uint64_t        pad_cnt                : 2;        /* [13:12]  */
                uint64_t        m                      : 1;        /* [14:14]  */
                uint64_t        se                     : 1;        /* [15:15]  */
                uint64_t        pkey_hi                : 8;        /* [23:16] Checked in Link Mux, but not modified */
                uint64_t        pkey_lo                : 8;        /* [31:24] Checked in Link Mux, but not modified */
                uint64_t        reserved_37_32         : 6;        /* [37:32]  */
                uint64_t        b                      : 1;        /* [38:38]  */
                uint64_t        f                      : 1;        /* [39:39]  */
                uint64_t        dest_qp_hi             : 8;        /* [47:40]  */
                uint64_t        dest_qp_mid            : 8;        /* [55:48]  */
                uint64_t        dest_qp_low            : 8;        /* [63:56]  */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Transmit Command Type: BTH1 flit (Struct - tx_cq_bth1_t) - 64 bits
*                  from File : 200_Software_Interfaces.xml
*/
union tx_cq_bth1 {
        struct {
                uint64_t        psn_hi                 : 7;        /* [6:0]  */
                uint64_t        a                      : 1;        /* [7:7]  */
                uint64_t        psn_mid_hi             : 8;        /* [15:8]  */
                uint64_t        psn_mid_low            : 8;        /* [23:16]  */
                uint64_t        psn_low                : 8;        /* [31:24]  */
                uint64_t        tid_offset             : 15;        /* [46:32]  */
                uint64_t        om                     : 1;        /* [47:47]  */
                uint64_t        tid                    : 10;        /* [57:48]  */
                uint64_t        tid_ctrl               : 2;        /* [59:58]  */
                uint64_t        interrupt              : 1;        /* [60:60]  */
                uint64_t        sh                     : 1;        /* [61:61]  */
                uint64_t        kver                   : 2;        /* [63:62]  */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Transmit Command Type: BTH2 flit (Struct - tx_cq_bth2_t) - 64 bits
*                  from File : 200_Software_Interfaces.xml
*/
union tx_cq_bth2 {
        struct {
                uint64_t        psn_hi                 : 7;        /* [6:0]  */
                uint64_t        a                      : 1;        /* [7:7]  */
                uint64_t        psn_mid_hi             : 8;        /* [15:8]  */
                uint64_t        psn_mid_low            : 8;        /* [23:16]  */
                uint64_t        psn_low                : 8;        /* [31:24]  */
                uint64_t        ofh                    : 32;        /* [63:32]  */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Transmit Command Type: BTH3 flit (Struct - tx_cq_bth3_t) - 64 bits
*                  from File : 200_Software_Interfaces.xml
*/
union tx_cq_bth3 {
        struct {
                uint64_t        psn_hi                 : 7;        /* [6:0]  */
                uint64_t        a                      : 1;        /* [7:7]  */
                uint64_t        psn_mid_hi             : 8;        /* [15:8]  */
                uint64_t        psn_mid_low            : 8;        /* [23:16]  */
                uint64_t        psn_low                : 8;        /* [31:24]  */
                uint64_t        kdeth                  : 32;        /* [63:32]  */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Transmit Command Type: KDETH0 flit (Struct - tx_cq_kdeth0_t) - 64 bits
*                  from File : 200_Software_Interfaces.xml
*/
union tx_cq_kdeth0 {
        struct {
                uint64_t        j_key                  : 16;        /* [15:0] This field is checked in TX-CI using the 32 bits of the user ID as a test under mask (16 bit ID and 16 bit mask for the comparison). */
                uint64_t        hcrc_hi                : 8;        /* [23:16]  */
                uint64_t        hcrc_lo                : 8;        /* [31:24]  */
                uint64_t        kdeth                  : 32;        /* [63:32]  */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Transmit Command Type: KDETH1 flit (Struct - tx_cq_kdeth1_t) - 64 bits
*                  from File : 200_Software_Interfaces.xml
*/
union tx_cq_kdeth1 {
        struct {
                uint64_t        kdeth                  : 32;        /* [31:0]  */
                uint64_t        kdeth_local_offset     : 32;        /* [63:32]  */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Transmit Command Type: Basic Put Flit 0 (Struct - tx_cq_base_put_flit0_t) - 256 bits
*                  from File : 200_Software_Interfaces.xml
*/
union tx_cq_base_put_flit0 {
        struct {
                union                tx_cq_a1               a;        /* [63:0]  */
                union                tx_cq_b1               b;        /* [127:64]  */
                                user_pointer_t         c;        /* [191:128] User pointer */
                union                tx_cq_d                d;        /* [255:192]  */
        } __attribute__ ((__packed__));
        uint64_t val[4];
};

/*
* Structure from Table titled: Transmit Command Type: Buffered Put Flit 1(Struct - tx_cq_buff_put_flit1_t) - 256 bits
*                  from File : 200_Software_Interfaces.xml
*/
union tx_cq_buff_put_flit1 {
        struct {
                union                tx_cq_e1               e;        /* [63:0]  */
                                payload_t              p0;        /* [127:64] Payload */
                                payload_t              p1;        /* [191:128] Payload */
                                payload_t              p2;        /* [255:192] Payload */
        } __attribute__ ((__packed__));
        uint64_t val[4];
};

/*
* Structure from Table titled: Transmit Command Type: Buffered Put with HD Flit 1(Struct - tx_cq_buff_put_hd_flit1_t) - 256 bits
*                  from File : 200_Software_Interfaces.xml
*/
union tx_cq_buff_put_hd_flit1 {
        struct {
                union                tx_cq_e1               e;        /* [63:0]  */
                                ptl_hdr_data_t         hd;        /* [127:64] Header Data */
                                payload_t              p0;        /* [191:128] Payload */
                                payload_t              p1;        /* [255:192] Payload */
        } __attribute__ ((__packed__));
        uint64_t val[4];
};

/*
* Structure from Table titled: Transmit Command Type: Buffered Put with Matching Flit 1(Struct - tx_cq_buff_put_match_flit1_t) - 256 bits
*                  from File : 200_Software_Interfaces.xml
*/
union tx_cq_buff_put_match_flit1 {
        struct {
                union                tx_cq_e1               e;        /* [63:0]  */
                                ptl_match_bits_t       mb;        /* [127:64] Match Bits */
                                ptl_hdr_data_t         hd;        /* [191:128] Header Data */
                                payload_t              p0;        /* [255:192] Payload */
        } __attribute__ ((__packed__));
        uint64_t val[4];
};

/*
* Structure from Table titled: Transmit Command Type: Buffered Two Operand Put Flit 1(Struct - tx_cq_buff_two_op_put_flit1_t) - 256 bits
*                  from File : 200_Software_Interfaces.xml
*/
union tx_cq_buff_two_op_put_flit1 {
        struct {
                union                tx_cq_e2               e;        /* [63:0]  */
                union                tx_cq_f                f;        /* [127:64]  */
                                payload_t              p0;        /* [191:128] Payload */
                                payload_t              p1;        /* [255:192] Payload */
        } __attribute__ ((__packed__));
        uint64_t val[4];
};

/*
* Structure from Table titled: Transmit Command Type: Buffered Two Operand Put with HD Flit 1(Struct - tx_cq_buff_two_op_put_hd_flit1_t) - 256 bits
*                  from File : 200_Software_Interfaces.xml
*/
union tx_cq_buff_two_op_put_hd_flit1 {
        struct {
                union                tx_cq_e2               e;        /* [63:0]  */
                union                tx_cq_f                f;        /* [127:64]  */
                                ptl_hdr_data_t         hd;        /* [191:128] Header Data */
                                payload_t              p0;        /* [255:192] Payload */
        } __attribute__ ((__packed__));
        uint64_t val[4];
};

/*
* Structure from Table titled: Transmit Command Type: Buffered Two Operand Put with Matching Flit 1(Struct - tx_cq_buff_two_op_put_match_flit1_t) - 256 bits
*                  from File : 200_Software_Interfaces.xml
*/
union tx_cq_buff_two_op_put_match_flit1 {
        struct {
                union                tx_cq_e2               e;        /* [63:0]  */
                union                tx_cq_f                f;        /* [127:64]  */
                                ptl_match_bits_t       mb;        /* [191:128] Match Bits */
                                ptl_hdr_data_t         hd;        /* [255:192] Header Data */
        } __attribute__ ((__packed__));
        uint64_t val[4];
};

/*
* Structure from Table titled: Transmit Command Type: Small Operation Flit0 (Struct - tx_cq_small_op_flit0_t) - 256 bits
*                  from File : 200_Software_Interfaces.xml
*/
union tx_cq_small_op_flit0 {
        struct {
                union                tx_cq_a1               a;        /* [63:0]  */
                union                tx_cq_b1               b;        /* [127:64]  */
                union                tx_cq_d                d;        /* [191:128]  */
                union                tx_cq_e1               e;        /* [255:192]  */
        } __attribute__ ((__packed__));
        uint64_t val[4];
};

/*
* Structure from Table titled: Transmit Command Type: Small Put Flit1 (Struct - tx_cq_small_put_flit1_t) - 256 bits
*                  from File : 200_Software_Interfaces.xml
*/
union tx_cq_small_put_flit1 {
        struct {
                                payload_t              p0;        /* [63:0]  */
                union                tx_cq_a2               a;        /* [127:64]  */
                union                tx_cq_d                d;        /* [191:128]  */
                                payload_t              p1;        /* [255:192]  */
        } __attribute__ ((__packed__));
        uint64_t val[4];
};

/*
* Structure from Table titled: Transmit Command Type: Small Get Flit1 (Struct - tx_cq_small_get_flit1_t) - 256 bits
*                  from File : 200_Software_Interfaces.xml
*/
union tx_cq_small_get_flit1 {
        struct {
                union                tx_cq_f                f0;        /* [63:0]  */
                union                tx_cq_a2               a;        /* [127:64]  */
                union                tx_cq_d                d;        /* [191:128]  */
                union                tx_cq_f                f1;        /* [255:192]  */
        } __attribute__ ((__packed__));
        uint64_t val[4];
};

/*
* Structure from Table titled: Transmit Command Type: Payload Flit (Struct - tx_cq_payload_flit_t) - 256 bits
*                  from File : 200_Software_Interfaces.xml
*/
union tx_cq_payload_flit {
        struct {
                                payload_t              p0;        /* [63:0]  */
                                payload_t              p1;        /* [127:64]  */
                                payload_t              p2;        /* [191:128]  */
                                payload_t              p3;        /* [255:192]  */
        } __attribute__ ((__packed__));
        uint64_t val[4];
};

/*
* Structure from Table titled: Transmit Command Type: Programmed I/O Put Flit 1(Struct - tx_cq_pio_put_flit1_t) - 256 bits
*                  from File : 200_Software_Interfaces.xml
*/
union tx_cq_pio_put_flit1 {
        struct {
                union                tx_cq_e1               e;        /* [63:0]  */
                union                tx_cq_f                f;        /* [127:64]  */
                                payload_t              p0;        /* [191:128] Payload */
                                payload_t              p1;        /* [255:192] Payload */
        } __attribute__ ((__packed__));
        uint64_t val[4];
};

/*
* Structure from Table titled: Transmit Command Type: Programmed I/O Put with HD Flit 1(Struct - tx_cq_pio_put_hd_flit1_t) - 256 bits
*                  from File : 200_Software_Interfaces.xml
*/
union tx_cq_pio_put_hd_flit1 {
        struct {
                union                tx_cq_e1               e;        /* [63:0]  */
                union                tx_cq_f                f;        /* [127:64]  */
                                ptl_hdr_data_t         hd;        /* [191:128] Header Data */
                                payload_t              p0;        /* [255:192] Payload */
        } __attribute__ ((__packed__));
        uint64_t val[4];
};

/*
* Structure from Table titled: Transmit Command Type: Programmed I/O Put with Matching and DMA Put Flit 1(Struct - tx_cq_put_match_flit1_t) - 256 bits
*                  from File : 200_Software_Interfaces.xml
*/
union tx_cq_put_match_flit1 {
        struct {
                union                tx_cq_e1               e;        /* [63:0]  */
                union                tx_cq_f                f;        /* [127:64]  */
                                ptl_match_bits_t       mb;        /* [191:128] Match Bits */
                                ptl_hdr_data_t         hd;        /* [255:192] Header Data */
        } __attribute__ ((__packed__));
        uint64_t val[4];
};

/*
* Structure from Table titled: Transmit Command Type: IOVEC DMA Put Flit 1(Struct - tx_cq_iovec_flit1_t) - 256 bits
*                  from File : 200_Software_Interfaces.xml
*/
union tx_cq_iovec_flit1 {
        struct {
                union                tx_cq_e1               e;        /* [63:0]  */
                union                tx_cq_f                f;        /* [127:64]  */
                                ptl_match_bits_t       mb;        /* [191:128] Match Bits */
                                ptl_hdr_data_t         hd;        /* [255:192] Header Data */
        } __attribute__ ((__packed__));
        uint64_t val[4];
};

/*
* Structure from Table titled: Transmit Command Type: IOVEC DMA Put Flit 2(Struct - tx_cq_iovec_flit2_t) - 256 bits
*                  from File : 200_Software_Interfaces.xml
*/
union tx_cq_iovec_flit2 {
        struct {
                union                tx_cq_l                l;        /* [63:0]  */
        struct {
                uint64_t        reserved_255_64_0      : 64;        /* [255:64] Reserved */
        };
        struct {
                uint64_t        reserved_255_64_1      : 64;        /* [255:64] Reserved */
        };
        struct {
                uint64_t        reserved_255_64_2      : 64;        /* [255:64] Reserved */
        };
        } __attribute__ ((__packed__));
        uint64_t val[4];
};

/*
* Structure from Table titled: Transmit Command Type: Base IOVEC (Struct - iovec_t) - 128 bits
*                  from File : 200_Software_Interfaces.xml
*/
union tx_cq_iovec {
        struct {
        struct {
                uint64_t        length                 : 32;        /* [31:0] The length of the IOVEC entry in bytes. */
                uint64_t        reserved_60_32         : 29;        /* [60:32] Reserved */
                uint64_t        ep                     : 1;        /* [61:61] End of packet: this entire region is included in the packet, and the packet ends. Only used for NonPortals (Generic DMA) operations. */
                uint64_t        sp                     : 1;        /* [62:62] Start of packet: a new packet is started with this entry. Only used for NonPortals (Generic DMA) operations. */
                uint64_t        v                      : 1;        /* [63:63] Valid: this entry is valid */
        };
        struct {
                uint64_t        start                  : 57;        /* [120:64] Address of the payload pointed to by his IOVEC entry */
                uint64_t        pa                     : 1;        /* [121:121] This entry uses a physical address. This is only allowed for privileged entries. */
                uint64_t        reserved_127_122       : 6;        /* [127:122] Reserved */
        };
        } __attribute__ ((__packed__));
        uint64_t val[2];
};

/*
* Structure from Table titled: Transmit Command Type: Short Acknowledgement (Struct - tx_cq_short_ack_flit0_t) - 256 bits
*                  from File : 200_Software_Interfaces.xml
*/
union tx_cq_short_ack_flit0 {
        struct {
                union                tx_cq_a3               a;        /* [63:0]  */
                union                tx_cq_j1               j;        /* [127:64]  */
                union                tx_cq_e3               e;        /* [191:128]  */
                union                tx_cq_j2               j2;        /* [255:192]  */
        } __attribute__ ((__packed__));
        uint64_t val[4];
};

/*
* Structure from Table titled: Transmit Command Type: Response Flit 0 (Struct - tx_cq_response_flit0_t) - 256 bits
*                  from File : 200_Software_Interfaces.xml
*/
union tx_cq_response_flit0 {
        struct {
                union                tx_cq_a1               a;        /* [63:0]  */
                union                tx_cq_b1               b;        /* [127:64]  */
                union                tx_cq_j1               j;        /* [191:128]  */
                union                tx_cq_d                d;        /* [255:192]  */
        } __attribute__ ((__packed__));
        uint64_t val[4];
};

/*
* Structure from Table titled: Transmit Command Type: Full Acknowledgement Flit 1(Struct - tx_cq_full_ack_flit1_t) - 256 bits
*                  from File : 200_Software_Interfaces.xml
*/
union tx_cq_full_ack_flit1 {
        struct {
                union                tx_cq_e1               e;        /* [63:0]  */
                union                tx_cq_j2               j2;        /* [127:64]  */
                union                tx_cq_k                k;        /* [191:128]  */
        struct {
                uint64_t        reserved_255_192       : 64;        /* [255:192] Reserved */
        };
        } __attribute__ ((__packed__));
        uint64_t val[4];
};

/*
* Structure from Table titled: Transmit Command Type: Reply Flit 0 (Struct - tx_cq_reply_flit0_t) - 256 bits
*                  from File : 200_Software_Interfaces.xml
*/
union tx_cq_reply_flit0 {
        struct {
                union                tx_cq_a1               a;        /* [63:0]  */
                union                tx_cq_b1               b;        /* [127:64]  */
                                user_pointer_t         c;        /* [191:128]  */
                union                tx_cq_j1               j;        /* [255:192]  */
        } __attribute__ ((__packed__));
        uint64_t val[4];
};

/*
* Structure from Table titled: Transmit Command Type: Buffered Reply Flit 1 (Struct - tx_cq_buff_reply_flit1_t) - 256 bits
*                  from File : 200_Software_Interfaces.xml
*/
union tx_cq_buff_reply_flit1 {
        struct {
                union                tx_cq_d                d;        /* [63:0]  */
                union                tx_cq_e1               e;        /* [127:64]  */
                union                tx_cq_k                k;        /* [191:128]  */
                                payload_t              p0;        /* [255:192]  */
        } __attribute__ ((__packed__));
        uint64_t val[4];
};

/*
* Structure from Table titled: Transmit Command Type: Reply Flit 1(Struct - tx_cq_reply_flit1_t) - 256 bits
*                  from File : 200_Software_Interfaces.xml
*/
union tx_cq_reply_flit1 {
        struct {
                union                tx_cq_d                d;        /* [63:0]  */
                union                tx_cq_e1               e;        /* [127:64]  */
                union                tx_cq_k                k;        /* [191:128]  */
                union                tx_cq_f                f;        /* [255:192]  */
        } __attribute__ ((__packed__));
        uint64_t val[4];
};

/*
* Structure from Table titled: Transmit Command Type: IOVEC Reply Flit 2 (Struct - tx_cq_reply_flit2_t) - 256 bits
*                  from File : 200_Software_Interfaces.xml
*/
union tx_cq_reply_flit2 {
        struct {
                union                tx_cq_l                l;        /* [63:0]  */
        struct {
                uint64_t        reserved_255_64_0      : 64;        /* [255:64]  */
        };
        struct {
                uint64_t        reserved_255_64_1      : 64;        /* [255:64]  */
        };
        struct {
                uint64_t        reserved_255_64_2      : 64;        /* [255:64]  */
        };
        } __attribute__ ((__packed__));
        uint64_t val[4];
};

/*
* Structure from Table titled: Transmit Command Type: CTS Flit 1(Struct - tx_cq_cts_flit1_t) - 256 bits
*                  from File : 200_Software_Interfaces.xml
*/
union tx_cq_cts_flit1 {
        struct {
                union                tx_cq_e1               e;        /* [63:0]  */
                union                tx_cq_i                i;        /* [127:64]  */
                union                tx_cq_k                k;        /* [191:128]  */
        struct {
                uint64_t        reserved_255_192       : 64;        /* [255:192] Reserved */
        };
        } __attribute__ ((__packed__));
        uint64_t val[4];
};

/*
* Structure from Table titled: Transmit Command Type: Two Op DMA Flit 1(Struct - tx_cq_two_op_DMA_flit1_t) - 256 bits
*                  from File : 200_Software_Interfaces.xml
*/
union tx_cq_two_op_DMA_flit1 {
        struct {
                union                tx_cq_e2               e;        /* [63:0]  */
                union                tx_cq_f                f1;        /* [127:64]  */
                union                tx_cq_f                f2;        /* [191:128]  */
                                ptl_match_bits_t       match;        /* [255:192]  */
        } __attribute__ ((__packed__));
        uint64_t val[4];
};

/*
* Structure from Table titled: Transmit Command Type: Two Op DMA Flit 2(Struct - tx_cq_two_op_DMA_flit2_t) - 256 bits
*                  from File : 200_Software_Interfaces.xml
*/
union tx_cq_two_op_DMA_flit2 {
        struct {
                                ptl_hdr_data_t         hdr;        /* [63:0]  */
                                payload_t              p0;        /* [127:64]  */
                                payload_t              p1;        /* [191:128]  */
                                payload_t              p2;        /* [255:192]  */
        } __attribute__ ((__packed__));
        uint64_t val[4];
};

/*
* Structure from Table titled: Transmit Command Type: Two Op DMA Flit 3(Struct - tx_cq_two_op_DMA_flit3_t) - 256 bits
*                  from File : 200_Software_Interfaces.xml
*/
union tx_cq_two_op_DMA_flit3 {
        struct {
                                payload_t              p0;        /* [63:0]  */
        struct {
                uint64_t        reserved_255_64_0      : 64;        /* [255:64] Reserved */
        };
        struct {
                uint64_t        reserved_255_64_1      : 64;        /* [255:64] Reserved */
        };
        struct {
                uint64_t        reserved_255_64_2      : 64;        /* [255:64] Reserved */
        };
        } __attribute__ ((__packed__));
        uint64_t val[4];
};

/*
* Structure from Table titled: Transmit Command Type: Generalized IOVEC DMA Flit 0 (Struct - tx_cq_general_dma_flit0_t) - 256 bits
*                  from File : 200_Software_Interfaces.xml
*/
union tx_cq_general_dma_flit0 {
        struct {
                union                tx_cq_a4               a;        /* [63:0]  */
                union                tx_cq_b1               b;        /* [127:64]  */
                                user_pointer_t         c;        /* [191:128]  */
                union                tx_cq_e1               e;        /* [255:192]  */
        } __attribute__ ((__packed__));
        uint64_t val[4];
};

/*
* Structure from Table titled: Transmit Command Type: Generalized DMA Flit 1(Struct - tx_cq_general_dma_flit1_t) - 256 bits
*                  from File : 200_Software_Interfaces.xml
*/
union tx_cq_general_dma_flit1 {
        struct {
                union                tx_cq_f                f;        /* [63:0]  */
        struct {
                uint64_t        reserved_255_64_0      : 64;        /* [255:64] Reserved */
        };
        struct {
                uint64_t        reserved_255_64_1      : 64;        /* [255:64] Reserved */
        };
        struct {
                uint64_t        reserved_255_64_2      : 64;        /* [255:64] Reserved */
        };
        } __attribute__ ((__packed__));
        uint64_t val[4];
};

/*
* Structure from Table titled: Transmit Command Type: OFED DMA Flit 0 (Struct - tx_cq_ofed_dma_flit0_t) - 256 bits
*                  from File : 200_Software_Interfaces.xml
*/
union tx_cq_ofed_dma_flit0 {
        struct {
                union                tx_cq_a4               a;        /* [63:0]  */
                union                tx_cq_lrh              lrh;        /* [127:64]  */
                union                tx_cq_bth0             bth0;        /* [191:128]  */
                union                tx_cq_bth2             bth2;        /* [255:192]  */
        } __attribute__ ((__packed__));
        uint64_t val[4];
};

/*
* Structure from Table titled: Transmit Command Type: OFED DMA Flit 3 (Struct - tx_cq_ofed_dma_flit3_t) - 256 bits
*                  from File : 200_Software_Interfaces.xml
*/
union tx_cq_ofed_dma_flit3 {
        struct {
        struct {
                uint64_t        ofed_n                 : 64;        /* [63:0]  */
        };
                union                tx_cq_f                f;        /* [127:64]  */
                union                tx_cq_e4               e;        /* [191:128]  */
                                user_pointer_t         user_ptr;        /* [255:192]  */
        } __attribute__ ((__packed__));
        uint64_t val[4];
};

/*
* Structure from Table titled: Transmit Command Type: PSM PIO Flit 0 (Struct - tx_cq_psm_flit0_t) - 256 bits
*                  from File : 200_Software_Interfaces.xml
*/
union tx_cq_psm_flit0 {
        struct {
                union                tx_cq_a4               a;        /* [63:0]  */
                union                tx_cq_lrh              lrh;        /* [127:64]  */
                union                tx_cq_bth0             bth0;        /* [191:128]  */
                union                tx_cq_bth3             bth1;        /* [255:192]  */
        } __attribute__ ((__packed__));
        uint64_t val[4];
};

/*
* Structure from Table titled: Transmit Command Type: PSM PIO Flit 1 (Struct - tx_cq_psm_pio_flit1_t) - 256 bits
*                  from File : 200_Software_Interfaces.xml
*/
union tx_cq_psm_pio_flit1 {
        struct {
                union                tx_cq_kdeth0           kdeth;        /* [63:0]  */
        struct {
                uint64_t        sw_def_0               : 64;        /* [255:64]  */
        };
        struct {
                uint64_t        sw_def_1               : 64;        /* [255:64]  */
        };
        struct {
                uint64_t        sw_def_2               : 64;        /* [255:64]  */
        };
        } __attribute__ ((__packed__));
        uint64_t val[4];
};

/*
* Structure from Table titled: Transmit Command Type: PSM DMA Flit 1 (Struct - tx_cq_psm_dma_flit1_t) - 256 bits
*                  from File : 200_Software_Interfaces.xml
*/
union tx_cq_psm_dma_flit1 {
        struct {
                union                tx_cq_kdeth0           kdeth0;        /* [63:0]  */
        struct {
                uint64_t        kdeth2_0               : 64;        /* [191:64]  */
        };
        struct {
                uint64_t        kdeth2_1               : 64;        /* [191:64]  */
        };
                union                tx_cq_kdeth1           kdeth1;        /* [255:192]  */
        } __attribute__ ((__packed__));
        uint64_t val[4];
};

/*
* Structure from Table titled: Transmit Command Type: PSM DMA Flit 2(Struct - tx_cq_psm_dma_flit2_t) - 256 bits
*                  from File : 200_Software_Interfaces.xml
*/
union tx_cq_psm_dma_flit2 {
        struct {
        struct {
                uint64_t        kdeth2_0               : 64;        /* [191:0]  */
        };
        struct {
                uint64_t        kdeth2_1               : 64;        /* [191:0]  */
        };
        struct {
                uint64_t        kdeth2_2               : 64;        /* [191:0]  */
        };
                union                tx_cq_p                p;        /* [255:192]  */
        } __attribute__ ((__packed__));
        uint64_t val[4];
};

/*
* Structure from Table titled: Transmit Command Type: PSM DMA Flit 3 (Struct - tx_cq_psm_dma_flit3_t) - 256 bits
*                  from File : 200_Software_Interfaces.xml
*/
union tx_cq_psm_dma_flit3 {
        struct {
                union                tx_cq_f                f0;        /* [63:0]  */
                union                tx_cq_f                f1;        /* [127:64]  */
                union                tx_cq_e4               e;        /* [191:128]  */
                                user_pointer_t         user_ptr;        /* [255:192]  */
        } __attribute__ ((__packed__));
        uint64_t val[4];
};

/*
* Structure from Table titled: Transmit Command Type: PSM TID/Offset Array (Struct - tx_psm_tid_array_t) - 64 bits
*                  from File : 200_Software_Interfaces.xml
*/
union tx_psm_tid_array {
        struct {
                uint64_t        tid0_length            : 11;        /* [10:0]  */
                uint64_t        reserved_19_11         : 9;        /* [19:11]  */
                uint64_t        tid0_ctrl              : 2;        /* [21:20]  */
                uint64_t        tid0                   : 10;        /* [31:22]  */
                uint64_t        tid1_length            : 11;        /* [42:32]  */
                uint64_t        reserved_51_43         : 9;        /* [51:43]  */
                uint64_t        tid1_ctrl              : 2;        /* [53:52]  */
                uint64_t        tid1                   : 10;        /* [63:54]  */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Receive IOVEC Length Structure (Struct - rx_iov_length_t) - 57 bits
*                  from File : 200_Software_Interfaces.xml
*/
union rx_iov_length {
        struct {
                uint64_t        length                 : 41;        /* [40:0] Length of the ME referenced by the total IOVEC. */
                uint64_t        iov_entries            : 16;        /* [56:41] Number of IOVEC entries in an IOVEC */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Receive IOVEC Length Structure with 48 bits (Struct - rx_iov_length48_t) - 48 bits
*                  from File : 200_Software_Interfaces.xml
*/
union rx_iov_length48 {
        struct {
                uint64_t        length                 : 32;        /* [31:0] Length of the ME referenced by the total IOVEC. */
                uint64_t        iov_entries            : 16;        /* [47:32] Number of IOVEC entries in an IOVEC */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Receive Length Union (Union - rx_length_t) - 57 bits
*                  from File : 200_Software_Interfaces.xml
*/
union rx_length {
        struct {
        struct {
                uint64_t        length                 : 57;        /* [56:0] Length of the ME/LE when an IOVEC is not used. */
                uint64_t        iov_length             : 57;        /* [56:0] Length of the ME/LE when an IOVEC is used. */
        };
        } __attribute__ ((__packed__));
        uint64_t val[2];
};

/*
* Structure from Table titled: Receive Length Union with 48 bits (Union - rx_length48_t) - 48 bits
*                  from File : 200_Software_Interfaces.xml
*/
union rx_length48 {
        struct {
        struct {
                uint64_t        length                 : 48;        /* [47:0] Length of the ME/LE when an IOVEC is not used. */
                uint64_t        iov_length             : 48;        /* [47:0] Length of the ME/LE when an IOVEC is used. */
        };
        } __attribute__ ((__packed__));
        uint64_t val[2];
};

/*
* Structure from Table titled: Receive Type: C1 flit (Struct - rx_c1_t) - 64bits
*                  from File : 200_Software_Interfaces.xml
*/
union rx_c1 {
        struct {
                uint64_t        user_id                : 32;        /* [31:0] User ID used in the command and/or used for access control in a list entry */
                uint64_t        me_options             : 20;        /* [51:32] The ME/LE options */
                uint64_t        reserved_55_52         : 4;        /* [55:52] Reserved */
                uint64_t        ptl_idx                : 8;        /* [63:56] Portal Table Index for the command and/or ME/LE. */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Receive Type: C2 flit (Struct - rx_c2_t) - 64bits
*                  from File : 200_Software_Interfaces.xml
*/
union rx_c2 {
        struct {
                uint64_t        user_id                : 32;        /* [31:0] User ID used in the command and/or used for access control in a list entry */
                uint64_t        matched_me             : 16;        /* [47:32] When an unexpected header is in progress and matches a new MEAppend, this field is used to hold a pointer to the ME that it matched. */
                uint64_t        reserved_49_48         : 2;        /* [49:48] Reserved */
                uint64_t        m                      : 1;        /* [50:50] Matched to ME/LE: Used in the unexpected header to indicate that an ME or LE has matched to this unexpected header. This is set to prevent future matches. It is only set when an operation is still pending to the unexpected header. */
                uint64_t        p                      : 1;        /* [51:51] Pending Operation: Used in the unexpected header entry to indicate that there is an operation in progress to an entry. This is set when the entry is created and cleared when the local DMA completes (single packet message or truncated rendezvous) or when the rendezvous completes (long message, not truncated). */
                uint64_t        ne                     : 1;        /* [52:52] Normal Event Needed: Occurs during a rendezvous operation to indicate that the standard event was a) required, and b) not yet posted. Causes a normal event to be posted with the operation completes. */
                uint64_t        oe                     : 1;        /* [53:53] Overflow Event Needed: Occurs when an ME/LE matches an unexpected header, but the operation has not yet completed. Causes an overflow event to be posted when the operation completes. */
                uint64_t        ack_req                : 2;        /* [55:54] Indicates whether the message requested an acknowledgement */
                uint64_t        ptl_idx                : 8;        /* [63:56] Portal Table Index for the command and/or ME/LE. */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Receive Type: C3 flit (Struct - rx_c3_t) - 64bits
*                  from File : 200_Software_Interfaces.xml
*/
union rx_c3 {
        struct {
                uint64_t        reserved_31_0          : 32;        /* [31:0] Reserved */
                uint64_t        trig_handle            : 16;        /* [47:32] Triggered operation buffer slot to use for this triggered ooperation command. */
                uint64_t        reserved_55_48         : 8;        /* [55:48] Reserved */
                uint64_t        ptl_idx                : 8;        /* [63:56] Portal Table Index for the command and/or ME/LE. */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Receive Type: C4 flit (Struct - rx_c4_t) - 64bits
*                  from File : 200_Software_Interfaces.xml
*/
union rx_c4 {
        struct {
                uint64_t        trig_previous          : 16;        /* [15:0] Previous item in the triggered operation list */
                uint64_t        trig_next              : 16;        /* [31:16] Next item in the triggered operation list */
                uint64_t        trig_handle            : 16;        /* [47:32] Triggered operation buffer slot to use for this triggered ooperation command. */
                uint64_t        cq_source              : 8;        /* [55:48] Command queue on which this triggered operation was issued. */
                uint64_t        ptl_idx                : 8;        /* [63:56] Portal Table Index for the command and/or ME/LE. */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Receive Type: D1 flit (Struct - rx_d1_t) - 64bits
*                  from File : 200_Software_Interfaces.xml
*/
union rx_d1 {
        struct {
                uint64_t        source_id              : 36;        /* [35:0] Source of the message (logical or physical) */
                uint64_t        ct_handle              : 11;        /* [46:36] Counting event (CT) handle to use for posting the event */
                uint64_t        reserved_47_47         : 1;        /* [47:47] Reserved */
                uint64_t        ref_count              : 16;        /* [63:48] Number of pending operations referencing this entry */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Receive Type: D2 flit (Struct - rx_d2_t) - 64 bits
*                  from File : 200_Software_Interfaces.xml
*/
union rx_d2 {
        struct {
                uint64_t        slid                   : 24;        /* [23:0] Source LID of the message (physical) */
                uint64_t        ipid                   : 12;        /* [35:24] Initiator PID (PID of the originating process) */
                uint64_t        reserved_39_36         : 4;        /* [39:36] Reserved */
                uint64_t        parent_me              : 16;        /* [55:40] Pointer to the ME that an unexpected header entry that is tracking an unexpected operation or a rendezvous operation is associated with */
                uint64_t        opcode                 : 7;        /* [62:56] OPCODE from an incoming network packet. */
                uint64_t        reserved_63_63         : 1;        /* [63:63] Reserved */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Receive Type: D3 flit (Struct - rx_d3_t) - 64 bits
*                  from File : 200_Software_Interfaces.xml
*/
union rx_d3 {
        struct {
                uint64_t        source_id              : 36;        /* [35:0] Source of the message (logical or physical) */
                uint64_t        ct_handle              : 11;        /* [46:36] Counting event (CT) handle to use for posting the event */
                uint64_t        pt                     : 1;        /* [47:47] Port to associate this operation with */
                uint64_t        command                : 12;        /* [59:48] Receive command */
                uint64_t        tq                     : 1;        /* [60:60] Triggered operation command queue target */
                uint64_t        reserved_61_61         : 1;        /* [61:61] Reserved */
                uint64_t        cmd_len                : 2;        /* [63:62] The length of a receive command minus 1 in 32B increments. (0=>32B, 1=>64B, 2=>96B, 3=>128B) */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Receive Type: E1 flit (Struct - rx_e1_t) - 64bits
*                  from File : 200_Software_Interfaces.xml
*/
union rx_e1 {
        struct {
                uint64_t        local_offset           : 40;        /* [39:0] Storage for the locally managed offset in a locally managed list entry */
                uint64_t        min_free               : 24;        /* [63:40] Minimum buffer space that must be free to prevent the item from unlinking */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Receive Type: E2 flit (Struct - rx_e2_t) - 64bits
*                  from File : 200_Software_Interfaces.xml
*/
union rx_e2 {
        struct {
                uint64_t        rlength                : 32;        /* [31:0] Requested operation length in a message */
                uint64_t        mlength                : 32;        /* [63:32] Modified Length: amount of the buffer that was actually modified. */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Receive Type: E3 flit (Struct - rx_e3_t) - 64bits
*                  from File : 200_Software_Interfaces.xml
*/
union rx_e3 {
        struct {
                uint64_t        reserved_11_0          : 12;        /* [11:0] Reserved */
                uint64_t        ipid                   : 12;        /* [23:12] PID to be used for this operation (context to give the LIST_HANDLE meaning) */
                uint64_t        list_handle            : 16;        /* [39:24] List entry to be used in an operation */
                uint64_t        min_free               : 24;        /* [63:40] Minimum buffer space that must be free to prevent the item from unlinking */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Receive Type: F1 flit (Struct - rx_f1_t) - 64bits
*                  from File : 200_Software_Interfaces.xml
*/
union rx_f1 {
        struct {
                uint64_t        length                 : 57;        /* [56:0] Length of a buffer */
                uint64_t        reserved_63_57         : 7;        /* [63:57] Reserved */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Receive Type: F2 flit (Struct - rx_f2_t) - 64bits
*                  from File : 200_Software_Interfaces.xml
*/
union rx_f2 {
        struct {
                uint64_t        length                 : 48;        /* [47:0] Length of a buffer */
                uint64_t        unex_ref_count         : 16;        /* [63:48] Number of unexpected headers referencing an overflow list entry */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Receive Type: F3 flit (Struct - rx_f3_t) - 64bits
*                  from File : 200_Software_Interfaces.xml
*/
union rx_f3 {
        struct {
                uint64_t        length                 : 57;        /* [56:0] Requested offset in the received message */
                uint64_t        dtype                  : 6;        /* [62:57] Datatype of the operation that was received */
                uint64_t        reserved_63_63         : 1;        /* [63:63] Reserved */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Receive Type: H flit (Struct - rx_h_t) - 64bits
*                  from File : 200_Software_Interfaces.xml
*/
union rx_h {
        struct {
                uint64_t        srank                  : 32;        /* [31:0] Source rank for an operation */
                uint64_t        dlid                   : 7;        /* [38:32] Low order 7 bits of Destination LID of an operation */
                uint64_t        pt                     : 1;        /* [39:39] Incoming port for the operation */
                uint64_t        packets                : 24;        /* [63:40] Remaining packets for this operation */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Receive Type: J flit (Struct - rx_j_t) - 64bits
*                  from File : 200_Software_Interfaces.xml
*/
union rx_j {
        struct {
                uint64_t        start                  : 57;        /* [56:0] Start address for a buffer or operation */
                uint64_t        reserved_58_57         : 2;        /* [58:57] Reserved */
                uint64_t        o                      : 1;        /* [59:59] Item is an overflow list entry */
                uint64_t        f                      : 1;        /* [60:60] This item needs to be freed when it is no longer in use. */
                uint64_t        ni                     : 2;        /* [62:61] Network Interface used for this operation. */
                uint64_t        v                      : 1;        /* [63:63] This item is valid. */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Receive Type: List Manipulation (Struct - rx_cq_list_flit0_t) - 256 bits
*                  from File : 200_Software_Interfaces.xml
*/
union rx_cq_list_flit0 {
        struct {
                                ptl_match_bits_t       a;        /* [63:0]  */
                                ptl_match_bits_t       b;        /* [127:64]  */
                union                rx_c1                  c;        /* [191:128]  */
                union                rx_d3                  d;        /* [255:192]  */
        } __attribute__ ((__packed__));
        uint64_t val[4];
};

/*
* Structure from Table titled: Receive Type: List Manipulation (Struct - rx_cq_list_flit1_t) - 256 bits
*                  from File : 200_Software_Interfaces.xml
*/
union rx_cq_list_flit1 {
        struct {
                union                rx_e3                  e;        /* [63:0]  */
                union                rx_f1                  f;        /* [127:64]  */
                                user_pointer_t         g;        /* [191:128]  */
                union                rx_j                   j;        /* [255:192]  */
        } __attribute__ ((__packed__));
        uint64_t val[4];
};

/*
* Structure from Table titled: PCB structure (Struct - PCB_t) - 256 bits
*                  from File : 200_Software_Interfaces.xml
*/
union PCB {
        struct {
        struct {
                uint64_t        reserved_31_0          : 32;        /* [31:0] Unused */
                uint64_t        trig_op_size           : 16;        /* [47:32] Indicates the size of the Triggered Operation array in entries. */
                uint64_t        unex_free_head         : 16;        /* [63:48] Head of the unexpected header free list for this process. */
        };
        struct {
                uint64_t        unexpected_size        : 16;        /* [79:64] Indicates the size of the Unexpected Header region in number of entries */
                uint64_t        unexpected_pa          : 1;        /* [80:80] Indicates whether the unexpected header base address is a virtual address (0) or physical address (1). */
                uint64_t        reserved_82_81         : 2;        /* [82:81] Unused */
                uint64_t        unexpected_base        : 45;        /* [127:83] Base address of an array allocated in host memory to hold LEs and MEs that spill beyond the buffer in the HFI. */
        };
        struct {
                uint64_t        le_me_size             : 16;        /* [143:128] Indicates the size of the LE/ME region in number of entries */
                uint64_t        le_me_pa               : 1;        /* [144:144] Indicates whether the LE/ME base address is a virtual address (0) or physical address (1). */
                uint64_t        reserved_146_145       : 2;        /* [146:145] Unused */
                uint64_t        le_me_base             : 45;        /* [191:147] Base address of an array allocated in host memory to hold LEs and MEs that spill beyond the buffer in the HFI. */
        };
        struct {
                uint64_t        v                      : 1;        /* [192:192] Indicates whether the PCB entry is valid (1) or not (0). */
                uint64_t        reserved_207_193       : 15;        /* [207:193] Reserved */
                uint64_t        base_pa                : 1;        /* [208:208] Indicates whether the base address is a virtual address (0) or physical address (1). */
                uint64_t        reserved_210_209       : 2;        /* [210:209] Unused */
                uint64_t        portals_base           : 45;        /* [255:211] Base address of Portals state allocated for Portal Table Entries, Counting Events (CTs), Event Queue (EQ) descriptors, and Triggered Operation storage in application memory. */
        };
        } __attribute__ ((__packed__));
        uint64_t val[4];
};

/*
* Structure from Table titled: Portal Table Entry Structure: non-Fast Path (Struct - ptentry_fp0_t) - 256 bits
*                  from File : 200_Software_Interfaces.xml
*/
union ptentry_fp0 {
        struct {
        struct {
                uint64_t        priority_head          : 16;        /* [15:0] Pointer to the head of the priority list associated with this Portal Table Entry */
                uint64_t        priority_tail          : 16;        /* [31:16] Pointer to the tail of the priority list associated with this Portal Table Entry */
                uint64_t        overflow_head          : 16;        /* [47:32] Pointer to the head of the overflow list associated with this Portal Table Entry */
                uint64_t        reserved_54_48         : 7;        /* [54:48] Reserved */
                uint64_t        bc                     : 1;        /* [55:55] Indicates whether  this Portal Table Entry corresponds to a backward compatibility PTEntry. */
                uint64_t        ot                     : 1;        /* [56:56] Indicates whether all entries on this Portal Table Entry will truncate (do not have the PTL_ME_NO_TRUNCATE option set) */
                uint64_t        uo                     : 1;        /* [57:57] Indicates whether all entries on the priority list for this Portal Table Entry will have the PTL_ME_USE_ONCE or PTL_LE_USE_ONCE option set. */
                uint64_t        fc                     : 1;        /* [58:58] Indicates if flow control is enabled for this Portal Table Entry. */
                uint64_t        enable                 : 1;        /* [59:59] This Portal Table Entry is enabled (fast path entries are inherently enabled) */
                uint64_t        ni                     : 2;        /* [61:60] The NI associated with this Portal Table Entry */
                uint64_t        fp                     : 1;        /* [62:62] Indicates whether this is a fast path PTEntry or not */
                uint64_t        v                      : 1;        /* [63:63] Indicates whether this PT Entry is Valid. */
        };
        struct {
                uint64_t        overflow_tail          : 16;        /* [79:64] Pointer to the tail of the overflow list associated with this Portal Table Entry */
                uint64_t        unexpected_head        : 16;        /* [95:80] Pointer to the head of the unexpected header list associated with this Portal Table Entry */
                uint64_t        unexpected_tail        : 16;        /* [111:96] Pointer to the tail of the unexpected headerlist associated with this Portal Table Entry */
                uint64_t        eq_handle              : 11;        /* [122:112] EQ Handle associated with this Portal Table Entry */
                uint64_t        reserved_255_123_0     : 5;        /* [255:123] Reserved */
        };
        struct {
                uint64_t        reserved_255_123_1     : 64;        /* [255:123] Reserved */
        };
        struct {
                uint64_t        reserved_255_123_2     : 64;        /* [255:123] Reserved */
        };
        } __attribute__ ((__packed__));
        uint64_t val[4];
};

/*
* Structure from Table titled: Portal Table Entry Structure: Fast Path (Struct - ptentry_fp1_t) - 256 bits
*                  from File : 200_Software_Interfaces.xml
*/
union ptentry_fp1 {
        struct {
        struct {
                uint64_t        start                  : 57;        /* [56:0] Start address of the LE attached to the fast path PTEntry */
                uint64_t        reserved_57_57         : 1;        /* [57:57] Reserved */
                uint64_t        g                      : 1;        /* [58:58] Indicates whether Gets are allowed on this fast path PTEntry */
                uint64_t        p                      : 1;        /* [59:59] Indicates whether Puts are allowed on this fast path PTEntry */
                uint64_t        ni                     : 2;        /* [61:60] The NI associated with this Portal Table Entry */
                uint64_t        fp                     : 1;        /* [62:62] Indicates whether this is a fast path PTEntry or not */
                uint64_t        v                      : 1;        /* [63:63] Indicates whether this PT Entry is Valid. */
        };
        struct {
                uint64_t        length                 : 57;        /* [120:64] Length of the LE attached to the fast path PTEntry */
                uint64_t        reserved_127_121       : 7;        /* [127:121] Reserved */
        };
        struct {
                uint64_t        user_id                : 32;        /* [159:128] User ID used for access control */
                uint64_t        ct_handle              : 11;        /* [170:160] Counting Event (CT) handle attached to this PTEntry */
                uint64_t        reserved_175_171       : 5;        /* [175:171] Reserved */
                uint64_t        eq_handle              : 11;        /* [186:176] EQ Handle associated with this Portal Table Entry */
                uint64_t        reserved_191_187       : 5;        /* [191:187] Reserved */
        };
        struct {
                uint64_t        ref_count              : 16;        /* [207:192] Reference count for the LE attached to this PTEntry */
                uint64_t        le_options             : 10;        /* [217:208] Options passed into the LE */
                uint64_t        reserved_255_218       : 38;        /* [255:218] Reserved */
        };
        } __attribute__ ((__packed__));
        uint64_t val[4];
};

/*
* Structure from Table titled: PSM Compatible Sequence Tracking State (Struct - psm_sequence_t) - 40 bits
*                  from File : 200_Software_Interfaces.xml
*/
union psm_sequence {
        struct {
                uint64_t        seq_num                : 11;        /* [10:0] Sequence Number */
                uint64_t        gen_val                : 20;        /* [30:11] Generation value  - If EXT_PSN_ENABLE is 0, only bits 23:11 are used to give a 13-bit GenVal. Bits [30:24] are reserved, and should be set to 0 by software, but will be ignored by hardware.  - If EXT_PSN_ENABLE is 1, bits 30:11 are used to give a 20-bit GenVal */
                uint64_t        reserved_31_31         : 1;        /* [31:31] Reserved */
                uint64_t        flow_valid             : 1;        /* [32:32] Indicates if the Flow is Valid */
                uint64_t        hdr_supp_enabled       : 1;        /* [33:33] Header Suppression is enabled */
                uint64_t        keep_after_seq_err     : 1;        /* [34:34] Keep the header after a sequence error (continue to DMA receive header on the sequence number mismatch) */
                uint64_t        keep_on_gen_error      : 1;        /* [35:35] Keep the header after a generation error (continue to DMA receive header on the generation number mismatch) */
                uint64_t        keep_payload_on_gen_err: 1;        /* [36:36] Keep the payload after a generation error (continue to DMA receive header on the generation number mismatch) */
                uint64_t        seq_mismatch           : 1;        /* [37:37] Indicates a sequence number mismatch. Must be cleared through an RX Command. */
                uint64_t        gen_mismatch           : 1;        /* [38:38] Indicates a generation mismatch. Must be cleared through an RX Command. */
                uint64_t        ext_psn_enable         : 1;        /* [39:39] Enable the use of 31 bit PSNs for this flow. */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Portal Table Entry Structure: non-Fast Path with Backward Compatibility Usage Model (Struct - ptentry_fp0__bc1_t) - 256 bits
*                  from File : 200_Software_Interfaces.xml
*/
union ptentry_fp0__bc1 {
        struct {
        struct {
                uint64_t        psm_sequence           : 40;        /* [39:0] PSM compatible sequence number checking */
                uint64_t        reserved_53_40         : 14;        /* [53:40]  */
                uint64_t        jk                     : 1;        /* [54:54] Indicates whether the JKey in the incoming packet should be checked. */
                uint64_t        bc                     : 1;        /* [55:55] Indicates whether  this Portal Table Entry corresponds to a backward compatibility PTEntry. */
                uint64_t        reserved_61_56         : 6;        /* [61:56]  */
                uint64_t        fp                     : 1;        /* [62:62] Indicates whether this is a fast path PTEntry or not */
                uint64_t        v                      : 1;        /* [63:63] Indicates whether this PT Entry is Valid. */
        };
        struct {
                uint64_t        eager_head             : 16;        /* [79:64] Pointer to the start of the eager queue for backward compatibility operations */
                uint64_t        eager_tail             : 16;        /* [95:80] Pointer to the tail of the eager queue for backward compatibility operations */
                uint64_t        reserved_111_96        : 16;        /* [111:96]  */
                uint64_t        eq_handle              : 11;        /* [122:112] EQ Handle associated with this Portal Table Entry */
                uint64_t        reserved_255_123_0     : 5;        /* [255:123] Reserved */
        };
        struct {
                uint64_t        reserved_255_123_1     : 64;        /* [255:123] Reserved */
        };
        struct {
                uint64_t        reserved_255_123_2     : 64;        /* [255:123] Reserved */
        };
        } __attribute__ ((__packed__));
        uint64_t val[4];
};

/*
* Structure from Table titled: Counting Event Structure (Struct - ptl_ct_event_t) - 256 bits
*                  from File : 200_Software_Interfaces.xml
*/
union ptl_ct_event {
        struct {
        struct {
                uint64_t        success                : 64;        /* [63:0] Count of successful events */
        };
        struct {
                uint64_t        failure                : 64;        /* [127:64] Count of failure events */
        };
        struct {
                uint64_t        threshold              : 64;        /* [191:128] Threshold associated with the triggered operation at the head of the list associated with this CT */
        };
        struct {
                uint64_t        triggered_head         : 16;        /* [207:192] Pointer to the head of the triggered operation list. */
                uint64_t        triggered_tail         : 16;        /* [223:208] Pointer to the tail of the triggered operation list. */
                uint64_t        reserved_251_224       : 28;        /* [251:224] Reserved */
                uint64_t        ni                     : 2;        /* [253:252] Network interface the CT is associated with */
                uint64_t        pt                     : 1;        /* [254:254] A triggered operation is pending */
                uint64_t        v                      : 1;        /* [255:255] Indicates whether the entry is valid */
        };
        } __attribute__ ((__packed__));
        uint64_t val[4];
};

/*
* Structure from Table titled: Event Queue Descriptor Structure (Struct - eqd_t) - 128 bits
*                  from File : 200_Software_Interfaces.xml
*/
union eqd {
        struct {
        struct {
                uint64_t        start                  : 51;        /* [50:0] Start address, which is required to be aligned to the size of an EQ entry (64 bytes) */
                uint64_t        irq                    : 9;        /* [59:51] Interrupt vector to use for an interrupt when this EQ processes an event. */
                uint64_t        ni                     : 2;        /* [61:60] Network interface the EQ is associated with */
                uint64_t        i                      : 1;        /* [62:62] Indicates this EQ should generate an interrupt when an event is delivered. */
                uint64_t        v                      : 1;        /* [63:63] Indicates whether the entry is valid */
        };
        struct {
                uint64_t        tail                   : 22;        /* [85:64] Last written location in the event queue. The tail is tracked based on the slot number, where a single slot is 64 bytes. */
                uint64_t        pending_events         : 15;        /* [100:86] Number of events that are pending to this event queue. */
                uint64_t        order                  : 5;        /* [105:101] Size of the event queue expressed as a power of 2 number of entries ranging from 2^0 (one entry) to 2^31 entries. The size of the head and tail pointer only support up to an Order value of 22. */
                uint64_t        head                   : 22;        /* [127:106] Next location in the event queue to read by the host software. The head is tracked based on the slot number, where a single slot is 64 bytes. When (Tail+1) % 2^Order is equal to Head, the event queue is full. */
        };
        } __attribute__ ((__packed__));
        uint64_t val[2];
};

/*
* Structure from Table titled: Event Queue Entry Structure (Struct - initiator_EQEntry_t) - 512 bits
*                  from File : 200_Software_Interfaces.xml
*/
union initiator_EQEntry {
        struct {
        struct {
                uint64_t        reserved_40_0          : 41;        /* [40:0] Reserved */
                uint64_t        l                      : 1;        /* [41:41] List that the operation was delivered to at the target */
                uint64_t        fail_type              : 6;        /* [47:42] The Portals Fail Type for the operation */
                uint64_t        ptl_idx                : 8;        /* [55:48] The Portal Table Index used for the operation */
                uint64_t        event_kind             : 6;        /* [61:56] The type of the event being delivered */
                uint64_t        d                      : 1;        /* [62:62] EQ Dropped flag is set (TRUE) or not (FALSE) */
                uint64_t        v                      : 1;        /* [63:63] Valid */
        };
        struct {
                uint64_t        roffset                : 57;        /* [120:64] Remote Offset */
                uint64_t        reserved_126_121       : 6;        /* [126:121] Reserved */
                uint64_t        bn                     : 1;        /* [127:127] The BECN bit was set in the last response/ack received for this message. */
        };
        struct {
                uint64_t        rlength                : 32;        /* [159:128] Requested Length */
                uint64_t        mlength                : 32;        /* [191:160] Modified Length */
        };
                                user_pointer_t         user_ptr;        /* [255:192] User Pointer */
                                ptl_match_bits_t       match_bits;        /* [319:256] Match bits */
                                ptl_hdr_data_t         hdr_data;        /* [383:320] Header Data */
        struct {
                uint64_t        reserved_511_384_0     : 64;        /* [511:384] Reserved */
        };
        struct {
                uint64_t        reserved_511_384_1     : 64;        /* [511:384] Reserved */
        };
        } __attribute__ ((__packed__));
        uint64_t val[8];
};

/*
* Structure from Table titled: Event Queue Entry Structure (Struct - target_EQEntry_t) - 512 bits
*                  from File : 200_Software_Interfaces.xml
*/
union target_EQEntry {
        struct {
        struct {
                uint64_t        source_id              : 36;        /* [35:0] The source of the message */
                uint64_t        atomic_op              : 5;        /* [40:36] The incoming atomic operation type */
                uint64_t        pt                     : 1;        /* [41:41] The port that the message arrived on. */
                uint64_t        fail_type              : 6;        /* [47:42] The Portals Fail Type for the operation */
                uint64_t        ptl_idx                : 8;        /* [55:48] The Portal Table Index used for the operation */
                uint64_t        event_kind             : 6;        /* [61:56] The type of the event being delivered */
                uint64_t        d                      : 1;        /* [62:62] EQ Dropped flag is set (TRUE) or not (FALSE) */
                uint64_t        v                      : 1;        /* [63:63] Valid */
        };
        struct {
                uint64_t        roffset                : 57;        /* [120:64] Remote Offset */
                uint64_t        atomic_dtype           : 6;        /* [126:121] Atomic Datatype */
                uint64_t        f                      : 1;        /* [127:127] This event was generated by an operation on the fast path (TRUE) or not (FALSE). This indicates that the user pointer is held in a separate per-PTEntry structure in software and cannot be interpreted from the event format. */
        };
        struct {
                uint64_t        rlength                : 32;        /* [159:128] Requested Length */
                uint64_t        mlength                : 32;        /* [191:160] Modified Length */
        };
                                user_pointer_t         user_ptr;        /* [255:192] User Pointer */
                                ptl_match_bits_t       match_bits;        /* [319:256] Match bits */
                                ptl_hdr_data_t         hdr_data;        /* [383:320] Header data */
        struct {
                uint64_t        start                  : 57;        /* [440:384] Start address */
                uint64_t        reserved_446_441       : 6;        /* [446:441] Reserved */
                uint64_t        fn                     : 1;        /* [447:447] The FECN bit was set in the last packet to arrive for this message. */
        };
        struct {
                uint64_t        user_id                : 32;        /* [479:448] User ID (will get some new name) */
                uint64_t        reserved_511_480       : 32;        /* [511:480] Reserved */
        };
        } __attribute__ ((__packed__));
        uint64_t val[8];
};

/*
* Structure from Table titled: Transmit Command Type Modified: B1 flit (Struct - tx_cq_b1_omb_t) - 64 bits
*                  from File : 140_OutstandingRequest_and_Reliability.xml
*/
union tx_cq_b1_omb {
        struct {
                uint64_t        mctc                   : 4;        /* [3:0] OTR Message Class / Traffic Class */
                uint64_t        reserved_10_4          : 7;        /* [10:4] Reserved */
                uint64_t        auth_idx               : 3;        /* [13:11] Authentication index used for populating the SRANK and User ID fields */
                uint64_t        slid_low               : 2;        /* [15:14] Low 2 bits of the SLID to use for this operation */
                uint64_t        pkey                   : 16;        /* [31:16] PKEY for this message */
                uint64_t        msg_id                 : 16;        /* [47:32] Message Identifier */
                uint64_t        retransmit_disable     : 1;        /* [48] Retransmit Disable. Indicates if packets from the corresponding command queue should not be retransmitted. */
                uint64_t        reserved_53_49         : 5;        /* [53:49] Reserved */
                uint64_t        hd                     : 1;        /* [54:54] Indicates whether header data is included in this message or is zero. */
                uint64_t        pr                     : 1;        /* [55] Indicates the privilege level of the corresponding command queue from which the command originated. */
                uint64_t        md_options             : 8;        /* [63:56] Options from the MD, which control things like IOVECs and event posting. */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Transmit Command Type Modified: C flit (Struct - tx_cq_c_omb_t) - 64 bits
*                  from File : 140_OutstandingRequest_and_Reliability.xml
*/
union tx_cq_c_omb {
        struct {
                uint64_t        srank                  : 32;        /* [31:0] The rank number of the source of the packet. */
                uint64_t        user_id                : 32;        /* [63:32] The user identifier associated with the process that initiated the packet. */
        };
        uint64_t val;
};

/*
* Structure from Table titled: Pending Rendezvous Operations (Struct - pend_rend_t) - 96 bits
*                  from File : 140_OutstandingRequest_and_Reliability.xml
*/
union pend_rend {
        struct {
        struct {
                uint64_t        head_time              : 32;        /* [31:0] Time associated with the head of the list */
                uint64_t        tail_time              : 32;        /* [63:32] Time associated with the head of the list */
        };
        struct {
                uint64_t        head_p                 : 16;        /* [79:64] Pointer to the head of the list */
                uint64_t        tail_p                 : 16;        /* [95:80] Pointer to the tail of the list */
        };
        } __attribute__ ((__packed__));
        uint64_t val[2];
};

/*
* Structure from Table titled: OMB Type: A flit (Struct - omb_a_t) - 64 bits
*                  from File : 140_OutstandingRequest_and_Reliability.xml
*/
union omb_a {
        struct {
                uint64_t        dlid                   : 24;        /* [23:0] Destination LID */
                uint64_t        clength                : 5;        /* [28:24] Command length in OMB */
                uint64_t        reserved_31_29         : 3;        /* [31:29] Reserved */
                uint64_t        slid_low               : 2;        /* [33:32] Two low order bits of SLID to use. Used for indexing local sequence number table and for selecting outgoing SLID. */
                uint64_t        ctype                  : 4;        /* [37:34] Transmit command type */
                uint64_t        sh                     : 1;        /* [38:38] Indicates if this buffer entry uses the small header */
                uint64_t        becn                   : 1;        /* [39:39] Indicates if the backward explicit congestion notification is set. Must be stored as zero. */
                uint64_t        sl                     : 5;        /* [44:40] Service level associated with this request */
                uint64_t        rc                     : 3;        /* [47:45] Routing class associated with this request */
                uint64_t        ptl_idx                : 8;        /* [55:48] Portal Table Index for the command */
                uint64_t        opcode                 : 7;        /* [62:56] Opcode used for the L4 */
                uint64_t        pt                     : 1;        /* [63:63] Indicates the outgoing port to use. */
        };
        uint64_t val;
};

/*
* Structure from Table titled: OMB Type: B flit (Struct - omb_b_t) - 64 bits
*                  from File : 140_OutstandingRequest_and_Reliability.xml
*/
union omb_b {
        struct {
                uint64_t        mdhandle               : 11;        /* [10:0] Memory Descriptor Handle used for this request. The meaning of the contents of this field are opaque, since it is only used for canceling a request. */
                uint64_t        mctc                   : 4;        /* [14:11] Message class and traffic class */
                uint64_t        reserved_15_15         : 1;        /* [15:15] Reserved */
                uint64_t        pkey                   : 16;        /* [31:16] Partition key provided by the command */
                uint64_t        eqhandle               : 11;        /* [42:32] Event Queue where events are posted for this request */
                uint64_t        cthandle               : 11;        /* [53:43] Counting Event where events are posted for this request */
                uint64_t        hd                     : 1;        /* [54:54] Indicates if header is included in this message (1) or is zero (0). */
                uint64_t        pr                     : 1;        /* [55:55] Indicates the privilege level of the operation */
                uint64_t        mdoptions              : 8;        /* [63:56] Memory Descriptor Options: describes options for how this request is handled, including controlling which events are posted. */
        };
        uint64_t val;
};

/*
* Structure from Table titled: OMB Type: D flit (Struct - omb_d_t) - 64 bits
*                  from File : 140_OutstandingRequest_and_Reliability.xml
*/
union omb_d {
        struct {
                uint64_t        user_id                : 32;        /* [31:0] User ID used with this message */
                uint64_t        srank                  : 32;        /* [63:32] SRANK used for this message */
        };
        uint64_t val;
};

/*
* Structure from Table titled: OMB Type: H1 flit (Struct - omb_h1_t) - 64 bits
*                  from File : 140_OutstandingRequest_and_Reliability.xml
*/
union omb_h1 {
        struct {
                uint64_t        payload                : 32;        /* [31:0] Last 0 to 4 bytes of payload plus any pad bytes needed to end on this boundary. */
                uint64_t        data_ptr               : 16;        /* [47:32] Pointer to the second OMB entry that is part of this operation. */
                uint64_t        status                 : 8;        /* [55:48] Status of this operation, including capturing error conditions received from the target. Used as part of the event posting (accumulates errors for later event posting). Associated with the ACK or REPLY events */
                uint64_t        v                      : 1;        /* [56:56] Indicates if this entry is valid */
                uint64_t        t                      : 1;        /* [57:57] Type of the entry */
                uint64_t        c                      : 1;        /* [58:58] Cancelled: indicates if the message associated with this entry has been canceled. */
                uint64_t        reserved_60_59         : 2;        /* [60:59] Reserved */
                uint64_t        buff_state             : 3;        /* [63:61] State of the current buffer */
        };
        uint64_t val;
};

/*
* Structure from Table titled: OMB Type: H2 flit (Struct - omb_h2_t) - 64 bits
*                  from File : 140_OutstandingRequest_and_Reliability.xml
*/
union omb_h2 {
        struct {
                uint64_t        completion_count       : 24;        /* [23:0] Number of packets remaining to be transferred for a rendezvous operation. Initialized to the total number of packets to transfer and decremented. */
                uint64_t        send_status            : 8;        /* [31:24] Status of this operation, including capturing error conditions associated with the local operation. Used as part of the event posting (accumulates errors for later event posting). Associated with the SEND events. */
                uint64_t        data_ptr               : 16;        /* [47:32] Pointer to the second OMB entry that is part of this operation. */
                uint64_t        status                 : 8;        /* [55:48] Status of this entry */
                uint64_t        v                      : 1;        /* [56:56] Indicates if this entry is valid */
                uint64_t        t                      : 1;        /* [57:57] Type of the entry */
                uint64_t        c                      : 1;        /* [58:58] Cancelled: indicates if the message associated with this entry has been canceled. */
                uint64_t        reserved_60_59         : 2;        /* [60:59] Reserved */
                uint64_t        buff_state             : 3;        /* [63:61] State of the current buffer */
        };
        uint64_t val;
};

/*
* Structure from Table titled: OMB Type: H3 flit (Struct - omb_h3_t) - 64 bits
*                  from File : 140_OutstandingRequest_and_Reliability.xml
*/
union omb_h3 {
        struct {
                uint64_t        reserved_31_0          : 32;        /* [31:0] Reserved */
                uint64_t        next_ptr               : 16;        /* [47:32] Pointer to the next pending OMB entry for pending rendezvous operation tracking. */
                uint64_t        reserved_63_48         : 16;        /* [63:48] Reserved */
        };
        uint64_t val;
};

/*
* Structure from Table titled: OMB Type: N flit (Struct - omb_n_t) - 64 bits
*                  from File : 140_OutstandingRequest_and_Reliability.xml
*/
union omb_n {
        struct {
                uint64_t        offset                 : 57;        /* [56:0] Offset to be used at the target */
                uint64_t        reserved_59_57         : 3;        /* [59:57] Reserved */
                uint64_t        ack_req                : 2;        /* [61:60] Acknowledgement type requested */
                uint64_t        ni                     : 2;        /* [63:62] Network interface used for this message */
        };
        uint64_t val;
};

/*
* Structure from Table titled: OMB Type: Oflit (Struct - omb_o_t) - 64 bits
*                  from File : 140_OutstandingRequest_and_Reliability.xml
*/
union omb_o {
        struct {
                uint64_t        start                  : 57;        /* [56:0] Start address for a given message */
                uint64_t        pa                     : 1;        /* [57:57] Indicates if the address is a physical address */
                uint64_t        reserved_63_58         : 6;        /* [63:58] Reserved */
        };
        uint64_t val;
};

/*
* Structure from Table titled: OMB Type: Oflit (Struct - omb_p_t) - 64 bits
*                  from File : 140_OutstandingRequest_and_Reliability.xml
*/
union omb_p {
        struct {
                uint64_t        sched_time             : 32;        /* [31:0] Scheduled time for this entry */
                uint64_t        reserved_63_32         : 32;        /* [63:32] Reserved */
        };
        uint64_t val;
};

/*
* Structure from Table titled: OMB Format: Generic Buffered (Struct - omb_generic_buffered_t) - 512bits
*                  from File : 140_OutstandingRequest_and_Reliability.xml
*/
union omb_generic_buffered {
        struct {
                union                omb_a                  a;        /* [63:0]  */
                union                omb_b                  b;        /* [127:64]  */
                                user_pointer_t         c;        /* [191:128]  */
                union                omb_d                  d;        /* [255:192]  */
                union                tx_cq_e1               e;        /* [319:256]  */
                                payload_t              p0;        /* [383:320]  */
                                payload_t              p1;        /* [447:384]  */
                union                omb_h1                 h;        /* [511:448]  */
        } __attribute__ ((__packed__));
        uint64_t val[8];
};

/*
* Structure from Table titled: OMB Format: Buffered Reply (Struct - omb_buffered_reply_t) - 512bits
*                  from File : 140_OutstandingRequest_and_Reliability.xml
*/
union omb_buffered_reply {
        struct {
                union                omb_a                  a;        /* [63:0]  */
                union                omb_b                  b;        /* [127:64]  */
                                user_pointer_t         c;        /* [191:128]  */
                union                tx_cq_j1               m;        /* [255:192] Format from TX CQ is reused, but the ACK OP field is set to zero. */
                union                tx_cq_e1               e;        /* [319:256]  */
                                payload_t              p0;        /* [383:320]  */
                                payload_t              p1;        /* [447:384]  */
                union                omb_h1                 h;        /* [511:448]  */
        } __attribute__ ((__packed__));
        uint64_t val[8];
};

/*
* Structure from Table titled: OMB Format: Generic Two Operand Buffered (Struct - omb_generic_two_op_buffered_t) - 512bits
*                  from File : 140_OutstandingRequest_and_Reliability.xml
*/
union omb_generic_two_op_buffered {
        struct {
                union                omb_a                  a;        /* [63:0]  */
                union                omb_b                  b;        /* [127:64]  */
                                user_pointer_t         c;        /* [191:128]  */
                union                omb_d                  d;        /* [255:192]  */
                union                tx_cq_e2               e;        /* [319:256]  */
                                payload_t              p0;        /* [383:320]  */
                                payload_t              p1;        /* [447:384]  */
                union                omb_h1                 h;        /* [511:448]  */
        } __attribute__ ((__packed__));
        uint64_t val[8];
};

/*
* Structure from Table titled: OMB Format: Standard Unbuffered (Struct - omb_generic_unbuffered_t) - 512bits
*                  from File : 140_OutstandingRequest_and_Reliability.xml
*/
union omb_generic_unbuffered {
        struct {
                union                omb_a                  a;        /* [63:0]  */
                union                omb_b                  b;        /* [127:64]  */
                                user_pointer_t         c;        /* [191:128]  */
                union                omb_d                  d;        /* [255:192]  */
                union                tx_cq_e1               e;        /* [319:256]  */
                                ptl_match_bits_t       f;        /* [383:320]  */
                                ptl_hdr_data_t         g;        /* [447:384]  */
                union                omb_h2                 h;        /* [511:448]  */
        } __attribute__ ((__packed__));
        uint64_t val[8];
};

/*
* Structure from Table titled: OMB Format: Unbuffered Replies, Acknowledgements, and CTS Operations (Struct - omb_generic_reply_t) - 512bits
*                  from File : 140_OutstandingRequest_and_Reliability.xml
*/
union omb_generic_reply {
        struct {
                union                omb_a                  a;        /* [63:0]  */
                union                omb_b                  b;        /* [127:64]  */
                                user_pointer_t         c;        /* [191:128]  */
                union                tx_cq_j1               m;        /* [255:192] Format from TX CQ is reused, but the  ACK OP field is set to zero. */
                union                tx_cq_e1               e;        /* [319:256]  */
                union                tx_cq_i                i;        /* [383:320]  */
        struct {
                uint64_t        reserved_447_384       : 64;        /* [447:384] Reserved */
        };
                union                omb_h2                 h;        /* [511:448]  */
        } __attribute__ ((__packed__));
        uint64_t val[8];
};

/*
* Structure from Table titled: OMB Format: Rendezvous, second entry (Struct - omb_rendezvous2_t) - 512bits
*                  from File : 140_OutstandingRequest_and_Reliability.xml
*/
union omb_rendezvous2 {
        struct {
                union                omb_n                  n0;        /* [63:0] This variant of the flit stores the actual offset used at the target for posting in the completion event. */
                union                tx_cq_i                i;        /* [127:64]  */
                union                omb_o                  o;        /* [191:128]  */
        struct {
                uint64_t        reserved_255_192       : 64;        /* [255:192] Reserved */
        };
                union                omb_n                  n1;        /* [319:256] This variant of the flit stores the requested offset for use in an ECTS or in a retransmit. */
                union                omb_p                  p;        /* [383:320] Future time for issuing the payload of this rendezvous operation. */
                union                omb_h3                 h3;        /* [447:384]  */
                union                omb_h2                 h2;        /* [511:448]  */
        } __attribute__ ((__packed__));
        uint64_t val[8];
};

/*
* Structure from Table titled: IOVEC Retransmission Flit (Struct - iovec_retrans_flit_t) - 256bits
*                  from File : 140_OutstandingRequest_and_Reliability.xml
*/
union iovec_retrans_flit {
        struct {
        struct {
                uint64_t        initiator_start        : 57;        /* [56:0] Base address for this packet. */
                uint64_t        reserved_60_57         : 4;        /* [60:57] Reserved */
                uint64_t        iovec_indicator        : 1;        /* [61] Indicates that the flit is an IOVEC Retransmission Flit */
                uint64_t        reserved_63_62         : 2;        /* [63:62] Reserved */
        };
        struct {
                uint64_t        iovec_offset           : 32;        /* [95:64] Offset of the start address within the first IOVEC entry */
                uint64_t        reserved_255_96_0      : 32;        /* [255:96] Reserved */
        };
        struct {
                uint64_t        reserved_255_96_1      : 64;        /* [255:96] Reserved */
        };
        struct {
                uint64_t        reserved_255_96_2      : 64;        /* [255:96] Reserved */
        };
        } __attribute__ ((__packed__));
        uint64_t val[4];
};

/*
* Structure from Table titled: Pending Packets (Struct - pend_pkt_t) - 76 bits
*                  from File : 140_OutstandingRequest_and_Reliability.xml
*/
union pend_pkt {
        struct {
        struct {
                uint64_t        head_time              : 12;        /* [11:0] Time associated with the head of the list */
                uint64_t        current_seq            : 16;        /* [27:12] Current local sequence number for this hash entry */
                uint64_t        oldest_seq             : 16;        /* [43:28] Local sequence number for the head of the list (aka the oldest outstanding local sequence number) */
                uint64_t        head_p                 : 16;        /* [59:44] Pointer to the head of the list */
                uint64_t        tail_p                 : 16;        /* [75:60] Pointer to the tail of the list */
        };
        } __attribute__ ((__packed__));
        uint64_t val[2];
};

/*
* Structure from Table titled: Base OPB Type (Struct - opb_t) - 256 bits
*                  from File : 140_OutstandingRequest_and_Reliability.xml
*/
union opb {
        struct {
        struct {
                uint64_t        offset                 : 57;        /* [56:0] Target Offset */
                uint64_t        pad_count              : 3;        /* [59:57] Number of pad bytes at the end of the payload of the packet */
                uint64_t        ack_req                : 2;        /* [61:60] Acknowledgement request */
                uint64_t        ni                     : 2;        /* [63:62] network interface */
        };
        struct {
                uint64_t        start                  : 57;        /* [120:64] Base address for this packet. Note that tis is the address for delivering the reply (for a Get or a two operand atomic) */
                uint64_t        pa                     : 1;        /* [121:121] Indicates if the start address is a physical address */
                uint64_t        mctc                   : 4;        /* [125:122] message class and traffic class */
                uint64_t        reserved_126_126       : 1;        /* [126:126] Reserved */
                uint64_t        v                      : 1;        /* [127:127] Valid */
        };
        struct {
                uint64_t        psn                    : 16;        /* [143:128] Sequence number for this packet */
                uint64_t        msg_id                 : 16;        /* [159:144] Message ID for this packet */
                uint64_t        buff_state             : 3;        /* [162:160] State of the current buffer */
                uint64_t        reserved_163_163       : 1;        /* [163:163] Reserved */
                uint64_t        retrans_cnt            : 4;        /* [167:164] Retransmit count for this packet */
                uint64_t        length                 : 11;        /* [178:168] Packet length */
                uint64_t        pt                     : 1;        /* [179:179] Outgoing Port that was used. */
                uint64_t        timestamp              : 12;        /* [191:180] Last transmit time of this packet */
        };
        struct {
                uint64_t        iovec_offset           : 32;        /* [223:192] Offset of the start address within the first IOVEC entry */
                uint64_t        local_seq              : 16;        /* [239:224] Local sequence number */
                uint64_t        reserved_255_240       : 16;        /* [255:240] Reserved */
        };
        } __attribute__ ((__packed__));
        uint64_t val[4];
};

/*
* Structure from Table titled: Pending Acknowledgement OPB Type (Struct - opb_pending_ack_t) - 256 bits
*                  from File : 140_OutstandingRequest_and_Reliability.xml
*/
union opb_pending_ack {
        struct {
        struct {
                uint64_t        dlid                   : 24;        /* [23:0] Destination LID */
                uint64_t        ctype                  : 4;        /* [27:24] Transmit command type */
                uint64_t        sh                     : 1;        /* [28:28] Indicates if this buffer entry uses the small header */
                uint64_t        becn                   : 1;        /* [29:29] Indicates if the backward explicit congestion notification is set. Must be stored as zero. */
                uint64_t        reserved_31_30         : 2;        /* [31:30] Reserved */
                uint64_t        sl                     : 5;        /* [36:32] Service level associated with this request */
                uint64_t        rc                     : 3;        /* [39:37] Routing class associated with this request */
                uint64_t        cmd                    : 7;        /* [46:40] Opcode used for the L4 */
                uint64_t        reserved_47_47         : 1;        /* [47:47] Reserved */
                uint64_t        pkey                   : 16;        /* [63:48] Partition Key */
        };
        struct {
                uint64_t        ack_psn                : 16;        /* [79:64] Acknowledged packet sequence number */
                uint64_t        ack_msg_id             : 16;        /* [95:80] Acknowledged message identifier */
                uint64_t        ack_pkt_id             : 16;        /* [111:96] Acknowledged packet identifier */
                uint64_t        ack_op                 : 4;        /* [115:112] Acknowledgement operation type */
                uint64_t        reserved_118_116       : 3;        /* [118:116] Reserved */
                uint64_t        ls                     : 1;        /* [119:119] List state indicating the list matched by the request */
                uint64_t        reserved_121_120       : 2;        /* [121:120] Reserved */
                uint64_t        mctc                   : 4;        /* [125:122] message class and traffic class */
                uint64_t        reserved_127_126       : 2;        /* [127:126] Reserved */
        };
        struct {
                uint64_t        psn                    : 16;        /* [143:128] Sequence number for this packet */
                uint64_t        msg_id                 : 16;        /* [159:144] Message ID for this packet */
                uint64_t        buff_state             : 3;        /* [162:160] State of the current buffer */
                uint64_t        reserved_167_163       : 5;        /* [167:163] Reserved */
                uint64_t        length                 : 11;        /* [178:168] Packet length */
                uint64_t        pt                     : 1;        /* [179:179] Outgoing port to use */
                uint64_t        reserved_191_180       : 12;        /* [191:180] Reserved */
        };
        struct {
                uint64_t        tpid                   : 12;        /* [203:192] Target PID */
                uint64_t        ipid                   : 12;        /* [215:204] Initiator PID */
                uint64_t        reserved_255_216       : 40;        /* [255:216] Reserved */
        };
        } __attribute__ ((__packed__));
        uint64_t val[4];
};

/*
* Structure from Table titled: Transmit Protocol State (Struct - tx_proto_state_t) - 64 bits
*                  from File : 140_OutstandingRequest_and_Reliability.xml
*/
union tx_proto_state {
        struct {
                uint64_t        next_seq_ordered       : 16;        /* [15:0] Next PSN for the ordered packets */
                uint64_t        next_seq_unordered     : 16;        /* [31:16] Next PSN for the unordered packets. This includes adaptive routing and deterministic routing that is hashed using any fields other than DLID and SLID. */
                uint64_t        oldest_unordered       : 16;        /* [47:32] Oldest unordered PSN known to be outstanding */
                uint64_t        max_seq_dist           : 12;        /* [59:48] Maximum distance between oldest unordered and next unordered PSNs. */
                uint64_t        ctrl                   : 4;        /* [63:60] Control state for this destination */
        };
        uint64_t val;
};


#endif                 /* DEF_FXR_SW_SW_STRUCT */
