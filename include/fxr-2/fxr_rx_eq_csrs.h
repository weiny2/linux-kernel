//                                                                             
// File:       fxr_rx_eq_csrs.h                                                
// Creator:    pvesvslx                                                        
// Time:       Friday Apr 25, 2014 [1:12:48 pm]                                
//                                                                             
// Path:       /tmp/pvesvslx/nebulon_run/12747                                 
// Arguments:  /p/com/eda/denali/blueprint/3.7.4/Linux/blueprint -chdr -I      
//             /p/slx/eda/intel/nebulon/2.05_fdo/include -I                    
//             /p/slx/pvesv/fxr_autogen/fxr -xml fxr_rx_eq.rdl                 
//                                                                             
// Sources:    /tmp/pvesvslx/nebulon_run/12747/fxr_rx_eq.rdlh                  
//             /tmp/pvesvslx/nebulon_run/12747/fxr_rx_eq.rdl                   
//             /tmp/pvesvslx/nebulon_run/12747/lib_udp.rdl                     
//             /p/com/eda/intel/nebulon/2.05p1/generators/generator_common.pm  
//             /p/com/eda/intel/nebulon/2.05p1/generators/xml.pm               
//             /p/com/eda/intel/nebulon/2.05p1/generators/walk_through.pm      
//             /p/com/eda/intel/nebulon/2.05p1/generators/chdr.pm              
//                                                                             
// Blueprint:   3.7.4 (Tue Jun 23 00:17:01 PDT 2009)                           
// Machine:    scci56220                                                       
// OS:         Linux 2.6.16.60-0.58.1.3835.0.PTF.638363-smp                    
// Description:                                                                
//                                                                             
//Receive EQ address map                                                       
//                                                                             
// Copyright (C) 2014 Denali Software Inc.  All rights reserved                
// THIS FILE IS AUTOMATICALLY GENERATED BY DENALI BLUEPRINT, DO NOT EDIT       
//                                                                             



// RX_EQ_CSR1 desc:  This is an OTR CSR.
typedef volatile union {
    struct {
        uint64_t  TEST                 :  64;    //  This is a test bit.

    };
    uint64_t                         val;
} RX_EQ_CSR1_t;

// --------------------------------------------------------------------------------------------------------------------------------

// RX_EQ_DESC_CACHE_ADDR desc:  This is an RX EQ debug CSR. It allows indirect access to the EQ
// Descriptor Cache. This array can not be written to during normal
// operation. This register is for debug use only. Note that this
// register is 144 bits wide. The data for the read or write to this
// register is contained in the next three CSR's
typedef volatile union {
    struct {
        uint64_t  address              :  12;    //  Address of DMA Buffer
                                                 // location to be accessed
        uint64_t  write_cmd            :   1;    //  Write = 1, Read = 0.
        uint64_t  Reserved_15_13       :   3;    // 
        uint64_t  cmd_complete         :   1;    //  Set to one after a completed
                                                 // access
        uint64_t  new_cmd              :   1;    //  Indicated the command in this
                                                 // CSR is ready for hardware.
        uint64_t  Reserved_63_18       :  46;    // 

    };
    uint64_t                         val;
} RX_EQ_DESC_CACHE_ADDR_t;

// --------------------------------------------------------------------------------------------------------------------------------

// RX_EQ_DBG_DESC_DATA0 desc:  This is an RX EQ debug CSR. This is the data for bits [63:0] of the
// RX EQ Descriptor Cache being accessed with the RX_EQ_DESC_CACHE_ADDR
// register. The data from this CSR is written to the cache if the write
// bit is active in that CSR, or this CSR will contain the read data if
// the write bit is not active.
typedef volatile union {
    struct {
        uint64_t  Data                 :  64;    // 

    };
    uint64_t                         val;
} RX_EQ_DBG_DESC_DATA0_t;

// --------------------------------------------------------------------------------------------------------------------------------

// RX_EQ_DBG_DESC_DATA1 desc:  This is an RX EQ debug CSR. This is the data for bits [127:64] of the
// RX EQ Descriptor Cache being accessed with the RX_EQ_DESC_CACHE_ADDR
// register. The data from this CSR is written to the cache if the write
// bit is active in that CSR, or this CSR will contain the read data if
// the write bit is not active.
typedef volatile union {
    struct {
        uint64_t  Data                 :  64;    // 

    };
    uint64_t                         val;
} RX_EQ_DBG_DESC_DATA1_t;

// --------------------------------------------------------------------------------------------------------------------------------

// RX_EQ_DBG_DESC_DATA2 desc:  This is an RX EQ debug CSR. This is the data for bits [143:128] of
// the RX EQ Descriptor Cache being accessed with the
// RX_EQ_DESC_CACHE_ADDR register. This is the ECC for the data being
// accessed. The data from this CSR is written to the cache if the write
// bit is active in that CSR, or this CSR will contain the read data if
// the write bit is not active.
typedef volatile union {
    struct {
        uint64_t  ECC                  :  16;    // 
        uint64_t  Reserved_63_16       :  48;    // 

    };
    uint64_t                         val;
} RX_EQ_DBG_DESC_DATA2_t;

// --------------------------------------------------------------------------------------------------------------------------------

// RX_EQ_TRIG_STATE_ADDR desc:  This is an RX EQ debug CSR. It allows indirect access to the
// Triggered State Cache. This array can not be written to during normal
// operation. This register is for debug use only. Note that this
// register is 288 bits wide. The data for the read or write to this
// register is contained in the next five CSR's
typedef volatile union {
    struct {
        uint64_t  address              :  10;    //  Address of DMA Buffer
                                                 // location to be accessed
        uint64_t  write_cmd            :   1;    //  Write = 1, Read = 0.
        uint64_t  Reserved_15_11       :   5;    // 
        uint64_t  cmd_complete         :   1;    //  Set to one after a completed
                                                 // access
        uint64_t  new_cmd              :   1;    //  Indicated the command in this
                                                 // CSR is ready for hardware.
        uint64_t  Reserved_63_18       :  46;    // 

    };
    uint64_t                         val;
} RX_EQ_TRIG_STATE_ADDR_t;

// --------------------------------------------------------------------------------------------------------------------------------

// RX_EQ_DBG_TRIG_DATA0 desc:  This is an RX EQ debug CSR. This is the data for bits [63:0] of the
// RX Triggered State Cache being accessed with the
// RX_EQ_TRIG_STATE_ADDR register. The data from this CSR is written to
// the cache if the write bit is active in that CSR, or this CSR will
// contain the read data if the write bit is not active.
typedef volatile union {
    struct {
        uint64_t  Data                 :  64;    // 

    };
    uint64_t                         val;
} RX_EQ_DBG_TRIG_DATA0_t;

// --------------------------------------------------------------------------------------------------------------------------------

// RX_EQ_DBG_TRIG_DATA1 desc:  This is an RX EQ debug CSR. This is the data for bits [127:64] of the
// RX Triggered State Cache being accessed with the
// RX_EQ_TRIG_STATE_ADDR register. The data from this CSR is written to
// the cache if the write bit is active in that CSR, or this CSR will
// contain the read data if the write bit is not active.
typedef volatile union {
    struct {
        uint64_t  Data                 :  64;    // 

    };
    uint64_t                         val;
} RX_EQ_DBG_TRIG_DATA1_t;

// --------------------------------------------------------------------------------------------------------------------------------

// RX_EQ_DBG_TRIG_DATA2 desc:  This is an RX EQ debug CSR. This is the data for bits [191:128] of
// the RX Triggered State Cache being accessed with the
// RX_EQ_TRIG_STATE_ADDR register. The data from this CSR is written to
// the cache if the write bit is active in that CSR, or this CSR will
// contain the read data if the write bit is not active.
typedef volatile union {
    struct {
        uint64_t  Data                 :  64;    // 

    };
    uint64_t                         val;
} RX_EQ_DBG_TRIG_DATA2_t;

// --------------------------------------------------------------------------------------------------------------------------------

// RX_EQ_DBG_TRIG_DATA3 desc:  This is an RX EQ debug CSR. This is the data for bits [255:192] of
// the RX Triggered State Cache being accessed with the
// RX_EQ_TRIG_STATE_ADDR register. The data from this CSR is written to
// the cache if the write bit is active in that CSR, or this CSR will
// contain the read data if the write bit is not active.
typedef volatile union {
    struct {
        uint64_t  Data                 :  64;    // 

    };
    uint64_t                         val;
} RX_EQ_DBG_TRIG_DATA3_t;

// --------------------------------------------------------------------------------------------------------------------------------

// RX_EQ_DBG_TRIG_DATA4 desc:  This is an RX EQ debug CSR. This is the data for bits [287:256] of
// the RX Triggered State Cache being accessed with the
// RX_EQ_TRIG_STATE_ADDR register. This is the ECC for the data being
// accessed. The data from this CSR is written to the cache if the write
// bit is active in that CSR, or this CSR will contain the read data if
// the write bit is not active.
typedef volatile union {
    struct {
        uint64_t  Ecc                  :  32;    // 
        uint64_t  Reserved_63_32       :  32;    // 

    };
    uint64_t                         val;
} RX_EQ_DBG_TRIG_DATA4_t;

// --------------------------------------------------------------------------------------------------------------------------------

// RX_EQ_ERR_DESC_MBE desc:  MBE error counts from the EQ Descriptor Cache.
typedef volatile union {
    struct {
        uint64_t  syndrome             :   8;    //  Syndrome of last MBE
        uint64_t  address              :  12;    //  Address of last MBE
        uint64_t  qword                :   1;    //  QWord position of last MBE
        uint64_t  mbe_cnt              :   8;    //  Saturating counter of MBE's
                                                 // from all sources
        uint64_t  Reserved_63_29       :  35;    //  Reserved

    };
    uint64_t                         val;
} RX_EQ_ERR_DESC_MBE_t;

// --------------------------------------------------------------------------------------------------------------------------------

// RX_EQ_ERR_TRIG_MBE desc:  MBE error counts from the Triggered State Cache.
typedef volatile union {
    struct {
        uint64_t  syndrome             :   8;    //  Syndrome of last MBE
        uint64_t  address              :  10;    //  Address of last MBE
        uint64_t  qword                :   2;    //  QWord position of last MBE
        uint64_t  mbe_cnt              :   8;    //  Saturating counter of MBE's
                                                 // from all sources
        uint64_t  Reserved_63_28       :  36;    //  Reserved

    };
    uint64_t                         val;
} RX_EQ_ERR_TRIG_MBE_t;

// --------------------------------------------------------------------------------------------------------------------------------

// starting the array instantiation section
typedef struct {
    RX_EQ_CSR1_t               RX_EQ_CSR1;       // offset 4'h0, width 64
    RX_EQ_DESC_CACHE_ADDR_t    RX_EQ_DESC_CACHE_ADDR; // offset 4'h8, width 64
    RX_EQ_DBG_DESC_DATA0_t     RX_EQ_DBG_DESC_DATA0; // offset 8'h10, width 64
    RX_EQ_DBG_DESC_DATA1_t     RX_EQ_DBG_DESC_DATA1; // offset 8'h18, width 64
    RX_EQ_DBG_DESC_DATA2_t     RX_EQ_DBG_DESC_DATA2; // offset 8'h20, width 64
    RX_EQ_TRIG_STATE_ADDR_t    RX_EQ_TRIG_STATE_ADDR; // offset 8'h28, width 64
    RX_EQ_DBG_TRIG_DATA0_t     RX_EQ_DBG_TRIG_DATA0; // offset 8'h30, width 64
    RX_EQ_DBG_TRIG_DATA1_t     RX_EQ_DBG_TRIG_DATA1; // offset 8'h38, width 64
    RX_EQ_DBG_TRIG_DATA2_t     RX_EQ_DBG_TRIG_DATA2; // offset 8'h40, width 64
    RX_EQ_DBG_TRIG_DATA3_t     RX_EQ_DBG_TRIG_DATA3; // offset 8'h48, width 64
    RX_EQ_DBG_TRIG_DATA4_t     RX_EQ_DBG_TRIG_DATA4; // offset 8'h50, width 64
    RX_EQ_ERR_DESC_MBE_t       RX_EQ_ERR_DESC_MBE; // offset 8'h58, width 64
    RX_EQ_ERR_TRIG_MBE_t       RX_EQ_ERR_TRIG_MBE; // offset 8'h60, width 64
} fxr_rx_eq_csrs_t;                              // size:  8'h68
