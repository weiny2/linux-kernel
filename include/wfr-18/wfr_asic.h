/*
* Autogenerated by i_csrs.pl on Wed Oct 23 06:30:05 2013
* 
* i_csrs.pl Version 1.2 last modified on Wednesday 10/23/13 06:29:45.
*/
#define ASIC_OFFSET                                                       0x0000000
#define ASIC_NUM_SCRATCH                                                  4
#define ASIC_MAX_SCRATCH                                                  3
/*
* Table #6 of 231_ASIC_Registers.xml - ASIC_CFG_SBUS_REQUEST
* SBus request interface (see SBus Master spec).
*/
#define WFR_ASIC_CFG_SBUS_REQUEST                                         (WFR_ASIC + 0x000000000000)
#define WFR_ASIC_CFG_SBUS_REQUEST_RESETCSR                                0x0000000000000000ull
#define WFR_ASIC_CFG_SBUS_REQUEST_DATA_IN_SHIFT                           32
#define WFR_ASIC_CFG_SBUS_REQUEST_DATA_IN_MASK                            0xFFFFFFFFull
#define WFR_ASIC_CFG_SBUS_REQUEST_DATA_IN_SMASK                           0xFFFFFFFF00000000ull
#define WFR_ASIC_CFG_SBUS_REQUEST_COMMAND_SHIFT                           16
#define WFR_ASIC_CFG_SBUS_REQUEST_COMMAND_MASK                            0xFFull
#define WFR_ASIC_CFG_SBUS_REQUEST_COMMAND_SMASK                           0xFF0000ull
#define WFR_ASIC_CFG_SBUS_REQUEST_DATA_ADDR_SHIFT                         8
#define WFR_ASIC_CFG_SBUS_REQUEST_DATA_ADDR_MASK                          0xFFull
#define WFR_ASIC_CFG_SBUS_REQUEST_DATA_ADDR_SMASK                         0xFF00ull
#define WFR_ASIC_CFG_SBUS_REQUEST_RECEIVER_ADDR_SHIFT                     0
#define WFR_ASIC_CFG_SBUS_REQUEST_RECEIVER_ADDR_MASK                      0xFFull
#define WFR_ASIC_CFG_SBUS_REQUEST_RECEIVER_ADDR_SMASK                     0xFFull
/*
* Table #7 of 231_ASIC_Registers.xml - ASIC_CFG_SBUS_EXECUTE
* SBus request interface execution bits (see SBus Master spec).
*/
#define WFR_ASIC_CFG_SBUS_EXECUTE                                         (WFR_ASIC + 0x000000000008)
#define WFR_ASIC_CFG_SBUS_EXECUTE_RESETCSR                                0x0000000000000000ull
#define WFR_ASIC_CFG_SBUS_EXECUTE_FAST_MODE_SHIFT                         1
#define WFR_ASIC_CFG_SBUS_EXECUTE_FAST_MODE_MASK                          0x1ull
#define WFR_ASIC_CFG_SBUS_EXECUTE_FAST_MODE_SMASK                         0x2ull
#define WFR_ASIC_CFG_SBUS_EXECUTE_EXECUTE_SHIFT                           0
#define WFR_ASIC_CFG_SBUS_EXECUTE_EXECUTE_MASK                            0x1ull
#define WFR_ASIC_CFG_SBUS_EXECUTE_EXECUTE_SMASK                           0x1ull
/*
* Table #8 of 231_ASIC_Registers.xml - ASIC_STS_SBUS_RESULT
* SBus request interface result data (see SBus Master spec).
*/
#define WFR_ASIC_STS_SBUS_RESULT                                          (WFR_ASIC + 0x000000000010)
#define WFR_ASIC_STS_SBUS_RESULT_RESETCSR                                 0x0000000000000000ull
#define WFR_ASIC_STS_SBUS_RESULT_DATA_OUT_SHIFT                           32
#define WFR_ASIC_STS_SBUS_RESULT_DATA_OUT_MASK                            0xFFFFFFFFull
#define WFR_ASIC_STS_SBUS_RESULT_DATA_OUT_SMASK                           0xFFFFFFFF00000000ull
#define WFR_ASIC_STS_SBUS_RESULT_RESULT_CODE_SHIFT                        2
#define WFR_ASIC_STS_SBUS_RESULT_RESULT_CODE_MASK                         0x7ull
#define WFR_ASIC_STS_SBUS_RESULT_RESULT_CODE_SMASK                        0x1Cull
#define WFR_ASIC_STS_SBUS_RESULT_RCV_DATA_VALID_SHIFT                     1
#define WFR_ASIC_STS_SBUS_RESULT_RCV_DATA_VALID_MASK                      0x1ull
#define WFR_ASIC_STS_SBUS_RESULT_RCV_DATA_VALID_SMASK                     0x2ull
#define WFR_ASIC_STS_SBUS_RESULT_DONE_SHIFT                               0
#define WFR_ASIC_STS_SBUS_RESULT_DONE_MASK                                0x1ull
#define WFR_ASIC_STS_SBUS_RESULT_DONE_SMASK                               0x1ull
/*
* Table #9 of 231_ASIC_Registers.xml - ASIC_STS_SBUS_COUNTERS
* Counters for SBus EXECUTE and RCV_DATA_VALID bits. RCV_DATA_VALID could be 
* cleared before software gets a chance to read it, so these counters can be 
* used to determine if a transaction completed (when EXECUTE_CNT and 
* RCV_DATA_VALID_CNT match).
*/
#define WFR_ASIC_STS_SBUS_COUNTERS                                        (WFR_ASIC + 0x000000000018)
#define WFR_ASIC_STS_SBUS_COUNTERS_RESETCSR                               0x0000000000000000ull
#define WFR_ASIC_STS_SBUS_COUNTERS_RCV_DATA_VALID_CNT_SHIFT               16
#define WFR_ASIC_STS_SBUS_COUNTERS_RCV_DATA_VALID_CNT_MASK                0xFFFFull
#define WFR_ASIC_STS_SBUS_COUNTERS_RCV_DATA_VALID_CNT_SMASK               0xFFFF0000ull
#define WFR_ASIC_STS_SBUS_COUNTERS_EXECUTE_CNT_SHIFT                      0
#define WFR_ASIC_STS_SBUS_COUNTERS_EXECUTE_CNT_MASK                       0xFFFFull
#define WFR_ASIC_STS_SBUS_COUNTERS_EXECUTE_CNT_SMASK                      0xFFFFull
/*
* Table #10 of 231_ASIC_Registers.xml - ASIC_CFG_SCRATCH
* These scratch registers are read/write and for software use only. Since these 
* scratch CSRs are in the ASIC block, they are shared by both HFIs. This can be 
* potentially used by host software to communicate software-defined 
* status/control information between the host software for HFI0 and the host 
* software for HFI1.
*/
#define WFR_ASIC_CFG_SCRATCH                                              (WFR_ASIC + 0x000000000020)
#define WFR_ASIC_CFG_SCRATCH_RESETCSR                                     0x0000000000000000ull
#define WFR_ASIC_CFG_SCRATCH_SCRATCH_SHIFT                                0
#define WFR_ASIC_CFG_SCRATCH_SCRATCH_MASK                                 0xFFFFFFFFFFFFFFFFull
#define WFR_ASIC_CFG_SCRATCH_SCRATCH_SMASK                                0xFFFFFFFFFFFFFFFFull
/*
* Table #11 of 231_ASIC_Registers.xml - ASIC_CFG_MUTEX
* This CSR provides state and a special atomic write behavior that can be used 
* by host software to implement a mutex. It provides a single mutual exclusion 
* lock that can be used to mediate two different 'users'.
*/
#define WFR_ASIC_CFG_MUTEX                                                (WFR_ASIC + 0x000000000040)
#define WFR_ASIC_CFG_MUTEX_RESETCSR                                       0x0000000000000000ull
#define WFR_ASIC_CFG_MUTEX_USER_SHIFT                                     0
#define WFR_ASIC_CFG_MUTEX_USER_MASK                                      0x3ull
#define WFR_ASIC_CFG_MUTEX_USER_SMASK                                     0x3ull
/*
* Table #13 of 231_ASIC_Registers.xml - ASIC_PCIE_SD_HOST_CMD
* This CSR specifies the command interrupt that is issued to all of the PCIe 
* SerDes. Note that these are not interrupts to the host. Interrupt is the name 
* given by the IP vendor for commands given to the SerDes macro.
*/
#define WFR_ASIC_PCIE_SD_HOST_CMD                                         (WFR_ASIC + 0x000000000100)
#define WFR_ASIC_PCIE_SD_HOST_CMD_RESETCSR                                0x0000000000000000ull
#define WFR_ASIC_PCIE_SD_HOST_CMD_INTRPT_CMD_SHIFT                        0
#define WFR_ASIC_PCIE_SD_HOST_CMD_INTRPT_CMD_MASK                         0x3ull
#define WFR_ASIC_PCIE_SD_HOST_CMD_INTRPT_CMD_SMASK                        0x3ull
/*
* Table #14 of 231_ASIC_Registers.xml - ASIC_PCIE_SD_HOST_STATUS
* This CSR returns the status of the firmware download.
*/
#define WFR_ASIC_PCIE_SD_HOST_STATUS                                      (WFR_ASIC + 0x000000000108)
#define WFR_ASIC_PCIE_SD_HOST_STATUS_RESETCSR                             0x0000000000000000ull
#define WFR_ASIC_PCIE_SD_HOST_STATUS_FW_DNLD_STS_SHIFT                    0
#define WFR_ASIC_PCIE_SD_HOST_STATUS_FW_DNLD_STS_MASK                     0x3ull
#define WFR_ASIC_PCIE_SD_HOST_STATUS_FW_DNLD_STS_SMASK                    0x3ull
/*
* Table #15 of 231_ASIC_Registers.xml - ASIC_PCIE_SD_INTRPT_DATA_CODE
* This CSR specifies the 16-bit code and 16-bit data for the interrupt command. 
* The interpretation of the code and data is specified by the Avago SPICO 
* Firmware User Documentation..
*/
#define WFR_ASIC_PCIE_SD_INTRPT_DATA_CODE                                 (WFR_ASIC + 0x000000000110)
#define WFR_ASIC_PCIE_SD_INTRPT_DATA_CODE_RESETCSR                        0x0000000000000000ull
#define WFR_ASIC_PCIE_SD_INTRPT_DATA_CODE_INTRPT_CODE_SHIFT               16
#define WFR_ASIC_PCIE_SD_INTRPT_DATA_CODE_INTRPT_CODE_MASK                0xFFFFull
#define WFR_ASIC_PCIE_SD_INTRPT_DATA_CODE_INTRPT_CODE_SMASK               0xFFFF0000ull
#define WFR_ASIC_PCIE_SD_INTRPT_DATA_CODE_INTRPT_DATA_SHIFT               0
#define WFR_ASIC_PCIE_SD_INTRPT_DATA_CODE_INTRPT_DATA_MASK                0xFFFFull
#define WFR_ASIC_PCIE_SD_INTRPT_DATA_CODE_INTRPT_DATA_SMASK               0xFFFFull
/*
* Table #16 of 231_ASIC_Registers.xml - ASIC_PCIE_SD_INTRPT_ENABLE
* This CSR specifies the set of PCIe SerDes macros that the interrupt command is 
* issued to.
*/
#define WFR_ASIC_PCIE_SD_INTRPT_ENABLE                                    (WFR_ASIC + 0x000000000118)
#define WFR_ASIC_PCIE_SD_INTRPT_ENABLE_RESETCSR                           0x0000000000000000ull
#define WFR_ASIC_PCIE_SD_INTRPT_ENABLE_HFI1_INTRPT_ENABLE_SHIFT           16
#define WFR_ASIC_PCIE_SD_INTRPT_ENABLE_HFI1_INTRPT_ENABLE_MASK            0xFFFFull
#define WFR_ASIC_PCIE_SD_INTRPT_ENABLE_HFI1_INTRPT_ENABLE_SMASK           0xFFFF0000ull
#define WFR_ASIC_PCIE_SD_INTRPT_ENABLE_HFI0_INTRPT_ENABLE_SHIFT           0
#define WFR_ASIC_PCIE_SD_INTRPT_ENABLE_HFI0_INTRPT_ENABLE_MASK            0xFFFFull
#define WFR_ASIC_PCIE_SD_INTRPT_ENABLE_HFI0_INTRPT_ENABLE_SMASK           0xFFFFull
/*
* Table #17 of 231_ASIC_Registers.xml - ASIC_PCIE_SD_INTRPT_PROGRESS
* This CSR indicates the progress of each of the PCIe SerDes macros that the 
* interrupt command has been issued to. Note that only the enabled SerDes will 
* process an interrupt command. This CSR is for diagnostic purpose and the 
* ASIC_PCIE_SD_INTRPT_STATUS should be used to determine completion of an 
* interrupt command.
*/
#define WFR_ASIC_PCIE_SD_INTRPT_PROGRESS                                  (WFR_ASIC + 0x000000000120)
#define WFR_ASIC_PCIE_SD_INTRPT_PROGRESS_RESETCSR                         0x0000000000000000ull
#define WFR_ASIC_PCIE_SD_INTRPT_PROGRESS_HFI1_INTRPT_PROGRESS_SHIFT       16
#define WFR_ASIC_PCIE_SD_INTRPT_PROGRESS_HFI1_INTRPT_PROGRESS_MASK        0xFFFFull
#define WFR_ASIC_PCIE_SD_INTRPT_PROGRESS_HFI1_INTRPT_PROGRESS_SMASK       0xFFFF0000ull
#define WFR_ASIC_PCIE_SD_INTRPT_PROGRESS_HFI0_INTRPT_PROGRESS_SHIFT       0
#define WFR_ASIC_PCIE_SD_INTRPT_PROGRESS_HFI0_INTRPT_PROGRESS_MASK        0xFFFFull
#define WFR_ASIC_PCIE_SD_INTRPT_PROGRESS_HFI0_INTRPT_PROGRESS_SMASK       0xFFFFull
/*
* Table #18 of 231_ASIC_Registers.xml - ASIC_PCIE_SD_INTRPT_STATUS
* This CSR is used to determine the completion of the interrupt commands to each 
* of the PCIe SerDes macros. Once completed, the interrupt respond data, if any, 
* is available in the PCIE_SD_INTRPT_RSPD_DATA registers. Note that only the 
* enabled SerDes will report a status.
*/
#define WFR_ASIC_PCIE_SD_INTRPT_STATUS                                    (WFR_ASIC + 0x000000000128)
#define WFR_ASIC_PCIE_SD_INTRPT_STATUS_RESETCSR                           0x0000000000000000ull
#define WFR_ASIC_PCIE_SD_INTRPT_STATUS_HFI1_INTRPT_STS_SHIFT              16
#define WFR_ASIC_PCIE_SD_INTRPT_STATUS_HFI1_INTRPT_STS_MASK               0xFFFFull
#define WFR_ASIC_PCIE_SD_INTRPT_STATUS_HFI1_INTRPT_STS_SMASK              0xFFFF0000ull
#define WFR_ASIC_PCIE_SD_INTRPT_STATUS_HFI0_INTRPT_STS_SHIFT              0
#define WFR_ASIC_PCIE_SD_INTRPT_STATUS_HFI0_INTRPT_STS_MASK               0xFFFFull
#define WFR_ASIC_PCIE_SD_INTRPT_STATUS_HFI0_INTRPT_STS_SMASK              0xFFFFull
/*
* Table #19 of 231_ASIC_Registers.xml - ASIC_HFI0_PCIE_SD_INTRPT_RSPD_DATA
* This CSR contains the response data from each of the PCIe SerDes after 
* executing the interrupt command. HFI0 has 16 PCIe SerDes and each returns a 
* 16-bit value. Lanes 0-3 are packed into the first CSR, lanes 4-7 in the next 
* CSR, etc. The response data is valid after an interrupt command has 
* successfully completed. Note that only the enabled SerDes will return response 
* data. The interpretation of the response data is specified by the Avago SPICO 
* Firmware User Documentation..
*/
#define WFR_ASIC_HFI0_PCIE_SD_INTRPT_RSPD_DATA                            (WFR_ASIC + 0x000000000130)
#define WFR_ASIC_HFI0_PCIE_SD_INTRPT_RSPD_DATA_RESETCSR                   0x0000000000000000ull
#define WFR_ASIC_HFI0_PCIE_SD_INTRPT_RSPD_DATA_SD3_INTRPT_RSPD_DATA_SHIFT 48
#define WFR_ASIC_HFI0_PCIE_SD_INTRPT_RSPD_DATA_SD3_INTRPT_RSPD_DATA_MASK  0xFFFFull
#define WFR_ASIC_HFI0_PCIE_SD_INTRPT_RSPD_DATA_SD3_INTRPT_RSPD_DATA_SMASK 0xFFFF000000000000ull
#define WFR_ASIC_HFI0_PCIE_SD_INTRPT_RSPD_DATA_SD2_INTRPT_RSPD_DATA_SHIFT 32
#define WFR_ASIC_HFI0_PCIE_SD_INTRPT_RSPD_DATA_SD2_INTRPT_RSPD_DATA_MASK  0xFFFFull
#define WFR_ASIC_HFI0_PCIE_SD_INTRPT_RSPD_DATA_SD2_INTRPT_RSPD_DATA_SMASK 0xFFFF00000000ull
#define WFR_ASIC_HFI0_PCIE_SD_INTRPT_RSPD_DATA_SD1_INTRPT_RSPD_DATA_SHIFT 16
#define WFR_ASIC_HFI0_PCIE_SD_INTRPT_RSPD_DATA_SD1_INTRPT_RSPD_DATA_MASK  0xFFFFull
#define WFR_ASIC_HFI0_PCIE_SD_INTRPT_RSPD_DATA_SD1_INTRPT_RSPD_DATA_SMASK 0xFFFF0000ull
#define WFR_ASIC_HFI0_PCIE_SD_INTRPT_RSPD_DATA_SD0_INTRPT_RSPD_DATA_SHIFT 0
#define WFR_ASIC_HFI0_PCIE_SD_INTRPT_RSPD_DATA_SD0_INTRPT_RSPD_DATA_MASK  0xFFFFull
#define WFR_ASIC_HFI0_PCIE_SD_INTRPT_RSPD_DATA_SD0_INTRPT_RSPD_DATA_SMASK 0xFFFFull
/*
* Table #20 of 231_ASIC_Registers.xml - ASIC_HFI1_PCIE_SD_INTRPT_RSPD_DATA
* This CSR specifies the response data from the PCIe SerDes after executing the 
* interrupt command. HFI1 has 16 PCIe SerDes and each returns a 16-bit value. 
* Lanes 0-3 are packed into the first CSR, lanes 4-7 in the next CSR, etc. The 
* response data is valid after an interrupt command has successfully completed. 
* Note that only the enabled SerDes will return response data. The 
* interpretation of the response data is specified by the Avago SPICO Firmware 
* User Documentation..
*/
#define WFR_ASIC_HFI1_PCIE_SD_INTRPT_RSPD_DATA                            (WFR_ASIC + 0x000000000150)
#define WFR_ASIC_HFI1_PCIE_SD_INTRPT_RSPD_DATA_RESETCSR                   0x0000000000000000ull
#define WFR_ASIC_HFI1_PCIE_SD_INTRPT_RSPD_DATA_SD3_INTRPT_RSPD_DATA_SHIFT 48
#define WFR_ASIC_HFI1_PCIE_SD_INTRPT_RSPD_DATA_SD3_INTRPT_RSPD_DATA_MASK  0xFFFFull
#define WFR_ASIC_HFI1_PCIE_SD_INTRPT_RSPD_DATA_SD3_INTRPT_RSPD_DATA_SMASK 0xFFFF000000000000ull
#define WFR_ASIC_HFI1_PCIE_SD_INTRPT_RSPD_DATA_SD2_INTRPT_RSPD_DATA_SHIFT 32
#define WFR_ASIC_HFI1_PCIE_SD_INTRPT_RSPD_DATA_SD2_INTRPT_RSPD_DATA_MASK  0xFFFFull
#define WFR_ASIC_HFI1_PCIE_SD_INTRPT_RSPD_DATA_SD2_INTRPT_RSPD_DATA_SMASK 0xFFFF00000000ull
#define WFR_ASIC_HFI1_PCIE_SD_INTRPT_RSPD_DATA_SD1_INTRPT_RSPD_DATA_SHIFT 16
#define WFR_ASIC_HFI1_PCIE_SD_INTRPT_RSPD_DATA_SD1_INTRPT_RSPD_DATA_MASK  0xFFFFull
#define WFR_ASIC_HFI1_PCIE_SD_INTRPT_RSPD_DATA_SD1_INTRPT_RSPD_DATA_SMASK 0xFFFF0000ull
#define WFR_ASIC_HFI1_PCIE_SD_INTRPT_RSPD_DATA_SD0_INTRPT_RSPD_DATA_SHIFT 0
#define WFR_ASIC_HFI1_PCIE_SD_INTRPT_RSPD_DATA_SD0_INTRPT_RSPD_DATA_MASK  0xFFFFull
#define WFR_ASIC_HFI1_PCIE_SD_INTRPT_RSPD_DATA_SD0_INTRPT_RSPD_DATA_SMASK 0xFFFFull
