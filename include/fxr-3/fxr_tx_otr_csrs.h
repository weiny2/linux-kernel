//                                                                             
// File:       fxr_tx_otr_csrs.h                                               
// Creator:    pvesvslx                                                        
// Time:       Tuesday Sep 16, 2014 [12:30:00 am]                              
//                                                                             
// Path:       /tmp/pvesvslx/nebulon_run/28430                                 
// Arguments:  /p/com/eda/denali/blueprint/3.7.4/Linux/blueprint -chdr -I      
//             /p/slx/eda/intel/nebulon/2.05_fdo/include -I                    
//             /p/slx/pvesv/fxr_autogen/fxr fxr_tx_otr.rdl                     
//                                                                             
// Sources:    /tmp/pvesvslx/nebulon_run/28430/fxr_tx_otr.rdlh                 
//             /tmp/pvesvslx/nebulon_run/28430/lib_udp.rdl                     
//             /tmp/pvesvslx/nebulon_run/28430/fxr_tx_otr.rdl                  
//             /p/com/eda/intel/nebulon/2.05p1/generators/generator_common.pm  
//             /p/com/eda/intel/nebulon/2.05p1/generators/chdr.pm              
//                                                                             
// Blueprint:   3.7.4 (Tue Jun 23 00:17:01 PDT 2009)                           
// Machine:    scci56217                                                       
// OS:         Linux 2.6.16.60-0.58.1.3835.0.PTF.638363-smp                    
// Description:                                                                
//                                                                             
//Transmit OTR address map                                                     
//                                                                             
// Copyright (C) 2014 Denali Software Inc.  All rights reserved                
// THIS FILE IS AUTOMATICALLY GENERATED BY DENALI BLUEPRINT, DO NOT EDIT       
//                                                                             



// CFG_MC0_PREFRAG_OPB_FIFO_CRDTS desc:  This CSR contains the configuration parameters necessary to configure
// the number of credits in the Pre-Fragmentation Engine OPB Input
// Queues for MC0.
typedef volatile union {
    struct {
        uint64_t  TC0_CRDTS            :   8;    //  MC0/TC0 Pre-fragmentation OPB
                                                 // Input Queue Credits
        uint64_t  TC1_CRDTS            :   8;    //  MC0/TC1 Pre-fragmentation OPB
                                                 // Input Queue Credits
        uint64_t  TC2_CRDTS            :   8;    //  MC0/TC2 Pre-fragmentation OPB
                                                 // Input Queue Credits
        uint64_t  TC3_CRDTS            :   8;    //  MC0/TC3 Pre-fragmentation OPB
                                                 // Input Queue Credits
        uint64_t  UNUSED_63_32         :  32;    //  Unused

    };
    uint64_t                         val;
} CFG_MC0_PREFRAG_OPB_FIFO_CRDTS_t;

// --------------------------------------------------------------------------------------------------------------------------------

// CFG_MC1_PREFRAG_OPB_FIFO_CRDTS desc:  This CSR contains the configuration parameters necessary to configure
// the number of credits in the Pre-Fragmentation Engine OPB Input
// Queues for MC1.
typedef volatile union {
    struct {
        uint64_t  TC0_CRDTS            :   8;    //  MC0/TC0 Pre-fragmentation OPB
                                                 // Input Queue Credits
        uint64_t  TC1_CRDTS            :   8;    //  MC0/TC1 Pre-fragmentation OPB
                                                 // Input Queue Credits
        uint64_t  TC2_CRDTS            :   8;    //  MC0/TC2 Pre-fragmentation OPB
                                                 // Input Queue Credits
        uint64_t  TC3_CRDTS            :   8;    //  MC0/TC3 Pre-fragmentation OPB
                                                 // Input Queue Credits
        uint64_t  UNUSED_63_32         :  32;    //  Unused

    };
    uint64_t                         val;
} CFG_MC1_PREFRAG_OPB_FIFO_CRDTS_t;

// --------------------------------------------------------------------------------------------------------------------------------

// CFG_MC0_FP_OPB_FIFO_CRDTS desc:  This CSR contains the configuration parameters necessary to configure
// the number of credits in the Fast Path OPB Input Queues for MC0.
typedef volatile union {
    struct {
        uint64_t  TC0_CRDTS            :   8;    //  MC0/TC0 Fast Path OPB Input
                                                 // Queue Credits
        uint64_t  TC1_CRDTS            :   8;    //  MC0/TC1 Fast Path OPB Input
                                                 // Queue Credits
        uint64_t  TC2_CRDTS            :   8;    //  MC0/TC2 Fast Path OPB Input
                                                 // Queue Credits
        uint64_t  TC3_CRDTS            :   8;    //  MC0/TC3 Fast Path OPB Input
                                                 // Queue Credits
        uint64_t  UNUSED_63_32         :  32;    //  Unused

    };
    uint64_t                         val;
} CFG_MC0_FP_OPB_FIFO_CRDTS_t;

// --------------------------------------------------------------------------------------------------------------------------------

// CFG_MC1_FP_OPB_FIFO_CRDTS desc:  This CSR contains the configuration parameters necessary to configure
// the number of credits in the Fast Path OPB Input Queues for MC1.
typedef volatile union {
    struct {
        uint64_t  TC0_CRDTS            :   8;    //  MC1/TC0 Fast Path OPB Input
                                                 // Queue Credits
        uint64_t  TC1_CRDTS            :   8;    //  MC1/TC1 Fast Path OPB Input
                                                 // Queue Credits
        uint64_t  TC2_CRDTS            :   8;    //  MC1/TC2 Fast Path OPB Input
                                                 // Queue Credits
        uint64_t  TC3_CRDTS            :   8;    //  MC1/TC3 Fast Path OPB Input
                                                 // Queue Credits
        uint64_t  UNUSED_63_32         :  32;    //  Unused

    };
    uint64_t                         val;
} CFG_MC1_FP_OPB_FIFO_CRDTS_t;

// --------------------------------------------------------------------------------------------------------------------------------

// CFG_MC1P_FP_OPB_FIFO_CRDTS desc:  This CSR contains the configuration parameters necessary to configure
// the number of credits in the Fast Path OPB Input Queues for MC1'.
typedef volatile union {
    struct {
        uint64_t  TC0_CRDTS            :   8;    //  MC1'/TC0 Fast Path OPB Input
                                                 // Queue Credits
        uint64_t  TC1_CRDTS            :   8;    //  MC1'/TC1 Fast Path OPB Input
                                                 // Queue Credits
        uint64_t  TC2_CRDTS            :   8;    //  MC1'/TC2 Fast Path OPB Input
                                                 // Queue Credits
        uint64_t  TC3_CRDTS            :   8;    //  MC1'/TC3 Fast Path OPB Input
                                                 // Queue Credits
        uint64_t  UNUSED_63_32         :  32;    //  Unused

    };
    uint64_t                         val;
} CFG_MC1P_FP_OPB_FIFO_CRDTS_t;

// --------------------------------------------------------------------------------------------------------------------------------

// CFG_MC0_POSTFRAG_OPB_FIFO_CRDTS desc:  This CSR contains the configuration parameters necessary to configure
// the number of credits in the Post-Fragmentation Engine OPB Input
// Queues for MC0.
typedef volatile union {
    struct {
        uint64_t  TC0_CRDTS            :   8;    //  MC0/TC0 Post-fragmentation
                                                 // OPB Input Queue Credits
        uint64_t  TC1_CRDTS            :   8;    //  MC0/TC1 Post-fragmentation
                                                 // OPB Input Queue Credits
        uint64_t  TC2_CRDTS            :   8;    //  MC0/TC2 Post-fragmentation
                                                 // OPB Input Queue Credits
        uint64_t  TC3_CRDTS            :   8;    //  MC0/TC3 Post-fragmentation
                                                 // OPB Input Queue Credits
        uint64_t  UNUSED_63_32         :  32;    //  Unused

    };
    uint64_t                         val;
} CFG_MC0_POSTFRAG_OPB_FIFO_CRDTS_t;

// --------------------------------------------------------------------------------------------------------------------------------

// CFG_MC1_POSTFRAG_OPB_FIFO_CRDTS desc:  This CSR contains the configuration parameters necessary to configure
// the number of credits in the Post-Fragmentation Engine OPB Input
// Queues for MC1.
typedef volatile union {
    struct {
        uint64_t  TC0_CRDTS            :   8;    //  MC1/TC0 Post-fragmentation
                                                 // OPB Input Queue Credits
        uint64_t  TC1_CRDTS            :   8;    //  MC1/TC1 Post-fragmentation
                                                 // OPB Input Queue Credits
        uint64_t  TC2_CRDTS            :   8;    //  MC1/TC2 Post-fragmentation
                                                 // OPB Input Queue Credits
        uint64_t  TC3_CRDTS            :   8;    //  MC1/TC3 Post-fragmentation
                                                 // OPB Input Queue Credits
        uint64_t  UNUSED_63_32         :  32;    //  Unused

    };
    uint64_t                         val;
} CFG_MC1_POSTFRAG_OPB_FIFO_CRDTS_t;

// --------------------------------------------------------------------------------------------------------------------------------

// CFG_DMA_FIFO_CRDTS desc:  This CSR contains the configuration parameters necessary to configure
// the number of credits in DMA Input Queues.
typedef volatile union {
    struct {
        uint64_t  MC0TC0_CRDTS         :   8;    //  MC0/TC0 Post-fragmentation
                                                 // OPB Input Queue Credits
        uint64_t  MC0TC1_CRDTS         :   8;    //  MC0/TC1 Post-fragmentation
                                                 // OPB Input Queue Credits
        uint64_t  MC0TC2_CRDTS         :   8;    //  MC0/TC2 Post-fragmentation
                                                 // OPB Input Queue Credits
        uint64_t  MC0TC3_CRDTS         :   8;    //  MC0/TC3 Post-fragmentation
                                                 // OPB Input Queue Credits
        uint64_t  MC1TC0_CRDTS         :   8;    //  MC1/TC0 Post-fragmentation
                                                 // OPB Input Queue Credits
        uint64_t  MC1TC1_CRDTS         :   8;    //  MC1/TC1 Post-fragmentation
                                                 // OPB Input Queue Credits
        uint64_t  MC1TC2_CRDTS         :   8;    //  MC1/TC2 Post-fragmentation
                                                 // OPB Input Queue Credits
        uint64_t  MC1TC3_CRDTS         :   8;    //  MC1/TC3 Post-fragmentation
                                                 // OPB Input Queue Credits

    };
    uint64_t                         val;
} CFG_DMA_FIFO_CRDTS_t;

// --------------------------------------------------------------------------------------------------------------------------------

// CFG_RXDMA_INT desc:  This CSR contains the configuration parameters necessary to configure
// the TXOTR to RXDMA Interface.
typedef volatile union {
    struct {
        uint64_t  CRDTS                :   8;    //  TXOTR to RXDMA Credits
        uint64_t  UNUSED_63_8          :  56;    //  Unused

    };
    uint64_t                         val;
} CFG_RXDMA_INT_t;

// --------------------------------------------------------------------------------------------------------------------------------

// CFG_TXCI_INT desc:  This CSR contains the configuration parameters necessary to configure
// the TXOTR to TXCI Interface.
typedef volatile union {
    struct {
        uint64_t  CRDTS                :   9;    //  TXOTR to TXCI Memory
                                                 // Read/Write Credits
        uint64_t  UNUSED_63_9          :  55;    //  Unused

    };
    uint64_t                         val;
} CFG_TXCI_INT_t;

// --------------------------------------------------------------------------------------------------------------------------------

// CFG_AT_INT desc:  This CSR contains the configuration parameters necessary to configure
// the TXOTR to AT Interface.
typedef volatile union {
    struct {
        uint64_t  CRDTS                :   9;    //  TXOTR to AT translation
                                                 // request credits
        uint64_t  UNUSED_63_9          :  55;    //  Unused

    };
    uint64_t                         val;
} CFG_AT_INT_t;

// --------------------------------------------------------------------------------------------------------------------------------

// CFG_MSGID_1 desc:  This CSR contains the configuration parameters necessary to set the
// number of reserved MSG_IDs for each MC/TC combination.
typedef volatile union {
    struct {
        uint64_t  RSVD_MC0_TC0         :   8;    //  The number of MC0/TC0
                                                 // Reserved Message Identifiers
        uint64_t  RSVD_MC0_TC1         :   8;    //  The number of MC0/TC1
                                                 // Reserved Message Identifiers
        uint64_t  RSVD_MC0_TC2         :   8;    //  The number of MC0/TC2
                                                 // Reserved Message Identifiers
        uint64_t  RSVD_MC0_TC3         :   8;    //  The number of MC0/TC3
                                                 // Reserved Message Identifiers
        uint64_t  RSVD_MC1_TC0         :   8;    //  The number of MC1/TC0
                                                 // Reserved Message Identifiers
        uint64_t  RSVD_MC1_TC1         :   8;    //  The number of MC1/TC1
                                                 // Reserved Message Identifiers
        uint64_t  RSVD_MC1_TC2         :   8;    //  The number of MC1/TC2
                                                 // Reserved Message Identifiers
        uint64_t  RSVD_MC1_TC3         :   8;    //  The number of MC1/TC3
                                                 // Reserved Message Identifiers

    };
    uint64_t                         val;
} CFG_MSGID_1_t;

// --------------------------------------------------------------------------------------------------------------------------------

// CFG_MSGID_2 desc:  This CSR contains the configuration parameters necessary to set the
// total shared Message Identifiers that can be allocated
// simultaneously.
typedef volatile union {
    struct {
        uint64_t  SHARED               :  14;    //  The number of Shared Message
                                                 // Identifiers
        uint64_t  UNUSED_63_14         :  50;    //  Unused

    };
    uint64_t                         val;
} CFG_MSGID_2_t;

// --------------------------------------------------------------------------------------------------------------------------------

// CFG_PKTID_1 desc:  This CSR contains the configuration parameters necessary to set the
// number of reserved PKT_IDs for each MC/TC combination.
typedef volatile union {
    struct {
        uint64_t  RSVD_MC0_TC0         :   8;    //  The number of MC0/TC0
                                                 // Reserved Packet Identifiers
        uint64_t  RSVD_MC0_TC1         :   8;    //  The number of MC0/TC1
                                                 // Reserved Packet Identifiers
        uint64_t  RSVD_MC0_TC2         :   8;    //  The number of MC0/TC2
                                                 // Reserved Packet Identifiers
        uint64_t  RSVD_MC0_TC3         :   8;    //  The number of MC0/TC3
                                                 // Reserved Packet Identifiers
        uint64_t  RSVD_MC1_TC0         :   8;    //  The number of MC1/TC0
                                                 // Reserved Packet Identifiers
        uint64_t  RSVD_MC1_TC1         :   8;    //  The number of MC1/TC1
                                                 // Reserved Packet Identifiers
        uint64_t  RSVD_MC1_TC2         :   8;    //  The number of MC1/TC2
                                                 // Reserved Packet Identifiers
        uint64_t  RSVD_MC1_TC3         :   8;    //  The number of MC1/TC3
                                                 // Reserved Packet Identifiers

    };
    uint64_t                         val;
} CFG_PKTID_1_t;

// --------------------------------------------------------------------------------------------------------------------------------

// CFG_PKTID_2 desc:  This CSR contains the configuration parameters necessary to set the
// total shared Packet Identifiers that can be allocated simultaneously.
typedef volatile union {
    struct {
        uint64_t  SHARED               :  14;    //  The number of Shared Packet
                                                 // Identifiers
        uint64_t  UNUSED_63_14         :  50;    //  Unused

    };
    uint64_t                         val;
} CFG_PKTID_2_t;

// --------------------------------------------------------------------------------------------------------------------------------

// CFG_OMB_FIFO_ARB desc:  This CSR contains the configuration parameters necessary to configure
// the OMB Queue Arbitration. By default the arbitration scheme for
// these queues is round robin.
typedef volatile union {
    struct {
        uint64_t  RENDEZ_PRIO_ALL      :   1;    //  If set, arbitration priority
                                                 // is given to Rendezvous
                                                 // Messages (RMessage) waiting to
                                                 // be arbitrated into the Message
                                                 // Level Tracking data path. I.e.
                                                 // All pending RMessages are
                                                 // arbitrated into the pipeline
                                                 // before any pending messages in
                                                 // the OMB Input Queues.
        uint64_t  RENDEZ_PRIO_TC       :   1;    //  If set, arbitration priority
                                                 // is given to Rendezvous
                                                 // Messages (RMessage) waiting to
                                                 // be arbitrated into the Message
                                                 // Level Tracking data path for a
                                                 // given Traffic Class. E.g. If a
                                                 // message is awaiting
                                                 // arbitration in the TC0
                                                 // Rendezvous Queue and in the
                                                 // MC0TC0 OMB Input Queue, the
                                                 // Rendezvous Queue is given
                                                 // first priority.
        uint64_t  UNUSED_63_2          :  62;    //  Unused

    };
    uint64_t                         val;
} CFG_OMB_FIFO_ARB_t;

// --------------------------------------------------------------------------------------------------------------------------------

// CFG_OPB_FIFO_GEN_ARB desc:  This CSR contains the configuration parameters necessary to configure
// the OPB Arbitration. The arbitration scheme by default is a leaky
// bucket scheme.
typedef volatile union {
    struct {
        uint64_t  UNUSED_63_0          :  64;    //  TODO

    };
    uint64_t                         val;
} CFG_OPB_FIFO_GEN_ARB_t;

// --------------------------------------------------------------------------------------------------------------------------------

// CFG_OPB_FIFO_ARB_1 desc:  This CSR contains the configuration parameters necessary to configure
// the OPB Queue Leaky Bucket Arbitration for MC0/TC0 Fast Path Queue.
// The arbitration scheme by default is a leaky bucket scheme.
typedef volatile union {
    struct {
        uint64_t  UNUSED_63_0          :  64;    //  TODO

    };
    uint64_t                         val;
} CFG_OPB_FIFO_ARB_1_t;

// --------------------------------------------------------------------------------------------------------------------------------

// CFG_OPB_FIFO_ARB_2 desc:  This CSR contains the configuration parameters necessary to configure
// the OPB Queue Leaky Bucket Arbitration for MC0/TC1 Fast Path Queue.
// The arbitration scheme by default is a leaky bucket scheme.
typedef volatile union {
    struct {
        uint64_t  UNUSED_63_0          :  64;    //  TODO

    };
    uint64_t                         val;
} CFG_OPB_FIFO_ARB_2_t;

// --------------------------------------------------------------------------------------------------------------------------------

// CFG_OPB_FIFO_ARB_3 desc:  This CSR contains the configuration parameters necessary to configure
// the OPB Queue Leaky Bucket Arbitration for MC0/TC2 Fast Path Queue.
// The arbitration scheme by default is a leaky bucket scheme.
typedef volatile union {
    struct {
        uint64_t  UNUSED_63_0          :  64;    //  TODO

    };
    uint64_t                         val;
} CFG_OPB_FIFO_ARB_3_t;

// --------------------------------------------------------------------------------------------------------------------------------

// CFG_OPB_FIFO_ARB_4 desc:  This CSR contains the configuration parameters necessary to configure
// the OPB Queue Leaky Bucket Arbitration for MC0/TC3 Fast Path Queue.
// The arbitration scheme by default is a leaky bucket scheme.
typedef volatile union {
    struct {
        uint64_t  UNUSED_63_0          :  64;    //  TODO

    };
    uint64_t                         val;
} CFG_OPB_FIFO_ARB_4_t;

// --------------------------------------------------------------------------------------------------------------------------------

// CFG_OPB_FIFO_ARB_5 desc:  This CSR contains the configuration parameters necessary to configure
// the OPB Queue Leaky Bucket Arbitration for MC1/TC0 Fast Path Queue.
// The arbitration scheme by default is a leaky bucket scheme.
typedef volatile union {
    struct {
        uint64_t  UNUSED_63_0          :  64;    //  TODO

    };
    uint64_t                         val;
} CFG_OPB_FIFO_ARB_5_t;

// --------------------------------------------------------------------------------------------------------------------------------

// CFG_OPB_FIFO_ARB_6 desc:  This CSR contains the configuration parameters necessary to configure
// the OPB Queue Leaky Bucket Arbitration for MC1/TC1 Fast Path Queue.
// The arbitration scheme by default is a leaky bucket scheme.
typedef volatile union {
    struct {
        uint64_t  UNUSED_63_0          :  64;    //  TODO

    };
    uint64_t                         val;
} CFG_OPB_FIFO_ARB_6_t;

// --------------------------------------------------------------------------------------------------------------------------------

// CFG_OPB_FIFO_ARB_7 desc:  This CSR contains the configuration parameters necessary to configure
// the OPB Queue Leaky Bucket Arbitration for MC1/TC2 Fast Path Queue.
// The arbitration scheme by default is a leaky bucket scheme.
typedef volatile union {
    struct {
        uint64_t  UNUSED_63_0          :  64;    //  TODO

    };
    uint64_t                         val;
} CFG_OPB_FIFO_ARB_7_t;

// --------------------------------------------------------------------------------------------------------------------------------

// CFG_OPB_FIFO_ARB_8 desc:  This CSR contains the configuration parameters necessary to configure
// the OPB Queue Leaky Bucket Arbitration for MC1/TC3 Fast Path Queue.
// The arbitration scheme by default is a leaky bucket scheme.
typedef volatile union {
    struct {
        uint64_t  UNUSED_63_0          :  64;    //  TODO

    };
    uint64_t                         val;
} CFG_OPB_FIFO_ARB_8_t;

// --------------------------------------------------------------------------------------------------------------------------------

// CFG_OPB_FIFO_ARB_9 desc:  This CSR contains the configuration parameters necessary to configure
// the OPB Queue Leaky Bucket Arbitration for MC1'/TC0 Fast Path Queue.
// The arbitration scheme by default is a leaky bucket scheme.
typedef volatile union {
    struct {
        uint64_t  UNUSED_63_0          :  64;    //  TODO

    };
    uint64_t                         val;
} CFG_OPB_FIFO_ARB_9_t;

// --------------------------------------------------------------------------------------------------------------------------------

// CFG_OPB_FIFO_ARB_10 desc:  This CSR contains the configuration parameters necessary to configure
// the OPB Queue Leaky Bucket Arbitration for MC1'/TC1 Fast Path Queue.
// The arbitration scheme by default is a leaky bucket scheme.
typedef volatile union {
    struct {
        uint64_t  UNUSED_63_0          :  64;    //  TODO

    };
    uint64_t                         val;
} CFG_OPB_FIFO_ARB_10_t;

// --------------------------------------------------------------------------------------------------------------------------------

// CFG_OPB_FIFO_ARB_11 desc:  This CSR contains the configuration parameters necessary to configure
// the OPB Queue Leaky Bucket Arbitration for MC1'/TC2 Fast Path Queue.
// The arbitration scheme by default is a leaky bucket scheme.
typedef volatile union {
    struct {
        uint64_t  UNUSED_63_0          :  64;    //  TODO

    };
    uint64_t                         val;
} CFG_OPB_FIFO_ARB_11_t;

// --------------------------------------------------------------------------------------------------------------------------------

// CFG_OPB_FIFO_ARB_12 desc:  This CSR contains the configuration parameters necessary to configure
// the OPB Queue Leaky Bucket Arbitration for MC1'/TC3 Fast Path Queue.
// The arbitration scheme by default is a leaky bucket scheme.
typedef volatile union {
    struct {
        uint64_t  UNUSED_63_0          :  64;    //  TODO

    };
    uint64_t                         val;
} CFG_OPB_FIFO_ARB_12_t;

// --------------------------------------------------------------------------------------------------------------------------------

// CFG_OPB_FIFO_ARB_13 desc:  This CSR contains the configuration parameters necessary to configure
// the OPB Queue Leaky Bucket Arbitration for MC0/TC0 Post-Fragmentation
// Queue. The arbitration scheme by default is a leaky bucket scheme.
typedef volatile union {
    struct {
        uint64_t  UNUSED_63_0          :  64;    //  TODO

    };
    uint64_t                         val;
} CFG_OPB_FIFO_ARB_13_t;

// --------------------------------------------------------------------------------------------------------------------------------

// CFG_OPB_FIFO_ARB_14 desc:  This CSR contains the configuration parameters necessary to configure
// the OPB Queue Leaky Bucket Arbitration for MC0/TC1 Post-Fragmentation
// Queue. The arbitration scheme by default is a leaky bucket scheme.
typedef volatile union {
    struct {
        uint64_t  UNUSED_63_0          :  64;    //  TODO

    };
    uint64_t                         val;
} CFG_OPB_FIFO_ARB_14_t;

// --------------------------------------------------------------------------------------------------------------------------------

// CFG_OPB_FIFO_ARB_15 desc:  This CSR contains the configuration parameters necessary to configure
// the OPB Queue Leaky Bucket Arbitration for MC0/TC2 Post-Fragmentation
// Queue. The arbitration scheme by default is a leaky bucket scheme.
typedef volatile union {
    struct {
        uint64_t  UNUSED_63_0          :  64;    //  TODO

    };
    uint64_t                         val;
} CFG_OPB_FIFO_ARB_15_t;

// --------------------------------------------------------------------------------------------------------------------------------

// CFG_OPB_FIFO_ARB_16 desc:  This CSR contains the configuration parameters necessary to configure
// the OPB Queue Leaky Bucket Arbitration for MC0/TC3 Post-Fragmentation
// Queue. The arbitration scheme by default is a leaky bucket scheme.
typedef volatile union {
    struct {
        uint64_t  UNUSED_63_0          :  64;    //  TODO

    };
    uint64_t                         val;
} CFG_OPB_FIFO_ARB_16_t;

// --------------------------------------------------------------------------------------------------------------------------------

// CFG_OPB_FIFO_ARB_17 desc:  This CSR contains the configuration parameters necessary to configure
// the OPB Queue Leaky Bucket Arbitration for MC1/TC0 Post-Fragmentation
// Queue. The arbitration scheme by default is a leaky bucket scheme.
typedef volatile union {
    struct {
        uint64_t  UNUSED_63_0          :  64;    //  TODO

    };
    uint64_t                         val;
} CFG_OPB_FIFO_ARB_17_t;

// --------------------------------------------------------------------------------------------------------------------------------

// CFG_OPB_FIFO_ARB_18 desc:  This CSR contains the configuration parameters necessary to configure
// the OPB Queue Leaky Bucket Arbitration for MC1/TC1 Post-Fragmentation
// Queue. The arbitration scheme by default is a leaky bucket scheme.
typedef volatile union {
    struct {
        uint64_t  UNUSED_63_0          :  64;    //  TODO

    };
    uint64_t                         val;
} CFG_OPB_FIFO_ARB_18_t;

// --------------------------------------------------------------------------------------------------------------------------------

// CFG_OPB_FIFO_ARB_19 desc:  This CSR contains the configuration parameters necessary to configure
// the OPB Queue Leaky Bucket Arbitration for MC1/TC2 Post-Fragmentation
// Queue. The arbitration scheme by default is a leaky bucket scheme.
typedef volatile union {
    struct {
        uint64_t  UNUSED_63_0          :  64;    //  TODO

    };
    uint64_t                         val;
} CFG_OPB_FIFO_ARB_19_t;

// --------------------------------------------------------------------------------------------------------------------------------

// CFG_OPB_FIFO_ARB_20 desc:  This CSR contains the configuration parameters necessary to configure
// the OPB Queue Leaky Bucket Arbitration for MC1/TC3 Post-Fragmentation
// Queue. The arbitration scheme by default is a leaky bucket scheme.
typedef volatile union {
    struct {
        uint64_t  UNUSED_63_0          :  64;    //  TODO

    };
    uint64_t                         val;
} CFG_OPB_FIFO_ARB_20_t;

// --------------------------------------------------------------------------------------------------------------------------------

// CFG_OPB_FIFO_ARB_21 desc:  This CSR contains the configuration parameters necessary to configure
// the OPB Queue Leaky Bucket Arbitration for MC0/TC0 Post-Fragmentation
// Retransmission Queue. The arbitration scheme by default is a leaky
// bucket scheme.
typedef volatile union {
    struct {
        uint64_t  UNUSED_63_0          :  64;    //  TODO

    };
    uint64_t                         val;
} CFG_OPB_FIFO_ARB_21_t;

// --------------------------------------------------------------------------------------------------------------------------------

// CFG_OPB_FIFO_ARB_22 desc:  This CSR contains the configuration parameters necessary to configure
// the OPB Queue Leaky Bucket Arbitration for MC0/TC1 Post-Fragmentation
// Retransmission Queue. The arbitration scheme by default is a leaky
// bucket scheme.
typedef volatile union {
    struct {
        uint64_t  UNUSED_63_0          :  64;    //  TODO

    };
    uint64_t                         val;
} CFG_OPB_FIFO_ARB_22_t;

// --------------------------------------------------------------------------------------------------------------------------------

// CFG_OPB_FIFO_ARB_23 desc:  This CSR contains the configuration parameters necessary to configure
// the OPB Queue Leaky Bucket Arbitration for MC0/TC2 Post-Fragmentation
// Retransmission Queue. The arbitration scheme by default is a leaky
// bucket scheme.
typedef volatile union {
    struct {
        uint64_t  UNUSED_63_0          :  64;    //  TODO

    };
    uint64_t                         val;
} CFG_OPB_FIFO_ARB_23_t;

// --------------------------------------------------------------------------------------------------------------------------------

// CFG_OPB_FIFO_ARB_24 desc:  This CSR contains the configuration parameters necessary to configure
// the OPB Queue Leaky Bucket Arbitration for MC0/TC3 Post-Fragmentation
// Retransmission Queue. The arbitration scheme by default is a leaky
// bucket scheme.
typedef volatile union {
    struct {
        uint64_t  UNUSED_63_0          :  64;    //  TODO

    };
    uint64_t                         val;
} CFG_OPB_FIFO_ARB_24_t;

// --------------------------------------------------------------------------------------------------------------------------------

// CFG_OPB_FIFO_ARB_25 desc:  This CSR contains the configuration parameters necessary to configure
// the OPB Queue Leaky Bucket Arbitration for MC1/TC0 Post-Fragmentation
// Retransmission Queue. The arbitration scheme by default is a leaky
// bucket scheme.
typedef volatile union {
    struct {
        uint64_t  UNUSED_63_0          :  64;    //  TODO

    };
    uint64_t                         val;
} CFG_OPB_FIFO_ARB_25_t;

// --------------------------------------------------------------------------------------------------------------------------------

// CFG_OPB_FIFO_ARB_26 desc:  This CSR contains the configuration parameters necessary to configure
// the OPB Queue Leaky Bucket Arbitration for MC1/TC1 Post-Fragmentation
// Retransmission Queue. The arbitration scheme by default is a leaky
// bucket scheme.
typedef volatile union {
    struct {
        uint64_t  UNUSED_63_0          :  64;    //  TODO

    };
    uint64_t                         val;
} CFG_OPB_FIFO_ARB_26_t;

// --------------------------------------------------------------------------------------------------------------------------------

// CFG_OPB_FIFO_ARB_27 desc:  This CSR contains the configuration parameters necessary to configure
// the OPB Queue Leaky Bucket Arbitration for MC1/TC2 Post-Fragmentation
// Retransmission Queue. The arbitration scheme by default is a leaky
// bucket scheme.
typedef volatile union {
    struct {
        uint64_t  UNUSED_63_0          :  64;    //  TODO

    };
    uint64_t                         val;
} CFG_OPB_FIFO_ARB_27_t;

// --------------------------------------------------------------------------------------------------------------------------------

// CFG_OPB_FIFO_ARB_28 desc:  This CSR contains the configuration parameters necessary to configure
// the OPB Queue Leaky Bucket Arbitration for MC1/TC3 Post-Fragmentation
// Retransmission Queue. The arbitration scheme by default is a leaky
// bucket scheme.
typedef volatile union {
    struct {
        uint64_t  UNUSED_63_0          :  64;    //  TODO

    };
    uint64_t                         val;
} CFG_OPB_FIFO_ARB_28_t;

// --------------------------------------------------------------------------------------------------------------------------------

// CFG_TIMEOUT desc:  This CSR contains the configuration parameters necessary to set the
// length of the timeout interval used to retransmit outstanding
// packets.
typedef volatile union {
    struct {
        uint64_t  SCALER               :  32;    //  This register selects the
                                                 // rate at which the TXOTR
                                                 // Timeout Counter increments. If
                                                 // set to 32'd0, the counter is
                                                 // disabled. If set to 1, the
                                                 // counter increments once per
                                                 // clock cycle. If set to 2, the
                                                 // counter increments once every
                                                 // other clock cycle. Et cetera.
        uint64_t  MAX_RETRIES          :   4;    //  Maximum number of retries
                                                 // allowed for a packet allocated
                                                 // in the Outstanding Packet
                                                 // Buffer.
        uint64_t  UNUSED_63_36         :  28;    //  Unused

    };
    uint64_t                         val;
} CFG_TIMEOUT_t;

// --------------------------------------------------------------------------------------------------------------------------------

// CFG_RENDEZ_DELAYED_TRANSMIT desc:  This CSR contains the configuration parameters necessary to configure
// the counter used as a comparison for Rendezvous transactions which
// are delayed before being sent into the network.
typedef volatile union {
    struct {
        uint64_t  SCALER               :  32;    //  This register selects the
                                                 // rate at which the TXOTR Delay
                                                 // Counter increments. If set to
                                                 // 32'd0, the counter is
                                                 // disabled. If set to 1, the
                                                 // counter increments once per
                                                 // clock cycle. If set to 2, the
                                                 // counter increments once every
                                                 // other clock cycle. Et cetera.
        uint64_t  UNUSED_63_32         :  32;    //  Unused

    };
    uint64_t                         val;
} CFG_RENDEZ_DELAYED_TRANSMIT_t;

// --------------------------------------------------------------------------------------------------------------------------------

// CFG_SLID_PT0 desc:  This CSR contains the configuration parameters necessary to configure
// the Source Local Identifier (SLID) for Port 0. The SLID in a packet
// is configured based on the fields in this CSR as well as the
// SLID[1:0] or SLID[2:0] (based on the command type) contained in the
// command. The SLID which gets inserted into a packet is determined
// using the following formula: SLID = (BASE & ~(2N-1)) | (SLID_LOW &
// (2N-1)) where SLID_LOW is a 24-bit field derived by zero-extending
// SLID[1:0] or SLID[2:0] contained in the corresponding command.
typedef volatile union {
    struct {
        uint64_t  BASE                 :  24;    //  Source Local Identifier Base
        uint64_t  MASK                 :   2;    //  Source Local Identifier Mask.
        uint64_t  UNUSED_63_26         :  38;    //  Unused

    };
    uint64_t                         val;
} CFG_SLID_PT0_t;

// --------------------------------------------------------------------------------------------------------------------------------

// CFG_SLID_PT1 desc:  This CSR contains the configuration parameters necessary to configure
// the Source Local Identifier (SLID) for Port 1. The SLID in a packet
// is configured based on the fields in this CSR as well as the
// SLID[1:0] or SLID[2:0] (based on the command type) contained in the
// command. The SLID which gets inserted into a packet is as described in
// Section 21.6.3.48, 'SLID Port 0 Configuration CSR' .
typedef volatile union {
    struct {
        uint64_t  BASE                 :  24;    //  Source Local Identifier Base
        uint64_t  MASK                 :   2;    //  Source Local Identifier Mask.
        uint64_t  UNUSED_63_26         :  38;    //  Unused

    };
    uint64_t                         val;
} CFG_SLID_PT1_t;

// --------------------------------------------------------------------------------------------------------------------------------

// CFG_RENDEZ_PROTOCOL desc:  This CSR contains the configuration parameters necessary to configure
// the Rendezvous Protocol in the Buffer Programmable Engine (BPE).
typedef volatile union {
    struct {
        uint64_t  IGNORE_FUTURE_TIME   :   1;    //  If this bit is set, the
                                                 // Future Time in a CTS is
                                                 // ignored and new CTS messages
                                                 // are added to the end of the
                                                 // Pending List and not to the
                                                 // Scheduled List.
        uint64_t  UNUSED_63_1          :  63;    //  Unused

    };
    uint64_t                         val;
} CFG_RENDEZ_PROTOCOL_t;

// --------------------------------------------------------------------------------------------------------------------------------

// CFG_FRAG_ENG desc:  This CSR contains the configuration parameters necessary to configure
// the Fragmentation Engine in the Fragmentation Programmable Engine
// (FPE).
typedef volatile union {
    struct {
        uint64_t  MAX_DMA_CMDS         :  16;    //  The maximum number of DMA
                                                 // Commands that can be generated
                                                 // for a single packet.
        uint64_t  MAX_DMA_PREFETCH     :  16;    //  The maximum number of DMA
                                                 // Prefetches that can be issued
                                                 // by FPE.
        uint64_t  UNUSED_63_32         :  32;    //  Unused

    };
    uint64_t                         val;
} CFG_FRAG_ENG_t;

// --------------------------------------------------------------------------------------------------------------------------------

// CFG_MEM_SCHEDULER desc:  This CSR contains the configuration parameters necessary to configure
// the TXOTR Memory Scheduler.
typedef volatile union {
    struct {
        uint64_t  FPE_CHINT            :   2;    //  Cache hints for Fragmentation
                                                 // Programmable Engine reads and
                                                 // writes to Host Memory. See
                                                 // CHINT Settings in Block
                                                 // Interfaces for the Host Memory
                                                 // Interface for enumerated
                                                 // settings.
        uint64_t  PSN_CHINT            :   2;    //  Cache hints for PSN Cache
                                                 // reads and writes to Host
                                                 // Memory. See CHINT Settings in
                                                 // Block Interfaces for the Host
                                                 // Memory Interface for
                                                 // enumerated settings.
        uint64_t  UNUSED_63_4          :  60;    //  Unused

    };
    uint64_t                         val;
} CFG_MEM_SCHEDULER_t;

// --------------------------------------------------------------------------------------------------------------------------------

// CFG_PSN_CACHE desc:  This CSR contains the configuration parameters necessary to configure
// the PSN Cache.
typedef volatile union {
    struct {
        uint64_t  USE_PORT_IN_PSN_STATE :   1;    //  If set to 1'b1, requests to
                                                 // the PSN Cache do not consider
                                                 // the Port value of requesting
                                                 // packets when doing a PSN Cache
                                                 // lookup.
        uint64_t  UNUSED_63_1          :  63;    //  Unused

    };
    uint64_t                         val;
} CFG_PSN_CACHE_t;

// --------------------------------------------------------------------------------------------------------------------------------

// CFG_PSN_ADDR_BASE_MC0TC0PT0 desc:  Base address (virtual) for host memory reads and writes of PSN Cache
// state for MC0, TC0, Port 0.
typedef volatile union {
    struct {
        uint64_t  UNUSED_2_0           :   3;    //  Unused
        uint64_t  ADDRESS              :  51;    //  Host Memory Base Address
        uint64_t  UNUSED_63_54         :  10;    //  Unused

    };
    uint64_t                         val;
} CFG_PSN_ADDR_BASE_MC0TC0PT0_t;

// --------------------------------------------------------------------------------------------------------------------------------

// CFG_PSN_ADDR_BASE_MC0TC1PT0 desc:  Base address (virtual) for host memory reads and writes of PSN Cache
// state for MC0, TC1, Port 0.
typedef volatile union {
    struct {
        uint64_t  UNUSED_2_0           :   3;    //  Unused
        uint64_t  ADDRESS              :  51;    //  Host Memory Base Address
        uint64_t  UNUSED_63_54         :  10;    //  Unused

    };
    uint64_t                         val;
} CFG_PSN_ADDR_BASE_MC0TC1PT0_t;

// --------------------------------------------------------------------------------------------------------------------------------

// CFG_PSN_ADDR_BASE_MC0TC2PT0 desc:  Base address (virtual) for host memory reads and writes of PSN Cache
// state for MC0, TC2, Port 0.
typedef volatile union {
    struct {
        uint64_t  UNUSED_2_0           :   3;    //  Unused
        uint64_t  ADDRESS              :  51;    //  Host Memory Base Address
        uint64_t  UNUSED_63_54         :  10;    //  Unused

    };
    uint64_t                         val;
} CFG_PSN_ADDR_BASE_MC0TC2PT0_t;

// --------------------------------------------------------------------------------------------------------------------------------

// CFG_PSN_ADDR_BASE_MC0TC3PT0 desc:  Base address (virtual) for host memory reads and writes of PSN Cache
// state for MC0, TC3, Port 0.
typedef volatile union {
    struct {
        uint64_t  UNUSED_2_0           :   3;    //  Unused
        uint64_t  ADDRESS              :  51;    //  Host Memory Base Address
        uint64_t  UNUSED_63_54         :  10;    //  Unused

    };
    uint64_t                         val;
} CFG_PSN_ADDR_BASE_MC0TC3PT0_t;

// --------------------------------------------------------------------------------------------------------------------------------

// CFG_PSN_ADDR_BASE_MC0TC0PT1 desc:  Base address (virtual) for host memory reads and writes of PSN Cache
// state for MC0, TC0, Port 1.
typedef volatile union {
    struct {
        uint64_t  UNUSED_2_0           :   3;    //  Unused
        uint64_t  ADDRESS              :  51;    //  Host Memory Base Address
        uint64_t  UNUSED_63_54         :  10;    //  Unused

    };
    uint64_t                         val;
} CFG_PSN_ADDR_BASE_MC0TC0PT1_t;

// --------------------------------------------------------------------------------------------------------------------------------

// CFG_PSN_ADDR_BASE_MC0TC1PT1 desc:  Base address (virtual) for host memory reads and writes of PSN Cache
// state for MC0, TC1, Port 1.
typedef volatile union {
    struct {
        uint64_t  UNUSED_2_0           :   3;    //  Unused
        uint64_t  ADDRESS              :  51;    //  Host Memory Base Address
        uint64_t  UNUSED_63_54         :  10;    //  Unused

    };
    uint64_t                         val;
} CFG_PSN_ADDR_BASE_MC0TC1PT1_t;

// --------------------------------------------------------------------------------------------------------------------------------

// CFG_PSN_ADDR_BASE_MC0TC2PT1 desc:  Base address (virtual) for host memory reads and writes of PSN Cache
// state for MC0, TC2, Port 1.
typedef volatile union {
    struct {
        uint64_t  UNUSED_2_0           :   3;    //  Unused
        uint64_t  ADDRESS              :  51;    //  Host Memory Base Address
        uint64_t  UNUSED_63_54         :  10;    //  Unused

    };
    uint64_t                         val;
} CFG_PSN_ADDR_BASE_MC0TC2PT1_t;

// --------------------------------------------------------------------------------------------------------------------------------

// CFG_PSN_ADDR_BASE_MC0TC3PT1 desc:  Base address (virtual) for host memory reads and writes of PSN Cache
// state for MC0, TC3, Port 1.
typedef volatile union {
    struct {
        uint64_t  UNUSED_2_0           :   3;    //  Unused
        uint64_t  ADDRESS              :  51;    //  Host Memory Base Address
        uint64_t  UNUSED_63_54         :  10;    //  Unused

    };
    uint64_t                         val;
} CFG_PSN_ADDR_BASE_MC0TC3PT1_t;

// --------------------------------------------------------------------------------------------------------------------------------

// starting the array instantiation section
typedef struct {
    CFG_MC0_PREFRAG_OPB_FIFO_CRDTS_t CFG_MC0_PREFRAG_OPB_FIFO_CRDTS; // offset 4'h0, width 64
    CFG_MC1_PREFRAG_OPB_FIFO_CRDTS_t CFG_MC1_PREFRAG_OPB_FIFO_CRDTS; // offset 4'h8, width 64
    CFG_MC0_FP_OPB_FIFO_CRDTS_t CFG_MC0_FP_OPB_FIFO_CRDTS; // offset 8'h10, width 64
    CFG_MC1_FP_OPB_FIFO_CRDTS_t CFG_MC1_FP_OPB_FIFO_CRDTS; // offset 8'h18, width 64
    CFG_MC1P_FP_OPB_FIFO_CRDTS_t CFG_MC1P_FP_OPB_FIFO_CRDTS; // offset 8'h20, width 64
    CFG_MC0_POSTFRAG_OPB_FIFO_CRDTS_t CFG_MC0_POSTFRAG_OPB_FIFO_CRDTS; // offset 8'h28, width 64
    CFG_MC1_POSTFRAG_OPB_FIFO_CRDTS_t CFG_MC1_POSTFRAG_OPB_FIFO_CRDTS; // offset 8'h30, width 64
    CFG_DMA_FIFO_CRDTS_t       CFG_DMA_FIFO_CRDTS; // offset 8'h38, width 64
    CFG_RXDMA_INT_t            CFG_RXDMA_INT;    // offset 8'h40, width 64
    CFG_TXCI_INT_t             CFG_TXCI_INT;     // offset 8'h48, width 64
    CFG_AT_INT_t               CFG_AT_INT;       // offset 8'h50, width 64
    CFG_MSGID_1_t              CFG_MSGID_1;      // offset 8'h58, width 64
    CFG_MSGID_2_t              CFG_MSGID_2;      // offset 8'h60, width 64
    CFG_PKTID_1_t              CFG_PKTID_1;      // offset 8'h68, width 64
    CFG_PKTID_2_t              CFG_PKTID_2;      // offset 8'h70, width 64
    CFG_OMB_FIFO_ARB_t         CFG_OMB_FIFO_ARB; // offset 8'h78, width 64
    CFG_OPB_FIFO_GEN_ARB_t     CFG_OPB_FIFO_GEN_ARB; // offset 8'h80, width 64
    CFG_OPB_FIFO_ARB_1_t       CFG_OPB_FIFO_ARB_1; // offset 8'h88, width 64
    CFG_OPB_FIFO_ARB_2_t       CFG_OPB_FIFO_ARB_2; // offset 8'h90, width 64
    CFG_OPB_FIFO_ARB_3_t       CFG_OPB_FIFO_ARB_3; // offset 8'h98, width 64
    CFG_OPB_FIFO_ARB_4_t       CFG_OPB_FIFO_ARB_4; // offset 12'h0A0, width 64
    CFG_OPB_FIFO_ARB_5_t       CFG_OPB_FIFO_ARB_5; // offset 12'h0A8, width 64
    CFG_OPB_FIFO_ARB_6_t       CFG_OPB_FIFO_ARB_6; // offset 12'h0B0, width 64
    CFG_OPB_FIFO_ARB_7_t       CFG_OPB_FIFO_ARB_7; // offset 12'h0B8, width 64
    CFG_OPB_FIFO_ARB_8_t       CFG_OPB_FIFO_ARB_8; // offset 12'h0C0, width 64
    CFG_OPB_FIFO_ARB_9_t       CFG_OPB_FIFO_ARB_9; // offset 12'h0C8, width 64
    CFG_OPB_FIFO_ARB_10_t      CFG_OPB_FIFO_ARB_10; // offset 12'h0D0, width 64
    CFG_OPB_FIFO_ARB_11_t      CFG_OPB_FIFO_ARB_11; // offset 12'h0D8, width 64
    CFG_OPB_FIFO_ARB_12_t      CFG_OPB_FIFO_ARB_12; // offset 12'h0E0, width 64
    CFG_OPB_FIFO_ARB_13_t      CFG_OPB_FIFO_ARB_13; // offset 12'h0E8, width 64
    CFG_OPB_FIFO_ARB_14_t      CFG_OPB_FIFO_ARB_14; // offset 12'h0F0, width 64
    CFG_OPB_FIFO_ARB_15_t      CFG_OPB_FIFO_ARB_15; // offset 12'h0F8, width 64
    CFG_OPB_FIFO_ARB_16_t      CFG_OPB_FIFO_ARB_16; // offset 12'h100, width 64
    CFG_OPB_FIFO_ARB_17_t      CFG_OPB_FIFO_ARB_17; // offset 12'h108, width 64
    CFG_OPB_FIFO_ARB_18_t      CFG_OPB_FIFO_ARB_18; // offset 12'h110, width 64
    CFG_OPB_FIFO_ARB_19_t      CFG_OPB_FIFO_ARB_19; // offset 12'h118, width 64
    CFG_OPB_FIFO_ARB_20_t      CFG_OPB_FIFO_ARB_20; // offset 12'h120, width 64
    CFG_OPB_FIFO_ARB_21_t      CFG_OPB_FIFO_ARB_21; // offset 12'h128, width 64
    CFG_OPB_FIFO_ARB_22_t      CFG_OPB_FIFO_ARB_22; // offset 12'h130, width 64
    CFG_OPB_FIFO_ARB_23_t      CFG_OPB_FIFO_ARB_23; // offset 12'h138, width 64
    CFG_OPB_FIFO_ARB_24_t      CFG_OPB_FIFO_ARB_24; // offset 12'h140, width 64
    CFG_OPB_FIFO_ARB_25_t      CFG_OPB_FIFO_ARB_25; // offset 12'h148, width 64
    CFG_OPB_FIFO_ARB_26_t      CFG_OPB_FIFO_ARB_26; // offset 12'h150, width 64
    CFG_OPB_FIFO_ARB_27_t      CFG_OPB_FIFO_ARB_27; // offset 12'h158, width 64
    CFG_OPB_FIFO_ARB_28_t      CFG_OPB_FIFO_ARB_28; // offset 12'h160, width 64
    CFG_TIMEOUT_t              CFG_TIMEOUT;      // offset 12'h168, width 64
    CFG_RENDEZ_DELAYED_TRANSMIT_t CFG_RENDEZ_DELAYED_TRANSMIT; // offset 12'h170, width 64
    CFG_SLID_PT0_t             CFG_SLID_PT0;     // offset 12'h178, width 64
    CFG_SLID_PT1_t             CFG_SLID_PT1;     // offset 12'h180, width 64
    CFG_RENDEZ_PROTOCOL_t      CFG_RENDEZ_PROTOCOL; // offset 12'h188, width 64
    CFG_FRAG_ENG_t             CFG_FRAG_ENG;     // offset 12'h190, width 64
    CFG_MEM_SCHEDULER_t        CFG_MEM_SCHEDULER; // offset 12'h198, width 64
    CFG_PSN_CACHE_t            CFG_PSN_CACHE;    // offset 12'h1A0, width 64
    CFG_PSN_ADDR_BASE_MC0TC0PT0_t CFG_PSN_ADDR_BASE_MC0TC0PT0; // offset 12'h1A8, width 64
    CFG_PSN_ADDR_BASE_MC0TC1PT0_t CFG_PSN_ADDR_BASE_MC0TC1PT0; // offset 12'h1B0, width 64
    CFG_PSN_ADDR_BASE_MC0TC2PT0_t CFG_PSN_ADDR_BASE_MC0TC2PT0; // offset 12'h1B8, width 64
    CFG_PSN_ADDR_BASE_MC0TC3PT0_t CFG_PSN_ADDR_BASE_MC0TC3PT0; // offset 12'h1C0, width 64
    CFG_PSN_ADDR_BASE_MC0TC0PT1_t CFG_PSN_ADDR_BASE_MC0TC0PT1; // offset 12'h1C8, width 64
    CFG_PSN_ADDR_BASE_MC0TC1PT1_t CFG_PSN_ADDR_BASE_MC0TC1PT1; // offset 12'h1D0, width 64
    CFG_PSN_ADDR_BASE_MC0TC2PT1_t CFG_PSN_ADDR_BASE_MC0TC2PT1; // offset 12'h1D8, width 64
    CFG_PSN_ADDR_BASE_MC0TC3PT1_t CFG_PSN_ADDR_BASE_MC0TC3PT1; // offset 12'h1E0, width 64
} fxr_tx_otr_csrs_t;                             // size:  12'h1E8
