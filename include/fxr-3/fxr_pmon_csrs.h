//                                                                             
// File:       fxr_pmon_csrs.h                                                 
// Creator:    pvesvslx                                                        
// Time:       Tuesday Sep 16, 2014 [12:29:39 am]                              
//                                                                             
// Path:       /tmp/pvesvslx/nebulon_run/28430                                 
// Arguments:  /p/com/eda/denali/blueprint/3.7.4/Linux/blueprint -chdr -I      
//             /p/slx/eda/intel/nebulon/2.05_fdo/include -I                    
//             /p/slx/pvesv/fxr_autogen/fxr fxr_pmon.rdl                       
//                                                                             
// Sources:    /tmp/pvesvslx/nebulon_run/28430/fxr_pmon.rdlh                   
//             /tmp/pvesvslx/nebulon_run/28430/lib_udp.rdl                     
//             /tmp/pvesvslx/nebulon_run/28430/fxr_pmon.rdl                    
//             /p/com/eda/intel/nebulon/2.05p1/generators/generator_common.pm  
//             /p/com/eda/intel/nebulon/2.05p1/generators/chdr.pm              
//                                                                             
// Blueprint:   3.7.4 (Tue Jun 23 00:17:01 PDT 2009)                           
// Machine:    scci56217                                                       
// OS:         Linux 2.6.16.60-0.58.1.3835.0.PTF.638363-smp                    
// Description:                                                                
//                                                                             
//Performance Monitor address map                                              
//                                                                             
// Copyright (C) 2014 Denali Software Inc.  All rights reserved                
// THIS FILE IS AUTOMATICALLY GENERATED BY DENALI BLUEPRINT, DO NOT EDIT       
//                                                                             



// PMON_CONTROL desc:  This is the control register for the performance monitor counter
// array.
typedef volatile union {
    struct {
        uint64_t  FREEZE               :   1;    //  Freeze counters. Current time
                                                 // snapshot is captured on the
                                                 // cycle that counters are
                                                 // frozen. This bit does not
                                                 // self-reset. By default, the
                                                 // counters are enabled and
                                                 // free-running.
        uint64_t  RESET_CTRS           :   1;    //  Resets all counters
                                                 // (automatically cleared when
                                                 // done). FREEZE must be set to 1
                                                 // to reset counters.
        uint64_t  LOG_OVERFLOW         :   1;    //  When set, this causes the
                                                 // uppermost (49th) bit of each
                                                 // count to act as an overflow
                                                 // bit. Otherwise, the 49th bit
                                                 // always counts.
        uint64_t  INT_OVERFLOW         :   1;    //  When set, this causes an
                                                 // interrupt when the 49th bit
                                                 // transitions from 0 to 1.
        uint64_t  Reserved_63_4        :  60;    // 

    };
    uint64_t                         val;
} PMON_CONTROL_t;

// --------------------------------------------------------------------------------------------------------------------------------

// PMON_FREEZE_TIME desc:  This is the local time at which the performance monitor counter array
// was frozen.
typedef volatile union {
    struct {
        uint64_t  FREEZE_TIME          :  64;    //  The local time at which the
                                                 // counters were frozen

    };
    uint64_t                         val;
} PMON_FREEZE_TIME_t;

// --------------------------------------------------------------------------------------------------------------------------------

// PMON_ENABLE_TIME desc:  This is the local time at which the performance monitor counter array
// was released from the freeze state.
typedef volatile union {
    struct {
        uint64_t  ENABLE_TIME          :  64;    //  The local time at which the
                                                 // counters were enabled

    };
    uint64_t                         val;
} PMON_ENABLE_TIME_t;

// --------------------------------------------------------------------------------------------------------------------------------

// PMON_ARRAY desc:  This CSR is used to describe the address region that is mapped to the
// array of performance counters.
typedef volatile union {
    struct {
        uint64_t  COUNT                :  48;    //  Performance counter
        uint64_t  OVERFLOW             :   1;    //  Acts as either one more bit
                                                 // of count or as an overflow bit
        uint64_t  Reserved_63_49       :  15;    // 

    };
    uint64_t                         val;
} PMON_ARRAY_t;

// --------------------------------------------------------------------------------------------------------------------------------

// starting the array instantiation section
typedef struct {
    PMON_CONTROL_t             PMON_CONTROL;     // offset 4'h0, width 64
    PMON_FREEZE_TIME_t         PMON_FREEZE_TIME; // offset 4'h8, width 64
    PMON_ENABLE_TIME_t         PMON_ENABLE_TIME; // offset 8'h10, width 64
    PMON_ARRAY_t               PMON_ARRAY[512];  // offset 20'h80000, width 64
} fxr_pmon_csrs_t;                               // size:  20'h81000
