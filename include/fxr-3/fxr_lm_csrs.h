//                                                                             
// File:       fxr_lm_csrs.h                                                   
// Creator:    pvesvslx                                                        
// Time:       Tuesday Sep 16, 2014 [12:29:36 am]                              
//                                                                             
// Path:       /tmp/pvesvslx/nebulon_run/28430                                 
// Arguments:  /p/com/eda/denali/blueprint/3.7.4/Linux/blueprint -chdr -I      
//             /p/slx/eda/intel/nebulon/2.05_fdo/include -I                    
//             /p/slx/pvesv/fxr_autogen/fxr fxr_lm.rdl                         
//                                                                             
// Sources:    /tmp/pvesvslx/nebulon_run/28430/fxr_lm.rdlh                     
//             /tmp/pvesvslx/nebulon_run/28430/lib_udp.rdl                     
//             /tmp/pvesvslx/nebulon_run/28430/fxr_lm.rdl                      
//             /p/com/eda/intel/nebulon/2.05p1/generators/generator_common.pm  
//             /p/com/eda/intel/nebulon/2.05p1/generators/chdr.pm              
//                                                                             
// Blueprint:   3.7.4 (Tue Jun 23 00:17:01 PDT 2009)                           
// Machine:    scci56217                                                       
// OS:         Linux 2.6.16.60-0.58.1.3835.0.PTF.638363-smp                    
// Description:                                                                
//                                                                             
//Link mux address map                                                         
//                                                                             
// Copyright (C) 2014 Denali Software Inc.  All rights reserved                
// THIS FILE IS AUTOMATICALLY GENERATED BY DENALI BLUEPRINT, DO NOT EDIT       
//                                                                             



// LM_CONFIG desc:  This register provides general configuration for the Link Mux.
typedef volatile union {
    struct {
        uint64_t  NEAR_LOOPBACK_DISABLE :   1;    //  Disables the DLID checking
                                                 // for near loopback
        uint64_t  SYMMETRIC_PORTS      :   1;    //  Sets the HFI into symmetric
                                                 // port mode, where the two ports
                                                 // are treated as if they are on
                                                 // symmetric planes with the same
                                                 // connectivity. This bit enables
                                                 // adaptive routing across the
                                                 // two ports.
        uint64_t  ENABLE_FAIL_OVER     :   1;    //  Enables all outbound traffic
                                                 // to a failed port to be routed
                                                 // to the other port. Defaults to
                                                 // off.
        uint64_t  FORCE_LOOPBACK       :   1;    //  When set, forces all traffic
                                                 // to loopback (bypassing DLID
                                                 // and PKEY checks)
        uint64_t  Reserved_63_4        :  60;    //  Reserved

    };
    uint64_t                         val;
} LM_CONFIG_t;

// --------------------------------------------------------------------------------------------------------------------------------

// LM_CONFIG_PORT0 desc:  This register holds general configuration information for a port.
typedef volatile union {
    struct {
        uint64_t  ENABLE_PKEY          :   1;    //  Enables PKEY checking.
                                                 // Packets that
        uint64_t  LMC_ENABLE           :   1;    //  Indicates that this port is
                                                 // assigned multiple consecutive
                                                 // DLIDs. Effectively masks low
                                                 // order bits for DLID check.
        uint64_t  DROP                 :   1;    //  When set, drops all packets
                                                 // on this port
        uint64_t  DROP_SC15            :   1;    //  When set, drops all packets
                                                 // on this port on SC15
        uint64_t  LMC_WIDTH            :   4;    //  Width of the LMC mask (in
                                                 // bits). 0=>1 LID, 1=>2 LIDs,
                                                 // etc.
        uint64_t  DLID                 :  24;    //  DLID for this port
        uint64_t  IMPLICIT_PKEY_10B    :  12;    //  The PKEY to be used for the
                                                 // upper bits of the PKEY in 10B
                                                 // packets if PKEY checking is
                                                 // enabled.
        uint64_t  Reserved_47_44       :   4;    //  Reserved
        uint64_t  IMPLICIT_PKEY_8B     :  16;    //  The PKEY to be used for 8B
                                                 // packets if PKEY checking is
                                                 // enabled.

    };
    uint64_t                         val;
} LM_CONFIG_PORT0_t;

// --------------------------------------------------------------------------------------------------------------------------------

// LM_FP_TIMER_PORT0 desc:  This register holds the forward progress timeout value.
typedef volatile union {
    struct {
        uint64_t  TIMEOUT              :  48;    //  Time-out counter threshold to
                                                 // trigger a forward progress
                                                 // drop. Time is inactive when
                                                 // set to 0.
        uint64_t  Reserved_63_48       :  16;    //  Reserved

    };
    uint64_t                         val;
} LM_FP_TIMER_PORT0_t;

// --------------------------------------------------------------------------------------------------------------------------------

// LM_CONFIG_PORT1 desc:  This register holds general configuration information for a port.
typedef volatile union {
    struct {
        uint64_t  ENABLE_PKEY          :   1;    //  Enables PKEY checking.
                                                 // Packets that
        uint64_t  LMC_ENABLE           :   1;    //  Indicates that this port is
                                                 // assigned multiple consecutive
                                                 // DLIDs. Effectively masks low
                                                 // order bits for DLID check.
        uint64_t  DROP                 :   1;    //  When set, drops all packets
                                                 // on this port (except SC15
                                                 // traffic)
        uint64_t  DROP_SC15            :   1;    //  When set, drops all packets
                                                 // on this port on SC15
        uint64_t  LMC_WIDTH            :   4;    //  Width of the LMC mask (in
                                                 // bits)
        uint64_t  DLID                 :  24;    //  DLID for this port
        uint64_t  IMPLICIT_PKEY_10B    :  12;    //  The PKEY to be used for the
                                                 // upper bits of the PKEY in 10B
                                                 // packets if PKEY checking is
                                                 // enabled.
        uint64_t  Reserved_47_44       :   4;    //  Reserved
        uint64_t  IMPLICIT_PKEY_8B     :  16;    //  The PKEY to be used for 8B
                                                 // packets if PKEY checking is
                                                 // enabled.

    };
    uint64_t                         val;
} LM_CONFIG_PORT1_t;

// --------------------------------------------------------------------------------------------------------------------------------

// LM_FP_TIMER_PORT1 desc:  This register holds the forward progress timeout value.
typedef volatile union {
    struct {
        uint64_t  TIMEOUT              :  48;    //  Time-out counter threshold to
                                                 // trigger a forward progress
                                                 // drop. Time is inactive when
                                                 // set to 0.
        uint64_t  Reserved_63_48       :  16;    //  Reserved

    };
    uint64_t                         val;
} LM_FP_TIMER_PORT1_t;

// --------------------------------------------------------------------------------------------------------------------------------

// LM_PKEY_ARRAY_PORT0 desc:  This array consists of a 64 entry CAM, with each entry having a bit
// to indicate if it is a full or limited member of the partition. A
// parity bit is also stored to cover the CAM entry, and the parity of
// the low 15 bits of the incoming PKEY is checked before allowing a
// match. CAM entries that are invalid will contain 0x0000 in the low
// order bits.
typedef volatile union {
    struct {
        uint64_t  CAM_ENTRY            :  15;    //  These are the bits in the CAM
                                                 // that are used for an
                                                 // associative match.
        uint64_t  MEMBER_TYPE          :   1;    //  Indicates whether the entry
                                                 // is a limited or full member of
                                                 // the associated Partition
                                                 // (PKEY).
        uint64_t  PARITY               :   1;    //  Indicates the parity of the
                                                 // entry stored in the CAM.
        uint64_t  Reserved_63_17       :  47;    //  Reserved

    };
    uint64_t                         val;
} LM_PKEY_ARRAY_PORT0_t;

// --------------------------------------------------------------------------------------------------------------------------------

// starting the array instantiation section
typedef struct {
    LM_CONFIG_t                LM_CONFIG;        // offset 4'h0, width 64
    LM_CONFIG_PORT0_t          LM_CONFIG_PORT0;  // offset 16'h8000, width 64
    LM_FP_TIMER_PORT0_t        LM_FP_TIMER_PORT0; // offset 16'h8008, width 64
    LM_CONFIG_PORT1_t          LM_CONFIG_PORT1;  // offset 20'h10000, width 64
    LM_FP_TIMER_PORT1_t        LM_FP_TIMER_PORT1; // offset 20'h10008, width 64
    LM_PKEY_ARRAY_PORT0_t      LM_PKEY_ARRAY_PORT0[65]; // offset 20'h10010, width 64
} fxr_lm_csrs_t;                                 // size:  20'h10218
