//                                                                             
// File:       fxr_config_cfg.h                                                
// Creator:    pvesvslx                                                        
// Time:       Tuesday Sep 16, 2014 [12:29:32 am]                              
//                                                                             
// Path:       /tmp/pvesvslx/nebulon_run/28430                                 
// Arguments:  /p/com/eda/denali/blueprint/3.7.4/Linux/blueprint -chdr -I      
//             /p/slx/eda/intel/nebulon/2.05_fdo/include -I                    
//             /p/slx/pvesv/fxr_autogen/fxr fxr_config.rdl                     
//                                                                             
// Sources:    /tmp/pvesvslx/nebulon_run/28430/fxr_config.rdlh                 
//             /tmp/pvesvslx/nebulon_run/28430/lib_udp.rdl                     
//             /tmp/pvesvslx/nebulon_run/28430/fxr_config.rdl                  
//             /p/com/eda/intel/nebulon/2.05p1/generators/generator_common.pm  
//             /p/com/eda/intel/nebulon/2.05p1/generators/chdr.pm              
//                                                                             
// Blueprint:   3.7.4 (Tue Jun 23 00:17:01 PDT 2009)                           
// Machine:    scci56217                                                       
// OS:         Linux 2.6.16.60-0.58.1.3835.0.PTF.638363-smp                    
// Description:                                                                
//                                                                             
//FXR Configuration Registers                                                  
//                                                                             
// Copyright (C) 2014 Denali Software Inc.  All rights reserved                
// THIS FILE IS AUTOMATICALLY GENERATED BY DENALI BLUEPRINT, DO NOT EDIT       
//                                                                             



// FXR_cfg_device_vendor_id desc:  Device ID and Vendor ID Registers
typedef volatile union {
    struct {
        uint32_t  vendor_id            :  16;    //  Vendor ID. This field
                                                 // identifies the manufacturer of
                                                 // the device. Valid vendor
                                                 // identifiers are allocated by
                                                 // the PCI SIG to ensure
                                                 // uniqueness.
        uint32_t  device_id            :  16;    //  Device ID. This field
                                                 // identifies the particular
                                                 // device. This identifier is
                                                 // allocated by the vendor

    };
    uint32_t                         val;
} FXR_cfg_device_vendor_id_t;

// --------------------------------------------------------------------------------------------------------------------------------

// FXR_cfg_status_command desc:  Status and Command registers
typedef volatile union {
    struct {
        uint32_t  reserved_1_0         :   2;    //  Reserved
        uint32_t  bus_master_ena       :   1;    //  Bus Master Enable. Controls
                                                 // the ability of a PCI Express
                                                 // Endpoint to issue Memory and
                                                 // I/O Read/Write Requests. When
                                                 // this bit is Set, the PCI
                                                 // Express Function is allowed to
                                                 // issue Memory or I/O Requests.
                                                 // When this bit is Clear, the
                                                 // PCI Express Function is not
                                                 // allowed to issue any Memory or
                                                 // I/O Requests. Note that as
                                                 // MSI/MSI-X interrupt Messages
                                                 // are in-band memory writes,
                                                 // setting the Bus Master Enable
                                                 // bit to 0 disables MSI/MSI-X
                                                 // interrupt Messages as well.
                                                 // Requests other than Memory or
                                                 // I/O Requests are not
                                                 // controlled by this bit.
        uint32_t  special_cycle_ena    :   1;    //  Memory Write and Invalidate.
                                                 // Does not apply, hardwired to
                                                 // 0.
        uint32_t  mem_wrt_inval        :   1;    //  Memory Write and Invalidate.
                                                 // Does not apply, hardwired to
                                                 // 0.
        uint32_t  vga_palette_snoop    :   1;    //  VGA Palette Snoop. Does not
                                                 // apply, hardwired to 0
        uint32_t  parity_error_resp    :   1;    //  Parity Error Response. This
                                                 // bit controls the logging of
                                                 // poisoned TLPs in the Master
                                                 // Data Parity Error bit in the
                                                 // Status register.
        uint32_t  idsel_step           :   1;    //  IDSEL Stepping/Wait Cycle
                                                 // Control- Does not apply,
                                                 // hardwired to 0.
        uint32_t  serr_enable          :   1;    //  SERR# Enable. When Set, this
                                                 // bit enables reporting of
                                                 // Non-fatal and Fatal errors
                                                 // detected by the Function to
                                                 // the Root Complex. Note that
                                                 // errors are reported if enabled
                                                 // either through this bit or
                                                 // through the PCI Express
                                                 // specific bits in the Device
                                                 // Control register
        uint32_t  fast_b2b_trans_ena   :   1;    //  Fast Back-to-Back
                                                 // Transactions Enable- Does not
                                                 // apply, must be hardwired to 0.
        uint32_t  interrupt_disable    :   1;    //  Interrupt Disable Controls
                                                 // the ability of a PCI Express
                                                 // Function to generate INTx
                                                 // interrupts. When Set,
                                                 // Functions are prevented from
                                                 // asserting INTx interrupts. Any
                                                 // INTx emulation interrupts
                                                 // already asserted by the
                                                 // Function must be deasserted
                                                 // when this bit is Set.
        uint32_t  reserved_18_11       :   8;    //  Reserved
        uint32_t  interrupt_status     :   1;    //  Interrupt Status. When Set,
                                                 // indicates that an INTx
                                                 // emulation interrupt is pending
                                                 // internally in the Function.
        uint32_t  capabilities_list    :   1;    //  Capabilities List Indicates
                                                 // the presence of an Extended
                                                 // Capability list item.
                                                 // Hardwired to 1.
        uint32_t  is66mhz_capable      :   1;    //  66 MHz Capable. Does not
                                                 // apply, must be hardwired to 0.
        uint32_t  reserved_22          :   1;    //  Reserved
        uint32_t  fast_b2b_trans_cap   :   1;    //  Fast Back-to-Back
                                                 // Transactions Capable- Does not
                                                 // apply, must be hardwired to 0.
        uint32_t  mas_data_par_err     :   1;    //  Master Data Parity Error.
                                                 // This bit is Set by an Endpoint
                                                 // Function if the Parity Error
                                                 // Response bit in the Command
                                                 // register is 1 and either of
                                                 // the following two conditions
                                                 // occurs: • Endpoint receives
                                                 // a Poisoned Completion •
                                                 // Endpoint transmits a Poisoned
                                                 // Request
        uint32_t  devsel_timing        :   2;    //  DEVSEL Timing- Does not
                                                 // apply, hardwired to 3'b00
        uint32_t  sig_target_abort     :   1;    //  Signaled Target Abort. This
                                                 // bit is Set when a Function
                                                 // completes a Posted or
                                                 // NonPosted Request as a
                                                 // Completer Abort error.
        uint32_t  rec_target_abort     :   1;    //  Received Target Abort. This
                                                 // bit is Set when a Requester
                                                 // receives a Completion with
                                                 // Completer Abort Completion
                                                 // Status.
        uint32_t  rec_master_abort     :   1;    //  Received Master Abort. This
                                                 // bit is Set when a Requester
                                                 // receives a Completion with
                                                 // Unsupported Request Completion
                                                 // Status.
        uint32_t  sig_system_error     :   1;    //  Signaled System Error. This
                                                 // bit is Set when a Function
                                                 // sends an ERR_FATAL or
                                                 // ERR_NONFATAL Message, and the
                                                 // SERR# Enable bit in the
                                                 // Command register is 1.
        uint32_t  parity_error         :   1;    //  Detected Parity Error. This
                                                 // bit is Set by a Function
                                                 // whenever it receives a
                                                 // Poisoned TLP, regardless of
                                                 // the state the Parity Error
                                                 // Response bit in the Command
                                                 // Register.

    };
    uint32_t                         val;
} FXR_cfg_status_command_t;

// --------------------------------------------------------------------------------------------------------------------------------

// fxr_CFG_class_revision desc:  Class Code and Revision ID registers
typedef volatile union {
    struct {
        uint32_t  revision_id          :   8;    //  Revision ID. This register
                                                 // specifies a device specific
                                                 // revision identifier. The value
                                                 // is chosen by the vendor. This
                                                 // field should be viewed as a
                                                 // vendor defined extension to
                                                 // the Device ID.
        uint32_t  class_code           :  24;    //  Class Code. The Class Code
                                                 // register is used to identify
                                                 // the generic function of the
                                                 // device and, in some cases, a
                                                 // specific register level
                                                 // programming interface.

    };
    uint32_t                         val;
} fxr_CFG_class_revision_t;

// --------------------------------------------------------------------------------------------------------------------------------

// FXR_cfg_header_cacheline desc:  BIST, Header, Latency Timer, Cache Line Size Configuration Registers.
typedef volatile union {
    struct {
        uint32_t  cache_line_size      :   8;    //  Cache Line Size. Specifies
                                                 // the system cacheline size in
                                                 // units of DWORDs
        uint32_t  mas_latency_tim      :   8;    //  Master Latency Timer. Does
                                                 // not apply, hardwired to 0.
        uint32_t  header_type          :   7;    //  Header Type. Does not apply,
                                                 // hardwired to 0.
        uint32_t  device_type          :   1;    //  Device Type. This bit is used
                                                 // to identify a multi-function
                                                 // device. If the bit is 0, then
                                                 // the device is single
                                                 // function.If the bit is 1, then
                                                 // the device has multiple
                                                 // functions.
        uint32_t  bist                 :   8;    //  BIST Control.

    };
    uint32_t                         val;
} FXR_cfg_header_cacheline_t;

// --------------------------------------------------------------------------------------------------------------------------------

// FXR_CFG_BAR0 desc:  Base Address Register0.
typedef volatile union {
    struct {
        uint32_t  mem_space            :   1;    //  Memory Space. When set, BAR
                                                 // defines a memory space address
                                                 // range.
        uint32_t  bar_type             :   2;    //  BAR Type. When set to 2'b10,
                                                 // BAR defines a 64-bit address
                                                 // range and is used in
                                                 // conjunction with BAR1
        uint32_t  prefetch             :   1;    //  Prefetchable. When set,
                                                 // address space is prefetchable.
                                                 // Reads to this space have no
                                                 // side effects.
        uint32_t  base_addr            :  28;    //  Base Address. This field
                                                 // defines base address bits 31:4
                                                 // for the device's MMIO space.
                                                 // Used in conjunction with BAR1.
                                                 // The number of writeable bits
                                                 // in this field defines the
                                                 // aperture setting for the BAR.

    };
    uint32_t                         val;
} FXR_CFG_BAR0_t;

// --------------------------------------------------------------------------------------------------------------------------------

// FXR_CFG_BAR1 desc:  Base Address Register1.
typedef volatile union {
    struct {
        uint32_t  base_addr            :  32;    //  Base Address. This field
                                                 // defines base address bits
                                                 // 63:32 for the device's MMIO
                                                 // space. Used in conjunction
                                                 // with BAR0. The number of
                                                 // writeable bits in this field
                                                 // defines the aperture setting
                                                 // for the BAR.

    };
    uint32_t                         val;
} FXR_CFG_BAR1_t;

// --------------------------------------------------------------------------------------------------------------------------------

// FXR_CFG_SUBSYSTEM_VENDOR desc:  Defines the Subsystem ID and Subsystem Vendor ID.
typedef volatile union {
    struct {
        uint32_t  sub_vendor_id        :  16;    //  Specifies the Subsystem
                                                 // Vendor ID assigned by PCI SIG.
        uint32_t  subsystem_id         :  16;    //  Specifies the Subsystem ID
                                                 // assigned by device
                                                 // manufacturer.

    };
    uint32_t                         val;
} FXR_CFG_SUBSYSTEM_VENDOR_t;

// --------------------------------------------------------------------------------------------------------------------------------

// FXR_CFG_EXPANSION_ROM desc:  Expansion ROM base address and size information.
typedef volatile union {
    struct {
        uint32_t  enable               :   1;    //  Expanstion ROM Enable. When
                                                 // set to 0, Expansion ROM is
                                                 // disabled.
        uint32_t  reserved_10_1        :  10;    //  Reserved
        uint32_t  base_addr            :  21;    //  Expansion ROM base address.

    };
    uint32_t                         val;
} FXR_CFG_EXPANSION_ROM_t;

// --------------------------------------------------------------------------------------------------------------------------------

// FXR_CFG_CAPABILITIES desc:  Pointer to the first Expanded Capabilities structure.
typedef volatile union {
    struct {
        uint32_t  pointer              :   8;    //  Capabilities Pointer. Pointer
                                                 // to the Expanded Capabilities
                                                 // structure.
        uint32_t  reserved_31_8        :  24;    //  Reserved

    };
    uint32_t                         val;
} FXR_CFG_CAPABILITIES_t;

// --------------------------------------------------------------------------------------------------------------------------------

// FXR_CFG_INTERRUPT desc:  Interrupt Line and Pin configuration.
typedef volatile union {
    struct {
        uint32_t  interrupt_line       :   8;    //  Interrupt Line. Specifies the
                                                 // IRQx line signaling for FXR.
                                                 // When set to 0xFF, interrupt
                                                 // line signaling is not used.
        uint32_t  interrupt_pin        :   3;    //  Interrupt Pin. Specifies the
                                                 // INTx pin signaling for FXR.
                                                 // When set to 0x1, INTA in
                                                 // signaled.
        uint32_t  reserved_31_11       :  21;    //  Reserved

    };
    uint32_t                         val;
} FXR_CFG_INTERRUPT_t;

// --------------------------------------------------------------------------------------------------------------------------------

// FXR_CFG_MSIX_CONTROL desc:  MSI-X Control Register.
typedef volatile union {
    struct {
        uint32_t  cap_id               :   8;    //  MSI-X Capabilities ID.
                                                 // Hardcoded MSI-X ID
        uint32_t  nxt_ptr              :   8;    //  Next Pointer. Pointer to Next
                                                 // Capabilities Structure.
        uint32_t  table_size           :  11;    //  MISX Table Size. Encoded
                                                 // Table Size as Size-1.
        uint32_t  reserved_29_27       :   3;    //  Reserved
        uint32_t  function_mask        :   1;    //  Function Mask. Set to 1 to
                                                 // mask (block) all MSI-X
                                                 // interrupt vector signaling
                                                 // from this function.
        uint32_t  msix_enable          :   1;    //  MSI-X Enable. Set to 1 to
                                                 // enable MSI-X functionality and
                                                 // disable INTx signaling.

    };
    uint32_t                         val;
} FXR_CFG_MSIX_CONTROL_t;

// --------------------------------------------------------------------------------------------------------------------------------

// FXR_CFG_MSIX_TABLE_OFFSET desc:  MSI-X Table Offset Register.
typedef volatile union {
    struct {
        uint32_t  table_bir            :   3;    //  MSI-X Table BIR. BAR that
                                                 // maps the MSI-X Table.
        uint32_t  table_offset         :  29;    //  MSI-X Table Offset. BAR
                                                 // offset to the start of the
                                                 // MSI-X Table.

    };
    uint32_t                         val;
} FXR_CFG_MSIX_TABLE_OFFSET_t;

// --------------------------------------------------------------------------------------------------------------------------------

// FXR_CFG_MSIX_PBA_OFFSET desc:  MSI-X PBA Offset Register.
typedef volatile union {
    struct {
        uint32_t  pba_bir              :   3;    //  MSI-X PBA BIR. BAR that maps
                                                 // the MSI-X Pending Bit Array
                                                 // (PBA).
        uint32_t  pba_offset           :  29;    //  MSI-X PBA Offset. BAR offset
                                                 // to the start of the MSI-X
                                                 // Pending Bit Array (PBA).

    };
    uint32_t                         val;
} FXR_CFG_MSIX_PBA_OFFSET_t;

// --------------------------------------------------------------------------------------------------------------------------------

// FXR_CFG_EXP_CAPABILITIES desc:  PCI Express Capabilities Register.
typedef volatile union {
    struct {
        uint32_t  cap_id               :   8;    //  PCIe Capabilities ID.
                                                 // Hardcoded PCIe ID
        uint32_t  nxt_ptr              :   8;    //  Next Pointer. Pointer to Next
                                                 // Capabilities Structure.
        uint32_t  cap_version          :   4;    //  Capability Version. PCI-SIG
                                                 // defined PCIe Capability
                                                 // structure version number.
        uint32_t  device_type          :   4;    //  Device/Port Type. Specific
                                                 // type of PCIe Function. 4'b1001
                                                 // indicates RCIE.
        uint32_t  slot                 :   1;    //  Slot Implemented. When Set,
                                                 // this bit indicates that the
                                                 // Link associated with this Port
                                                 // is connected to a slot.
        uint32_t  interrupt_msg        :   5;    //  Interrupt Message Number.
                                                 // This field indicates which
                                                 // MSI-X vector is used for the
                                                 // interrupt message generated in
                                                 // association with any of the
                                                 // status bits of this Capability
                                                 // structure.
        uint32_t  reserved_31_30       :   2;    //  Reserved

    };
    uint32_t                         val;
} FXR_CFG_EXP_CAPABILITIES_t;

// --------------------------------------------------------------------------------------------------------------------------------

// FXR_CFG_DEVICE_CAPABILITIES desc:  Device Capabilities Register.
typedef volatile union {
    struct {
        uint32_t  max_payload          :   3;    //  Max Payload Size. This field
                                                 // indicates the maximum payload
                                                 // size that the Function can
                                                 // support for TLPs.
        uint32_t  phantom_func         :   2;    //  Phantom Functions Supported.
                                                 // No phantom function support in
                                                 // FXR.
        uint32_t  extended_tag         :   1;    //  Extended Tag Field Support.
                                                 // Indicated the maximum
                                                 // supported size of the Tag
                                                 // field as a Requester. FXR
                                                 // supports 8-bit Tags.
        uint32_t  l0s_latency          :   3;    //  Endpoint L0s Acceptable
                                                 // Latency. Indicated the
                                                 // acceptable total latency that
                                                 // tan Endpoint can withstand due
                                                 // to the transition from L0s to
                                                 // L0 state. FXR latency is
                                                 // 256ns?
        uint32_t  l1_latency           :   3;    //  Endpoint L1 Acceptable
                                                 // Latency. Indicated the
                                                 // acceptable total latency that
                                                 // tan Endpoint can withstand due
                                                 // to the transition from L1 to
                                                 // L0 state. FXR latency is 1us?
        uint32_t  reserved_14_12       :   3;    //  Reserved
        uint32_t  role_error           :   1;    //  Role-Based Error Reporting.
        uint32_t  reserved_17_16       :   2;    //  Reserved
        uint32_t  slot_pwr_value       :   8;    //  Captured Slot Power Limit
                                                 // Value.
        uint32_t  slot_pwr_scale       :   2;    //  Captured Slot Power Limit
                                                 // Scale.
        uint32_t  flr_capability       :   1;    //  Function Level Reset
                                                 // Capability.
        uint32_t  Reserved_31_29       :   3;    //  Reserved

    };
    uint32_t                         val;
} FXR_CFG_DEVICE_CAPABILITIES_t;

// --------------------------------------------------------------------------------------------------------------------------------

// FXR_CFG_DEVICE_STAT_CTL desc:  Device Status and Control Register.
typedef volatile union {
    struct {
        uint32_t  correct_error_ena    :   1;    //  Correctable Error Reporting
                                                 // Enable. This bit, in
                                                 // conjunction with other bits,
                                                 // controls sending ERR_COR
                                                 // Messages.
        uint32_t  nonfatal_error_ena   :   1;    //  Non-Fatal Error Reporting
                                                 // Enable. This bit, in
                                                 // conjunction with other bits,
                                                 // controls sending ERR_NONFATAL
                                                 // Messages.
        uint32_t  fatal_error_ena      :   1;    //  Fatal Error Reporting Enable.
                                                 // This bit, in conjunction with
                                                 // other bits, controls sending
                                                 // ERR_FATAL Messages.
        uint32_t  unsupport_req_ena    :   1;    //  Unsupported Request Reporting
                                                 // Enable. This bit, in
                                                 // conjunction with other bits,
                                                 // controls the signaling of
                                                 // Unsupported Request Errors by
                                                 // sending error Messages.
        uint32_t  relax_order_ena      :   1;    //  Relaxed Ordering Enable. If
                                                 // this bit is Set, the Function
                                                 // is permitted to set the
                                                 // Relaxed Ordering bit in the
                                                 // Attributes field of
                                                 // transactions it initiates
        uint32_t  max_payload          :   3;    //  Max Payload Size. This field
                                                 // sets maximum TLP payload size
                                                 // for the Function.
        uint32_t  exteded_tag_ena      :   1;    //  Extended Tag Field Enable.
                                                 // When Set, this bit enables a
                                                 // Function to use an 8-bit Tag
                                                 // field as a Requester.
        uint32_t  phantom_func_ena     :   1;    //  Phantom Function Enable. When
                                                 // Set, this bit enables a
                                                 // Function to use unclaimed
                                                 // Functions as Phantom Functions
                                                 // to extend the number of
                                                 // outstanding transaction
                                                 // identifiers.
        uint32_t  aux_power_ena        :   1;    //  Aux Power PM Enable.
        uint32_t  no_snoop_ena         :   1;    //  No Snoop Enable. If this bit
                                                 // is Set, the Function is
                                                 // permitted to Set the No Snoop
                                                 // bit in the Requester
                                                 // Attributes of transactions it
                                                 // initiates
        uint32_t  max_read             :   3;    //  Max Read Request Size. This
                                                 // field sets the maximum Read
                                                 // Request size for the Function
                                                 // as a Requester.
        uint32_t  initiate_flr         :   1;    //  Initiate Function Level
                                                 // Reset. A write of 1 initiates
                                                 // Function Level Reset to the
                                                 // Function. The value read by
                                                 // software from this bit is
                                                 // always 0.
        uint32_t  correctable_error    :   1;    //  Correctable Error Detected.
                                                 // This bit indicates status of
                                                 // correctable errors detected.
        uint32_t  nonfatal_error       :   1;    //  Non-Fatal Error Detected.
                                                 // This bit indicates status of
                                                 // Non-Fatal errors detected.
        uint32_t  fatal_error          :   1;    //  Fatal Error Detected. This
                                                 // bit indicates status of Fatal
                                                 // errors detected.
        uint32_t  unsupported_error    :   1;    //  Unsupported Request Detected.
                                                 // This bit indicates the
                                                 // Function received an
                                                 // Unsupported Request.
        uint32_t  aux_power            :   1;    //  AUX Power Detected. Set if
                                                 // Aux power is detected by the
                                                 // Function
        uint32_t  transactions_pend    :   1;    //  Transactions Pending. When
                                                 // Set, this bit indicates that
                                                 // the Function has issued
                                                 // NonPosted Requests that have
                                                 // not been completed.
        uint32_t  reserved_31_22       :  10;    //  Reserved

    };
    uint32_t                         val;
} FXR_CFG_DEVICE_STAT_CTL_t;

// --------------------------------------------------------------------------------------------------------------------------------

// FXR_CFG_SNOOP_LATENCY desc:  Device Capabilities Register.
typedef volatile union {
    struct {
        uint32_t  snoop_lat_value      :  10;    //  Max Snoop Latency Value.
                                                 // Specifies the maximum snoop
                                                 // latency that a device is
                                                 // permitted to request.
        uint32_t  snoop_lat_scale      :   3;    //  Max Snoop Latency Scale.
                                                 // Specifies a scale for the
                                                 // value contained within the
                                                 // Maximum Snoop Latency Value
                                                 // field.
        uint32_t  reserved_15_13       :   3;    //  Reserved
        uint32_t  nosnoop_lat_value    :  10;    //  Max No-Snoop Latency Value.
                                                 // Specifies the maximum no-snoop
                                                 // latency that a device is
                                                 // permitted to request.
        uint32_t  nosnoop_lat_scale    :   3;    //  Max No-Snoop Latency Scale.
                                                 // Specifies a scale for the
                                                 // value contained within the
                                                 // Maximum No-Snoop Latency
                                                 // Value field.
        uint32_t  reserved_31_29       :   3;    //  Reserved

    };
    uint32_t                         val;
} FXR_CFG_SNOOP_LATENCY_t;

// --------------------------------------------------------------------------------------------------------------------------------

// starting the array instantiation section
typedef struct {
    FXR_cfg_device_vendor_id_t FXR_cfg_device_vendor_id; // offset 4'h0, width 32
    FXR_cfg_status_command_t   FXR_cfg_status_command; // offset 8'h10, width 32
    fxr_CFG_class_revision_t   fxr_CFG_class_revision; // offset 8'h20, width 32
    FXR_cfg_header_cacheline_t FXR_cfg_header_cacheline; // offset 8'h30, width 32
    FXR_CFG_BAR0_t             FXR_CFG_BAR0;     // offset 8'h40, width 32
    FXR_CFG_BAR1_t             FXR_CFG_BAR1;     // offset 8'h50, width 32
    FXR_CFG_SUBSYSTEM_VENDOR_t FXR_CFG_SUBSYSTEM_VENDOR; // offset 12'h0B0, width 32
    FXR_CFG_EXPANSION_ROM_t    FXR_CFG_EXPANSION_ROM; // offset 12'h0C0, width 32
    FXR_CFG_CAPABILITIES_t     FXR_CFG_CAPABILITIES; // offset 12'h0D0, width 32
    FXR_CFG_INTERRUPT_t        FXR_CFG_INTERRUPT; // offset 12'h0F0, width 32
    FXR_CFG_MSIX_CONTROL_t     FXR_CFG_MSIX_CONTROL; // offset 12'h200, width 32
    FXR_CFG_MSIX_TABLE_OFFSET_t FXR_CFG_MSIX_TABLE_OFFSET; // offset 12'h210, width 32
    FXR_CFG_MSIX_PBA_OFFSET_t  FXR_CFG_MSIX_PBA_OFFSET; // offset 12'h220, width 32
    FXR_CFG_EXP_CAPABILITIES_t FXR_CFG_EXP_CAPABILITIES; // offset 12'h280, width 32
    FXR_CFG_DEVICE_CAPABILITIES_t FXR_CFG_DEVICE_CAPABILITIES; // offset 12'h290, width 32
    FXR_CFG_DEVICE_STAT_CTL_t  FXR_CFG_DEVICE_STAT_CTL; // offset 12'h2A0, width 32
    FXR_CFG_SNOOP_LATENCY_t    FXR_CFG_SNOOP_LATENCY; // offset 12'h310, width 32
} fxr_config_cfg_t;                              // size:  12'h314
