/*
* Autogenerated by i_csrs.pl on Thu Sep 19 07:54:38 2013
* 
* i_csrs.pl Version 1.1 last modified on Thursday 9/19/13 07:54:33.
*/
/*
* Table #6 of 250_RXE_Registers.xml - RcvCtrl
* This CSR is used for control and configuration of the receive 
* engine.
*/
#define WFR_RCV_CTRL                                         (WFR_RXE + 0x000000000000)
#define WFR_RCV_CTRL_RESETCSR                                0x0000000000000000ull
#define WFR_RCV_CTRL_RCV_EXTENDED_PSN_ENABLE_SHIFT           6
#define WFR_RCV_CTRL_RCV_EXTENDED_PSN_ENABLE_MASK            0x1ull
#define WFR_RCV_CTRL_RCV_EXTENDED_PSN_ENABLE_SMASK           0x40ull
#define WFR_RCV_CTRL_RCV_RSM_ENABLE_SHIFT                    5
#define WFR_RCV_CTRL_RCV_RSM_ENABLE_MASK                     0x1ull
#define WFR_RCV_CTRL_RCV_RSM_ENABLE_SMASK                    0x20ull
#define WFR_RCV_CTRL_RCV_BYPASS_ENABLE_SHIFT                 4
#define WFR_RCV_CTRL_RCV_BYPASS_ENABLE_MASK                  0x1ull
#define WFR_RCV_CTRL_RCV_BYPASS_ENABLE_SMASK                 0x10ull
#define WFR_RCV_CTRL_RCV_RESET_CREDIT_SHIFT                  3
#define WFR_RCV_CTRL_RCV_RESET_CREDIT_MASK                   0x1ull
#define WFR_RCV_CTRL_RCV_RESET_CREDIT_SMASK                  0x8ull
#define WFR_RCV_CTRL_RCV_PARTITION_KEY_ENABLE_SHIFT          2
#define WFR_RCV_CTRL_RCV_PARTITION_KEY_ENABLE_MASK           0x1ull
#define WFR_RCV_CTRL_RCV_PARTITION_KEY_ENABLE_SMASK          0x4ull
#define WFR_RCV_CTRL_RCV_QP_MAP_ENABLE_SHIFT                 1
#define WFR_RCV_CTRL_RCV_QP_MAP_ENABLE_MASK                  0x1ull
#define WFR_RCV_CTRL_RCV_QP_MAP_ENABLE_SMASK                 0x2ull
#define WFR_RCV_CTRL_RCV_PORT_ENABLE_SHIFT                   0
#define WFR_RCV_CTRL_RCV_PORT_ENABLE_MASK                    0x1ull
#define WFR_RCV_CTRL_RCV_PORT_ENABLE_SMASK                   0x1ull
/*
* Table #7 of 250_RXE_Registers.xml - RcvStatus
* This CSR is used for accessing the status of the receive engine.
*/
#define WFR_RCV_STATUS                                       (WFR_RXE + 0x000000000008)
#define WFR_RCV_STATUS_RESETCSR                              0x0000000000000000ull
#define WFR_RCV_STATUS_RX_PKT_IN_PROGRESS_SHIFT              0
#define WFR_RCV_STATUS_RX_PKT_IN_PROGRESS_MASK               0x1ull
#define WFR_RCV_STATUS_RX_PKT_IN_PROGRESS_SMASK              0x1ull
/*
* Table #8 of 250_RXE_Registers.xml - RcvContexts
* This CSR is used by software for determining the number of receive 
* contexts.
*/
#define WFR_RCV_CONTEXTS                                     (WFR_RXE + 0x000000000010)
#define WFR_RCV_CONTEXTS_RESETCSR                            0x00000000000000A0ull
#define WFR_RCV_CONTEXTS_CNT_SHIFT                           0
#define WFR_RCV_CONTEXTS_CNT_MASK                            0xFFull
#define WFR_RCV_CONTEXTS_CNT_SMASK                           0xFFull
/*
* Table #9 of 250_RXE_Registers.xml - RcvArrayCnt
* This CSR is used by software for determining the number of entries in the 
* receive array.
*/
#define WFR_RCV_ARRAY_CNT                                    (WFR_RXE + 0x000000000018)
#define WFR_RCV_ARRAY_CNT_RESETCSR                           0x0000000000010000ull
#define WFR_RCV_ARRAY_CNT_CNT_SHIFT                          0
#define WFR_RCV_ARRAY_CNT_CNT_MASK                           0xFFFFFull
#define WFR_RCV_ARRAY_CNT_CNT_SMASK                          0xFFFFFull
/*
* Table #10 of 250_RXE_Registers.xml - RcvBufSize
* This CSR is used by software for determining the size of the receive 
* buffer.
*/
#define WFR_RCV_BUF_SIZE                                     (WFR_RXE + 0x000000000020)
#define WFR_RCV_BUF_SIZE_RESETCSR                            0x0000000000025000ull
#define WFR_RCV_BUF_SIZE_CNT_SHIFT                           0
#define WFR_RCV_BUF_SIZE_CNT_MASK                            0xFFFFFull
#define WFR_RCV_BUF_SIZE_CNT_SMASK                           0xFFFFFull
/*
* Table #11 of 250_RXE_Registers.xml - RcvBthQP
* This CSR is used to specify the QP value used for identifying KDETH packets on 
* the receive side. In normal use, software should program this to the same 
* value as SendBthQP. The reason for having two CSRs for the same value is to 
* separate TX and RX implementation.
*/
#define WFR_RCV_BTH_QP                                       (WFR_RXE + 0x000000000028)
#define WFR_RCV_BTH_QP_RESETCSR                              0x0000000000000000ull
#define WFR_RCV_BTH_QP_KDETH_QP_SHIFT                        16
#define WFR_RCV_BTH_QP_KDETH_QP_MASK                         0xFFull
#define WFR_RCV_BTH_QP_KDETH_QP_SMASK                        0xFF0000ull
/*
* Table #12 of 250_RXE_Registers.xml - RcvMulticast
* This CSR is used to specify the context used for multicast packets. Multicast 
* IB/9B packets are identified by the LRH.DLID field being in the range of 
* 0xC000 to 0xFFFE inclusive. Receive context numbers are in the range of 0 to 
* 159 inclusive. Values in the range 160 to 255 inclusive are invalid, and cause 
* packets to be dropped.
*/
#define WFR_RCV_MULTICAST                                    (WFR_RXE + 0x000000000030)
#define WFR_RCV_MULTICAST_RESETCSR                           0x0000000000000000ull
#define WFR_RCV_MULTICAST_MULTICAST_CONTEXT_SHIFT            0
#define WFR_RCV_MULTICAST_MULTICAST_CONTEXT_MASK             0xFFull
#define WFR_RCV_MULTICAST_MULTICAST_CONTEXT_SMASK            0xFFull
/*
* Table #13 of 250_RXE_Registers.xml - RcvBypass
* This CSR is used to specify the context used for bypass packets. Receive 
* context numbers are in the range of 0 to 159 inclusive. Values in the range 
* 160 to 255 inclusive are invalid, and cause packets to be dropped.
*/
#define WFR_RCV_BYPASS                                       (WFR_RXE + 0x000000000038)
#define WFR_RCV_BYPASS_RESETCSR                              0x0000000000000000ull
#define WFR_RCV_BYPASS_HDR_SIZE_SHIFT                        16
#define WFR_RCV_BYPASS_HDR_SIZE_MASK                         0xFFull
#define WFR_RCV_BYPASS_HDR_SIZE_SMASK                        0xFF0000ull
#define WFR_RCV_BYPASS_BYPASS_CONTEXT_SHIFT                  0
#define WFR_RCV_BYPASS_BYPASS_CONTEXT_MASK                   0xFFull
#define WFR_RCV_BYPASS_BYPASS_CONTEXT_SMASK                  0xFFull
/*
* Table #14 of 250_RXE_Registers.xml - RcvPktLedCnt
* This CSR is used to control the LED blinking for receive packet 
* activities.
*/
#define WFR_RCV_PKT_LED_CNT                                  (WFR_RXE + 0x000000000040)
#define WFR_RCV_PKT_LED_CNT_RESETCSR                         0x0000000000000000ull
#define WFR_RCV_PKT_LED_CNT_ON_PERIOD_SHIFT                  32
#define WFR_RCV_PKT_LED_CNT_ON_PERIOD_MASK                   0xFFFFFFFFull
#define WFR_RCV_PKT_LED_CNT_ON_PERIOD_SMASK                  0xFFFFFFFF00000000ull
#define WFR_RCV_PKT_LED_CNT_OFF_PERIOD_SHIFT                 0
#define WFR_RCV_PKT_LED_CNT_OFF_PERIOD_MASK                  0xFFFFFFFFull
#define WFR_RCV_PKT_LED_CNT_OFF_PERIOD_SMASK                 0xFFFFFFFFull
/*
* Table #15 of 250_RXE_Registers.xml - RcvVL15
* This CSR is used to specify the receive context used for VL15 packets. VL15 
* packets are identified by the 4-bit VL sideband signal from Duncan Creek 
* having the value of 15. For IB packets this corresponds to the LRH.VL field, 
* while for STL 9B packets it is the result of translating the SC field through 
* the SC2VL_r table inside Duncan Creek. Bypass packets are handled separately 
* and do not use the value in this CSR. Receive context numbers are in the range 
* of 0 to 159 inclusive. Values in the range 160 to 255 inclusive are invalid, 
* and cause packets to be dropped.
*/
#define WFR_RCV_VL15                                         (WFR_RXE + 0x000000000048)
#define WFR_RCV_VL15_RESETCSR                                0x0000000000000000ull
#define WFR_RCV_VL15_VL15CONTEXT_SHIFT                       0
#define WFR_RCV_VL15_VL15CONTEXT_MASK                        0xFFull
#define WFR_RCV_VL15_VL15CONTEXT_SMASK                       0xFFull
/*
* Table #16 of 250_RXE_Registers.xml - RcvErrStatus
* This CSR reports error status for the receive engine.
*/
#define WFR_RCV_ERR_STATUS                                   (WFR_RXE + 0x000000000060)
#define WFR_RCV_ERR_STATUS_RESETCSR                          0x0000000000000000ull
#define WFR_RCV_ERR_STATUS_ERR_SHIFT                         0
#define WFR_RCV_ERR_STATUS_ERR_MASK                          0x1ull
#define WFR_RCV_ERR_STATUS_ERR_SMASK                         0x1ull
/*
* Table #17 of 250_RXE_Registers.xml - RcvErrMask
* This CSR is used to set the error mask for the receive engine.
*/
#define WFR_RCV_ERR_MASK                                     (WFR_RXE + 0x000000000068)
#define WFR_RCV_ERR_MASK_RESETCSR                            0x0000000000000000ull
#define WFR_RCV_ERR_MASK_ERR_SHIFT                           0
#define WFR_RCV_ERR_MASK_ERR_MASK                            0x1ull
#define WFR_RCV_ERR_MASK_ERR_SMASK                           0x1ull
/*
* Table #18 of 250_RXE_Registers.xml - RcvErrClear
* This CSR is used to clear an error or errors for the receive engine. Each bit 
* that is written as 1 will clear down the corresponding error 
* case.
*/
#define WFR_RCV_ERR_CLEAR                                    (WFR_RXE + 0x000000000070)
#define WFR_RCV_ERR_CLEAR_RESETCSR                           0x0000000000000000ull
#define WFR_RCV_ERR_CLEAR_ERR_SHIFT                          0
#define WFR_RCV_ERR_CLEAR_ERR_MASK                           0x1ull
#define WFR_RCV_ERR_CLEAR_ERR_SMASK                          0x1ull
/*
* Table #19 of 250_RXE_Registers.xml - RcvErrForce
* This CSR is used to force the setting of an error or errors for the receive 
* engine. Each bit that is written as 1 will set the corresponding error case. 
* This feature is for testing purposes.
*/
#define WFR_RCV_ERR_FORCE                                    (WFR_RXE + 0x000000000078)
#define WFR_RCV_ERR_FORCE_RESETCSR                           0x0000000000000000ull
#define WFR_RCV_ERR_FORCE_ERR_SHIFT                          0
#define WFR_RCV_ERR_FORCE_ERR_MASK                           0x1ull
#define WFR_RCV_ERR_FORCE_ERR_SMASK                          0x1ull
/*
* Table #20 of 250_RXE_Registers.xml - RcvQPMapTable
* This array of CSRs is used to specify the mapping of QP space to receive 
* contexts. There are eight 8-bit receive context values packets into each CSR. 
* Receive context numbers are in the range of 0 to 159 inclusive. Values in the 
* range 160 to 255 inclusive are invalid, and cause packets to be 
* dropped.
*/
#define WFR_RCV_QP_MAP_TABLE                                 (WFR_RXE + 0x000000000100)
#define WFR_RCV_QP_MAP_TABLE_RESETCSR                        0x0000000000000000ull
#define WFR_RCV_QP_MAP_TABLE_RCV_CONTEXT_H_SHIFT             56
#define WFR_RCV_QP_MAP_TABLE_RCV_CONTEXT_H_MASK              0xFFull
#define WFR_RCV_QP_MAP_TABLE_RCV_CONTEXT_H_SMASK             0xFF00000000000000ull
#define WFR_RCV_QP_MAP_TABLE_RCV_CONTEXT_G_SHIFT             48
#define WFR_RCV_QP_MAP_TABLE_RCV_CONTEXT_G_MASK              0xFFull
#define WFR_RCV_QP_MAP_TABLE_RCV_CONTEXT_G_SMASK             0xFF000000000000ull
#define WFR_RCV_QP_MAP_TABLE_RCV_CONTEXT_F_SHIFT             40
#define WFR_RCV_QP_MAP_TABLE_RCV_CONTEXT_F_MASK              0xFFull
#define WFR_RCV_QP_MAP_TABLE_RCV_CONTEXT_F_SMASK             0xFF0000000000ull
#define WFR_RCV_QP_MAP_TABLE_RCV_CONTEXT_E_SHIFT             32
#define WFR_RCV_QP_MAP_TABLE_RCV_CONTEXT_E_MASK              0xFFull
#define WFR_RCV_QP_MAP_TABLE_RCV_CONTEXT_E_SMASK             0xFF00000000ull
#define WFR_RCV_QP_MAP_TABLE_RCV_CONTEXT_D_SHIFT             24
#define WFR_RCV_QP_MAP_TABLE_RCV_CONTEXT_D_MASK              0xFFull
#define WFR_RCV_QP_MAP_TABLE_RCV_CONTEXT_D_SMASK             0xFF000000ull
#define WFR_RCV_QP_MAP_TABLE_RCV_CONTEXT_C_SHIFT             16
#define WFR_RCV_QP_MAP_TABLE_RCV_CONTEXT_C_MASK              0xFFull
#define WFR_RCV_QP_MAP_TABLE_RCV_CONTEXT_C_SMASK             0xFF0000ull
#define WFR_RCV_QP_MAP_TABLE_RCV_CONTEXT_B_SHIFT             8
#define WFR_RCV_QP_MAP_TABLE_RCV_CONTEXT_B_MASK              0xFFull
#define WFR_RCV_QP_MAP_TABLE_RCV_CONTEXT_B_SMASK             0xFF00ull
#define WFR_RCV_QP_MAP_TABLE_RCV_CONTEXT_A_SHIFT             0
#define WFR_RCV_QP_MAP_TABLE_RCV_CONTEXT_A_MASK              0xFFull
#define WFR_RCV_QP_MAP_TABLE_RCV_CONTEXT_A_SMASK             0xFFull
/*
* Table #21 of 250_RXE_Registers.xml - RcvPartitionKey
* This CSR array is used to specify partition key values. There are four 16-bit 
* P_KEY values packed into each CSR, and 4 separate CSRs to give a total of 16 
* partition keys. The partition key values are undefined after 
* reset.
*/
#define WFR_RCV_PARTITION_KEY                                (WFR_RXE + 0x000000000200)
#define WFR_RCV_PARTITION_KEY_RESETCSR                       0x0000000000000000ull
#define WFR_RCV_PARTITION_KEY_PARTITION_KEY_D_SHIFT          48
#define WFR_RCV_PARTITION_KEY_PARTITION_KEY_D_MASK           0xFFFFull
#define WFR_RCV_PARTITION_KEY_PARTITION_KEY_D_SMASK          0xFFFF000000000000ull
#define WFR_RCV_PARTITION_KEY_PARTITION_KEY_C_SHIFT          32
#define WFR_RCV_PARTITION_KEY_PARTITION_KEY_C_MASK           0xFFFFull
#define WFR_RCV_PARTITION_KEY_PARTITION_KEY_C_SMASK          0xFFFF00000000ull
#define WFR_RCV_PARTITION_KEY_PARTITION_KEY_B_SHIFT          16
#define WFR_RCV_PARTITION_KEY_PARTITION_KEY_B_MASK           0xFFFFull
#define WFR_RCV_PARTITION_KEY_PARTITION_KEY_B_SMASK          0xFFFF0000ull
#define WFR_RCV_PARTITION_KEY_PARTITION_KEY_A_SHIFT          0
#define WFR_RCV_PARTITION_KEY_PARTITION_KEY_A_MASK           0xFFFFull
#define WFR_RCV_PARTITION_KEY_PARTITION_KEY_A_SMASK          0xFFFFull
/*
* Table #22 of 250_RXE_Registers.xml - RcvCreditVL
* This CSR array is used to specify the credit information for each data 
* VL.
*/
#define WFR_RCV_CREDIT_VL                                    (WFR_RXE + 0x000000000300)
#define WFR_RCV_CREDIT_VL_RESETCSR                           0x0000000000000000ull
#define WFR_RCV_CREDIT_VL_RX_BUFR_CONSUMED_VL_SHIFT          16
#define WFR_RCV_CREDIT_VL_RX_BUFR_CONSUMED_VL_MASK           0xFFFull
#define WFR_RCV_CREDIT_VL_RX_BUFR_CONSUMED_VL_SMASK          0xFFF0000ull
#define WFR_RCV_CREDIT_VL_RX_MAX_CREDIT_VL_SHIFT             0
#define WFR_RCV_CREDIT_VL_RX_MAX_CREDIT_VL_MASK              0xFFFull
#define WFR_RCV_CREDIT_VL_RX_MAX_CREDIT_VL_SMASK             0xFFFull
/*
* Table #23 of 250_RXE_Registers.xml - RcvCreditVL15
* This CSR is used to specify the credit information for VL15.
*/
#define WFR_RCV_CREDIT_VL15                                  (WFR_RXE + 0x000000000378)
#define WFR_RCV_CREDIT_VL15_RESETCSR                         0x0000000000000000ull
#define WFR_RCV_CREDIT_VL15_RX_BUFR_CONSUMED_VL_SHIFT        16
#define WFR_RCV_CREDIT_VL15_RX_BUFR_CONSUMED_VL_MASK         0xFFFull
#define WFR_RCV_CREDIT_VL15_RX_BUFR_CONSUMED_VL_SMASK        0xFFF0000ull
#define WFR_RCV_CREDIT_VL15_RX_MAX_CREDIT_VL_SHIFT           0
#define WFR_RCV_CREDIT_VL15_RX_MAX_CREDIT_VL_MASK            0xFFFull
#define WFR_RCV_CREDIT_VL15_RX_MAX_CREDIT_VL_SMASK           0xFFFull
/*
* Table #24 of 250_RXE_Registers.xml - RcvCounterArray32
* This CSR array is used to access 32-bit receive counters.
*/
#define WFR_RCV_COUNTER_ARRAY32                              (WFR_RXE + 0x000000000400)
#define WFR_RCV_COUNTER_ARRAY32_RESETCSR                     0x0000000000000000ull
#define WFR_RCV_COUNTER_ARRAY32_CNT_SHIFT                    0
#define WFR_RCV_COUNTER_ARRAY32_CNT_MASK                     0xFFFFFFFFull
#define WFR_RCV_COUNTER_ARRAY32_CNT_SMASK                    0xFFFFFFFFull
/*
* Table #25 of 250_RXE_Registers.xml - RcvCounterArray64
* This CSR array is used to access 64-bit receive counters.
*/
#define WFR_RCV_COUNTER_ARRAY64                              (WFR_RXE + 0x000000000500)
#define WFR_RCV_COUNTER_ARRAY64_RESETCSR                     0x0000000000000000ull
#define WFR_RCV_COUNTER_ARRAY64_CNT_SHIFT                    0
#define WFR_RCV_COUNTER_ARRAY64_CNT_MASK                     0xFFFFFFFFFFFFFFFFull
#define WFR_RCV_COUNTER_ARRAY64_CNT_SMASK                    0xFFFFFFFFFFFFFFFFull
/*
* Table #26 of 250_RXE_Registers.xml - RcvRsmCfg
* This CSR is used for configuring an RSM instance.
*/
#define WFR_RCV_RSM_CFG                                      (WFR_RXE + 0x000000000600)
#define WFR_RCV_RSM_CFG_RESETCSR                             0x0000000000000000ull
#define WFR_RCV_RSM_CFG_PACKET_TYPE_SHIFT                    60
#define WFR_RCV_RSM_CFG_PACKET_TYPE_MASK                     0x7ull
#define WFR_RCV_RSM_CFG_PACKET_TYPE_SMASK                    0x7000000000000000ull
#define WFR_RCV_RSM_CFG_BYPASS_HDR_SIZE_SHIFT                48
#define WFR_RCV_RSM_CFG_BYPASS_HDR_SIZE_MASK                 0xFFull
#define WFR_RCV_RSM_CFG_BYPASS_HDR_SIZE_SMASK                0xFF000000000000ull
#define WFR_RCV_RSM_CFG_OFFSET_SHIFT                         32
#define WFR_RCV_RSM_CFG_OFFSET_MASK                          0xFFull
#define WFR_RCV_RSM_CFG_OFFSET_SMASK                         0xFF00000000ull
#define WFR_RCV_RSM_CFG_ENABLE_OR_CHAIN_RSM3_SHIFT           3
#define WFR_RCV_RSM_CFG_ENABLE_OR_CHAIN_RSM3_MASK            0x1ull
#define WFR_RCV_RSM_CFG_ENABLE_OR_CHAIN_RSM3_SMASK           0x8ull
#define WFR_RCV_RSM_CFG_ENABLE_OR_CHAIN_RSM2_SHIFT           2
#define WFR_RCV_RSM_CFG_ENABLE_OR_CHAIN_RSM2_MASK            0x1ull
#define WFR_RCV_RSM_CFG_ENABLE_OR_CHAIN_RSM2_SMASK           0x4ull
#define WFR_RCV_RSM_CFG_ENABLE_OR_CHAIN_RSM1_SHIFT           1
#define WFR_RCV_RSM_CFG_ENABLE_OR_CHAIN_RSM1_MASK            0x1ull
#define WFR_RCV_RSM_CFG_ENABLE_OR_CHAIN_RSM1_SMASK           0x2ull
#define WFR_RCV_RSM_CFG_ENABLE_OR_CHAIN_RSM0_SHIFT           0
#define WFR_RCV_RSM_CFG_ENABLE_OR_CHAIN_RSM0_MASK            0x1ull
#define WFR_RCV_RSM_CFG_ENABLE_OR_CHAIN_RSM0_SMASK           0x1ull
/*
* Table #27 of 250_RXE_Registers.xml - RcvRsmSelect
* This CSR is used for configuring the match field and index field selection for 
* an RSM instance. The encoding used for the field values is specified in 
* #%%#Section 8.4.4.5, #%%#'RSM Details And Limitations'#%%#.
*/
#define WFR_RCV_RSM_SELECT                                   (WFR_RXE + 0x000000000700)
#define WFR_RCV_RSM_SELECT_RESETCSR                          0x0000000000000000ull
#define WFR_RCV_RSM_SELECT_INDEX2WIDTH_SHIFT                 60
#define WFR_RCV_RSM_SELECT_INDEX2WIDTH_MASK                  0xFull
#define WFR_RCV_RSM_SELECT_INDEX2WIDTH_SMASK                 0xF000000000000000ull
#define WFR_RCV_RSM_SELECT_INDEX2OFFSET_SHIFT                48
#define WFR_RCV_RSM_SELECT_INDEX2OFFSET_MASK                 0x1FFull
#define WFR_RCV_RSM_SELECT_INDEX2OFFSET_SMASK                0x1FF000000000000ull
#define WFR_RCV_RSM_SELECT_INDEX1WIDTH_SHIFT                 44
#define WFR_RCV_RSM_SELECT_INDEX1WIDTH_MASK                  0xFull
#define WFR_RCV_RSM_SELECT_INDEX1WIDTH_SMASK                 0xF00000000000ull
#define WFR_RCV_RSM_SELECT_INDEX1OFFSET_SHIFT                32
#define WFR_RCV_RSM_SELECT_INDEX1OFFSET_MASK                 0x1FFull
#define WFR_RCV_RSM_SELECT_INDEX1OFFSET_SMASK                0x1FF00000000ull
#define WFR_RCV_RSM_SELECT_FIELD2OFFSET_SHIFT                16
#define WFR_RCV_RSM_SELECT_FIELD2OFFSET_MASK                 0x1FFull
#define WFR_RCV_RSM_SELECT_FIELD2OFFSET_SMASK                0x1FF0000ull
#define WFR_RCV_RSM_SELECT_FIELD1OFFSET_SHIFT                0
#define WFR_RCV_RSM_SELECT_FIELD1OFFSET_MASK                 0x1FFull
#define WFR_RCV_RSM_SELECT_FIELD1OFFSET_SMASK                0x1FFull
/*
* Table #28 of 250_RXE_Registers.xml - RcvRsmMatch
* This CSR is used for configuring the match criteria for an RSM 
* instance.
*/
#define WFR_RCV_RSM_MATCH                                    (WFR_RXE + 0x000000000800)
#define WFR_RCV_RSM_MATCH_RESETCSR                           0x0000000000000000ull
#define WFR_RCV_RSM_MATCH_VALUE2_SHIFT                       24
#define WFR_RCV_RSM_MATCH_VALUE2_MASK                        0xFFull
#define WFR_RCV_RSM_MATCH_VALUE2_SMASK                       0xFF000000ull
#define WFR_RCV_RSM_MATCH_MASK2_SHIFT                        16
#define WFR_RCV_RSM_MATCH_MASK2_MASK                         0xFFull
#define WFR_RCV_RSM_MATCH_MASK2_SMASK                        0xFF0000ull
#define WFR_RCV_RSM_MATCH_VALUE1_SHIFT                       8
#define WFR_RCV_RSM_MATCH_VALUE1_MASK                        0xFFull
#define WFR_RCV_RSM_MATCH_VALUE1_SMASK                       0xFF00ull
#define WFR_RCV_RSM_MATCH_MASK1_SHIFT                        0
#define WFR_RCV_RSM_MATCH_MASK1_MASK                         0xFFull
#define WFR_RCV_RSM_MATCH_MASK1_SMASK                        0xFFull
/*
* Table #29 of 250_RXE_Registers.xml - RcvRsmMapTable
* This array of CSRs is used to specify the mapping of RSM indices to receive 
* contexts. There are eight 8-bit receive context values packets into each CSR. 
* Receive context numbers are in the range of 0 to 159 inclusive. Values in the 
* range 160 to 255 inclusive are invalid, and cause packets to be 
* dropped.
*/
#define WFR_RCV_RSM_MAP_TABLE                                (WFR_RXE + 0x000000000900)
#define WFR_RCV_RSM_MAP_TABLE_RESETCSR                       0x0000000000000000ull
#define WFR_RCV_RSM_MAP_TABLE_RCV_CONTEXT_H_SHIFT            56
#define WFR_RCV_RSM_MAP_TABLE_RCV_CONTEXT_H_MASK             0xFFull
#define WFR_RCV_RSM_MAP_TABLE_RCV_CONTEXT_H_SMASK            0xFF00000000000000ull
#define WFR_RCV_RSM_MAP_TABLE_RCV_CONTEXT_G_SHIFT            48
#define WFR_RCV_RSM_MAP_TABLE_RCV_CONTEXT_G_MASK             0xFFull
#define WFR_RCV_RSM_MAP_TABLE_RCV_CONTEXT_G_SMASK            0xFF000000000000ull
#define WFR_RCV_RSM_MAP_TABLE_RCV_CONTEXT_F_SHIFT            40
#define WFR_RCV_RSM_MAP_TABLE_RCV_CONTEXT_F_MASK             0xFFull
#define WFR_RCV_RSM_MAP_TABLE_RCV_CONTEXT_F_SMASK            0xFF0000000000ull
#define WFR_RCV_RSM_MAP_TABLE_RCV_CONTEXT_E_SHIFT            32
#define WFR_RCV_RSM_MAP_TABLE_RCV_CONTEXT_E_MASK             0xFFull
#define WFR_RCV_RSM_MAP_TABLE_RCV_CONTEXT_E_SMASK            0xFF00000000ull
#define WFR_RCV_RSM_MAP_TABLE_RCV_CONTEXT_D_SHIFT            24
#define WFR_RCV_RSM_MAP_TABLE_RCV_CONTEXT_D_MASK             0xFFull
#define WFR_RCV_RSM_MAP_TABLE_RCV_CONTEXT_D_SMASK            0xFF000000ull
#define WFR_RCV_RSM_MAP_TABLE_RCV_CONTEXT_C_SHIFT            16
#define WFR_RCV_RSM_MAP_TABLE_RCV_CONTEXT_C_MASK             0xFFull
#define WFR_RCV_RSM_MAP_TABLE_RCV_CONTEXT_C_SMASK            0xFF0000ull
#define WFR_RCV_RSM_MAP_TABLE_RCV_CONTEXT_B_SHIFT            8
#define WFR_RCV_RSM_MAP_TABLE_RCV_CONTEXT_B_MASK             0xFFull
#define WFR_RCV_RSM_MAP_TABLE_RCV_CONTEXT_B_SMASK            0xFF00ull
#define WFR_RCV_RSM_MAP_TABLE_RCV_CONTEXT_A_SHIFT            0
#define WFR_RCV_RSM_MAP_TABLE_RCV_CONTEXT_A_MASK             0xFFull
#define WFR_RCV_RSM_MAP_TABLE_RCV_CONTEXT_A_SMASK            0xFFull
/*
* Table #31 of 250_RXE_Registers.xml - RcvCtxtCtrl
* This CSR is used for control and configuration of a receive context.
*/
#define WFR_RCV_CTXT_CTRL                                    (WFR_RXE + 0x000000100000)
#define WFR_RCV_CTXT_CTRL_RESETCSR                           0x0000000000000000ull
#define WFR_RCV_CTXT_CTRL_TH_HDR_QUEUE_WRITES_SHIFT          15
#define WFR_RCV_CTXT_CTRL_TH_HDR_QUEUE_WRITES_MASK           0x1ull
#define WFR_RCV_CTXT_CTRL_TH_HDR_QUEUE_WRITES_SMASK          0x8000ull
#define WFR_RCV_CTXT_CTRL_TH_EAGER_PAYLOAD_WRITES_SHIFT      14
#define WFR_RCV_CTXT_CTRL_TH_EAGER_PAYLOAD_WRITES_MASK       0x1ull
#define WFR_RCV_CTXT_CTRL_TH_EAGER_PAYLOAD_WRITES_SMASK      0x4000ull
#define WFR_RCV_CTXT_CTRL_TH_TID_PAYLOAD_WRITES_SHIFT        13
#define WFR_RCV_CTXT_CTRL_TH_TID_PAYLOAD_WRITES_MASK         0x1ull
#define WFR_RCV_CTXT_CTRL_TH_TID_PAYLOAD_WRITES_SMASK        0x2000ull
#define WFR_RCV_CTXT_CTRL_TH_RCV_HDR_TAIL_WRITE_SHIFT        12
#define WFR_RCV_CTXT_CTRL_TH_RCV_HDR_TAIL_WRITE_MASK         0x1ull
#define WFR_RCV_CTXT_CTRL_TH_RCV_HDR_TAIL_WRITE_SMASK        0x1000ull
#define WFR_RCV_CTXT_CTRL_EGR_BUF_SIZE_SHIFT                 8
#define WFR_RCV_CTXT_CTRL_EGR_BUF_SIZE_MASK                  0xFull
#define WFR_RCV_CTXT_CTRL_EGR_BUF_SIZE_SMASK                 0xF00ull
#define WFR_RCV_CTXT_CTRL_REDIRECT_SHIFT                     7
#define WFR_RCV_CTXT_CTRL_REDIRECT_MASK                      0x1ull
#define WFR_RCV_CTXT_CTRL_REDIRECT_SMASK                     0x80ull
#define WFR_RCV_CTXT_CTRL_TAIL_UPD_SHIFT                     6
#define WFR_RCV_CTXT_CTRL_TAIL_UPD_MASK                      0x1ull
#define WFR_RCV_CTXT_CTRL_TAIL_UPD_SMASK                     0x40ull
#define WFR_RCV_CTXT_CTRL_INTR_AVAIL_SHIFT                   5
#define WFR_RCV_CTXT_CTRL_INTR_AVAIL_MASK                    0x1ull
#define WFR_RCV_CTXT_CTRL_INTR_AVAIL_SMASK                   0x20ull
#define WFR_RCV_CTXT_CTRL_TID_FLOW_ENABLE_SHIFT              4
#define WFR_RCV_CTXT_CTRL_TID_FLOW_ENABLE_MASK               0x1ull
#define WFR_RCV_CTXT_CTRL_TID_FLOW_ENABLE_SMASK              0x10ull
#define WFR_RCV_CTXT_CTRL_DONT_DROP_RHQ_FULL_SHIFT           3
#define WFR_RCV_CTXT_CTRL_DONT_DROP_RHQ_FULL_MASK            0x1ull
#define WFR_RCV_CTXT_CTRL_DONT_DROP_RHQ_FULL_SMASK           0x8ull
#define WFR_RCV_CTXT_CTRL_DONT_DROP_EGR_FULL_SHIFT           2
#define WFR_RCV_CTXT_CTRL_DONT_DROP_EGR_FULL_MASK            0x1ull
#define WFR_RCV_CTXT_CTRL_DONT_DROP_EGR_FULL_SMASK           0x4ull
#define WFR_RCV_CTXT_CTRL_ONE_PACKET_PER_EGR_BUFFER_SHIFT    1
#define WFR_RCV_CTXT_CTRL_ONE_PACKET_PER_EGR_BUFFER_MASK     0x1ull
#define WFR_RCV_CTXT_CTRL_ONE_PACKET_PER_EGR_BUFFER_SMASK    0x2ull
#define WFR_RCV_CTXT_CTRL_ENABLE_SHIFT                       0
#define WFR_RCV_CTXT_CTRL_ENABLE_MASK                        0x1ull
#define WFR_RCV_CTXT_CTRL_ENABLE_SMASK                       0x1ull
/*
* Table #32 of 250_RXE_Registers.xml - RcvCtxtStatus
* This CSR is used for reading the state of a receive context.
*/
#define WFR_RCV_CTXT_STATUS                                  (WFR_RXE + 0x000000100008)
#define WFR_RCV_CTXT_STATUS_RESETCSR                         0x0000000000000000ull
#define WFR_RCV_CTXT_STATUS_BLOCKED_EGR_FULL_SHIFT           1
#define WFR_RCV_CTXT_STATUS_BLOCKED_EGR_FULL_MASK            0x1ull
#define WFR_RCV_CTXT_STATUS_BLOCKED_EGR_FULL_SMASK           0x2ull
#define WFR_RCV_CTXT_STATUS_BLOCKED_RHQ_FULL_SHIFT           0
#define WFR_RCV_CTXT_STATUS_BLOCKED_RHQ_FULL_MASK            0x1ull
#define WFR_RCV_CTXT_STATUS_BLOCKED_RHQ_FULL_SMASK           0x1ull
/*
* Table #33 of 250_RXE_Registers.xml - RcvEgrCtrl
* This CSR is used for configuration of the eager buffer entries for a receive 
* context.
*/
#define WFR_RCV_EGR_CTRL                                     (WFR_RXE + 0x000000100010)
#define WFR_RCV_EGR_CTRL_RESETCSR                            0x0000000000000000ull
#define WFR_RCV_EGR_CTRL_EGR_CNT_SHIFT                       32
#define WFR_RCV_EGR_CTRL_EGR_CNT_MASK                        0xFFFull
#define WFR_RCV_EGR_CTRL_EGR_CNT_SMASK                       0xFFF00000000ull
#define WFR_RCV_EGR_CTRL_EGR_BASE_INDEX_SHIFT                0
#define WFR_RCV_EGR_CTRL_EGR_BASE_INDEX_MASK                 0xFFFFull
#define WFR_RCV_EGR_CTRL_EGR_BASE_INDEX_SMASK                0xFFFFull
/*
* Table #34 of 250_RXE_Registers.xml - RcvTidCtrl
* This CSR is used for configuration of the TID entries for a receive 
* context.
*/
#define WFR_RCV_TID_CTRL                                     (WFR_RXE + 0x000000100018)
#define WFR_RCV_TID_CTRL_RESETCSR                            0x0000000000000000ull
#define WFR_RCV_TID_CTRL_TID_PAIR_CNT_SHIFT                  32
#define WFR_RCV_TID_CTRL_TID_PAIR_CNT_MASK                   0x7FFull
#define WFR_RCV_TID_CTRL_TID_PAIR_CNT_SMASK                  0x7FF00000000ull
#define WFR_RCV_TID_CTRL_TID_BASE_INDEX_SHIFT                0
#define WFR_RCV_TID_CTRL_TID_BASE_INDEX_MASK                 0xFFFFull
#define WFR_RCV_TID_CTRL_TID_BASE_INDEX_SMASK                0xFFFFull
/*
* Table #35 of 250_RXE_Registers.xml - RcvKeyCtrl
* This CSR is used for control and configuration of the J_KEY for a receive 
* context.
*/
#define WFR_RCV_KEY_CTRL                                     (WFR_RXE + 0x000000100020)
#define WFR_RCV_KEY_CTRL_RESETCSR                            0x0000000000000000ull
#define WFR_RCV_KEY_CTRL_JOB_KEY_ENABLE_SHIFT                33
#define WFR_RCV_KEY_CTRL_JOB_KEY_ENABLE_MASK                 0x1ull
#define WFR_RCV_KEY_CTRL_JOB_KEY_ENABLE_SMASK                0x200000000ull
#define WFR_RCV_KEY_CTRL_JOB_KEY_ALLOW_PERMISSIVE_SHIFT      32
#define WFR_RCV_KEY_CTRL_JOB_KEY_ALLOW_PERMISSIVE_MASK       0x1ull
#define WFR_RCV_KEY_CTRL_JOB_KEY_ALLOW_PERMISSIVE_SMASK      0x100000000ull
#define WFR_RCV_KEY_CTRL_JOB_KEY_MASK_SHIFT                  16
#define WFR_RCV_KEY_CTRL_JOB_KEY_MASK_MASK                   0xFFFFull
#define WFR_RCV_KEY_CTRL_JOB_KEY_MASK_SMASK                  0xFFFF0000ull
#define WFR_RCV_KEY_CTRL_JOB_KEY_VALUE_SHIFT                 0
#define WFR_RCV_KEY_CTRL_JOB_KEY_VALUE_MASK                  0xFFFFull
#define WFR_RCV_KEY_CTRL_JOB_KEY_VALUE_SMASK                 0xFFFFull
/*
* Table #36 of 250_RXE_Registers.xml - RcvHdrAddr
* This CSR configures the host memory physical address of the receive header 
* queue for a receive context.
*/
#define WFR_RCV_HDR_ADDR                                     (WFR_RXE + 0x000000100028)
#define WFR_RCV_HDR_ADDR_RESETCSR                            0x0000000000000000ull
#define WFR_RCV_HDR_ADDR_ADDRESS_SHIFT                       12
#define WFR_RCV_HDR_ADDR_ADDRESS_MASK                        0xFFFFFFFFFull
#define WFR_RCV_HDR_ADDR_ADDRESS_SMASK                       0xFFFFFFFFF000ull
/*
* Table #37 of 250_RXE_Registers.xml - RcvHdrCnt
* This CSR configures the number of entries in the receive header queue for a 
* receive context.
*/
#define WFR_RCV_HDR_CNT                                      (WFR_RXE + 0x000000100030)
#define WFR_RCV_HDR_CNT_RESETCSR                             0x0000000000000000ull
#define WFR_RCV_HDR_CNT_CNT_SHIFT                            0
#define WFR_RCV_HDR_CNT_CNT_MASK                             0x1FFFFull
#define WFR_RCV_HDR_CNT_CNT_SMASK                            0x1FFFFull
/*
* Table #38 of 250_RXE_Registers.xml - RcvHdrEntSize
* This CSR configures the size of each entry in DWs for the receive header queue 
* for a receive context. Typically, RcvHdrEntSize should be a multiple of the 
* cache line size (64B) and the header queue base address should be cache line 
* aligned for best performance.
*/
#define WFR_RCV_HDR_ENT_SIZE                                 (WFR_RXE + 0x000000100038)
#define WFR_RCV_HDR_ENT_SIZE_RESETCSR                        0x0000000000000000ull
#define WFR_RCV_HDR_ENT_SIZE_ENT_SIZE_SHIFT                  0
#define WFR_RCV_HDR_ENT_SIZE_ENT_SIZE_MASK                   0x3FFull
#define WFR_RCV_HDR_ENT_SIZE_ENT_SIZE_SMASK                  0x3FFull
/*
* Table #39 of 250_RXE_Registers.xml - RcvHdrSize
* This CSR configures the KDETH size in DWs for a receive context.
*/
#define WFR_RCV_HDR_SIZE                                     (WFR_RXE + 0x000000100040)
#define WFR_RCV_HDR_SIZE_RESETCSR                            0x0000000000000000ull
#define WFR_RCV_HDR_SIZE_HDR_SIZE_SHIFT                      0
#define WFR_RCV_HDR_SIZE_HDR_SIZE_MASK                       0xFFull
#define WFR_RCV_HDR_SIZE_HDR_SIZE_SMASK                      0xFFull
/*
* Table #40 of 250_RXE_Registers.xml - RcvHdrTailAddr
* This CSR configures the host memory physical address of the receive header 
* tail for a receive context. If TailUpd is set in RcvCtxtCtrl, the value of the 
* RcvHdrTail for this context will be DMA transferred to host memory using a 4B 
* write to this address. The format of the data in this 4B write is as 
* follows:
*/
#define WFR_RCV_HDR_TAIL_ADDR                                (WFR_RXE + 0x000000100048)
#define WFR_RCV_HDR_TAIL_ADDR_RESETCSR                       0x0000000000000000ull
#define WFR_RCV_HDR_TAIL_ADDR_ADDRESS_SHIFT                  2
#define WFR_RCV_HDR_TAIL_ADDR_ADDRESS_MASK                   0x3FFFFFFFFFFFull
#define WFR_RCV_HDR_TAIL_ADDR_ADDRESS_SMASK                  0xFFFFFFFFFFFCull
/*
* Table #41 of 250_RXE_Registers.xml - RcvAvailTimeOut
* This CSR controls the receive available time-out mechanism which is part of 
* the ent mitigation mechanism for the receiver header queue.
*/
#define WFR_RCV_AVAIL_TIME_OUT                               (WFR_RXE + 0x000000100050)
#define WFR_RCV_AVAIL_TIME_OUT_RESETCSR                      0x0000000000000000ull
#define WFR_RCV_AVAIL_TIME_OUT_TIME_OUT_COUNT_SHIFT          16
#define WFR_RCV_AVAIL_TIME_OUT_TIME_OUT_COUNT_MASK           0xFFFFull
#define WFR_RCV_AVAIL_TIME_OUT_TIME_OUT_COUNT_SMASK          0xFFFF0000ull
#define WFR_RCV_AVAIL_TIME_OUT_TIME_OUT_RELOAD_SHIFT         0
#define WFR_RCV_AVAIL_TIME_OUT_TIME_OUT_RELOAD_MASK          0xFFFFull
#define WFR_RCV_AVAIL_TIME_OUT_TIME_OUT_RELOAD_SMASK         0xFFFFull
/*
* Table #42 of 250_RXE_Registers.xml - RcvHdrOvflCnt
* This CSR is a counter of the number of received packets that have been dropped 
* on a receive context due to overflow of the receive header queue.
*/
#define WFR_RCV_HDR_OVFL_CNT                                 (WFR_RXE + 0x000000100058)
#define WFR_RCV_HDR_OVFL_CNT_RESETCSR                        0x0000000000000000ull
#define WFR_RCV_HDR_OVFL_CNT_CNT_SHIFT                       0
#define WFR_RCV_HDR_OVFL_CNT_CNT_MASK                        0xFFFFFFFFull
#define WFR_RCV_HDR_OVFL_CNT_CNT_SMASK                       0xFFFFFFFFull
/*
* Table #43 of 250_RXE_Registers.xml - RcvCtxtErrStatus
* This CSR reports error status for the receive context.
*/
#define WFR_RCV_CTXT_ERR_STATUS                              (WFR_RXE + 0x000000100080)
#define WFR_RCV_CTXT_ERR_STATUS_RESETCSR                     0x0000000000000000ull
#define WFR_RCV_CTXT_ERR_STATUS_ERR_SHIFT                    0
#define WFR_RCV_CTXT_ERR_STATUS_ERR_MASK                     0x1ull
#define WFR_RCV_CTXT_ERR_STATUS_ERR_SMASK                    0x1ull
/*
* Table #44 of 250_RXE_Registers.xml - RcvCtxtErrMask
* This CSR is used to set the error mask for the receive context.
*/
#define WFR_RCV_CTXT_ERR_MASK                                (WFR_RXE + 0x000000100088)
#define WFR_RCV_CTXT_ERR_MASK_RESETCSR                       0x0000000000000000ull
#define WFR_RCV_CTXT_ERR_MASK_ERR_SHIFT                      0
#define WFR_RCV_CTXT_ERR_MASK_ERR_MASK                       0x1ull
#define WFR_RCV_CTXT_ERR_MASK_ERR_SMASK                      0x1ull
/*
* Table #45 of 250_RXE_Registers.xml - RcvCtxtErrClear
* This CSR is used to clear an error or errors for the receive context. Each bit 
* that is written as 1 will clear down the corresponding error 
* case.
*/
#define WFR_RCV_CTXT_ERR_CLEAR                               (WFR_RXE + 0x000000100090)
#define WFR_RCV_CTXT_ERR_CLEAR_RESETCSR                      0x0000000000000000ull
#define WFR_RCV_CTXT_ERR_CLEAR_ERR_SHIFT                     0
#define WFR_RCV_CTXT_ERR_CLEAR_ERR_MASK                      0x1ull
#define WFR_RCV_CTXT_ERR_CLEAR_ERR_SMASK                     0x1ull
/*
* Table #46 of 250_RXE_Registers.xml - RcvCtxtErrForce
* This CSR is used to force the setting of an error or errors for the receive 
* context. Each bit that is written as 1 will set the corresponding error case. 
* This feature is for testing purposes.
*/
#define WFR_RCV_CTXT_ERR_FORCE                               (WFR_RXE + 0x000000100098)
#define WFR_RCV_CTXT_ERR_FORCE_RESETCSR                      0x0000000000000000ull
#define WFR_RCV_CTXT_ERR_FORCE_ERR_SHIFT                     0
#define WFR_RCV_CTXT_ERR_FORCE_ERR_MASK                      0x1ull
#define WFR_RCV_CTXT_ERR_FORCE_ERR_SMASK                     0x1ull
/*
* Table #48 of 250_RXE_Registers.xml - RcvArray
* The receive array CSRs are used for registering host physical memory mappings 
* for eager buffer and TID entries. A fast update mechanism is provided for 
* these CSRs as defined in #%%#Section 8.5.9, #%%#'Fast Update of Receive Array 
* Entries'#%%#. Reads of these CSRs use the regular CSR read path, and is 
* provided for system debug.
*/
#define WFR_RCV_ARRAY                                        (WFR_RXE + 0x000000200000)
#define WFR_RCV_ARRAY_RESETCSR                               0x0000000000000000ull
#define WFR_RCV_ARRAY_RT_WRITE_ENABLE_SHIFT                  63
#define WFR_RCV_ARRAY_RT_WRITE_ENABLE_MASK                   0x1ull
#define WFR_RCV_ARRAY_RT_WRITE_ENABLE_SMASK                  0x8000000000000000ull
#define WFR_RCV_ARRAY_RT_BUF_SIZE_SHIFT                      36
#define WFR_RCV_ARRAY_RT_BUF_SIZE_MASK                       0xFull
#define WFR_RCV_ARRAY_RT_BUF_SIZE_SMASK                      0xF000000000ull
#define WFR_RCV_ARRAY_RT_ADDR_SHIFT                          0
#define WFR_RCV_ARRAY_RT_ADDR_MASK                           0xFFFFFFFFFull
#define WFR_RCV_ARRAY_RT_ADDR_SMASK                          0xFFFFFFFFFull
/*
* Table #50 of 250_RXE_Registers.xml - RcvHdrTail
* This CSR is used to read the receive header tail for a receive context. The 
* Tail value is an offset relative to RcvHdrAddr in units of DWs. The value 
* increments by RcvHdrEntSize from one header to the next in the header queue, 
* and wraps to 0 after RcvHdrCnt entries. The sizing of the Tail field is 25 
* bits, and is sufficient for the maximum 64K entries at the maximum 512B entry 
* size.
*/
#define WFR_RCV_HDR_TAIL                                     (WFR_RXE + 0x000000300000)
#define WFR_RCV_HDR_TAIL_RESETCSR                            0x0000000000000000ull
#define WFR_RCV_HDR_TAIL_TAIL_SHIFT                          0
#define WFR_RCV_HDR_TAIL_TAIL_MASK                           0x1FFFFFFull
#define WFR_RCV_HDR_TAIL_TAIL_SMASK                          0x1FFFFFFull
/*
* Table #51 of 250_RXE_Registers.xml - RcvHdrHead
* This CSR is used to read and write the receive header head and its interrupt 
* mitigation counter for a receive context.
*/
#define WFR_RCV_HDR_HEAD                                     (WFR_RXE + 0x000000300008)
#define WFR_RCV_HDR_HEAD_RESETCSR                            0x0000000000000000ull
#define WFR_RCV_HDR_HEAD_COUNTER_SHIFT                       32
#define WFR_RCV_HDR_HEAD_COUNTER_MASK                        0xFFFFull
#define WFR_RCV_HDR_HEAD_COUNTER_SMASK                       0xFFFF00000000ull
#define WFR_RCV_HDR_HEAD_HEAD_SHIFT                          0
#define WFR_RCV_HDR_HEAD_HEAD_MASK                           0x1FFFFFFull
#define WFR_RCV_HDR_HEAD_HEAD_SMASK                          0x1FFFFFFull
/*
* Table #52 of 250_RXE_Registers.xml - RcvEgrIndexTail
* This CSR is used to read the receive eager index tail for a receive 
* context.
*/
#define WFR_RCV_EGR_INDEX_TAIL                               (WFR_RXE + 0x000000300010)
#define WFR_RCV_EGR_INDEX_TAIL_RESETCSR                      0x0000000000000000ull
#define WFR_RCV_EGR_INDEX_TAIL_TAIL_SHIFT                    0
#define WFR_RCV_EGR_INDEX_TAIL_TAIL_MASK                     0x7FFull
#define WFR_RCV_EGR_INDEX_TAIL_TAIL_SMASK                    0x7FFull
/*
* Table #53 of 250_RXE_Registers.xml - RcvEgrIndexHead
* This CSR is used to read and write the receive header head for a receive 
* context.
*/
#define WFR_RCV_EGR_INDEX_HEAD                               (WFR_RXE + 0x000000300018)
#define WFR_RCV_EGR_INDEX_HEAD_RESETCSR                      0x0000000000000000ull
#define WFR_RCV_EGR_INDEX_HEAD_HEAD_SHIFT                    0
#define WFR_RCV_EGR_INDEX_HEAD_HEAD_MASK                     0x7FFull
#define WFR_RCV_EGR_INDEX_HEAD_HEAD_SMASK                    0x7FFull
/*
* Table #54 of 250_RXE_Registers.xml - RcvEgrOffsetTail
* This CSR is used to read the receive eager offset tail for a receive context. 
* This indicates the location within the eager buffer indicated by 
* RcvEgrIndexTail that is available for the next eager payload. 
* 
*/
#define WFR_RCV_EGR_OFFSET_TAIL                              (WFR_RXE + 0x000000300020)
#define WFR_RCV_EGR_OFFSET_TAIL_RESETCSR                     0x0000000000000000ull
#define WFR_RCV_EGR_OFFSET_TAIL_TAIL_SHIFT                   6
#define WFR_RCV_EGR_OFFSET_TAIL_TAIL_MASK                    0xFFFull
#define WFR_RCV_EGR_OFFSET_TAIL_TAIL_SMASK                   0x3FFC0ull
/*
* Table #55 of 250_RXE_Registers.xml - RcvTidFlowTable
* This CSR is for one entry in the flow table for a receive context. Note that 
* this is a two dimensional array with RXE_NUM_TID_FLOWS CSRs for each of 
* RXE_NUM_CONTEXTS receive contexts. A stride of 0x8 is used within a receive 
* context so that these CSRs are consecutive in the per-context memory map, but 
* a stride of 0x1000 is used across receive contexts so that they can be mapped 
* into independent 4KB host pages.
*/
#define WFR_RCV_TID_FLOW_TABLE                               (WFR_RXE + 0x000000300800)
#define WFR_RCV_TID_FLOW_TABLE_RESETCSR                      0x0000000000000000ull
#define WFR_RCV_TID_FLOW_TABLE_GEN_MISMATCH_SHIFT            38
#define WFR_RCV_TID_FLOW_TABLE_GEN_MISMATCH_MASK             0x1ull
#define WFR_RCV_TID_FLOW_TABLE_GEN_MISMATCH_SMASK            0x4000000000ull
#define WFR_RCV_TID_FLOW_TABLE_SEQ_MISMATCH_SHIFT            37
#define WFR_RCV_TID_FLOW_TABLE_SEQ_MISMATCH_MASK             0x1ull
#define WFR_RCV_TID_FLOW_TABLE_SEQ_MISMATCH_SMASK            0x2000000000ull
#define WFR_RCV_TID_FLOW_TABLE_KEEP_PAYLOAD_ON_GEN_ERR_SHIFT 36
#define WFR_RCV_TID_FLOW_TABLE_KEEP_PAYLOAD_ON_GEN_ERR_MASK  0x1ull
#define WFR_RCV_TID_FLOW_TABLE_KEEP_PAYLOAD_ON_GEN_ERR_SMASK 0x1000000000ull
#define WFR_RCV_TID_FLOW_TABLE_KEEP_ON_GEN_ERR_SHIFT         35
#define WFR_RCV_TID_FLOW_TABLE_KEEP_ON_GEN_ERR_MASK          0x1ull
#define WFR_RCV_TID_FLOW_TABLE_KEEP_ON_GEN_ERR_SMASK         0x800000000ull
#define WFR_RCV_TID_FLOW_TABLE_KEEP_AFTER_SEQ_ERR_SHIFT      34
#define WFR_RCV_TID_FLOW_TABLE_KEEP_AFTER_SEQ_ERR_MASK       0x1ull
#define WFR_RCV_TID_FLOW_TABLE_KEEP_AFTER_SEQ_ERR_SMASK      0x400000000ull
#define WFR_RCV_TID_FLOW_TABLE_HDR_SUPP_ENABLED_SHIFT        33
#define WFR_RCV_TID_FLOW_TABLE_HDR_SUPP_ENABLED_MASK         0x1ull
#define WFR_RCV_TID_FLOW_TABLE_HDR_SUPP_ENABLED_SMASK        0x200000000ull
#define WFR_RCV_TID_FLOW_TABLE_FLOW_VALID_SHIFT              32
#define WFR_RCV_TID_FLOW_TABLE_FLOW_VALID_MASK               0x1ull
#define WFR_RCV_TID_FLOW_TABLE_FLOW_VALID_SMASK              0x100000000ull
#define WFR_RCV_TID_FLOW_TABLE_GEN_VAL_SHIFT                 11
#define WFR_RCV_TID_FLOW_TABLE_GEN_VAL_MASK                  0xFFFFFull
#define WFR_RCV_TID_FLOW_TABLE_GEN_VAL_SMASK                 0x7FFFF800ull
#define WFR_RCV_TID_FLOW_TABLE_SEQ_NUM_SHIFT                 0
#define WFR_RCV_TID_FLOW_TABLE_SEQ_NUM_MASK                  0x7FFull
#define WFR_RCV_TID_FLOW_TABLE_SEQ_NUM_SMASK                 0x7FFull
