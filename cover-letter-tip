PKS: Add Protection Keys Supervisor (PKS) support

NOTES for New Intel internal review

This is trimmed down from the 63 patch series here:
	https://kpw.ostc.intel.com/project/linux-drivers-review/cover/20200825072427.1418024-1-ira.weiny@intel.com/

This includes only the patches which I'm going to submit to the TIP tree.  As
such it does not include any of the kmap() changes.

I submitted this upstream here:
	https://lore.kernel.org/lkml/20200717072056.73134-1-ira.weiny@intel.com/

Changes from that RFC version:

0) Rebased to 5.9-rc2
1) saving the PKRS state during NMI exceptions (suggested by Thomas Gleixner)
2) fixing the broken IDT exception code
3) addressing all code comments from the public RFC V2
4) removing preliminary patches out of the series that have been submitted
   separately
5) Add testing of the exception PKRS state
6) Refactor the exception handling code to be part of the core kernel support
   which should make patch review a bit easier. (included here)
7) Clean up function names



This patch set introduces a new page protection mechanism for supervisor pages,
Protection Key Supervisor (PKS).  The initial user of them, persistent memory,
PMEM is going to be a separate series submitted through the MM tree.

PKS enables protections on 'domains' of supervisor pages to limit supervisor
mode access to those pages beyond the normal paging protections.  They work in
a similar fashion to user space pkeys.  Like User page pkeys (PKU), supervisor
pkeys are checked in addition to normal paging protections and Access or Writes
can be disabled via a MSR update without TLB flushes when permissions change.
A page mapping is assigned to a domain by setting a pkey in the page table
entry.

Unlike User pkeys no new instructions are added; rather WRMSR/RDMSR are used to
update the PKRS register.

XSAVE is not supported for the PKRS MSR.  To reduce software complexity the
implementation saves/restores the MSR across context switches but not during
irqs.  This is a compromise which results is a hardening of unwanted access
without absolute restriction.

For consistent behavior with current paging protections, pkey 0 is reserved and
configured to allow full access via the pkey mechanism, thus preserving the
default paging protections on mappings with the default pkey value of 0.

Other keys, (1-15) are allocated by an allocator which prepares us for key
contention from day one.  Kernel users should be prepared for the allocator to
fail either because of key exhaustion or due to PKS not being supported on the
arch and/or CPU instance.

Protecting against stray writes is particularly important for PMEM because,
unlike writes to anonymous memory, writes to PMEM persists across a reboot.
Thus data corruption could result in permanent loss of data.

The following attributes of PKS makes it perfect as a mechanism to protect PMEM
from stray access within the kernel:

   1) Fast switching of permissions
   2) Prevents access without page table manipulations
   3) Works on a per thread basis
   4) No TLB flushes required

PKS is available with 4 and 5 level paging.  Like PKRU is takes 4 bits from the
PTE to store the pkey within the entry.

