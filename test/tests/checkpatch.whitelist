2 chip.c CHECK: Avoid CamelCase: <CceErrInt>
1 chip.c CHECK: Avoid CamelCase: <CceMiscInt>
1 chip.c CHECK: Avoid CamelCase: <CcePciCrSt>
1 chip.c CHECK: Avoid CamelCase: <CcePciTrSt>
1 chip.c CHECK: Avoid CamelCase: <CcePioWrSt>
1 chip.c CHECK: Avoid CamelCase: <CceRcvAvInt>
1 chip.c CHECK: Avoid CamelCase: <CceRcvUrgInt>
1 chip.c CHECK: Avoid CamelCase: <CceSdmaInt>
1 chip.c CHECK: Avoid CamelCase: <CceSndCrInt>
1 chip.c CHECK: Avoid CamelCase: <DcAccLTP>
1 chip.c CHECK: Avoid CamelCase: <DcCrcLn0>
1 chip.c CHECK: Avoid CamelCase: <DcCrcLn1>
1 chip.c CHECK: Avoid CamelCase: <DcCrcLn2>
1 chip.c CHECK: Avoid CamelCase: <DcCrcLn3>
1 chip.c CHECK: Avoid CamelCase: <DcDroppedPkt>
1 chip.c CHECK: Avoid CamelCase: <DcEsc0>
1 chip.c CHECK: Avoid CamelCase: <DcEsc0Plus2>
1 chip.c CHECK: Avoid CamelCase: <DcEsc1>
1 chip.c CHECK: Avoid CamelCase: <DcFltCrdts>
1 chip.c CHECK: Avoid CamelCase: <DcFmCfgErr>
1 chip.c CHECK: Avoid CamelCase: <DcGoodLTP>
1 chip.c CHECK: Avoid CamelCase: <DcLinkSeqCrc>
1 chip.c CHECK: Avoid CamelCase: <DcMarkFcn>
1 chip.c CHECK: Avoid CamelCase: <DcMarkFcnVl>
1 chip.c CHECK: Avoid CamelCase: <DcMcRcvPkts>
1 chip.c CHECK: Avoid CamelCase: <DcMcXmitPkts>
1 chip.c CHECK: Avoid CamelCase: <DcMiscFlg>
1 chip.c CHECK: Avoid CamelCase: <DcMultLn>
1 chip.c CHECK: Avoid CamelCase: <DcPauseComp>
1 chip.c CHECK: Avoid CamelCase: <DcPrfClk>
1 chip.c CHECK: Avoid CamelCase: <DcPrfRxFlit>
1 chip.c CHECK: Avoid CamelCase: <DcPrfTxFlit>
1 chip.c CHECK: Avoid CamelCase: <DcRcvBbl>
1 chip.c CHECK: Avoid CamelCase: <DcRcvBblVl>
1 chip.c CHECK: Avoid CamelCase: <DcRcvBcn>
1 chip.c CHECK: Avoid CamelCase: <DcRcvBcnVl>
1 chip.c CHECK: Avoid CamelCase: <DcRcvCorrCnt>
1 chip.c CHECK: Avoid CamelCase: <DcRcvFcn>
1 chip.c CHECK: Avoid CamelCase: <DcRcvFcnVl>
1 chip.c CHECK: Avoid CamelCase: <DcRcvFlits>
1 chip.c CHECK: Avoid CamelCase: <DcRcvPkts>
1 chip.c CHECK: Avoid CamelCase: <DcRecvErr>
1 chip.c CHECK: Avoid CamelCase: <DcReinitPeer>
1 chip.c CHECK: Avoid CamelCase: <DcRmtPhyErr>
1 chip.c CHECK: Avoid CamelCase: <DcRxFCntl>
1 chip.c CHECK: Avoid CamelCase: <DcRxFlitVl>
1 chip.c CHECK: Avoid CamelCase: <DcRxPktVl>
1 chip.c CHECK: Avoid CamelCase: <DcRxReplay>
1 chip.c CHECK: Avoid CamelCase: <DcSbe>
1 chip.c CHECK: Avoid CamelCase: <DcStsTxMbe>
1 chip.c CHECK: Avoid CamelCase: <DcStsTxSbe>
1 chip.c CHECK: Avoid CamelCase: <DcTotCrc>
1 chip.c CHECK: Avoid CamelCase: <DcTxReplay>
1 chip.c CHECK: Avoid CamelCase: <DcUnctblErr>
1 chip.c CHECK: Avoid CamelCase: <DcXmitCorr>
1 chip.c CHECK: Avoid CamelCase: <DcXmitFCntl>
1 chip.c CHECK: Avoid CamelCase: <DcXmitFlits>
1 chip.c CHECK: Avoid CamelCase: <DcXmitPkts>
1 chip.c CHECK: Avoid CamelCase: <DmaWait>
1 chip.c CHECK: Avoid CamelCase: <LoopPkts>
1 chip.c CHECK: Avoid CamelCase: <OtherNak>
1 chip.c CHECK: Avoid CamelCase: <PktDrop>
1 chip.c CHECK: Avoid CamelCase: <RcDupRew>
1 chip.c CHECK: Avoid CamelCase: <RcResend>
1 chip.c CHECK: Avoid CamelCase: <RcSeqNak>
1 chip.c CHECK: Avoid CamelCase: <RcTimeOut>
1 chip.c CHECK: Avoid CamelCase: <RcvOverflow>
1 chip.c CHECK: Avoid CamelCase: <RdmaSeq>
1 chip.c CHECK: Avoid CamelCase: <RnrNak>
1 chip.c CHECK: Avoid CamelCase: <RxCtxEgrS>
1 chip.c CHECK: Avoid CamelCase: <RxPkt>
1 chip.c CHECK: Avoid CamelCase: <RxTidFLGMs>
1 chip.c CHECK: Avoid CamelCase: <RxTidFLSMs>
1 chip.c CHECK: Avoid CamelCase: <RxTIDFullEr>
1 chip.c CHECK: Avoid CamelCase: <RxTIDInvalid>
1 chip.c CHECK: Avoid CamelCase: <RxWords>
1 chip.c CHECK: Avoid CamelCase: <SeqNak>
1 chip.c CHECK: Avoid CamelCase: <TxDropped>
1 chip.c CHECK: Avoid CamelCase: <TxFlitVL>
1 chip.c CHECK: Avoid CamelCase: <TxFlowStall>
1 chip.c CHECK: Avoid CamelCase: <TxHdrErr>
1 chip.c CHECK: Avoid CamelCase: <TxInvalLen>
1 chip.c CHECK: Avoid CamelCase: <TxMMLenErr>
1 chip.c CHECK: Avoid CamelCase: <TxPkt>
1 chip.c CHECK: Avoid CamelCase: <TxPktVL>
1 chip.c CHECK: Avoid CamelCase: <TxUnderrun>
1 chip.c CHECK: Avoid CamelCase: <TxUnVLErr>
1 chip.c CHECK: Avoid CamelCase: <TxWait>
1 chip.c CHECK: Avoid CamelCase: <TxWaitVL>
1 chip.c CHECK: Avoid CamelCase: <TxWords>
1 chip.c CHECK: Avoid CamelCase: <Unaligned>
1 chip.c CHECK: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.txt
1 chip.c WARNING: Possible unnecessary 'out of memory' message
8 chip.h CHECK: Prefer using the BIT_ULL macro
1 eprom.c CHECK: Prefer using the BIT_ULL macro
1 eprom.c WARNING: ENOSYS means 'invalid syscall nr' and nothing else
1 file_ops.c CHECK: Prefer kzalloc(sizeof(*fp->private_data)...) over kzalloc(sizeof(struct hfi1_filedata)...)
2 hfi.h CHECK: 'ment' may be misspelled - perhaps 'meant'?
2 hfi.h WARNING: Use of volatile is usually wrong: see Documentation/volatile-considered-harmful.txt
1 init.c CHECK: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.txt
2 init.c WARNING: Possible unnecessary 'out of memory' message
1 mad.c CHECK: Avoid CamelCase: <OPA_CAP_MASK3_IsSharedSpaceSupported>
1 mmu_rb.c WARNING: storage class should be at the beginning of the declaration
2 pcie.c WARNING: ENOSYS means 'invalid syscall nr' and nothing else
2 pio.c WARNING: Possible unnecessary 'out of memory' message
2 pio.h WARNING: Use of volatile is usually wrong: see Documentation/volatile-considered-harmful.txt
1 qp.c WARNING: ENOSYS means 'invalid syscall nr' and nothing else
2 qsfp.c CHECK: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.txt
1 sdma.c CHECK: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.txt
4 sdma.h CHECK: Prefer using the BIT_ULL macro
1 sdma.h WARNING: Use of volatile is usually wrong: see Documentation/volatile-considered-harmful.txt
1 srq.c WARNING: ENOSYS means 'invalid syscall nr' and nothing else
1 user_sdma.c WARNING: Macros with flow control statements should be avoided
1 user_sdma.c WARNING: Possible unnecessary 'out of memory' message
