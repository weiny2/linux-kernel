#!/bin/bash

#Simple script to be run by cron to do FPGA regression runs

mode=$1
host1=$2
host2=$3

uptime=0
run_host=$host1
ipostl_server=$host2
ipostl_client=$run_host

hostfile="${host1}_${host2}.hosts"
perf_git="/nfs/sc/disks/fabric_work/ddalessa/perf_analysis/perfromance_team-fab_perf"
verbs_dir="/nfs_scratch/driver_perf/Verbs/verbs-perf-check-r1.0"
turbo="noturbo"
WFRMPI="/usr/mpi/gcc/openmpi-1.8.5-hfi"
datestamp=`date "+%m-%d-%y"`
logdir="/nfs/sc/disks/fabric_mirror/scratch/wfr_reg_test/daily_logs/RHEL7"

# Verbs Perf Settings
MPIVARS="/nfs/sc/disks/fabric_files/tools/intel/impi/5.1.0.038/impi/5.1.0.079/intel64/bin/mpivars.sh"
VERBS_LDLIB="/nfs/sc/disks/fabric_files/tools/intel/impi/5.1.0.038/impi/5.1.0.079/intel64/lib/:/usr/lib64"
COMPILEVARS="/nfs/sc/disks/fabric_files/tools/intel/composerxe/bin/compilervars.sh intel64"
MPI_INCLUDE="/nfs/sc/disks/fabric_files/tools/intel/impi/5.1.0.038/impi/5.1.0.079/intel64/include"
WENV="/nfs/sc/disks/fabric_files/tools/intel/impi/5.1.0.038/impi/5.1.0.079/intel64/include"

get_uptime () {
	host=$1
	ssh root@$host "cat /proc/uptime" | awk '{print $1}' | awk 'BEGIN { FS="." } {print $1}'
}

power_cycle() {
	host=$1
	echo "Power cycling $host"
	ssh fabserv2 "/nfs/site/proj/fabric/apps/power/bin/power -r $host"
}

check_up() {
	host=$1
	uptime=$2

	attempts=0
	while [ $attempts -lt 10 ]; do
		# Try a ping
		ping -c 1 -t 3 $host
		if [ $? -eq 0 ]; then
			echo "$host pings"
			cur_uptime=$(get_uptime $host)
			if [ $cur_uptime -eq 0 ]; then
				echo "Cur uptime is 0 host may be booting still"
			fi

			if [ $cur_uptime -gt $uptime ]; then
				echo "Host never rebooted after 120 seconds ($cur_uptime $uptime)"
				return 1
			fi

			if [ $cur_uptime -lt $uptime ]; then
				echo "Host has rebooted"
				return 0
			fi
		else
			echo "$host does not ping"
		fi
		echo "Checking again in 30 seconds"
		sleep 30
	done

	return 1
}

do_reboot() {
	host=$1
	uptime=$(get_uptime $host)
	echo "$host has been up for $uptime"
	ssh root@$host 'reboot'&
	echo "Waiting 2 minutes to give host time to shutdown and start booting"
	sleep 120
	check_up $host $uptime
	if [ $? -eq 0 ]; then
		return 0
	else
		echo "$host never came up"
		power_cycle $host1

	fi
	check_up $host $uptime
	if [ $? -eq 0]; then
		return 0
	else
		echo "$host never came back after power cycle"
		return 1
	fi
}

function do_mpi_perf()
{
	ssh -t $run_host "cd $perf_git/scripts/regression/osu-perf-check && \
		WFRMPI=$WFRMPI PATH=$WFRMPI/bin:$PATH make clean"

	ssh -t $run_host "cd $perf_git/scripts/regression/osu-perf-check && \
		WFRMPI=$WFRMPI PATH=$WFRMPI/bin:$PATH make"

	ssh -t $run_host "cd $perf_git/scripts/regression/osu-perf-check && \
		WFRMPI=$WFRMPI ./run.sh $hostfile $turbo"
	mv $perf_git/scripts/regression/osu-perf-check/OUTPUT-$datestamp $logdir/mpi_perf.$datestamp
}

function load_ipoib()
{
	echo "Starting IPoIB"
	ssh root@$ipostl_server "modprobe ib_ipoib && ifup ib0"
	if [[ $? -ne 0 ]]; then
		echo "FAIL: Could not bringup ib0 on $ipostl_server"
		exit 1
	fi

	ssh root@$ipostl_client "modprobe ib_ipoib && ifup ib0"
	if [[ $? -ne 0 ]]; then
		echo "FAIL: Could not bringup ib0 on $ipostl_client"
		exit 1
	fi
}

function do_ipostl_perf()
{

	load_ipoib

	echo "Starting test"
	ssh -t $run_host "cd $perf_git/scripts/regression/ipostl-perf-check && \
		./run-ipostl.sh $ipostl_server $ipostl_server-ib \
		$ipostl_client-ib $datestamp"

	mv $perf_git/scripts/regression/ipostl-perf-check/$datestamp $logdir/ipostl_perf.$datestamp
}

function do_verbs_perf()
{
	load_ipoib

	echo "Starting verbs perf"
	ssh -t $run_host "source $MPIVARS && source $COMPILEVARS && alias wenv=$WENV && cd $verbs_dir && \
	 	LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$VERBS_LDLIB \
		INCLUDE=$INCLUDE:$MPI_INCLUDE \
		WFRBUILDS=/nfs_scratch/perfromance_team-fab_perf/wfr-sys/wfr-builds/rh7.0/floor \
		WFRDRIVER=$WFRBUILDS/driver/hfi1.ko \
		WFRMPI=$WFRBUILDS/mpi/openmpi-1.8.2 \
	 	WFRDIAGS=$WFRBUILDS/diags/hfidiags \
	 	WFROPAFM=$WFRBUILDS/opafm-config \
		WFRSCRIPTS=$WFRBUILDS/scripts \
		./run-Verbs-LZ-1QP-Tests.sh $host2-ib $logdir/ibverbs.$datestamp"

	# No need to move the data it is already where it needs to be
}

if [[ $mode == "perf" ]]; then


	# Make sure the hosts are up, they should have been rebooted by the other tests, no need to
	# force yet another reboot.
	ping -c 1 -t 3 $host1
	if [[ $? -ne 0 ]]; then
		echo "FAIL: $host1 does not ping"
		exit 1
	fi

	ping -c 1 -t 3 $host2
	if [[ $? -ne 0 ]]; then
		echo "FAIL: $host2 does not ping"
		exit 1
	fi

	echo "Hosts are up and ready"

	# Make sure the driver is loaded
	cd tests
	./LoadModule.py --nodelist $host1,$host2
	if [[ $? -ne 0 ]]; then
		echo FAIL: Load Module error
		exit 1
	fi

	# Pull in any of the perf team's fixes
	cd $perf_git
	echo "Updating git tree"
	git remote update && /nfs/sc/disks/fabric_work/ddalessa/stgit/stgit-0.16/stg rebase origin/master
	if [[ $? -ne 0 ]]; then
		echo "FAIL: Git error"
		exit 1
	fi

	# Create the host file for MPI tests
	echo $host1 > scripts/regression/osu-perf-check/$hostfile
	echo $host2 >> scripts/regression/osu-perf-check/$hostfile

	do_mpi_perf
	do_ipostl_perf
	do_verbs_perf

else
	# Reboot the hosts to get rid of anything that is fouled up
	echo "Rebooting $host1"
	do_reboot $host1
	if [ $? -ne 0 ]; then
		echo "$host1 never rebooted cleanlyi"
		exit 1
	fi

	echo "Rebooting $host2"
	do_reboot $host2
	if [ $? -ne 0 ]; then
		echo "$host2 never rebooted cleanly"
		exit 1
	fi

	./harness.py --type $mode --nodelist $host1,$host2
fi

# Reboot and hope for the best no need to wait around.
ssh root@$host1 'reboot'&
ssh root@$host2 'reboot'&

