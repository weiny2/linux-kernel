/*
*------------------------------------------------------------------------------
*                                                                              
*  INTEL CONFIDENTIAL                                                          
*                                                                              
*  Copyright 2016 Intel Corporation All Rights Reserved.                 
*                                                                              
*  The source code contained or described herein and all documents related     
*  to the source code ("Material") are owned by Intel Corporation or its    
*  suppliers or licensors. Title to the Material remains with Intel            
*  Corporation or its suppliers and licensors. The Material contains trade     
*  secrets and proprietary and confidential information of Intel or its        
*  suppliers and licensors. The Material is protected by worldwide copyright   
*  and trade secret laws and treaty provisions. No part of the Material may    
*  be used, copied, reproduced, modified, published, uploaded, posted,         
*  transmitted, distributed, or disclosed in any way without Intel's prior     
*  express written permission.                                                 
*                                                                              
*  No license under any patent, copyright, trade secret or other intellectual  
*  property right is granted to or conferred upon you by disclosure or         
*  delivery of the Materials, either expressly, by implication, inducement,    
*  estoppel or otherwise. Any license under such intellectual property rights  
*  must be express and approved by Intel in writing.                           
*                                                                              
*------------------------------------------------------------------------------
*  Auto-generated by /nfs/sc/disks/slx_0108/pvesv/fxr_autogen/i_csrs.pl
*  i_csrs.pl Version 1.5 last modified on Thursday 1/7/16 17:24:50
*  /nfs/sc/disks/slx_0108/pvesv/fxr_autogen/i_csrs.pl -C -R -ST fxr_tx_ci -unit=fxr_tx_ci_cic_csrs -o /nfs/sc/disks/slx_0108/pvesv/fxr_autogen/fxr /nfs/sc/disks/slx_0108/pvesv/fxr_autogen/Fox_River/xml/300_Memory_Map.xml /nfs/sc/disks/slx_0108/pvesv/fxr_autogen/Fox_River/xml/320_Memory_Map_TX_CI.xml
*------------------------------------------------------------------------------
*/

#ifndef DEF_FXR_TX_CI_CIC_CSRS_SW_DEF
#define DEF_FXR_TX_CI_CIC_CSRS_SW_DEF

#ifndef FXR_TX_CI_CIC_CSRS
#define FXR_TX_CI_CIC_CSRS						0x000000000000
#endif
#define FXR_NUM_CONTEXTS						192
#define FXR_NUM_PIDS							4096
#define FXR_MAX_CONTEXT							191
#define FXR_TX_CONTEXT_ENTRIES						128
#define FXR_TX_CONTEXT_MAX						127
#define FXR_RX_CONTEXT_ENTRIES						16
#define FXR_RX_CONTEXT_MAX						15
#define FXR_NUM_SL							32
#define FXR_MAX_SL							31
#define TXCIC_RT_ENTRIES						65536
#define TXCIC_RT_MAX							65535
#define TXCIC_AUTH_ENTRIES						8
#define TXCIC_CSR_OFFSET						0
#define TXCIC_CQ_AUTH_OFFSET						0
#define TXCIC_CQ_CONFIG_OFFSET						12288
#define TXCIC_SL0_TO_TC_OFFSET						13824
#define TXCIC_SL1_TO_TC_OFFSET						13832
#define TXCIC_SL2_TO_TC_OFFSET						13840
#define TXCIC_SL3_TO_TC_OFFSET						13848
#define TXCIC_MAD_TO_TC_OFFSET						13856
#define TXCIC_TO_LIMIT_OFFSET						13864
#define TXCIC_DLID_GRAN_OFFSET						17960
#define TXCIC_ERROR_BASE						24576
#define TXCIC_ERROR_GENERAL_OFFSET					17996
#define TXCIC_ERR_CQ_GENERAL_OFFSET					18010
#define TXCIC_ERR_MBE_OFFSET						18024
#define TXCIC_ERR_CQ_MBE_OFFSET						18032
#define TXCIC_ERR_ST_MBE_OFFSET						18046
#define TXCIC_CQ_ERR_DLID_MBE_OFFSET					18060
#define TXCIC_CQ_OFFSET							1048576
#define TXCIC_RT_OFFSET							3145728
#define TXCIC_CSR_OFFSET						0
#define TXCIC_DRAIN_RESET_OFFSET					0
#define TXCIC_UPDATE_CNTRL_OFFSET					8
#define TXCIC_CQ_TAIL_OFFSET						2048
#define TXCIC_ARBITRATION_DISABLE_OFFSET				3584
#define TXCIC_CFG_TO_LIMIT_OFFSET					3592
#define TXCIC_ERROR_BASE						24576
#define TXCIC_ERR_PER_CQ_GENERAL_OFFSET					24832
#define TXCIC_DBG_ERR_INJECT_OFFSET					28672
/*
* Table #4 of fxr_tx_ci_cic_csrs - TXCIC_CFG_DRAIN_RESET
* 
*/
#define FXR_TXCIC_CFG_DRAIN_RESET					(FXR_TX_CI_CIC_CSRS + 0x000000000000)
#define FXR_TXCIC_CFG_DRAIN_RESET_RESETCSR				0x0000000000000000ull
#define FXR_TXCIC_CFG_DRAIN_RESET_RSV_SHIFT				12
#define FXR_TXCIC_CFG_DRAIN_RESET_RSV_MASK				0xFFFFFFFFFFFFFull
#define FXR_TXCIC_CFG_DRAIN_RESET_RSV_SMASK				0xFFFFFFFFFFFFF000ull
#define FXR_TXCIC_CFG_DRAIN_RESET_BUSY_SHIFT				10
#define FXR_TXCIC_CFG_DRAIN_RESET_BUSY_MASK				0x1ull
#define FXR_TXCIC_CFG_DRAIN_RESET_BUSY_SMASK				0x400ull
#define FXR_TXCIC_CFG_DRAIN_RESET_RESET_SHIFT				9
#define FXR_TXCIC_CFG_DRAIN_RESET_RESET_MASK				0x1ull
#define FXR_TXCIC_CFG_DRAIN_RESET_RESET_SMASK				0x200ull
#define FXR_TXCIC_CFG_DRAIN_RESET_DRAIN_SHIFT				8
#define FXR_TXCIC_CFG_DRAIN_RESET_DRAIN_MASK				0x1ull
#define FXR_TXCIC_CFG_DRAIN_RESET_DRAIN_SMASK				0x100ull
#define FXR_TXCIC_CFG_DRAIN_RESET_DRAIN_CQ_SHIFT			0
#define FXR_TXCIC_CFG_DRAIN_RESET_DRAIN_CQ_MASK				0xFFull
#define FXR_TXCIC_CFG_DRAIN_RESET_DRAIN_CQ_SMASK			0xFFull
/*
* Table #5 of fxr_tx_ci_cic_csrs - TXCIC_CFG_HEAD_UPDATE_CNTRL
* This CSR controls how often TX CQ head pointers are written to 
* memory.
*/
#define FXR_TXCIC_CFG_HEAD_UPDATE_CNTRL					(FXR_TX_CI_CIC_CSRS + 0x000000000008)
#define FXR_TXCIC_CFG_HEAD_UPDATE_CNTRL_RESETCSR			0x0000000000000000ull
#define FXR_TXCIC_CFG_HEAD_UPDATE_CNTRL_RSV_SHIFT			3
#define FXR_TXCIC_CFG_HEAD_UPDATE_CNTRL_RSV_MASK			0x1FFFFFFFFFFFFFFFull
#define FXR_TXCIC_CFG_HEAD_UPDATE_CNTRL_RSV_SMASK			0xFFFFFFFFFFFFFFF8ull
#define FXR_TXCIC_CFG_HEAD_UPDATE_CNTRL_RATE_CTRL_SHIFT			0
#define FXR_TXCIC_CFG_HEAD_UPDATE_CNTRL_RATE_CTRL_MASK			0x7ull
#define FXR_TXCIC_CFG_HEAD_UPDATE_CNTRL_RATE_CTRL_SMASK			0x7ull
/*
* Table #6 of fxr_tx_ci_cic_csrs - TXCIC_STS_TAIL
* This is a per command queue entry for reading the CQ tail pointer. Hardware 
* does not have an explicit tail pointer, instead it keeps track of filled 
* slots. On reads, hardware will return a pointer to the first slot after its 
* head pointer that is not full. Writes are ignored.
*/
#define FXR_TXCIC_STS_TAIL						(FXR_TX_CI_CIC_CSRS + 0x000000000800)
#define FXR_TXCIC_STS_TAIL_RESETCSR					0x0000000000000000ull
#define FXR_TXCIC_STS_TAIL_RSV_SHIFT					7
#define FXR_TXCIC_STS_TAIL_RSV_MASK					0x1FFFFFFFFFFFFFFull
#define FXR_TXCIC_STS_TAIL_RSV_SMASK					0xFFFFFFFFFFFFFF80ull
#define FXR_TXCIC_STS_TAIL_TAIL_SHIFT					0
#define FXR_TXCIC_STS_TAIL_TAIL_MASK					0x7Full
#define FXR_TXCIC_STS_TAIL_TAIL_SMASK					0x7Full
/*
* Table #7 of fxr_tx_ci_cic_csrs - TXCIC_ARBITRATION_DISABLE
* Prevent a new message from being arbitrated from the tc(s) that are disabled. 
* If a message has started arbitration, it will finish.
*/
#define FXR_TXCIC_ARBITRATION_DISABLE					(FXR_TX_CI_CIC_CSRS + 0x000000000E00)
#define FXR_TXCIC_ARBITRATION_DISABLE_RESETCSR				0x0000000000000000ull
#define FXR_TXCIC_ARBITRATION_DISABLE_RSV_SHIFT				4
#define FXR_TXCIC_ARBITRATION_DISABLE_RSV_MASK				0xFFFFFFFFFFFFFFFull
#define FXR_TXCIC_ARBITRATION_DISABLE_RSV_SMASK				0xFFFFFFFFFFFFFFF0ull
#define FXR_TXCIC_ARBITRATION_DISABLE_DISABLE_TC_SHIFT			0
#define FXR_TXCIC_ARBITRATION_DISABLE_DISABLE_TC_MASK			0xFull
#define FXR_TXCIC_ARBITRATION_DISABLE_DISABLE_TC_SMASK			0xFull
/*
* Table #8 of fxr_tx_ci_cic_csrs - TXCIC_CFG_TO_LIMIT
* Specifies the amount of time for a command, once started, to finish writing a 
* CQ.
*/
#define FXR_TXCIC_CFG_TO_LIMIT						(FXR_TX_CI_CIC_CSRS + 0x000000000E08)
#define FXR_TXCIC_CFG_TO_LIMIT_RESETCSR					0x0000000000104000ull
#define FXR_TXCIC_CFG_TO_LIMIT_RSV_63_SHIFT				37
#define FXR_TXCIC_CFG_TO_LIMIT_RSV_63_MASK				0x7FFFFFFull
#define FXR_TXCIC_CFG_TO_LIMIT_RSV_63_SMASK				0xFFFFFFE000000000ull
#define FXR_TXCIC_CFG_TO_LIMIT_TO_LIMIT_SHIFT				20
#define FXR_TXCIC_CFG_TO_LIMIT_TO_LIMIT_MASK				0x1FFFFull
#define FXR_TXCIC_CFG_TO_LIMIT_TO_LIMIT_SMASK				0x1FFFF00000ull
#define FXR_TXCIC_CFG_TO_LIMIT_RSV_SHIFT				0
#define FXR_TXCIC_CFG_TO_LIMIT_RSV_MASK					0xFFFFFull
#define FXR_TXCIC_CFG_TO_LIMIT_RSV_SMASK				0xFFFFFull
/*
* Table #9 of fxr_tx_ci_cic_csrs - TXCIC_ERR_STS
* This is the Error Status CSR. Bits are set by hardware or by writing to the 
* TXCIC_ERR_FRC CSR. Bits are cleared by writing to the TXCIC_ERR_CLR 
* CSR.
*/
#define FXR_TXCIC_ERR_STS						(FXR_TX_CI_CIC_CSRS + 0x000000006000)
#define FXR_TXCIC_ERR_STS_RESETCSR					0x0000000000000000ull
#define FXR_TXCIC_ERR_STS_HEAD_PTR_PAR_ERR_SHIFT			7
#define FXR_TXCIC_ERR_STS_HEAD_PTR_PAR_ERR_MASK				0x1ull
#define FXR_TXCIC_ERR_STS_HEAD_PTR_PAR_ERR_SMASK			0x80ull
#define FXR_TXCIC_ERR_STS_QWORD_CNT_OVRFLW_SHIFT			6
#define FXR_TXCIC_ERR_STS_QWORD_CNT_OVRFLW_MASK				0x1ull
#define FXR_TXCIC_ERR_STS_QWORD_CNT_OVRFLW_SMASK			0x40ull
#define FXR_TXCIC_ERR_STS_CQ_TIMEOUT_SHIFT				5
#define FXR_TXCIC_ERR_STS_CQ_TIMEOUT_MASK				0x1ull
#define FXR_TXCIC_ERR_STS_CQ_TIMEOUT_SMASK				0x20ull
#define FXR_TXCIC_ERR_STS_CQSLOT_LEN_VEC_ERROR_SHIFT			4
#define FXR_TXCIC_ERR_STS_CQSLOT_LEN_VEC_ERROR_MASK			0x1ull
#define FXR_TXCIC_ERR_STS_CQSLOT_LEN_VEC_ERROR_SMASK			0x10ull
#define FXR_TXCIC_ERR_STS_CQSLOT_FULL_VEC_ERROR_SHIFT			3
#define FXR_TXCIC_ERR_STS_CQSLOT_FULL_VEC_ERROR_MASK			0x1ull
#define FXR_TXCIC_ERR_STS_CQSLOT_FULL_VEC_ERROR_SMASK			0x8ull
#define FXR_TXCIC_ERR_STS_QWORD_CNT_ERR_SBE_SHIFT			2
#define FXR_TXCIC_ERR_STS_QWORD_CNT_ERR_SBE_MASK			0x1ull
#define FXR_TXCIC_ERR_STS_QWORD_CNT_ERR_SBE_SMASK			0x4ull
#define FXR_TXCIC_ERR_STS_QWORD_CNT_ERR_MBE_SHIFT			1
#define FXR_TXCIC_ERR_STS_QWORD_CNT_ERR_MBE_MASK			0x1ull
#define FXR_TXCIC_ERR_STS_QWORD_CNT_ERR_MBE_SMASK			0x2ull
#define FXR_TXCIC_ERR_STS_INV_WRITE_FLUSH_SHIFT				0
#define FXR_TXCIC_ERR_STS_INV_WRITE_FLUSH_MASK				0x1ull
#define FXR_TXCIC_ERR_STS_INV_WRITE_FLUSH_SMASK				0x1ull
/*
* Table #10 of fxr_tx_ci_cic_csrs - TXCIC_ERR_CLR
* This is the Error Clear CSR. Writing a 1 to a valid bit will clear the 
* corresponding bit in the TXCIC_ERR_STS CSR.
*/
#define FXR_TXCIC_ERR_CLR						(FXR_TX_CI_CIC_CSRS + 0x000000006008)
#define FXR_TXCIC_ERR_CLR_RESETCSR					0x0000000000000000ull
#define FXR_TXCIC_ERR_CLR_HEAD_PTR_PAR_ERR_SHIFT			7
#define FXR_TXCIC_ERR_CLR_HEAD_PTR_PAR_ERR_MASK				0x1ull
#define FXR_TXCIC_ERR_CLR_HEAD_PTR_PAR_ERR_SMASK			0x80ull
#define FXR_TXCIC_ERR_CLR_QWORD_CNT_OVRFLW_SHIFT			6
#define FXR_TXCIC_ERR_CLR_QWORD_CNT_OVRFLW_MASK				0x1ull
#define FXR_TXCIC_ERR_CLR_QWORD_CNT_OVRFLW_SMASK			0x40ull
#define FXR_TXCIC_ERR_CLR_CQ_TIMEOUT_SHIFT				5
#define FXR_TXCIC_ERR_CLR_CQ_TIMEOUT_MASK				0x1ull
#define FXR_TXCIC_ERR_CLR_CQ_TIMEOUT_SMASK				0x20ull
#define FXR_TXCIC_ERR_CLR_CQSLOT_LEN_VEC_ERROR_SHIFT			4
#define FXR_TXCIC_ERR_CLR_CQSLOT_LEN_VEC_ERROR_MASK			0x1ull
#define FXR_TXCIC_ERR_CLR_CQSLOT_LEN_VEC_ERROR_SMASK			0x10ull
#define FXR_TXCIC_ERR_CLR_CQSLOT_FULL_VEC_ERROR_SHIFT			3
#define FXR_TXCIC_ERR_CLR_CQSLOT_FULL_VEC_ERROR_MASK			0x1ull
#define FXR_TXCIC_ERR_CLR_CQSLOT_FULL_VEC_ERROR_SMASK			0x8ull
#define FXR_TXCIC_ERR_CLR_QWORD_CNT_ERR_SBE_SHIFT			2
#define FXR_TXCIC_ERR_CLR_QWORD_CNT_ERR_SBE_MASK			0x1ull
#define FXR_TXCIC_ERR_CLR_QWORD_CNT_ERR_SBE_SMASK			0x4ull
#define FXR_TXCIC_ERR_CLR_QWORD_CNT_ERR_MBE_SHIFT			1
#define FXR_TXCIC_ERR_CLR_QWORD_CNT_ERR_MBE_MASK			0x1ull
#define FXR_TXCIC_ERR_CLR_QWORD_CNT_ERR_MBE_SMASK			0x2ull
#define FXR_TXCIC_ERR_CLR_INV_WRITE_FLUSH_SHIFT				0
#define FXR_TXCIC_ERR_CLR_INV_WRITE_FLUSH_MASK				0x1ull
#define FXR_TXCIC_ERR_CLR_INV_WRITE_FLUSH_SMASK				0x1ull
/*
* Table #11 of fxr_tx_ci_cic_csrs - TXCIC_ERR_FRC
* This is the Error Force CSR. Writing a 1 to a valid bit will set the 
* corresponding bit in the TXCIC_ERR_STS CSR.
*/
#define FXR_TXCIC_ERR_FRC						(FXR_TX_CI_CIC_CSRS + 0x000000006010)
#define FXR_TXCIC_ERR_FRC_RESETCSR					0x0000000000000000ull
#define FXR_TXCIC_ERR_FRC_HEAD_PTR_PAR_ERR_SHIFT			7
#define FXR_TXCIC_ERR_FRC_HEAD_PTR_PAR_ERR_MASK				0x1ull
#define FXR_TXCIC_ERR_FRC_HEAD_PTR_PAR_ERR_SMASK			0x80ull
#define FXR_TXCIC_ERR_FRC_QWORD_CNT_OVRFLW_SHIFT			6
#define FXR_TXCIC_ERR_FRC_QWORD_CNT_OVRFLW_MASK				0x1ull
#define FXR_TXCIC_ERR_FRC_QWORD_CNT_OVRFLW_SMASK			0x40ull
#define FXR_TXCIC_ERR_FRC_CQ_TIMEOUT_SHIFT				5
#define FXR_TXCIC_ERR_FRC_CQ_TIMEOUT_MASK				0x1ull
#define FXR_TXCIC_ERR_FRC_CQ_TIMEOUT_SMASK				0x20ull
#define FXR_TXCIC_ERR_FRC_CQSLOT_LEN_VEC_ERROR_SHIFT			4
#define FXR_TXCIC_ERR_FRC_CQSLOT_LEN_VEC_ERROR_MASK			0x1ull
#define FXR_TXCIC_ERR_FRC_CQSLOT_LEN_VEC_ERROR_SMASK			0x10ull
#define FXR_TXCIC_ERR_FRC_CQSLOT_FULL_VEC_ERROR_SHIFT			3
#define FXR_TXCIC_ERR_FRC_CQSLOT_FULL_VEC_ERROR_MASK			0x1ull
#define FXR_TXCIC_ERR_FRC_CQSLOT_FULL_VEC_ERROR_SMASK			0x8ull
#define FXR_TXCIC_ERR_FRC_QWORD_CNT_ERR_SBE_SHIFT			2
#define FXR_TXCIC_ERR_FRC_QWORD_CNT_ERR_SBE_MASK			0x1ull
#define FXR_TXCIC_ERR_FRC_QWORD_CNT_ERR_SBE_SMASK			0x4ull
#define FXR_TXCIC_ERR_FRC_QWORD_CNT_ERR_MBE_SHIFT			1
#define FXR_TXCIC_ERR_FRC_QWORD_CNT_ERR_MBE_MASK			0x1ull
#define FXR_TXCIC_ERR_FRC_QWORD_CNT_ERR_MBE_SMASK			0x2ull
#define FXR_TXCIC_ERR_FRC_INV_WRITE_FLUSH_SHIFT				0
#define FXR_TXCIC_ERR_FRC_INV_WRITE_FLUSH_MASK				0x1ull
#define FXR_TXCIC_ERR_FRC_INV_WRITE_FLUSH_SMASK				0x1ull
/*
* Table #12 of fxr_tx_ci_cic_csrs - TXCIC_ERR_EN_HOST
* This is the Error Enable for the Host Interrupt. If a bit is set, the 
* corresponding error bit in TXCIC_ERR_STS will cause an interrupt on the HOST 
* interrupt signal.
*/
#define FXR_TXCIC_ERR_EN_HOST						(FXR_TX_CI_CIC_CSRS + 0x000000006018)
#define FXR_TXCIC_ERR_EN_HOST_RESETCSR					0x0000000000000000ull
#define FXR_TXCIC_ERR_EN_HOST_HEAD_PTR_PAR_ERR_SHIFT			7
#define FXR_TXCIC_ERR_EN_HOST_HEAD_PTR_PAR_ERR_MASK			0x1ull
#define FXR_TXCIC_ERR_EN_HOST_HEAD_PTR_PAR_ERR_SMASK			0x80ull
#define FXR_TXCIC_ERR_EN_HOST_QWORD_CNT_OVRFLW_SHIFT			6
#define FXR_TXCIC_ERR_EN_HOST_QWORD_CNT_OVRFLW_MASK			0x1ull
#define FXR_TXCIC_ERR_EN_HOST_QWORD_CNT_OVRFLW_SMASK			0x40ull
#define FXR_TXCIC_ERR_EN_HOST_CQ_TIMEOUT_SHIFT				5
#define FXR_TXCIC_ERR_EN_HOST_CQ_TIMEOUT_MASK				0x1ull
#define FXR_TXCIC_ERR_EN_HOST_CQ_TIMEOUT_SMASK				0x20ull
#define FXR_TXCIC_ERR_EN_HOST_CQSLOT_LEN_VEC_ERROR_SHIFT		4
#define FXR_TXCIC_ERR_EN_HOST_CQSLOT_LEN_VEC_ERROR_MASK			0x1ull
#define FXR_TXCIC_ERR_EN_HOST_CQSLOT_LEN_VEC_ERROR_SMASK		0x10ull
#define FXR_TXCIC_ERR_EN_HOST_CQSLOT_FULL_VEC_ERROR_SHIFT		3
#define FXR_TXCIC_ERR_EN_HOST_CQSLOT_FULL_VEC_ERROR_MASK		0x1ull
#define FXR_TXCIC_ERR_EN_HOST_CQSLOT_FULL_VEC_ERROR_SMASK		0x8ull
#define FXR_TXCIC_ERR_EN_HOST_QWORD_CNT_ERR_SBE_SHIFT			2
#define FXR_TXCIC_ERR_EN_HOST_QWORD_CNT_ERR_SBE_MASK			0x1ull
#define FXR_TXCIC_ERR_EN_HOST_QWORD_CNT_ERR_SBE_SMASK			0x4ull
#define FXR_TXCIC_ERR_EN_HOST_QWORD_CNT_ERR_MBE_SHIFT			1
#define FXR_TXCIC_ERR_EN_HOST_QWORD_CNT_ERR_MBE_MASK			0x1ull
#define FXR_TXCIC_ERR_EN_HOST_QWORD_CNT_ERR_MBE_SMASK			0x2ull
#define FXR_TXCIC_ERR_EN_HOST_INV_WRITE_FLUSH_SHIFT			0
#define FXR_TXCIC_ERR_EN_HOST_INV_WRITE_FLUSH_MASK			0x1ull
#define FXR_TXCIC_ERR_EN_HOST_INV_WRITE_FLUSH_SMASK			0x1ull
/*
* Table #13 of fxr_tx_ci_cic_csrs - TXCIC_ERR_FIRST_HOST
* This is the First Error CSR for the Host Interrupt. When this CSR is clear, it 
* will capture the next TXCIC_ERR_STS value when a new HOST Interrupt 
* occurs.
*/
#define FXR_TXCIC_ERR_FIRST_HOST					(FXR_TX_CI_CIC_CSRS + 0x000000006020)
#define FXR_TXCIC_ERR_FIRST_HOST_RESETCSR				0x0000000000000000ull
#define FXR_TXCIC_ERR_FIRST_HOST_HEAD_PTR_PAR_ERR_SHIFT			7
#define FXR_TXCIC_ERR_FIRST_HOST_HEAD_PTR_PAR_ERR_MASK			0x1ull
#define FXR_TXCIC_ERR_FIRST_HOST_HEAD_PTR_PAR_ERR_SMASK			0x80ull
#define FXR_TXCIC_ERR_FIRST_HOST_QWORD_CNT_OVRFLW_SHIFT			6
#define FXR_TXCIC_ERR_FIRST_HOST_QWORD_CNT_OVRFLW_MASK			0x1ull
#define FXR_TXCIC_ERR_FIRST_HOST_QWORD_CNT_OVRFLW_SMASK			0x40ull
#define FXR_TXCIC_ERR_FIRST_HOST_CQ_TIMEOUT_SHIFT			5
#define FXR_TXCIC_ERR_FIRST_HOST_CQ_TIMEOUT_MASK			0x1ull
#define FXR_TXCIC_ERR_FIRST_HOST_CQ_TIMEOUT_SMASK			0x20ull
#define FXR_TXCIC_ERR_FIRST_HOST_CQSLOT_LEN_VEC_ERROR_SHIFT		4
#define FXR_TXCIC_ERR_FIRST_HOST_CQSLOT_LEN_VEC_ERROR_MASK		0x1ull
#define FXR_TXCIC_ERR_FIRST_HOST_CQSLOT_LEN_VEC_ERROR_SMASK		0x10ull
#define FXR_TXCIC_ERR_FIRST_HOST_CQSLOT_FULL_VEC_ERROR_SHIFT		3
#define FXR_TXCIC_ERR_FIRST_HOST_CQSLOT_FULL_VEC_ERROR_MASK		0x1ull
#define FXR_TXCIC_ERR_FIRST_HOST_CQSLOT_FULL_VEC_ERROR_SMASK		0x8ull
#define FXR_TXCIC_ERR_FIRST_HOST_QWORD_CNT_ERR_SBE_SHIFT		2
#define FXR_TXCIC_ERR_FIRST_HOST_QWORD_CNT_ERR_SBE_MASK			0x1ull
#define FXR_TXCIC_ERR_FIRST_HOST_QWORD_CNT_ERR_SBE_SMASK		0x4ull
#define FXR_TXCIC_ERR_FIRST_HOST_QWORD_CNT_ERR_MBE_SHIFT		1
#define FXR_TXCIC_ERR_FIRST_HOST_QWORD_CNT_ERR_MBE_MASK			0x1ull
#define FXR_TXCIC_ERR_FIRST_HOST_QWORD_CNT_ERR_MBE_SMASK		0x2ull
#define FXR_TXCIC_ERR_FIRST_HOST_INV_WRITE_FLUSH_SHIFT			0
#define FXR_TXCIC_ERR_FIRST_HOST_INV_WRITE_FLUSH_MASK			0x1ull
#define FXR_TXCIC_ERR_FIRST_HOST_INV_WRITE_FLUSH_SMASK			0x1ull
/*
* Table #14 of fxr_tx_ci_cic_csrs - TXCIC_ERR_EN_BMC
* This is the Error Enable for the BMC Interrupt. If a bit is set, the 
* corresponding error bit in TXCIC_ERR_STS will cause an interrupt on the BMC 
* interrupt signal.
*/
#define FXR_TXCIC_ERR_EN_BMC						(FXR_TX_CI_CIC_CSRS + 0x000000006028)
#define FXR_TXCIC_ERR_EN_BMC_RESETCSR					0x0000000000000000ull
#define FXR_TXCIC_ERR_EN_BMC_HEAD_PTR_PAR_ERR_SHIFT			7
#define FXR_TXCIC_ERR_EN_BMC_HEAD_PTR_PAR_ERR_MASK			0x1ull
#define FXR_TXCIC_ERR_EN_BMC_HEAD_PTR_PAR_ERR_SMASK			0x80ull
#define FXR_TXCIC_ERR_EN_BMC_QWORD_CNT_OVRFLW_SHIFT			6
#define FXR_TXCIC_ERR_EN_BMC_QWORD_CNT_OVRFLW_MASK			0x1ull
#define FXR_TXCIC_ERR_EN_BMC_QWORD_CNT_OVRFLW_SMASK			0x40ull
#define FXR_TXCIC_ERR_EN_BMC_CQ_TIMEOUT_SHIFT				5
#define FXR_TXCIC_ERR_EN_BMC_CQ_TIMEOUT_MASK				0x1ull
#define FXR_TXCIC_ERR_EN_BMC_CQ_TIMEOUT_SMASK				0x20ull
#define FXR_TXCIC_ERR_EN_BMC_CQSLOT_LEN_VEC_ERROR_SHIFT			4
#define FXR_TXCIC_ERR_EN_BMC_CQSLOT_LEN_VEC_ERROR_MASK			0x1ull
#define FXR_TXCIC_ERR_EN_BMC_CQSLOT_LEN_VEC_ERROR_SMASK			0x10ull
#define FXR_TXCIC_ERR_EN_BMC_CQSLOT_FULL_VEC_ERROR_SHIFT		3
#define FXR_TXCIC_ERR_EN_BMC_CQSLOT_FULL_VEC_ERROR_MASK			0x1ull
#define FXR_TXCIC_ERR_EN_BMC_CQSLOT_FULL_VEC_ERROR_SMASK		0x8ull
#define FXR_TXCIC_ERR_EN_BMC_QWORD_CNT_ERR_SBE_SHIFT			2
#define FXR_TXCIC_ERR_EN_BMC_QWORD_CNT_ERR_SBE_MASK			0x1ull
#define FXR_TXCIC_ERR_EN_BMC_QWORD_CNT_ERR_SBE_SMASK			0x4ull
#define FXR_TXCIC_ERR_EN_BMC_QWORD_CNT_ERR_MBE_SHIFT			1
#define FXR_TXCIC_ERR_EN_BMC_QWORD_CNT_ERR_MBE_MASK			0x1ull
#define FXR_TXCIC_ERR_EN_BMC_QWORD_CNT_ERR_MBE_SMASK			0x2ull
#define FXR_TXCIC_ERR_EN_BMC_INV_WRITE_FLUSH_SHIFT			0
#define FXR_TXCIC_ERR_EN_BMC_INV_WRITE_FLUSH_MASK			0x1ull
#define FXR_TXCIC_ERR_EN_BMC_INV_WRITE_FLUSH_SMASK			0x1ull
/*
* Table #15 of fxr_tx_ci_cic_csrs - TXCIC_ERR_FIRST_BMC
* This is the First Error CSR for the BMC Interrupt. When this CSR is clear, it 
* will capture the next TXCIC_ERR_STS value when a new BMC Interrupt 
* occurs.
*/
#define FXR_TXCIC_ERR_FIRST_BMC						(FXR_TX_CI_CIC_CSRS + 0x000000006030)
#define FXR_TXCIC_ERR_FIRST_BMC_RESETCSR				0x0000000000000000ull
#define FXR_TXCIC_ERR_FIRST_BMC_HEAD_PTR_PAR_ERR_SHIFT			7
#define FXR_TXCIC_ERR_FIRST_BMC_HEAD_PTR_PAR_ERR_MASK			0x1ull
#define FXR_TXCIC_ERR_FIRST_BMC_HEAD_PTR_PAR_ERR_SMASK			0x80ull
#define FXR_TXCIC_ERR_FIRST_BMC_QWORD_CNT_OVRFLW_SHIFT			6
#define FXR_TXCIC_ERR_FIRST_BMC_QWORD_CNT_OVRFLW_MASK			0x1ull
#define FXR_TXCIC_ERR_FIRST_BMC_QWORD_CNT_OVRFLW_SMASK			0x40ull
#define FXR_TXCIC_ERR_FIRST_BMC_CQ_TIMEOUT_SHIFT			5
#define FXR_TXCIC_ERR_FIRST_BMC_CQ_TIMEOUT_MASK				0x1ull
#define FXR_TXCIC_ERR_FIRST_BMC_CQ_TIMEOUT_SMASK			0x20ull
#define FXR_TXCIC_ERR_FIRST_BMC_CQSLOT_LEN_VEC_ERROR_SHIFT		4
#define FXR_TXCIC_ERR_FIRST_BMC_CQSLOT_LEN_VEC_ERROR_MASK		0x1ull
#define FXR_TXCIC_ERR_FIRST_BMC_CQSLOT_LEN_VEC_ERROR_SMASK		0x10ull
#define FXR_TXCIC_ERR_FIRST_BMC_CQSLOT_FULL_VEC_ERROR_SHIFT		3
#define FXR_TXCIC_ERR_FIRST_BMC_CQSLOT_FULL_VEC_ERROR_MASK		0x1ull
#define FXR_TXCIC_ERR_FIRST_BMC_CQSLOT_FULL_VEC_ERROR_SMASK		0x8ull
#define FXR_TXCIC_ERR_FIRST_BMC_QWORD_CNT_ERR_SBE_SHIFT			2
#define FXR_TXCIC_ERR_FIRST_BMC_QWORD_CNT_ERR_SBE_MASK			0x1ull
#define FXR_TXCIC_ERR_FIRST_BMC_QWORD_CNT_ERR_SBE_SMASK			0x4ull
#define FXR_TXCIC_ERR_FIRST_BMC_QWORD_CNT_ERR_MBE_SHIFT			1
#define FXR_TXCIC_ERR_FIRST_BMC_QWORD_CNT_ERR_MBE_MASK			0x1ull
#define FXR_TXCIC_ERR_FIRST_BMC_QWORD_CNT_ERR_MBE_SMASK			0x2ull
#define FXR_TXCIC_ERR_FIRST_BMC_INV_WRITE_FLUSH_SHIFT			0
#define FXR_TXCIC_ERR_FIRST_BMC_INV_WRITE_FLUSH_MASK			0x1ull
#define FXR_TXCIC_ERR_FIRST_BMC_INV_WRITE_FLUSH_SMASK			0x1ull
/*
* Table #16 of fxr_tx_ci_cic_csrs - TXCIC_ERR_EN_QUAR
* This is the Error Enable for the Quarantine Interrupt. If a bit is set, the 
* corresponding error bit in TXCIC_ERR_STS will cause an interrupt on the QUAR 
* interrupt signal.
*/
#define FXR_TXCIC_ERR_EN_QUAR						(FXR_TX_CI_CIC_CSRS + 0x000000006038)
#define FXR_TXCIC_ERR_EN_QUAR_RESETCSR					0x0000000000000000ull
#define FXR_TXCIC_ERR_EN_QUAR_HEAD_PTR_PAR_ERR_SHIFT			7
#define FXR_TXCIC_ERR_EN_QUAR_HEAD_PTR_PAR_ERR_MASK			0x1ull
#define FXR_TXCIC_ERR_EN_QUAR_HEAD_PTR_PAR_ERR_SMASK			0x80ull
#define FXR_TXCIC_ERR_EN_QUAR_QWORD_CNT_OVRFLW_SHIFT			6
#define FXR_TXCIC_ERR_EN_QUAR_QWORD_CNT_OVRFLW_MASK			0x1ull
#define FXR_TXCIC_ERR_EN_QUAR_QWORD_CNT_OVRFLW_SMASK			0x40ull
#define FXR_TXCIC_ERR_EN_QUAR_CQ_TIMEOUT_SHIFT				5
#define FXR_TXCIC_ERR_EN_QUAR_CQ_TIMEOUT_MASK				0x1ull
#define FXR_TXCIC_ERR_EN_QUAR_CQ_TIMEOUT_SMASK				0x20ull
#define FXR_TXCIC_ERR_EN_QUAR_CQSLOT_LEN_VEC_ERROR_SHIFT		4
#define FXR_TXCIC_ERR_EN_QUAR_CQSLOT_LEN_VEC_ERROR_MASK			0x1ull
#define FXR_TXCIC_ERR_EN_QUAR_CQSLOT_LEN_VEC_ERROR_SMASK		0x10ull
#define FXR_TXCIC_ERR_EN_QUAR_CQSLOT_FULL_VEC_ERROR_SHIFT		3
#define FXR_TXCIC_ERR_EN_QUAR_CQSLOT_FULL_VEC_ERROR_MASK		0x1ull
#define FXR_TXCIC_ERR_EN_QUAR_CQSLOT_FULL_VEC_ERROR_SMASK		0x8ull
#define FXR_TXCIC_ERR_EN_QUAR_QWORD_CNT_ERR_SBE_SHIFT			2
#define FXR_TXCIC_ERR_EN_QUAR_QWORD_CNT_ERR_SBE_MASK			0x1ull
#define FXR_TXCIC_ERR_EN_QUAR_QWORD_CNT_ERR_SBE_SMASK			0x4ull
#define FXR_TXCIC_ERR_EN_QUAR_QWORD_CNT_ERR_MBE_SHIFT			1
#define FXR_TXCIC_ERR_EN_QUAR_QWORD_CNT_ERR_MBE_MASK			0x1ull
#define FXR_TXCIC_ERR_EN_QUAR_QWORD_CNT_ERR_MBE_SMASK			0x2ull
#define FXR_TXCIC_ERR_EN_QUAR_INV_WRITE_FLUSH_SHIFT			0
#define FXR_TXCIC_ERR_EN_QUAR_INV_WRITE_FLUSH_MASK			0x1ull
#define FXR_TXCIC_ERR_EN_QUAR_INV_WRITE_FLUSH_SMASK			0x1ull
/*
* Table #17 of fxr_tx_ci_cic_csrs - TXCIC_ERR_FIRST_QUAR
* This is the First Error CSR for the Quarantine Interrupt. When this CSR is 
* clear, it will capture the next TXCIC_ERR_STS value when a new QUAR Interrupt 
* occurs.
*/
#define FXR_TXCIC_ERR_FIRST_QUAR					(FXR_TX_CI_CIC_CSRS + 0x000000006040)
#define FXR_TXCIC_ERR_FIRST_QUAR_RESETCSR				0x0000000000000000ull
#define FXR_TXCIC_ERR_FIRST_QUAR_HEAD_PTR_PAR_ERR_SHIFT			7
#define FXR_TXCIC_ERR_FIRST_QUAR_HEAD_PTR_PAR_ERR_MASK			0x1ull
#define FXR_TXCIC_ERR_FIRST_QUAR_HEAD_PTR_PAR_ERR_SMASK			0x80ull
#define FXR_TXCIC_ERR_FIRST_QUAR_QWORD_CNT_OVRFLW_SHIFT			6
#define FXR_TXCIC_ERR_FIRST_QUAR_QWORD_CNT_OVRFLW_MASK			0x1ull
#define FXR_TXCIC_ERR_FIRST_QUAR_QWORD_CNT_OVRFLW_SMASK			0x40ull
#define FXR_TXCIC_ERR_FIRST_QUAR_CQ_TIMEOUT_SHIFT			5
#define FXR_TXCIC_ERR_FIRST_QUAR_CQ_TIMEOUT_MASK			0x1ull
#define FXR_TXCIC_ERR_FIRST_QUAR_CQ_TIMEOUT_SMASK			0x20ull
#define FXR_TXCIC_ERR_FIRST_QUAR_CQSLOT_LEN_VEC_ERROR_SHIFT		4
#define FXR_TXCIC_ERR_FIRST_QUAR_CQSLOT_LEN_VEC_ERROR_MASK		0x1ull
#define FXR_TXCIC_ERR_FIRST_QUAR_CQSLOT_LEN_VEC_ERROR_SMASK		0x10ull
#define FXR_TXCIC_ERR_FIRST_QUAR_CQSLOT_FULL_VEC_ERROR_SHIFT		3
#define FXR_TXCIC_ERR_FIRST_QUAR_CQSLOT_FULL_VEC_ERROR_MASK		0x1ull
#define FXR_TXCIC_ERR_FIRST_QUAR_CQSLOT_FULL_VEC_ERROR_SMASK		0x8ull
#define FXR_TXCIC_ERR_FIRST_QUAR_QWORD_CNT_ERR_SBE_SHIFT		2
#define FXR_TXCIC_ERR_FIRST_QUAR_QWORD_CNT_ERR_SBE_MASK			0x1ull
#define FXR_TXCIC_ERR_FIRST_QUAR_QWORD_CNT_ERR_SBE_SMASK		0x4ull
#define FXR_TXCIC_ERR_FIRST_QUAR_QWORD_CNT_ERR_MBE_SHIFT		1
#define FXR_TXCIC_ERR_FIRST_QUAR_QWORD_CNT_ERR_MBE_MASK			0x1ull
#define FXR_TXCIC_ERR_FIRST_QUAR_QWORD_CNT_ERR_MBE_SMASK		0x2ull
#define FXR_TXCIC_ERR_FIRST_QUAR_INV_WRITE_FLUSH_SHIFT			0
#define FXR_TXCIC_ERR_FIRST_QUAR_INV_WRITE_FLUSH_MASK			0x1ull
#define FXR_TXCIC_ERR_FIRST_QUAR_INV_WRITE_FLUSH_SMASK			0x1ull
/*
* Table #18 of fxr_tx_ci_cic_csrs - TXCIC_ERROR_INFO_SBE_MBE
* Error Info for the #%%#mbe#%%# and #%%#sbe#%%# events. (There may be many 
* Error Info Registers.)
*/
#define FXR_TXCIC_ERROR_INFO_SBE_MBE					(FXR_TX_CI_CIC_CSRS + 0x000000006048)
#define FXR_TXCIC_ERROR_INFO_SBE_MBE_RESETCSR				0x0000000000000000ull
#define FXR_TXCIC_ERROR_INFO_SBE_MBE_SLOT_NUM_INV_WRITE_FLUSH_SHIFT	24
#define FXR_TXCIC_ERROR_INFO_SBE_MBE_SLOT_NUM_INV_WRITE_FLUSH_MASK	0xFull
#define FXR_TXCIC_ERROR_INFO_SBE_MBE_SLOT_NUM_INV_WRITE_FLUSH_SMASK	0xF000000ull
#define FXR_TXCIC_ERROR_INFO_SBE_MBE_CQ_NUM_INV_WRITE_FLUSH_SHIFT	16
#define FXR_TXCIC_ERROR_INFO_SBE_MBE_CQ_NUM_INV_WRITE_FLUSH_MASK	0xFFull
#define FXR_TXCIC_ERROR_INFO_SBE_MBE_CQ_NUM_INV_WRITE_FLUSH_SMASK	0xFF0000ull
#define FXR_TXCIC_ERROR_INFO_SBE_MBE_SYNDROME_QWORD_CNT_MEM_SBE_SHIFT	8
#define FXR_TXCIC_ERROR_INFO_SBE_MBE_SYNDROME_QWORD_CNT_MEM_SBE_MASK	0xFFull
#define FXR_TXCIC_ERROR_INFO_SBE_MBE_SYNDROME_QWORD_CNT_MEM_SBE_SMASK	0xFF00ull
#define FXR_TXCIC_ERROR_INFO_SBE_MBE_SYNDROME_QWORD_CNT_MEM_MBE_SHIFT	0
#define FXR_TXCIC_ERROR_INFO_SBE_MBE_SYNDROME_QWORD_CNT_MEM_MBE_MASK	0xFFull
#define FXR_TXCIC_ERROR_INFO_SBE_MBE_SYNDROME_QWORD_CNT_MEM_MBE_SMASK	0xFFull
/*
* Table #19 of fxr_tx_ci_cic_csrs - TXCIC_ERR_PER_CQ_INFO_GENERAL
* TXCIC_CQ_ERROR_GENERAL contains error bits which get cleared through the 
* drain/reset mechanism. When ever any of these error bits are set, the Host 
* needs to stop traffic to that CQ, initiate a CQ reset. After the CQ reset 
* completes, these errors would be cleared. We can then clear the corresponding 
* error bit inside the TXCIC_ERR_STS register. The respective TXCIC_ERR_STS 
* error bit is a logical 'Or' of this per context/CQ register.
*/
#define FXR_TXCIC_ERR_PER_CQ_INFO_GENERAL				(FXR_TX_CI_CIC_CSRS + 0x000000006100)
#define FXR_TXCIC_ERR_PER_CQ_INFO_GENERAL_RESETCSR			0x0000000000000000ull
#define FXR_TXCIC_ERR_PER_CQ_INFO_GENERAL_HEAD_PTR_PAR_ERR_SHIFT	7
#define FXR_TXCIC_ERR_PER_CQ_INFO_GENERAL_HEAD_PTR_PAR_ERR_MASK		0x1ull
#define FXR_TXCIC_ERR_PER_CQ_INFO_GENERAL_HEAD_PTR_PAR_ERR_SMASK	0x80ull
#define FXR_TXCIC_ERR_PER_CQ_INFO_GENERAL_QWORD_CNT_OVRFLW_SHIFT	6
#define FXR_TXCIC_ERR_PER_CQ_INFO_GENERAL_QWORD_CNT_OVRFLW_MASK		0x1ull
#define FXR_TXCIC_ERR_PER_CQ_INFO_GENERAL_QWORD_CNT_OVRFLW_SMASK	0x40ull
#define FXR_TXCIC_ERR_PER_CQ_INFO_GENERAL_CQ_TIMEOUT_SHIFT		5
#define FXR_TXCIC_ERR_PER_CQ_INFO_GENERAL_CQ_TIMEOUT_MASK		0x1ull
#define FXR_TXCIC_ERR_PER_CQ_INFO_GENERAL_CQ_TIMEOUT_SMASK		0x20ull
#define FXR_TXCIC_ERR_PER_CQ_INFO_GENERAL_CQSLOT_LEN_VEC_ERROR_SHIFT	4
#define FXR_TXCIC_ERR_PER_CQ_INFO_GENERAL_CQSLOT_LEN_VEC_ERROR_MASK	0x1ull
#define FXR_TXCIC_ERR_PER_CQ_INFO_GENERAL_CQSLOT_LEN_VEC_ERROR_SMASK	0x10ull
#define FXR_TXCIC_ERR_PER_CQ_INFO_GENERAL_CQSLOT_FULL_VEC_ERROR_SHIFT	3
#define FXR_TXCIC_ERR_PER_CQ_INFO_GENERAL_CQSLOT_FULL_VEC_ERROR_MASK	0x1ull
#define FXR_TXCIC_ERR_PER_CQ_INFO_GENERAL_CQSLOT_FULL_VEC_ERROR_SMASK	0x8ull
#define FXR_TXCIC_ERR_PER_CQ_INFO_GENERAL_QWORD_CNT_ERR_MBE_SHIFT	1
#define FXR_TXCIC_ERR_PER_CQ_INFO_GENERAL_QWORD_CNT_ERR_MBE_MASK	0x1ull
#define FXR_TXCIC_ERR_PER_CQ_INFO_GENERAL_QWORD_CNT_ERR_MBE_SMASK	0x2ull
/*
* Table #20 of fxr_tx_ci_cic_csrs - TXCIC_DBG_ERR_INJECT
* TXCIC_CQ_ERROR_INJECT
*/
#define FXR_TXCIC_DBG_ERR_INJECT					(FXR_TX_CI_CIC_CSRS + 0x000000007000)
#define FXR_TXCIC_DBG_ERR_INJECT_RESETCSR				0x0000000000000000ull
#define FXR_TXCIC_DBG_ERR_INJECT_INJECT_QWORD_CNT_ERR_SHIFT		4
#define FXR_TXCIC_DBG_ERR_INJECT_INJECT_QWORD_CNT_ERR_MASK		0x1ull
#define FXR_TXCIC_DBG_ERR_INJECT_INJECT_QWORD_CNT_ERR_SMASK		0x10ull
#define FXR_TXCIC_DBG_ERR_INJECT_INJECT_QWORD_CNT_ERR_MASK_SHIFT	0
#define FXR_TXCIC_DBG_ERR_INJECT_INJECT_QWORD_CNT_ERR_MASK_MASK		0xFull
#define FXR_TXCIC_DBG_ERR_INJECT_INJECT_QWORD_CNT_ERR_MASK_SMASK	0xFull

#endif 		/* DEF_FXR_TX_CI_CIC_CSRS_SW_DEF */
