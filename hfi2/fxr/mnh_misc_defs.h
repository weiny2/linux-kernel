/*
*------------------------------------------------------------------------------
*                                                                              
*  INTEL CONFIDENTIAL                                                          
*                                                                              
*  Copyright 2016 Intel Corporation All Rights Reserved.                 
*                                                                              
*  The source code contained or described herein and all documents related     
*  to the source code ("Material") are owned by Intel Corporation or its    
*  suppliers or licensors. Title to the Material remains with Intel            
*  Corporation or its suppliers and licensors. The Material contains trade     
*  secrets and proprietary and confidential information of Intel or its        
*  suppliers and licensors. The Material is protected by worldwide copyright   
*  and trade secret laws and treaty provisions. No part of the Material may    
*  be used, copied, reproduced, modified, published, uploaded, posted,         
*  transmitted, distributed, or disclosed in any way without Intel's prior     
*  express written permission.                                                 
*                                                                              
*  No license under any patent, copyright, trade secret or other intellectual  
*  property right is granted to or conferred upon you by disclosure or         
*  delivery of the Materials, either expressly, by implication, inducement,    
*  estoppel or otherwise. Any license under such intellectual property rights  
*  must be express and approved by Intel in writing.                           
*                                                                              
*------------------------------------------------------------------------------
*  Auto-generated by /nfs/sc/disks/slx_0108/pvesv/fxr_autogen/i_csrs.pl
*  i_csrs.pl Version 1.5 last modified on Thursday 1/7/16 17:24:50
*  /nfs/sc/disks/slx_0108/pvesv/fxr_autogen/i_csrs.pl -C -R -ST mnh_misc -o /nfs/sc/disks/slx_0108/pvesv/fxr_autogen/fxr Manor_Hill/Product_HAS/Manor Hill/xml/144_Misc_Partition_Registers.xml
*------------------------------------------------------------------------------
*/

#ifndef DEF_MNH_MISC_SW_DEF
#define DEF_MNH_MISC_SW_DEF

#ifndef MNH_MISC_CSRS
#define MNH_MISC_CSRS						0x000000000000
#endif
#define MISC_OFFSET						0
/*
* Table #4 of 144_Misc_Partition_Registers.xml - MISC_MSC_RSA_R2
* RSA helper variable, R-squared, derived from modulus - 2048 bits in 32 
* entries. The RSA engine modifies this during operation. The lower 256 bits 
* will match the digest upon successful validation.
*/
#define MNH_MISC_MSC_RSA_R2					(MNH_MISC_CSRS + 0x000000000000)
#define MNH_MISC_MSC_RSA_R2_RESETCSR				0x0000000000000000ull
#define MNH_MISC_MSC_RSA_R2_DATA_SHIFT				0
#define MNH_MISC_MSC_RSA_R2_DATA_MASK				0xFFFFFFFFFFFFFFFFull
#define MNH_MISC_MSC_RSA_R2_DATA_SMASK				0xFFFFFFFFFFFFFFFFull
/*
* Table #5 of 144_Misc_Partition_Registers.xml - MISC_MSC_RSA_SIGNATURE
* RSA signature - 2048 bits in 32 entries. The RSA engine modifies this during 
* operation.
*/
#define MNH_MISC_MSC_RSA_SIGNATURE				(MNH_MISC_CSRS + 0x000000000200)
#define MNH_MISC_MSC_RSA_SIGNATURE_RESETCSR			0x0000000000000000ull
#define MNH_MISC_MSC_RSA_SIGNATURE_DATA_SHIFT			0
#define MNH_MISC_MSC_RSA_SIGNATURE_DATA_MASK			0xFFFFFFFFFFFFFFFFull
#define MNH_MISC_MSC_RSA_SIGNATURE_DATA_SMASK			0xFFFFFFFFFFFFFFFFull
/*
* Table #6 of 144_Misc_Partition_Registers.xml - MISC_MSC_RSA_MODULUS
* RSA modulus - 2048 bits in 32 entries. The RSA engine modifies this during 
* operation.
*/
#define MNH_MISC_MSC_RSA_MODULUS				(MNH_MISC_CSRS + 0x000000000400)
#define MNH_MISC_MSC_RSA_MODULUS_RESETCSR			0x0000000000000000ull
#define MNH_MISC_MSC_RSA_MODULUS_DATA_SHIFT			0
#define MNH_MISC_MSC_RSA_MODULUS_DATA_MASK			0xFFFFFFFFFFFFFFFFull
#define MNH_MISC_MSC_RSA_MODULUS_DATA_SMASK			0xFFFFFFFFFFFFFFFFull
/*
* Table #7 of 144_Misc_Partition_Registers.xml - MISC_MSC_SHA_PRELOAD
* This register provides an interface to preload data directly to the SHA engine 
* prior to loading firmware. This register can be written multiple times to 
* preload data serially, one QW at a time. Notably, the Code Signing System 
* (CSS) flow requires a CSS-formatted header to be signed and validated in 
* addition to the firmware.
*/
#define MNH_MISC_MSC_SHA_PRELOAD				(MNH_MISC_CSRS + 0x000000000A00)
#define MNH_MISC_MSC_SHA_PRELOAD_RESETCSR			0x0000000000000000ull
#define MNH_MISC_MSC_SHA_PRELOAD_DATA_SHIFT			0
#define MNH_MISC_MSC_SHA_PRELOAD_DATA_MASK			0xFFFFFFFFFFFFFFFFull
#define MNH_MISC_MSC_SHA_PRELOAD_DATA_SMASK			0xFFFFFFFFFFFFFFFFull
/*
* Table #8 of 144_Misc_Partition_Registers.xml - MISC_MSC_RSA_CMD
* RSA engine command interface.
*/
#define MNH_MISC_MSC_RSA_CMD					(MNH_MISC_CSRS + 0x000000000A08)
#define MNH_MISC_MSC_RSA_CMD_RESETCSR				0x0000000000000000ull
#define MNH_MISC_MSC_RSA_CMD_CMD_SHIFT				0
#define MNH_MISC_MSC_RSA_CMD_CMD_MASK				0x3ull
#define MNH_MISC_MSC_RSA_CMD_CMD_SMASK				0x3ull
/*
* Table #9 of 144_Misc_Partition_Registers.xml - MISC_MSC_RSA_MU
* RSA helper variable, mu, derived from modulus - 64 bits. This register will 
* always read as 0.
*/
#define MNH_MISC_MSC_RSA_MU					(MNH_MISC_CSRS + 0x000000000A10)
#define MNH_MISC_MSC_RSA_MU_RESETCSR				0x0000000000000000ull
#define MNH_MISC_MSC_RSA_MU_DATA_SHIFT				0
#define MNH_MISC_MSC_RSA_MU_DATA_MASK				0xFFFFFFFFFFFFFFFFull
#define MNH_MISC_MSC_RSA_MU_DATA_SMASK				0xFFFFFFFFFFFFFFFFull
/*
* Table #10 of 144_Misc_Partition_Registers.xml - MISC_CFG_FW_CTRL
* Firmware-related control bits.
*/
#define MNH_MISC_CFG_FW_CTRL					(MNH_MISC_CSRS + 0x000000001000)
#define MNH_MISC_CFG_FW_CTRL_RESETCSR				0x0000000000000000ull
#define MNH_MISC_CFG_FW_CTRL_FW_8051_LOADED_SHIFT		1
#define MNH_MISC_CFG_FW_CTRL_FW_8051_LOADED_MASK		0x3ull
#define MNH_MISC_CFG_FW_CTRL_FW_8051_LOADED_SMASK		0x6ull
#define MNH_MISC_CFG_FW_CTRL_DISABLE_VALIDATION_SHIFT		0
#define MNH_MISC_CFG_FW_CTRL_DISABLE_VALIDATION_MASK		0x1ull
#define MNH_MISC_CFG_FW_CTRL_DISABLE_VALIDATION_SMASK		0x1ull
/*
* Table #11 of 144_Misc_Partition_Registers.xml - MISC_STS_FW
* Firmware-related status bits.
*/
#define MNH_MISC_STS_FW						(MNH_MISC_CSRS + 0x000000001008)
#define MNH_MISC_STS_FW_RESETCSR				0x0000000000000000ull
#define MNH_MISC_STS_FW_FW_AUTH_FAILED_SHIFT			3
#define MNH_MISC_STS_FW_FW_AUTH_FAILED_MASK			0x1ull
#define MNH_MISC_STS_FW_FW_AUTH_FAILED_SMASK			0x8ull
#define MNH_MISC_STS_FW_KEY_MISMATCH_SHIFT			2
#define MNH_MISC_STS_FW_KEY_MISMATCH_MASK			0x1ull
#define MNH_MISC_STS_FW_KEY_MISMATCH_SMASK			0x4ull
#define MNH_MISC_STS_FW_RSA_STATUS_SHIFT			0
#define MNH_MISC_STS_FW_RSA_STATUS_MASK				0x3ull
#define MNH_MISC_STS_FW_RSA_STATUS_SMASK			0x3ull
/*
* Table #12 of 144_Misc_Partition_Registers.xml - MISC_STS_8051_DIGEST
* 8051 firmware digest - 256 bits in 4 entries, per 8051 instance. Digest for 
* instance 0 is in indexes [0:3]. Digest for instance 1 is in indexes 
* [4:7].
*/
#define MNH_MISC_STS_8051_DIGEST				(MNH_MISC_CSRS + 0x000000001010)
#define MNH_MISC_STS_8051_DIGEST_RESETCSR			0x0000000000000000ull
#define MNH_MISC_STS_8051_DIGEST_DATA_SHIFT			0
#define MNH_MISC_STS_8051_DIGEST_DATA_MASK			0xFFFFFFFFFFFFFFFFull
#define MNH_MISC_STS_8051_DIGEST_DATA_SMASK			0xFFFFFFFFFFFFFFFFull
/*
* Table #13 of 144_Misc_Partition_Registers.xml - MISC_CFG_RESET
* Software-driven resets.
*/
#define MNH_MISC_CFG_RESET					(MNH_MISC_CSRS + 0x000000001050)
#define MNH_MISC_CFG_RESET_RESETCSR				0x0000000000000000ull
#define MNH_MISC_CFG_RESET_PLACEHOLDER_SHIFT			2
#define MNH_MISC_CFG_RESET_PLACEHOLDER_MASK			0x3FFFFFFFull
#define MNH_MISC_CFG_RESET_PLACEHOLDER_SMASK			0xFFFFFFFCull
#define MNH_MISC_CFG_RESET_SRESET_SHIFT				1
#define MNH_MISC_CFG_RESET_SRESET_MASK				0x1ull
#define MNH_MISC_CFG_RESET_SRESET_SMASK				0x2ull
#define MNH_MISC_CFG_RESET_HRESET_SHIFT				0
#define MNH_MISC_CFG_RESET_HRESET_MASK				0x1ull
#define MNH_MISC_CFG_RESET_HRESET_SMASK				0x1ull
/*
* Table #14 of 144_Misc_Partition_Registers.xml - MISC_STS_MNH_ERRS
* The 9 interrupt sources in MNH are aggregated into a single interrupt pin 
* delivered to the HFI. This pin is implemented as a simple logical OR of all 9 
* inputs. This register indicates which sources are currently asserting 
* interrupts. This register is cleared down indirectly by clearing down the 
* status registers of the individual interrupt sources.
*/
#define MNH_MISC_STS_MNH_ERRS					(MNH_MISC_CSRS + 0x000000001058)
#define MNH_MISC_STS_MNH_ERRS_RESETCSR				0x0000000000000000ull
#define MNH_MISC_STS_MNH_ERRS_QSFP2_INT_SHIFT			8
#define MNH_MISC_STS_MNH_ERRS_QSFP2_INT_MASK			0x1ull
#define MNH_MISC_STS_MNH_ERRS_QSFP2_INT_SMASK			0x100ull
#define MNH_MISC_STS_MNH_ERRS_QSFP1_INT_SHIFT			7
#define MNH_MISC_STS_MNH_ERRS_QSFP1_INT_MASK			0x1ull
#define MNH_MISC_STS_MNH_ERRS_QSFP1_INT_SMASK			0x80ull
#define MNH_MISC_STS_MNH_ERRS_SERDES1_SNP_DWNSTRM_ERR_SHIFT	6
#define MNH_MISC_STS_MNH_ERRS_SERDES1_SNP_DWNSTRM_ERR_MASK	0x1ull
#define MNH_MISC_STS_MNH_ERRS_SERDES1_SNP_DWNSTRM_ERR_SMASK	0x40ull
#define MNH_MISC_STS_MNH_ERRS_SERDES1_SNP_UPSTRM_ERR_SHIFT	5
#define MNH_MISC_STS_MNH_ERRS_SERDES1_SNP_UPSTRM_ERR_MASK	0x1ull
#define MNH_MISC_STS_MNH_ERRS_SERDES1_SNP_UPSTRM_ERR_SMASK	0x20ull
#define MNH_MISC_STS_MNH_ERRS_SERDES1_CRK8051_ERR_SHIFT		4
#define MNH_MISC_STS_MNH_ERRS_SERDES1_CRK8051_ERR_MASK		0x1ull
#define MNH_MISC_STS_MNH_ERRS_SERDES1_CRK8051_ERR_SMASK		0x10ull
#define MNH_MISC_STS_MNH_ERRS_SERDES0_SNP_DWNSTRM_ERR_SHIFT	3
#define MNH_MISC_STS_MNH_ERRS_SERDES0_SNP_DWNSTRM_ERR_MASK	0x1ull
#define MNH_MISC_STS_MNH_ERRS_SERDES0_SNP_DWNSTRM_ERR_SMASK	0x8ull
#define MNH_MISC_STS_MNH_ERRS_SERDES0_SNP_UPSTRM_ERR_SHIFT	2
#define MNH_MISC_STS_MNH_ERRS_SERDES0_SNP_UPSTRM_ERR_MASK	0x1ull
#define MNH_MISC_STS_MNH_ERRS_SERDES0_SNP_UPSTRM_ERR_SMASK	0x4ull
#define MNH_MISC_STS_MNH_ERRS_SERDES0_CRK8051_ERR_SHIFT		1
#define MNH_MISC_STS_MNH_ERRS_SERDES0_CRK8051_ERR_MASK		0x1ull
#define MNH_MISC_STS_MNH_ERRS_SERDES0_CRK8051_ERR_SMASK		0x2ull
#define MNH_MISC_STS_MNH_ERRS_OPIO_PHY_ERR_SHIFT		0
#define MNH_MISC_STS_MNH_ERRS_OPIO_PHY_ERR_MASK			0x1ull
#define MNH_MISC_STS_MNH_ERRS_OPIO_PHY_ERR_SMASK		0x1ull
/*
* Table #15 of 144_Misc_Partition_Registers.xml - MISC_QSFP1_IN
* This CSR is used to read the current value of the QSFP1 pins (prior to any 
* inversion).
*/
#define MNH_MISC_QSFP1_IN					(MNH_MISC_CSRS + 0x000000003000)
#define MNH_MISC_QSFP1_IN_RESETCSR				0x000000000000001Bull
#define MNH_MISC_QSFP1_IN_QSFP1_IN_SHIFT			0
#define MNH_MISC_QSFP1_IN_QSFP1_IN_MASK				0x1Full
#define MNH_MISC_QSFP1_IN_QSFP1_IN_SMASK			0x1Full
/*
* Table #16 of 144_Misc_Partition_Registers.xml - MISC_QSFP1_OE
* This CSR specifies the output enable for the QSFP1 pins.
*/
#define MNH_MISC_QSFP1_OE					(MNH_MISC_CSRS + 0x000000003008)
#define MNH_MISC_QSFP1_OE_RESETCSR				0x0000000000000000ull
#define MNH_MISC_QSFP1_OE_QSFP1_OE_SHIFT			0
#define MNH_MISC_QSFP1_OE_QSFP1_OE_MASK				0x1Full
#define MNH_MISC_QSFP1_OE_QSFP1_OE_SMASK			0x1Full
/*
* Table #17 of 144_Misc_Partition_Registers.xml - MISC_QSFP1_INVERT
* This CSR specifies whether the read value of the QSFP1 pins should be inverted 
* or not.
*/
#define MNH_MISC_QSFP1_INVERT					(MNH_MISC_CSRS + 0x000000003010)
#define MNH_MISC_QSFP1_INVERT_RESETCSR				0x0000000000000000ull
#define MNH_MISC_QSFP1_INVERT_QSFP1_INVERT_SHIFT		0
#define MNH_MISC_QSFP1_INVERT_QSFP1_INVERT_MASK			0x1Full
#define MNH_MISC_QSFP1_INVERT_QSFP1_INVERT_SMASK		0x1Full
/*
* Table #18 of 144_Misc_Partition_Registers.xml - MISC_QSFP1_OUT
* This CSR specifies the output value of the QSFP1 pins.
*/
#define MNH_MISC_QSFP1_OUT					(MNH_MISC_CSRS + 0x000000003018)
#define MNH_MISC_QSFP1_OUT_RESETCSR				0x0000000000000004ull
#define MNH_MISC_QSFP1_OUT_QSFP1_OUT_SHIFT			0
#define MNH_MISC_QSFP1_OUT_QSFP1_OUT_MASK			0x1Full
#define MNH_MISC_QSFP1_OUT_QSFP1_OUT_SMASK			0x1Full
/*
* Table #19 of 144_Misc_Partition_Registers.xml - MISC_QSFP1_MASK
* This CSR specifies the mask value for the QSFP1 pins and is used to mask the 
* QSFP1 status value to indicate whether the QSFP1 interrupt is to be 
* delivered.
*/
#define MNH_MISC_QSFP1_MASK					(MNH_MISC_CSRS + 0x000000003020)
#define MNH_MISC_QSFP1_MASK_RESETCSR				0x0000000000000000ull
#define MNH_MISC_QSFP1_MASK_QSFP1_MASK_SHIFT			0
#define MNH_MISC_QSFP1_MASK_QSFP1_MASK_MASK			0x1Full
#define MNH_MISC_QSFP1_MASK_QSFP1_MASK_SMASK			0x1Full
/*
* Table #20 of 144_Misc_Partition_Registers.xml - MISC_QSFP1_STATUS
* This CSR can be used to read the QSFP1 status.
*/
#define MNH_MISC_QSFP1_STATUS					(MNH_MISC_CSRS + 0x000000003028)
#define MNH_MISC_QSFP1_STATUS_RESETCSR				0x000000000000001Bull
#define MNH_MISC_QSFP1_STATUS_QSFP1_STATUS_SHIFT		0
#define MNH_MISC_QSFP1_STATUS_QSFP1_STATUS_MASK			0x1Full
#define MNH_MISC_QSFP1_STATUS_QSFP1_STATUS_SMASK		0x1Full
/*
* Table #21 of 144_Misc_Partition_Registers.xml - MISC_QSFP1_CLEAR
* This CSR can be used to clear the QSFP1 status.
*/
#define MNH_MISC_QSFP1_CLEAR					(MNH_MISC_CSRS + 0x000000003030)
#define MNH_MISC_QSFP1_CLEAR_RESETCSR				0x0000000000000000ull
#define MNH_MISC_QSFP1_CLEAR_QSFP1_CLEAR_SHIFT			0
#define MNH_MISC_QSFP1_CLEAR_QSFP1_CLEAR_MASK			0x1Full
#define MNH_MISC_QSFP1_CLEAR_QSFP1_CLEAR_SMASK			0x1Full
/*
* Table #22 of 144_Misc_Partition_Registers.xml - MISC_QSFP1_FORCE
* This CSR can be used to force the QSFP1 status.
*/
#define MNH_MISC_QSFP1_FORCE					(MNH_MISC_CSRS + 0x000000003038)
#define MNH_MISC_QSFP1_FORCE_RESETCSR				0x0000000000000000ull
#define MNH_MISC_QSFP1_FORCE_QSFP1_FORCE_SHIFT			0
#define MNH_MISC_QSFP1_FORCE_QSFP1_FORCE_MASK			0x1Full
#define MNH_MISC_QSFP1_FORCE_QSFP1_FORCE_SMASK			0x1Full
/*
* Table #23 of 144_Misc_Partition_Registers.xml - MISC_QSFP2_IN
* This CSR is used to read the current value of the QSFP2 pins (prior to any 
* inversion).
*/
#define MNH_MISC_QSFP2_IN					(MNH_MISC_CSRS + 0x000000003040)
#define MNH_MISC_QSFP2_IN_RESETCSR				0x000000000000001Bull
#define MNH_MISC_QSFP2_IN_QSFP2_IN_SHIFT			0
#define MNH_MISC_QSFP2_IN_QSFP2_IN_MASK				0x1Full
#define MNH_MISC_QSFP2_IN_QSFP2_IN_SMASK			0x1Full
/*
* Table #24 of 144_Misc_Partition_Registers.xml - MISC_QSFP2_OE
* This CSR specifies the output enable for the QSFP2 pins.
*/
#define MNH_MISC_QSFP2_OE					(MNH_MISC_CSRS + 0x000000003048)
#define MNH_MISC_QSFP2_OE_RESETCSR				0x0000000000000000ull
#define MNH_MISC_QSFP2_OE_QSFP2_OE_SHIFT			0
#define MNH_MISC_QSFP2_OE_QSFP2_OE_MASK				0x1Full
#define MNH_MISC_QSFP2_OE_QSFP2_OE_SMASK			0x1Full
/*
* Table #25 of 144_Misc_Partition_Registers.xml - MISC_QSFP2_INVERT
* This CSR specifies whether the read value of the QSFP2 pins should be inverted 
* or not.
*/
#define MNH_MISC_QSFP2_INVERT					(MNH_MISC_CSRS + 0x000000003050)
#define MNH_MISC_QSFP2_INVERT_RESETCSR				0x0000000000000000ull
#define MNH_MISC_QSFP2_INVERT_QSFP2_INVERT_SHIFT		0
#define MNH_MISC_QSFP2_INVERT_QSFP2_INVERT_MASK			0x1Full
#define MNH_MISC_QSFP2_INVERT_QSFP2_INVERT_SMASK		0x1Full
/*
* Table #26 of 144_Misc_Partition_Registers.xml - MISC_QSFP2_OUT
* This CSR specifies the output value of the QSFP2 pins.
*/
#define MNH_MISC_QSFP2_OUT					(MNH_MISC_CSRS + 0x000000003058)
#define MNH_MISC_QSFP2_OUT_RESETCSR				0x0000000000000004ull
#define MNH_MISC_QSFP2_OUT_QSFP2_OUT_SHIFT			0
#define MNH_MISC_QSFP2_OUT_QSFP2_OUT_MASK			0x1Full
#define MNH_MISC_QSFP2_OUT_QSFP2_OUT_SMASK			0x1Full
/*
* Table #27 of 144_Misc_Partition_Registers.xml - MISC_QSFP2_MASK
* This CSR specifies the mask value for the QSFP2 pins and is used to mask the 
* QSFP2 status value to indicate whether the QSFP2 interrupt is to be 
* delivered.
*/
#define MNH_MISC_QSFP2_MASK					(MNH_MISC_CSRS + 0x000000003060)
#define MNH_MISC_QSFP2_MASK_RESETCSR				0x0000000000000000ull
#define MNH_MISC_QSFP2_MASK_QSFP2_MASK_SHIFT			0
#define MNH_MISC_QSFP2_MASK_QSFP2_MASK_MASK			0x1Full
#define MNH_MISC_QSFP2_MASK_QSFP2_MASK_SMASK			0x1Full
/*
* Table #28 of 144_Misc_Partition_Registers.xml - MISC_QSFP2_STATUS
* This CSR can be used to read the QSFP2 status.
*/
#define MNH_MISC_QSFP2_STATUS					(MNH_MISC_CSRS + 0x000000003068)
#define MNH_MISC_QSFP2_STATUS_RESETCSR				0x000000000000001Bull
#define MNH_MISC_QSFP2_STATUS_QSFP2_STATUS_SHIFT		0
#define MNH_MISC_QSFP2_STATUS_QSFP2_STATUS_MASK			0x1Full
#define MNH_MISC_QSFP2_STATUS_QSFP2_STATUS_SMASK		0x1Full
/*
* Table #29 of 144_Misc_Partition_Registers.xml - MISC_QSFP2_CLEAR
* This CSR can be used to clear the QSFP2 status.
*/
#define MNH_MISC_QSFP2_CLEAR					(MNH_MISC_CSRS + 0x000000003070)
#define MNH_MISC_QSFP2_CLEAR_RESETCSR				0x0000000000000000ull
#define MNH_MISC_QSFP2_CLEAR_QSFP2_CLEAR_SHIFT			0
#define MNH_MISC_QSFP2_CLEAR_QSFP2_CLEAR_MASK			0x1Full
#define MNH_MISC_QSFP2_CLEAR_QSFP2_CLEAR_SMASK			0x1Full
/*
* Table #30 of 144_Misc_Partition_Registers.xml - MISC_QSFP2_FORCE
* This CSR can be used to force the QSFP2 status.
*/
#define MNH_MISC_QSFP2_FORCE					(MNH_MISC_CSRS + 0x000000003078)
#define MNH_MISC_QSFP2_FORCE_RESETCSR				0x0000000000000000ull
#define MNH_MISC_QSFP2_FORCE_QSFP2_FORCE_SHIFT			0
#define MNH_MISC_QSFP2_FORCE_QSFP2_FORCE_MASK			0x1Full
#define MNH_MISC_QSFP2_FORCE_QSFP2_FORCE_SMASK			0x1Full
/*
* Table #31 of 144_Misc_Partition_Registers.xml - MISC_VISA_CMD
* This CSR provides VISA controller command interface. Address, command and 
* security mode details are provided in this register.
*/
#define MNH_MISC_VISA_CMD					(MNH_MISC_CSRS + 0x000000005000)
#define MNH_MISC_VISA_CMD_RESETCSR				0x0000000001000000ull
#define MNH_MISC_VISA_CMD_UNUSED_31_27_SHIFT			27
#define MNH_MISC_VISA_CMD_UNUSED_31_27_MASK			0x1Full
#define MNH_MISC_VISA_CMD_UNUSED_31_27_SMASK			0xF8000000ull
#define MNH_MISC_VISA_CMD_VISA_FSCAN_MODE_SHIFT			26
#define MNH_MISC_VISA_CMD_VISA_FSCAN_MODE_MASK			0x1ull
#define MNH_MISC_VISA_CMD_VISA_FSCAN_MODE_SMASK			0x4000000ull
#define MNH_MISC_VISA_CMD_VISA_SECURE_SHIFT			25
#define MNH_MISC_VISA_CMD_VISA_SECURE_MASK			0x1ull
#define MNH_MISC_VISA_CMD_VISA_SECURE_SMASK			0x2000000ull
#define MNH_MISC_VISA_CMD_VISA_WR_GET_SHIFT			24
#define MNH_MISC_VISA_CMD_VISA_WR_GET_MASK			0x1ull
#define MNH_MISC_VISA_CMD_VISA_WR_GET_SMASK			0x1000000ull
#define MNH_MISC_VISA_CMD_VISA_TRIGGER_IN_SHIFT			16
#define MNH_MISC_VISA_CMD_VISA_TRIGGER_IN_MASK			0xFFull
#define MNH_MISC_VISA_CMD_VISA_TRIGGER_IN_SMASK			0xFF0000ull
#define MNH_MISC_VISA_CMD_VISA_RD_EN_SHIFT			15
#define MNH_MISC_VISA_CMD_VISA_RD_EN_MASK			0x1ull
#define MNH_MISC_VISA_CMD_VISA_RD_EN_SMASK			0x8000ull
#define MNH_MISC_VISA_CMD_VISA_WR_AVAIL_SHIFT			14
#define MNH_MISC_VISA_CMD_VISA_WR_AVAIL_MASK			0x1ull
#define MNH_MISC_VISA_CMD_VISA_WR_AVAIL_SMASK			0x4000ull
#define MNH_MISC_VISA_CMD_VISA_ADDR_SHIFT			0
#define MNH_MISC_VISA_CMD_VISA_ADDR_MASK			0x3FFFull
#define MNH_MISC_VISA_CMD_VISA_ADDR_SMASK			0x3FFFull
/*
* Table #32 of 144_Misc_Partition_Registers.xml - MISC_VISA_DATA
* This CSR is visa controller data interface.
*/
#define MNH_MISC_VISA_DATA					(MNH_MISC_CSRS + 0x000000005008)
#define MNH_MISC_VISA_DATA_RESETCSR				0x0000000000000000ull
#define MNH_MISC_VISA_DATA_VISA_DATA_SHIFT			0
#define MNH_MISC_VISA_DATA_VISA_DATA_MASK			0xFFFFFFFFull
#define MNH_MISC_VISA_DATA_VISA_DATA_SMASK			0xFFFFFFFFull

#endif 		/* DEF_MNH_MISC_SW_DEF */
