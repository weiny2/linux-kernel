/*
*------------------------------------------------------------------------------
*                                                                              
*  INTEL CONFIDENTIAL                                                          
*                                                                              
*  Copyright 2016 Intel Corporation All Rights Reserved.                 
*                                                                              
*  The source code contained or described herein and all documents related     
*  to the source code ("Material") are owned by Intel Corporation or its    
*  suppliers or licensors. Title to the Material remains with Intel            
*  Corporation or its suppliers and licensors. The Material contains trade     
*  secrets and proprietary and confidential information of Intel or its        
*  suppliers and licensors. The Material is protected by worldwide copyright   
*  and trade secret laws and treaty provisions. No part of the Material may    
*  be used, copied, reproduced, modified, published, uploaded, posted,         
*  transmitted, distributed, or disclosed in any way without Intel's prior     
*  express written permission.                                                 
*                                                                              
*  No license under any patent, copyright, trade secret or other intellectual  
*  property right is granted to or conferred upon you by disclosure or         
*  delivery of the Materials, either expressly, by implication, inducement,    
*  estoppel or otherwise. Any license under such intellectual property rights  
*  must be express and approved by Intel in writing.                           
*                                                                              
*------------------------------------------------------------------------------
*  Auto-generated by /nfs/sc/disks/slx_0108/pvesv/fxr_autogen/i_csrs.pl
*  i_csrs.pl Version 1.5 last modified on Thursday 1/7/16 17:24:50
*  /nfs/sc/disks/slx_0108/pvesv/fxr_autogen/i_csrs.pl -C -R -ST fxr_rx_ci -unit=fxr_rx_ci_cic_csrs -o /nfs/sc/disks/slx_0108/pvesv/fxr_autogen/fxr /nfs/sc/disks/slx_0108/pvesv/fxr_autogen/repo_xml/300_Memory_Map.xml /nfs/sc/disks/slx_0108/pvesv/fxr_autogen/repo_xml/330_Memory_Map_RX_CI.xml
*------------------------------------------------------------------------------
*/

#ifndef DEF_FXR_RX_CI_CIC_CSRS_SW_DEF
#define DEF_FXR_RX_CI_CIC_CSRS_SW_DEF

#ifndef FXR_RX_CI_CIC_CSRS
#define FXR_RX_CI_CIC_CSRS						0x000000000000
#endif
#define FXR_NUM_CONTEXTS						192
#define FXR_NUM_PIDS							4096
#define FXR_MAX_CONTEXT							191
#define FXR_TX_CONTEXT_ENTRIES						128
#define FXR_TX_CONTEXT_MAX						127
#define FXR_RX_CONTEXT_ENTRIES						16
#define FXR_RX_CONTEXT_MAX						15
#define FXR_NUM_SL							32
#define FXR_MAX_SL							31
#define RXCID_CSR_OFFSET						0
#define RXCID_CQ_HEAD_UPDATE_OFFSET					1536
#define RXCID_UPDATE_CNTRL_OFFSET					3584
#define RXCID_SL0_TO_TC_OFFSET						3592
#define RXCID_SL1_TO_TC_OFFSET						3600
#define RXCID_SL2_TO_TC_OFFSET						3608
#define RXCID_SL3_TO_TC_OFFSET						3616
#define RXCID_ERROR_BASE						24576
#define RXCID_ERR_CQ_GENERAL_OFFSET					24832
#define RXCID_DBG_ERR_INJECT_OFFSET					28672
#define RXCID_CQ_OFFSET							262144
#define RXCIC_CSR_OFFSET						0
#define RXCIC_STS_BASE							16384
#define RXCIC_ERROR_BASE						24576
#define RXCIC_ERR_PER_CQ_GENERAL_OFFSET					24832
#define RXCIC_DBG_ERR_INJECT_OFFSET					28672
/*
* Table #4 of fxr_rx_ci_cic_csrs - RXCIC_CFG_CQ_DRAIN_RESET
* A write to this CSR initiates either a drain operation or a reset operation or 
* both for one receive CQ. A drain, if specified, empties the CQ of commands by 
* sending them into the RX pipeline as usual. The drain finishes when the first 
* slot that is not full is reached by the head pointer. A reset will clear the 
* head pointer and all slot full counts and the enable bit in the configuration 
* CSR. If both a reset and a drain are specified, the reset will be performed 
* after the drain finishes. The head pointer will be updated after the specified 
* operations finish.
*/
#define FXR_RXCIC_CFG_CQ_DRAIN_RESET					(FXR_RX_CI_CIC_CSRS + 0x000000000000)
#define FXR_RXCIC_CFG_CQ_DRAIN_RESET_RESETCSR				0x0000000000000000ull
#define FXR_RXCIC_CFG_CQ_DRAIN_RESET_BUSY_SHIFT				10
#define FXR_RXCIC_CFG_CQ_DRAIN_RESET_BUSY_MASK				0x1ull
#define FXR_RXCIC_CFG_CQ_DRAIN_RESET_BUSY_SMASK				0x400ull
#define FXR_RXCIC_CFG_CQ_DRAIN_RESET_RESET_SHIFT			9
#define FXR_RXCIC_CFG_CQ_DRAIN_RESET_RESET_MASK				0x1ull
#define FXR_RXCIC_CFG_CQ_DRAIN_RESET_RESET_SMASK			0x200ull
#define FXR_RXCIC_CFG_CQ_DRAIN_RESET_DRAIN_SHIFT			8
#define FXR_RXCIC_CFG_CQ_DRAIN_RESET_DRAIN_MASK				0x1ull
#define FXR_RXCIC_CFG_CQ_DRAIN_RESET_DRAIN_SMASK			0x100ull
#define FXR_RXCIC_CFG_CQ_DRAIN_RESET_DRAIN_CQ_SHIFT			0
#define FXR_RXCIC_CFG_CQ_DRAIN_RESET_DRAIN_CQ_MASK			0xFFull
#define FXR_RXCIC_CFG_CQ_DRAIN_RESET_DRAIN_CQ_SMASK			0xFFull
/*
* Table #5 of fxr_rx_ci_cic_csrs - RXCIC_CFG_DISABLE_ARBITRATION
* A write to this CSR would disable the arbitration logic in RXCI. The RXCI 
* logic would stop arbitration between the CQ's.
*/
#define FXR_RXCIC_CFG_DISABLE_ARBITRATION				(FXR_RX_CI_CIC_CSRS + 0x000000000008)
#define FXR_RXCIC_CFG_DISABLE_ARBITRATION_RESETCSR			0x0000000000000000ull
#define FXR_RXCIC_CFG_DISABLE_ARBITRATION_ARBITRATION_DISABLE_SHIFT	0
#define FXR_RXCIC_CFG_DISABLE_ARBITRATION_ARBITRATION_DISABLE_MASK	0x1ull
#define FXR_RXCIC_CFG_DISABLE_ARBITRATION_ARBITRATION_DISABLE_SMASK	0x1ull
/*
* Table #6 of fxr_rx_ci_cic_csrs - RXCIC_CFG_TO_LIMIT
* Specifies the amount of time for a command, once started, to finish writing a 
* CQ.
*/
#define FXR_RXCIC_CFG_TO_LIMIT						(FXR_RX_CI_CIC_CSRS + 0x000000000010)
#define FXR_RXCIC_CFG_TO_LIMIT_RESETCSR					0x0000000000100000ull
#define FXR_RXCIC_CFG_TO_LIMIT_RSV_63_SHIFT				37
#define FXR_RXCIC_CFG_TO_LIMIT_RSV_63_MASK				0x7FFFFFFull
#define FXR_RXCIC_CFG_TO_LIMIT_RSV_63_SMASK				0xFFFFFFE000000000ull
#define FXR_RXCIC_CFG_TO_LIMIT_TO_LIMIT_SHIFT				20
#define FXR_RXCIC_CFG_TO_LIMIT_TO_LIMIT_MASK				0x1FFFFull
#define FXR_RXCIC_CFG_TO_LIMIT_TO_LIMIT_SMASK				0x1FFFF00000ull
#define FXR_RXCIC_CFG_TO_LIMIT_RSV_SHIFT				0
#define FXR_RXCIC_CFG_TO_LIMIT_RSV_MASK					0xFFFFFull
#define FXR_RXCIC_CFG_TO_LIMIT_RSV_SMASK				0xFFFFFull
/*
* Table #7 of fxr_rx_ci_cic_csrs - RXCIC_STS_CQ_TAIL
* This is a per command queue entry for reading the CQ tail pointer. Hardware 
* does not have an explicit tail pointer, instead it keeps track of filled 
* slots. On reads, hardware will return a pointer to the first slot after its 
* head pointer that is not full. Writes are ignored.
*/
#define FXR_RXCIC_STS_CQ_TAIL						(FXR_RX_CI_CIC_CSRS + 0x000000004000)
#define FXR_RXCIC_STS_CQ_TAIL_RESETCSR					0x0000000000000000ull
#define FXR_RXCIC_STS_CQ_TAIL_TAIL_SHIFT				0
#define FXR_RXCIC_STS_CQ_TAIL_TAIL_MASK					0xFull
#define FXR_RXCIC_STS_CQ_TAIL_TAIL_SMASK				0xFull
/*
* Table #8 of fxr_rx_ci_cic_csrs - RXCIC_ERR_STS
* This is the Error Status CSR. Bits are set by hardware or by writing to the 
* RXCIC_ERR_FRC CSR. Bits are cleared by writing to the RXCIC_ERR_CLR 
* CSR.
*/
#define FXR_RXCIC_ERR_STS						(FXR_RX_CI_CIC_CSRS + 0x000000006000)
#define FXR_RXCIC_ERR_STS_RESETCSR					0x0000000000000000ull
#define FXR_RXCIC_ERR_STS_HEAD_PTR_PAR_ERR_SHIFT			7
#define FXR_RXCIC_ERR_STS_HEAD_PTR_PAR_ERR_MASK				0x1ull
#define FXR_RXCIC_ERR_STS_HEAD_PTR_PAR_ERR_SMASK			0x80ull
#define FXR_RXCIC_ERR_STS_QWORD_CNT_OVRFLW_SHIFT			6
#define FXR_RXCIC_ERR_STS_QWORD_CNT_OVRFLW_MASK				0x1ull
#define FXR_RXCIC_ERR_STS_QWORD_CNT_OVRFLW_SMASK			0x40ull
#define FXR_RXCIC_ERR_STS_CQ_TIMEOUT_SHIFT				5
#define FXR_RXCIC_ERR_STS_CQ_TIMEOUT_MASK				0x1ull
#define FXR_RXCIC_ERR_STS_CQ_TIMEOUT_SMASK				0x20ull
#define FXR_RXCIC_ERR_STS_CQSLOT_LEN_VEC_ERROR_SHIFT			4
#define FXR_RXCIC_ERR_STS_CQSLOT_LEN_VEC_ERROR_MASK			0x1ull
#define FXR_RXCIC_ERR_STS_CQSLOT_LEN_VEC_ERROR_SMASK			0x10ull
#define FXR_RXCIC_ERR_STS_CQSLOT_FULL_VEC_ERROR_SHIFT			3
#define FXR_RXCIC_ERR_STS_CQSLOT_FULL_VEC_ERROR_MASK			0x1ull
#define FXR_RXCIC_ERR_STS_CQSLOT_FULL_VEC_ERROR_SMASK			0x8ull
#define FXR_RXCIC_ERR_STS_QWORD_CNT_ERR_SBE_SHIFT			2
#define FXR_RXCIC_ERR_STS_QWORD_CNT_ERR_SBE_MASK			0x1ull
#define FXR_RXCIC_ERR_STS_QWORD_CNT_ERR_SBE_SMASK			0x4ull
#define FXR_RXCIC_ERR_STS_QWORD_CNT_ERR_MBE_SHIFT			1
#define FXR_RXCIC_ERR_STS_QWORD_CNT_ERR_MBE_MASK			0x1ull
#define FXR_RXCIC_ERR_STS_QWORD_CNT_ERR_MBE_SMASK			0x2ull
#define FXR_RXCIC_ERR_STS_INV_WRITE_FLUSH_SHIFT				0
#define FXR_RXCIC_ERR_STS_INV_WRITE_FLUSH_MASK				0x1ull
#define FXR_RXCIC_ERR_STS_INV_WRITE_FLUSH_SMASK				0x1ull
/*
* Table #9 of fxr_rx_ci_cic_csrs - RXCIC_ERR_CLR
* This is the Error Clear CSR. Writing a 1 to a valid bit will clear the 
* corresponding bit in the RXCIC_ERR_STS CSR.
*/
#define FXR_RXCIC_ERR_CLR						(FXR_RX_CI_CIC_CSRS + 0x000000006008)
#define FXR_RXCIC_ERR_CLR_RESETCSR					0x0000000000000000ull
#define FXR_RXCIC_ERR_CLR_HEAD_PTR_PAR_ERR_SHIFT			7
#define FXR_RXCIC_ERR_CLR_HEAD_PTR_PAR_ERR_MASK				0x1ull
#define FXR_RXCIC_ERR_CLR_HEAD_PTR_PAR_ERR_SMASK			0x80ull
#define FXR_RXCIC_ERR_CLR_QWORD_CNT_OVRFLW_SHIFT			6
#define FXR_RXCIC_ERR_CLR_QWORD_CNT_OVRFLW_MASK				0x1ull
#define FXR_RXCIC_ERR_CLR_QWORD_CNT_OVRFLW_SMASK			0x40ull
#define FXR_RXCIC_ERR_CLR_CQ_TIMEOUT_SHIFT				5
#define FXR_RXCIC_ERR_CLR_CQ_TIMEOUT_MASK				0x1ull
#define FXR_RXCIC_ERR_CLR_CQ_TIMEOUT_SMASK				0x20ull
#define FXR_RXCIC_ERR_CLR_CQSLOT_LEN_VEC_ERROR_SHIFT			4
#define FXR_RXCIC_ERR_CLR_CQSLOT_LEN_VEC_ERROR_MASK			0x1ull
#define FXR_RXCIC_ERR_CLR_CQSLOT_LEN_VEC_ERROR_SMASK			0x10ull
#define FXR_RXCIC_ERR_CLR_CQSLOT_FULL_VEC_ERROR_SHIFT			3
#define FXR_RXCIC_ERR_CLR_CQSLOT_FULL_VEC_ERROR_MASK			0x1ull
#define FXR_RXCIC_ERR_CLR_CQSLOT_FULL_VEC_ERROR_SMASK			0x8ull
#define FXR_RXCIC_ERR_CLR_QWORD_CNT_ERR_SBE_SHIFT			2
#define FXR_RXCIC_ERR_CLR_QWORD_CNT_ERR_SBE_MASK			0x1ull
#define FXR_RXCIC_ERR_CLR_QWORD_CNT_ERR_SBE_SMASK			0x4ull
#define FXR_RXCIC_ERR_CLR_QWORD_CNT_ERR_MBE_SHIFT			1
#define FXR_RXCIC_ERR_CLR_QWORD_CNT_ERR_MBE_MASK			0x1ull
#define FXR_RXCIC_ERR_CLR_QWORD_CNT_ERR_MBE_SMASK			0x2ull
#define FXR_RXCIC_ERR_CLR_INV_WRITE_FLUSH_SHIFT				0
#define FXR_RXCIC_ERR_CLR_INV_WRITE_FLUSH_MASK				0x1ull
#define FXR_RXCIC_ERR_CLR_INV_WRITE_FLUSH_SMASK				0x1ull
/*
* Table #10 of fxr_rx_ci_cic_csrs - RXCIC_ERR_FRC
* This is the Error Force CSR. Writing a 1 to a valid bit will set the 
* corresponding bit in the RXCIC_ERR_STS CSR.
*/
#define FXR_RXCIC_ERR_FRC						(FXR_RX_CI_CIC_CSRS + 0x000000006010)
#define FXR_RXCIC_ERR_FRC_RESETCSR					0x0000000000000000ull
#define FXR_RXCIC_ERR_FRC_HEAD_PTR_PAR_ERR_SHIFT			7
#define FXR_RXCIC_ERR_FRC_HEAD_PTR_PAR_ERR_MASK				0x1ull
#define FXR_RXCIC_ERR_FRC_HEAD_PTR_PAR_ERR_SMASK			0x80ull
#define FXR_RXCIC_ERR_FRC_QWORD_CNT_OVRFLW_SHIFT			6
#define FXR_RXCIC_ERR_FRC_QWORD_CNT_OVRFLW_MASK				0x1ull
#define FXR_RXCIC_ERR_FRC_QWORD_CNT_OVRFLW_SMASK			0x40ull
#define FXR_RXCIC_ERR_FRC_CQ_TIMEOUT_SHIFT				5
#define FXR_RXCIC_ERR_FRC_CQ_TIMEOUT_MASK				0x1ull
#define FXR_RXCIC_ERR_FRC_CQ_TIMEOUT_SMASK				0x20ull
#define FXR_RXCIC_ERR_FRC_CQSLOT_LEN_VEC_ERROR_SHIFT			4
#define FXR_RXCIC_ERR_FRC_CQSLOT_LEN_VEC_ERROR_MASK			0x1ull
#define FXR_RXCIC_ERR_FRC_CQSLOT_LEN_VEC_ERROR_SMASK			0x10ull
#define FXR_RXCIC_ERR_FRC_CQSLOT_FULL_VEC_ERROR_SHIFT			3
#define FXR_RXCIC_ERR_FRC_CQSLOT_FULL_VEC_ERROR_MASK			0x1ull
#define FXR_RXCIC_ERR_FRC_CQSLOT_FULL_VEC_ERROR_SMASK			0x8ull
#define FXR_RXCIC_ERR_FRC_QWORD_CNT_ERR_SBE_SHIFT			2
#define FXR_RXCIC_ERR_FRC_QWORD_CNT_ERR_SBE_MASK			0x1ull
#define FXR_RXCIC_ERR_FRC_QWORD_CNT_ERR_SBE_SMASK			0x4ull
#define FXR_RXCIC_ERR_FRC_QWORD_CNT_ERR_MBE_SHIFT			1
#define FXR_RXCIC_ERR_FRC_QWORD_CNT_ERR_MBE_MASK			0x1ull
#define FXR_RXCIC_ERR_FRC_QWORD_CNT_ERR_MBE_SMASK			0x2ull
#define FXR_RXCIC_ERR_FRC_INV_WRITE_FLUSH_SHIFT				0
#define FXR_RXCIC_ERR_FRC_INV_WRITE_FLUSH_MASK				0x1ull
#define FXR_RXCIC_ERR_FRC_INV_WRITE_FLUSH_SMASK				0x1ull
/*
* Table #11 of fxr_rx_ci_cic_csrs - RXCIC_ERR_EN_HOST
* This is the Error Enable for the Host Interrupt. If a bit is set, the 
* corresponding error bit in RXCIC_ERR_STS will cause an interrupt on the HOST 
* interrupt signal.
*/
#define FXR_RXCIC_ERR_EN_HOST						(FXR_RX_CI_CIC_CSRS + 0x000000006018)
#define FXR_RXCIC_ERR_EN_HOST_RESETCSR					0x0000000000000000ull
#define FXR_RXCIC_ERR_EN_HOST_HEAD_PTR_PAR_ERR_SHIFT			7
#define FXR_RXCIC_ERR_EN_HOST_HEAD_PTR_PAR_ERR_MASK			0x1ull
#define FXR_RXCIC_ERR_EN_HOST_HEAD_PTR_PAR_ERR_SMASK			0x80ull
#define FXR_RXCIC_ERR_EN_HOST_QWORD_CNT_OVRFLW_SHIFT			6
#define FXR_RXCIC_ERR_EN_HOST_QWORD_CNT_OVRFLW_MASK			0x1ull
#define FXR_RXCIC_ERR_EN_HOST_QWORD_CNT_OVRFLW_SMASK			0x40ull
#define FXR_RXCIC_ERR_EN_HOST_CQ_TIMEOUT_SHIFT				5
#define FXR_RXCIC_ERR_EN_HOST_CQ_TIMEOUT_MASK				0x1ull
#define FXR_RXCIC_ERR_EN_HOST_CQ_TIMEOUT_SMASK				0x20ull
#define FXR_RXCIC_ERR_EN_HOST_CQSLOT_LEN_VEC_ERROR_SHIFT		4
#define FXR_RXCIC_ERR_EN_HOST_CQSLOT_LEN_VEC_ERROR_MASK			0x1ull
#define FXR_RXCIC_ERR_EN_HOST_CQSLOT_LEN_VEC_ERROR_SMASK		0x10ull
#define FXR_RXCIC_ERR_EN_HOST_CQSLOT_FULL_VEC_ERROR_SHIFT		3
#define FXR_RXCIC_ERR_EN_HOST_CQSLOT_FULL_VEC_ERROR_MASK		0x1ull
#define FXR_RXCIC_ERR_EN_HOST_CQSLOT_FULL_VEC_ERROR_SMASK		0x8ull
#define FXR_RXCIC_ERR_EN_HOST_QWORD_CNT_ERR_SBE_SHIFT			2
#define FXR_RXCIC_ERR_EN_HOST_QWORD_CNT_ERR_SBE_MASK			0x1ull
#define FXR_RXCIC_ERR_EN_HOST_QWORD_CNT_ERR_SBE_SMASK			0x4ull
#define FXR_RXCIC_ERR_EN_HOST_QWORD_CNT_ERR_MBE_SHIFT			1
#define FXR_RXCIC_ERR_EN_HOST_QWORD_CNT_ERR_MBE_MASK			0x1ull
#define FXR_RXCIC_ERR_EN_HOST_QWORD_CNT_ERR_MBE_SMASK			0x2ull
#define FXR_RXCIC_ERR_EN_HOST_INV_WRITE_FLUSH_SHIFT			0
#define FXR_RXCIC_ERR_EN_HOST_INV_WRITE_FLUSH_MASK			0x1ull
#define FXR_RXCIC_ERR_EN_HOST_INV_WRITE_FLUSH_SMASK			0x1ull
/*
* Table #12 of fxr_rx_ci_cic_csrs - RXCIC_ERR_FIRST_HOST
* This is the First Error CSR for the Host Interrupt. When this CSR is clear, it 
* will capture the next RXCIC_ERR_STS value when a new HOST Interrupt 
* occurs.
*/
#define FXR_RXCIC_ERR_FIRST_HOST					(FXR_RX_CI_CIC_CSRS + 0x000000006020)
#define FXR_RXCIC_ERR_FIRST_HOST_RESETCSR				0x0000000000000000ull
#define FXR_RXCIC_ERR_FIRST_HOST_HEAD_PTR_PAR_ERR_SHIFT			7
#define FXR_RXCIC_ERR_FIRST_HOST_HEAD_PTR_PAR_ERR_MASK			0x1ull
#define FXR_RXCIC_ERR_FIRST_HOST_HEAD_PTR_PAR_ERR_SMASK			0x80ull
#define FXR_RXCIC_ERR_FIRST_HOST_QWORD_CNT_OVRFLW_SHIFT			6
#define FXR_RXCIC_ERR_FIRST_HOST_QWORD_CNT_OVRFLW_MASK			0x1ull
#define FXR_RXCIC_ERR_FIRST_HOST_QWORD_CNT_OVRFLW_SMASK			0x40ull
#define FXR_RXCIC_ERR_FIRST_HOST_CQ_TIMEOUT_SHIFT			5
#define FXR_RXCIC_ERR_FIRST_HOST_CQ_TIMEOUT_MASK			0x1ull
#define FXR_RXCIC_ERR_FIRST_HOST_CQ_TIMEOUT_SMASK			0x20ull
#define FXR_RXCIC_ERR_FIRST_HOST_CQSLOT_LEN_VEC_ERROR_SHIFT		4
#define FXR_RXCIC_ERR_FIRST_HOST_CQSLOT_LEN_VEC_ERROR_MASK		0x1ull
#define FXR_RXCIC_ERR_FIRST_HOST_CQSLOT_LEN_VEC_ERROR_SMASK		0x10ull
#define FXR_RXCIC_ERR_FIRST_HOST_CQSLOT_FULL_VEC_ERROR_SHIFT		3
#define FXR_RXCIC_ERR_FIRST_HOST_CQSLOT_FULL_VEC_ERROR_MASK		0x1ull
#define FXR_RXCIC_ERR_FIRST_HOST_CQSLOT_FULL_VEC_ERROR_SMASK		0x8ull
#define FXR_RXCIC_ERR_FIRST_HOST_QWORD_CNT_ERR_SBE_SHIFT		2
#define FXR_RXCIC_ERR_FIRST_HOST_QWORD_CNT_ERR_SBE_MASK			0x1ull
#define FXR_RXCIC_ERR_FIRST_HOST_QWORD_CNT_ERR_SBE_SMASK		0x4ull
#define FXR_RXCIC_ERR_FIRST_HOST_QWORD_CNT_ERR_MBE_SHIFT		1
#define FXR_RXCIC_ERR_FIRST_HOST_QWORD_CNT_ERR_MBE_MASK			0x1ull
#define FXR_RXCIC_ERR_FIRST_HOST_QWORD_CNT_ERR_MBE_SMASK		0x2ull
#define FXR_RXCIC_ERR_FIRST_HOST_INV_WRITE_FLUSH_SHIFT			0
#define FXR_RXCIC_ERR_FIRST_HOST_INV_WRITE_FLUSH_MASK			0x1ull
#define FXR_RXCIC_ERR_FIRST_HOST_INV_WRITE_FLUSH_SMASK			0x1ull
/*
* Table #13 of fxr_rx_ci_cic_csrs - RXCIC_ERR_EN_BMC
* This is the Error Enable for the BMC Interrupt. If a bit is set, the 
* corresponding error bit in RXCIC_ERR_STS will cause an interrupt on the BMC 
* interrupt signal.
*/
#define FXR_RXCIC_ERR_EN_BMC						(FXR_RX_CI_CIC_CSRS + 0x000000006028)
#define FXR_RXCIC_ERR_EN_BMC_RESETCSR					0x0000000000000000ull
#define FXR_RXCIC_ERR_EN_BMC_HEAD_PTR_PAR_ERR_SHIFT			7
#define FXR_RXCIC_ERR_EN_BMC_HEAD_PTR_PAR_ERR_MASK			0x1ull
#define FXR_RXCIC_ERR_EN_BMC_HEAD_PTR_PAR_ERR_SMASK			0x80ull
#define FXR_RXCIC_ERR_EN_BMC_QWORD_CNT_OVRFLW_SHIFT			6
#define FXR_RXCIC_ERR_EN_BMC_QWORD_CNT_OVRFLW_MASK			0x1ull
#define FXR_RXCIC_ERR_EN_BMC_QWORD_CNT_OVRFLW_SMASK			0x40ull
#define FXR_RXCIC_ERR_EN_BMC_CQ_TIMEOUT_SHIFT				5
#define FXR_RXCIC_ERR_EN_BMC_CQ_TIMEOUT_MASK				0x1ull
#define FXR_RXCIC_ERR_EN_BMC_CQ_TIMEOUT_SMASK				0x20ull
#define FXR_RXCIC_ERR_EN_BMC_CQSLOT_LEN_VEC_ERROR_SHIFT			4
#define FXR_RXCIC_ERR_EN_BMC_CQSLOT_LEN_VEC_ERROR_MASK			0x1ull
#define FXR_RXCIC_ERR_EN_BMC_CQSLOT_LEN_VEC_ERROR_SMASK			0x10ull
#define FXR_RXCIC_ERR_EN_BMC_CQSLOT_FULL_VEC_ERROR_SHIFT		3
#define FXR_RXCIC_ERR_EN_BMC_CQSLOT_FULL_VEC_ERROR_MASK			0x1ull
#define FXR_RXCIC_ERR_EN_BMC_CQSLOT_FULL_VEC_ERROR_SMASK		0x8ull
#define FXR_RXCIC_ERR_EN_BMC_QWORD_CNT_ERR_SBE_SHIFT			2
#define FXR_RXCIC_ERR_EN_BMC_QWORD_CNT_ERR_SBE_MASK			0x1ull
#define FXR_RXCIC_ERR_EN_BMC_QWORD_CNT_ERR_SBE_SMASK			0x4ull
#define FXR_RXCIC_ERR_EN_BMC_QWORD_CNT_ERR_MBE_SHIFT			1
#define FXR_RXCIC_ERR_EN_BMC_QWORD_CNT_ERR_MBE_MASK			0x1ull
#define FXR_RXCIC_ERR_EN_BMC_QWORD_CNT_ERR_MBE_SMASK			0x2ull
#define FXR_RXCIC_ERR_EN_BMC_INV_WRITE_FLUSH_SHIFT			0
#define FXR_RXCIC_ERR_EN_BMC_INV_WRITE_FLUSH_MASK			0x1ull
#define FXR_RXCIC_ERR_EN_BMC_INV_WRITE_FLUSH_SMASK			0x1ull
/*
* Table #14 of fxr_rx_ci_cic_csrs - RXCIC_ERR_FIRST_BMC
* This is the First Error CSR for the BMC Interrupt. When this CSR is clear, it 
* will capture the next RXCIC_ERR_STS value when a new BMC Interrupt 
* occurs.
*/
#define FXR_RXCIC_ERR_FIRST_BMC						(FXR_RX_CI_CIC_CSRS + 0x000000006030)
#define FXR_RXCIC_ERR_FIRST_BMC_RESETCSR				0x0000000000000000ull
#define FXR_RXCIC_ERR_FIRST_BMC_HEAD_PTR_PAR_ERR_SHIFT			7
#define FXR_RXCIC_ERR_FIRST_BMC_HEAD_PTR_PAR_ERR_MASK			0x1ull
#define FXR_RXCIC_ERR_FIRST_BMC_HEAD_PTR_PAR_ERR_SMASK			0x80ull
#define FXR_RXCIC_ERR_FIRST_BMC_QWORD_CNT_OVRFLW_SHIFT			6
#define FXR_RXCIC_ERR_FIRST_BMC_QWORD_CNT_OVRFLW_MASK			0x1ull
#define FXR_RXCIC_ERR_FIRST_BMC_QWORD_CNT_OVRFLW_SMASK			0x40ull
#define FXR_RXCIC_ERR_FIRST_BMC_CQ_TIMEOUT_SHIFT			5
#define FXR_RXCIC_ERR_FIRST_BMC_CQ_TIMEOUT_MASK				0x1ull
#define FXR_RXCIC_ERR_FIRST_BMC_CQ_TIMEOUT_SMASK			0x20ull
#define FXR_RXCIC_ERR_FIRST_BMC_CQSLOT_LEN_VEC_ERROR_SHIFT		4
#define FXR_RXCIC_ERR_FIRST_BMC_CQSLOT_LEN_VEC_ERROR_MASK		0x1ull
#define FXR_RXCIC_ERR_FIRST_BMC_CQSLOT_LEN_VEC_ERROR_SMASK		0x10ull
#define FXR_RXCIC_ERR_FIRST_BMC_CQSLOT_FULL_VEC_ERROR_SHIFT		3
#define FXR_RXCIC_ERR_FIRST_BMC_CQSLOT_FULL_VEC_ERROR_MASK		0x1ull
#define FXR_RXCIC_ERR_FIRST_BMC_CQSLOT_FULL_VEC_ERROR_SMASK		0x8ull
#define FXR_RXCIC_ERR_FIRST_BMC_QWORD_CNT_ERR_SBE_SHIFT			2
#define FXR_RXCIC_ERR_FIRST_BMC_QWORD_CNT_ERR_SBE_MASK			0x1ull
#define FXR_RXCIC_ERR_FIRST_BMC_QWORD_CNT_ERR_SBE_SMASK			0x4ull
#define FXR_RXCIC_ERR_FIRST_BMC_QWORD_CNT_ERR_MBE_SHIFT			1
#define FXR_RXCIC_ERR_FIRST_BMC_QWORD_CNT_ERR_MBE_MASK			0x1ull
#define FXR_RXCIC_ERR_FIRST_BMC_QWORD_CNT_ERR_MBE_SMASK			0x2ull
#define FXR_RXCIC_ERR_FIRST_BMC_INV_WRITE_FLUSH_SHIFT			0
#define FXR_RXCIC_ERR_FIRST_BMC_INV_WRITE_FLUSH_MASK			0x1ull
#define FXR_RXCIC_ERR_FIRST_BMC_INV_WRITE_FLUSH_SMASK			0x1ull
/*
* Table #15 of fxr_rx_ci_cic_csrs - RXCIC_ERR_EN_QUAR
* This is the Error Enable for the Quarantine Interrupt. If a bit is set, the 
* corresponding error bit in RXCIC_ERR_STS will cause an interrupt on the QUAR 
* interrupt signal.
*/
#define FXR_RXCIC_ERR_EN_QUAR						(FXR_RX_CI_CIC_CSRS + 0x000000006038)
#define FXR_RXCIC_ERR_EN_QUAR_RESETCSR					0x0000000000000000ull
#define FXR_RXCIC_ERR_EN_QUAR_HEAD_PTR_PAR_ERR_SHIFT			7
#define FXR_RXCIC_ERR_EN_QUAR_HEAD_PTR_PAR_ERR_MASK			0x1ull
#define FXR_RXCIC_ERR_EN_QUAR_HEAD_PTR_PAR_ERR_SMASK			0x80ull
#define FXR_RXCIC_ERR_EN_QUAR_QWORD_CNT_OVRFLW_SHIFT			6
#define FXR_RXCIC_ERR_EN_QUAR_QWORD_CNT_OVRFLW_MASK			0x1ull
#define FXR_RXCIC_ERR_EN_QUAR_QWORD_CNT_OVRFLW_SMASK			0x40ull
#define FXR_RXCIC_ERR_EN_QUAR_CQ_TIMEOUT_SHIFT				5
#define FXR_RXCIC_ERR_EN_QUAR_CQ_TIMEOUT_MASK				0x1ull
#define FXR_RXCIC_ERR_EN_QUAR_CQ_TIMEOUT_SMASK				0x20ull
#define FXR_RXCIC_ERR_EN_QUAR_CQSLOT_LEN_VEC_ERROR_SHIFT		4
#define FXR_RXCIC_ERR_EN_QUAR_CQSLOT_LEN_VEC_ERROR_MASK			0x1ull
#define FXR_RXCIC_ERR_EN_QUAR_CQSLOT_LEN_VEC_ERROR_SMASK		0x10ull
#define FXR_RXCIC_ERR_EN_QUAR_CQSLOT_FULL_VEC_ERROR_SHIFT		3
#define FXR_RXCIC_ERR_EN_QUAR_CQSLOT_FULL_VEC_ERROR_MASK		0x1ull
#define FXR_RXCIC_ERR_EN_QUAR_CQSLOT_FULL_VEC_ERROR_SMASK		0x8ull
#define FXR_RXCIC_ERR_EN_QUAR_QWORD_CNT_ERR_SBE_SHIFT			2
#define FXR_RXCIC_ERR_EN_QUAR_QWORD_CNT_ERR_SBE_MASK			0x1ull
#define FXR_RXCIC_ERR_EN_QUAR_QWORD_CNT_ERR_SBE_SMASK			0x4ull
#define FXR_RXCIC_ERR_EN_QUAR_QWORD_CNT_ERR_MBE_SHIFT			1
#define FXR_RXCIC_ERR_EN_QUAR_QWORD_CNT_ERR_MBE_MASK			0x1ull
#define FXR_RXCIC_ERR_EN_QUAR_QWORD_CNT_ERR_MBE_SMASK			0x2ull
#define FXR_RXCIC_ERR_EN_QUAR_INV_WRITE_FLUSH_SHIFT			0
#define FXR_RXCIC_ERR_EN_QUAR_INV_WRITE_FLUSH_MASK			0x1ull
#define FXR_RXCIC_ERR_EN_QUAR_INV_WRITE_FLUSH_SMASK			0x1ull
/*
* Table #16 of fxr_rx_ci_cic_csrs - RXCIC_ERR_FIRST_QUAR
* This is the First Error CSR for the Quarantine Interrupt. When this CSR is 
* clear, it will capture the next RXCIC_ERR_STS value when a new QUAR Interrupt 
* occurs.
*/
#define FXR_RXCIC_ERR_FIRST_QUAR					(FXR_RX_CI_CIC_CSRS + 0x000000006040)
#define FXR_RXCIC_ERR_FIRST_QUAR_RESETCSR				0x0000000000000000ull
#define FXR_RXCIC_ERR_FIRST_QUAR_HEAD_PTR_PAR_ERR_SHIFT			7
#define FXR_RXCIC_ERR_FIRST_QUAR_HEAD_PTR_PAR_ERR_MASK			0x1ull
#define FXR_RXCIC_ERR_FIRST_QUAR_HEAD_PTR_PAR_ERR_SMASK			0x80ull
#define FXR_RXCIC_ERR_FIRST_QUAR_QWORD_CNT_OVRFLW_SHIFT			6
#define FXR_RXCIC_ERR_FIRST_QUAR_QWORD_CNT_OVRFLW_MASK			0x1ull
#define FXR_RXCIC_ERR_FIRST_QUAR_QWORD_CNT_OVRFLW_SMASK			0x40ull
#define FXR_RXCIC_ERR_FIRST_QUAR_CQ_TIMEOUT_SHIFT			5
#define FXR_RXCIC_ERR_FIRST_QUAR_CQ_TIMEOUT_MASK			0x1ull
#define FXR_RXCIC_ERR_FIRST_QUAR_CQ_TIMEOUT_SMASK			0x20ull
#define FXR_RXCIC_ERR_FIRST_QUAR_CQSLOT_LEN_VEC_ERROR_SHIFT		4
#define FXR_RXCIC_ERR_FIRST_QUAR_CQSLOT_LEN_VEC_ERROR_MASK		0x1ull
#define FXR_RXCIC_ERR_FIRST_QUAR_CQSLOT_LEN_VEC_ERROR_SMASK		0x10ull
#define FXR_RXCIC_ERR_FIRST_QUAR_CQSLOT_FULL_VEC_ERROR_SHIFT		3
#define FXR_RXCIC_ERR_FIRST_QUAR_CQSLOT_FULL_VEC_ERROR_MASK		0x1ull
#define FXR_RXCIC_ERR_FIRST_QUAR_CQSLOT_FULL_VEC_ERROR_SMASK		0x8ull
#define FXR_RXCIC_ERR_FIRST_QUAR_QWORD_CNT_ERR_SBE_SHIFT		2
#define FXR_RXCIC_ERR_FIRST_QUAR_QWORD_CNT_ERR_SBE_MASK			0x1ull
#define FXR_RXCIC_ERR_FIRST_QUAR_QWORD_CNT_ERR_SBE_SMASK		0x4ull
#define FXR_RXCIC_ERR_FIRST_QUAR_QWORD_CNT_ERR_MBE_SHIFT		1
#define FXR_RXCIC_ERR_FIRST_QUAR_QWORD_CNT_ERR_MBE_MASK			0x1ull
#define FXR_RXCIC_ERR_FIRST_QUAR_QWORD_CNT_ERR_MBE_SMASK		0x2ull
#define FXR_RXCIC_ERR_FIRST_QUAR_INV_WRITE_FLUSH_SHIFT			0
#define FXR_RXCIC_ERR_FIRST_QUAR_INV_WRITE_FLUSH_MASK			0x1ull
#define FXR_RXCIC_ERR_FIRST_QUAR_INV_WRITE_FLUSH_SMASK			0x1ull
/*
* Table #17 of fxr_rx_ci_cic_csrs - RXCIC_ERROR_INFO_SBE_MBE
* Error Info for the #%%#mbeReserved#%%# and #%%#sbeReserved#%%# events. (There 
* may be many Error Info Registers.)
*/
#define FXR_RXCIC_ERROR_INFO_SBE_MBE					(FXR_RX_CI_CIC_CSRS + 0x000000006048)
#define FXR_RXCIC_ERROR_INFO_SBE_MBE_RESETCSR				0x0000000000000000ull
#define FXR_RXCIC_ERROR_INFO_SBE_MBE_CNT_SHIFT				32
#define FXR_RXCIC_ERROR_INFO_SBE_MBE_CNT_MASK				0xFFull
#define FXR_RXCIC_ERROR_INFO_SBE_MBE_CNT_SMASK				0xFF00000000ull
#define FXR_RXCIC_ERROR_INFO_SBE_MBE_SLOT_NUM_INV_WRITE_FLUSH_SHIFT	24
#define FXR_RXCIC_ERROR_INFO_SBE_MBE_SLOT_NUM_INV_WRITE_FLUSH_MASK	0xFull
#define FXR_RXCIC_ERROR_INFO_SBE_MBE_SLOT_NUM_INV_WRITE_FLUSH_SMASK	0xF000000ull
#define FXR_RXCIC_ERROR_INFO_SBE_MBE_CQ_NUM_INV_WRITE_FLUSH_SHIFT	16
#define FXR_RXCIC_ERROR_INFO_SBE_MBE_CQ_NUM_INV_WRITE_FLUSH_MASK	0xFFull
#define FXR_RXCIC_ERROR_INFO_SBE_MBE_CQ_NUM_INV_WRITE_FLUSH_SMASK	0xFF0000ull
#define FXR_RXCIC_ERROR_INFO_SBE_MBE_SYNDROME_QWORD_CNT_MEM_SBE_SHIFT	8
#define FXR_RXCIC_ERROR_INFO_SBE_MBE_SYNDROME_QWORD_CNT_MEM_SBE_MASK	0xFFull
#define FXR_RXCIC_ERROR_INFO_SBE_MBE_SYNDROME_QWORD_CNT_MEM_SBE_SMASK	0xFF00ull
#define FXR_RXCIC_ERROR_INFO_SBE_MBE_SYNDROME_QWORD_CNT_MEM_MBE_SHIFT	0
#define FXR_RXCIC_ERROR_INFO_SBE_MBE_SYNDROME_QWORD_CNT_MEM_MBE_MASK	0xFFull
#define FXR_RXCIC_ERROR_INFO_SBE_MBE_SYNDROME_QWORD_CNT_MEM_MBE_SMASK	0xFFull
/*
* Table #18 of fxr_rx_ci_cic_csrs - RXCIC_ERR_PER_CQ_INFO_GENERAL
* RXCIC_CQ_ERROR_GENERAL contains error bits which get cleared through the 
* drain/reset mechanism. When ever any of these error bits are set, the Host 
* needs to stop traffic to that CQ, initiate a CQ reset. After the CQ reset 
* completes, these errors would be cleared. We can then clear the corresponding 
* error bit inside the RXCIC_ERR_STS register. The respective RXCIC_ERR_STS 
* error bit is a logical 'Or' of this per context/CQ register.
*/
#define FXR_RXCIC_ERR_PER_CQ_INFO_GENERAL				(FXR_RX_CI_CIC_CSRS + 0x000000006100)
#define FXR_RXCIC_ERR_PER_CQ_INFO_GENERAL_RESETCSR			0x0000000000000000ull
#define FXR_RXCIC_ERR_PER_CQ_INFO_GENERAL_HEAD_PTR_PAR_ERR_SHIFT	7
#define FXR_RXCIC_ERR_PER_CQ_INFO_GENERAL_HEAD_PTR_PAR_ERR_MASK		0x1ull
#define FXR_RXCIC_ERR_PER_CQ_INFO_GENERAL_HEAD_PTR_PAR_ERR_SMASK	0x80ull
#define FXR_RXCIC_ERR_PER_CQ_INFO_GENERAL_QWORD_CNT_OVRFLW_SHIFT	6
#define FXR_RXCIC_ERR_PER_CQ_INFO_GENERAL_QWORD_CNT_OVRFLW_MASK		0x1ull
#define FXR_RXCIC_ERR_PER_CQ_INFO_GENERAL_QWORD_CNT_OVRFLW_SMASK	0x40ull
#define FXR_RXCIC_ERR_PER_CQ_INFO_GENERAL_CQ_TIMEOUT_SHIFT		5
#define FXR_RXCIC_ERR_PER_CQ_INFO_GENERAL_CQ_TIMEOUT_MASK		0x1ull
#define FXR_RXCIC_ERR_PER_CQ_INFO_GENERAL_CQ_TIMEOUT_SMASK		0x20ull
#define FXR_RXCIC_ERR_PER_CQ_INFO_GENERAL_CQSLOT_LEN_VEC_ERROR_SHIFT	4
#define FXR_RXCIC_ERR_PER_CQ_INFO_GENERAL_CQSLOT_LEN_VEC_ERROR_MASK	0x1ull
#define FXR_RXCIC_ERR_PER_CQ_INFO_GENERAL_CQSLOT_LEN_VEC_ERROR_SMASK	0x10ull
#define FXR_RXCIC_ERR_PER_CQ_INFO_GENERAL_CQSLOT_FULL_VEC_ERROR_SHIFT	3
#define FXR_RXCIC_ERR_PER_CQ_INFO_GENERAL_CQSLOT_FULL_VEC_ERROR_MASK	0x1ull
#define FXR_RXCIC_ERR_PER_CQ_INFO_GENERAL_CQSLOT_FULL_VEC_ERROR_SMASK	0x8ull
#define FXR_RXCIC_ERR_PER_CQ_INFO_GENERAL_QWORD_CNT_ERR_MBE_SHIFT	1
#define FXR_RXCIC_ERR_PER_CQ_INFO_GENERAL_QWORD_CNT_ERR_MBE_MASK	0x1ull
#define FXR_RXCIC_ERR_PER_CQ_INFO_GENERAL_QWORD_CNT_ERR_MBE_SMASK	0x2ull
/*
* Table #19 of fxr_rx_ci_cic_csrs - RXCIC_DBG_ERR_INJECT
* RXCIC_CQ_ERROR_INJECT
*/
#define FXR_RXCIC_DBG_ERR_INJECT					(FXR_RX_CI_CIC_CSRS + 0x000000007000)
#define FXR_RXCIC_DBG_ERR_INJECT_RESETCSR				0x0000000000000000ull
#define FXR_RXCIC_DBG_ERR_INJECT_INJECT_QWORD_CNT_ERR_SHIFT		4
#define FXR_RXCIC_DBG_ERR_INJECT_INJECT_QWORD_CNT_ERR_MASK		0x1ull
#define FXR_RXCIC_DBG_ERR_INJECT_INJECT_QWORD_CNT_ERR_SMASK		0x10ull
#define FXR_RXCIC_DBG_ERR_INJECT_INJECT_QWORD_CNT_ERR_MASK_SHIFT	0
#define FXR_RXCIC_DBG_ERR_INJECT_INJECT_QWORD_CNT_ERR_MASK_MASK		0xFull
#define FXR_RXCIC_DBG_ERR_INJECT_INJECT_QWORD_CNT_ERR_MASK_SMASK	0xFull

#endif 		/* DEF_FXR_RX_CI_CIC_CSRS_SW_DEF */
