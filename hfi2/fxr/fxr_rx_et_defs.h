/*
*------------------------------------------------------------------------------
*                                                                              
*  INTEL CONFIDENTIAL                                                          
*                                                                              
*  Copyright 2016 Intel Corporation All Rights Reserved.                 
*                                                                              
*  The source code contained or described herein and all documents related     
*  to the source code ("Material") are owned by Intel Corporation or its    
*  suppliers or licensors. Title to the Material remains with Intel            
*  Corporation or its suppliers and licensors. The Material contains trade     
*  secrets and proprietary and confidential information of Intel or its        
*  suppliers and licensors. The Material is protected by worldwide copyright   
*  and trade secret laws and treaty provisions. No part of the Material may    
*  be used, copied, reproduced, modified, published, uploaded, posted,         
*  transmitted, distributed, or disclosed in any way without Intel's prior     
*  express written permission.                                                 
*                                                                              
*  No license under any patent, copyright, trade secret or other intellectual  
*  property right is granted to or conferred upon you by disclosure or         
*  delivery of the Materials, either expressly, by implication, inducement,    
*  estoppel or otherwise. Any license under such intellectual property rights  
*  must be express and approved by Intel in writing.                           
*                                                                              
*------------------------------------------------------------------------------
*  Auto-generated by /nfs/sc/disks/slx_0108/pvesv/fxr_autogen/i_csrs.pl
*  i_csrs.pl Version 1.5 last modified on Thursday 1/7/16 17:24:50
*  /nfs/sc/disks/slx_0108/pvesv/fxr_autogen/i_csrs.pl -C -R -ST fxr_rx_et -o /nfs/sc/disks/slx_0108/pvesv/fxr_autogen/fxr /nfs/sc/disks/slx_0108/pvesv/fxr_autogen/repo_xml/300_Memory_Map.xml /nfs/sc/disks/slx_0108/pvesv/fxr_autogen/repo_xml/335_Memory_Map_RX_ET.xml
*------------------------------------------------------------------------------
*/

#ifndef DEF_FXR_RX_ET_SW_DEF
#define DEF_FXR_RX_ET_SW_DEF

#ifndef FXR_RX_ET_CSRS
#define FXR_RX_ET_CSRS										0x000000000000
#endif
#define FXR_NUM_CONTEXTS									192
#define FXR_NUM_PIDS										4096
#define FXR_MAX_CONTEXT										191
#define FXR_TX_CONTEXT_ENTRIES									128
#define FXR_TX_CONTEXT_MAX									127
#define FXR_RX_CONTEXT_ENTRIES									16
#define FXR_RX_CONTEXT_MAX									15
#define FXR_NUM_SL										32
#define FXR_MAX_SL										31
#define RX_ET_BASE										0
#define RX_ET_DESC_CACHE_DEPTH									2048
#define RX_ET_DESC_CACHE_MSB									2047
#define RX_ET_TRIG_STATE_DEPTH									1024
#define RX_ET_TR_CACHE_MSB									1023
/*
* Table #4 of fxr_top - RXET_CFG_CREDITS
* Credit settings for HiArb, TrigOp (RxDMA), TrigOp(RxHP) interfaces.
*/
#define FXR_RXET_CFG_CREDITS									(FXR_RX_ET_CSRS + 0x000000000000)
#define FXR_RXET_CFG_CREDITS_RESETCSR								0x0000000000000088ull
#define FXR_RXET_CFG_CREDITS_RXHP_TO_CREDIT_MAX_SHIFT						4
#define FXR_RXET_CFG_CREDITS_RXHP_TO_CREDIT_MAX_MASK						0xFull
#define FXR_RXET_CFG_CREDITS_RXHP_TO_CREDIT_MAX_SMASK						0xF0ull
#define FXR_RXET_CFG_CREDITS_RXDMA_TO_CREDIT_MAX_SHIFT						0
#define FXR_RXET_CFG_CREDITS_RXDMA_TO_CREDIT_MAX_MASK						0xFull
#define FXR_RXET_CFG_CREDITS_RXDMA_TO_CREDIT_MAX_SMASK						0xFull
/*
* Table #5 of fxr_top - RXET_CFG_EQD
* Settings for processing EQ Desfdcriptor for EQ fullness and triggering a head 
* update.
*/
#define FXR_RXET_CFG_EQD									(FXR_RX_ET_CSRS + 0x000000000008)
#define FXR_RXET_CFG_EQD_RESETCSR								0x0000000000800002ull
#define FXR_RXET_CFG_EQD_HEAD_REFETCH_THRESH_SHIFT						0
#define FXR_RXET_CFG_EQD_HEAD_REFETCH_THRESH_MASK						0x3FFFFFull
#define FXR_RXET_CFG_EQD_HEAD_REFETCH_THRESH_SMASK						0x3FFFFFull
/*
* Table #6 of fxr_top - RXET_CFG_CH
* This CSR contains the Cache Hints to be used for commands to the HI. These are 
* muxed to the HI for the specified command. Hints are 00=Non-Allocating, 
* Non-Temporal, 01=Non-Allocating, Temporal LLC, 10=Allocating L1, Non-Temporal 
* L1, 11=Allocating L1, Temporal L1.
*/
#define FXR_RXET_CFG_CH										(FXR_RX_ET_CSRS + 0x000000000010)
#define FXR_RXET_CFG_CH_RESETCSR								0x0000000000000820ull
#define FXR_RXET_CFG_CH_CH_EQD_VICTIM_WR_SHIFT							10
#define FXR_RXET_CFG_CH_CH_EQD_VICTIM_WR_MASK							0x3ull
#define FXR_RXET_CFG_CH_CH_EQD_VICTIM_WR_SMASK							0xC00ull
#define FXR_RXET_CFG_CH_CH_EQD_FLUSH_WR_SHIFT							8
#define FXR_RXET_CFG_CH_CH_EQD_FLUSH_WR_MASK							0x3ull
#define FXR_RXET_CFG_CH_CH_EQD_FLUSH_WR_SMASK							0x300ull
#define FXR_RXET_CFG_CH_CH_EQD_RD_SHIFT								6
#define FXR_RXET_CFG_CH_CH_EQD_RD_MASK								0x3ull
#define FXR_RXET_CFG_CH_CH_EQD_RD_SMASK								0xC0ull
#define FXR_RXET_CFG_CH_CH_TRIG_VICTIM_WR_SHIFT							4
#define FXR_RXET_CFG_CH_CH_TRIG_VICTIM_WR_MASK							0x3ull
#define FXR_RXET_CFG_CH_CH_TRIG_VICTIM_WR_SMASK							0x30ull
#define FXR_RXET_CFG_CH_CH_TRIG_FLUSH_WR_SHIFT							2
#define FXR_RXET_CFG_CH_CH_TRIG_FLUSH_WR_MASK							0x3ull
#define FXR_RXET_CFG_CH_CH_TRIG_FLUSH_WR_SMASK							0xCull
#define FXR_RXET_CFG_CH_CH_TRIG_RD_SHIFT							0
#define FXR_RXET_CFG_CH_CH_TRIG_RD_MASK								0x3ull
#define FXR_RXET_CFG_CH_CH_TRIG_RD_SMASK							0x3ull
/*
* Table #7 of fxr_top - RXET_CFG_EQ_DESC_CACHE_CLIENT_DISABLE
* This CSR contains the disable bit for client eq desc cache requests. A one 
* value will hold off any client requests. This has no effect on csr eq desc 
* cache requests. 
*/
#define FXR_RXET_CFG_EQ_DESC_CACHE_CLIENT_DISABLE						(FXR_RX_ET_CSRS + 0x000000000020)
#define FXR_RXET_CFG_EQ_DESC_CACHE_CLIENT_DISABLE_RESETCSR					0x0000000000000000ull
#define FXR_RXET_CFG_EQ_DESC_CACHE_CLIENT_DISABLE_CLIENT_EQ_DESC_CACHE_REQUEST_DISABLE_SHIFT	0
#define FXR_RXET_CFG_EQ_DESC_CACHE_CLIENT_DISABLE_CLIENT_EQ_DESC_CACHE_REQUEST_DISABLE_MASK	0x1ull
#define FXR_RXET_CFG_EQ_DESC_CACHE_CLIENT_DISABLE_CLIENT_EQ_DESC_CACHE_REQUEST_DISABLE_SMASK	0x1ull
/*
* Table #8 of fxr_top - RXET_CFG_EQ_DESC_CACHE_ACCESS_CTL
* The EQ Desc Cache access control can be used to write or read, eq desc cache 
* data and tag memories as well as invalidate tag entries and flush cache data 
* to host memory. For reads, if the requested address is not in cache, a fill 
* request is sent to hiarb with possibly an evict request. For writes, if the 
* requested address is not in cache, an evict request is sent to hiarb (assuming 
* no invalid entries in tag line) and then the EQ Desc Cache Data is 
* written.
*/
#define FXR_RXET_CFG_EQ_DESC_CACHE_ACCESS_CTL							(FXR_RX_ET_CSRS + 0x000000000028)
#define FXR_RXET_CFG_EQ_DESC_CACHE_ACCESS_CTL_RESETCSR						0x0063FFFFFE000000ull
#define FXR_RXET_CFG_EQ_DESC_CACHE_ACCESS_CTL_RSV_SHIFT						55
#define FXR_RXET_CFG_EQ_DESC_CACHE_ACCESS_CTL_RSV_MASK						0x1FFull
#define FXR_RXET_CFG_EQ_DESC_CACHE_ACCESS_CTL_RSV_SMASK						0xFF80000000000000ull
#define FXR_RXET_CFG_EQ_DESC_CACHE_ACCESS_CTL_BUSY_SHIFT					54
#define FXR_RXET_CFG_EQ_DESC_CACHE_ACCESS_CTL_BUSY_MASK						0x1ull
#define FXR_RXET_CFG_EQ_DESC_CACHE_ACCESS_CTL_BUSY_SMASK					0x40000000000000ull
#define FXR_RXET_CFG_EQ_DESC_CACHE_ACCESS_CTL_CMD_SHIFT						50
#define FXR_RXET_CFG_EQ_DESC_CACHE_ACCESS_CTL_CMD_MASK						0xFull
#define FXR_RXET_CFG_EQ_DESC_CACHE_ACCESS_CTL_CMD_SMASK						0x3C000000000000ull
#define FXR_RXET_CFG_EQ_DESC_CACHE_ACCESS_CTL_MASK_ADDRESS_SHIFT				25
#define FXR_RXET_CFG_EQ_DESC_CACHE_ACCESS_CTL_MASK_ADDRESS_MASK					0x1FFFFFFull
#define FXR_RXET_CFG_EQ_DESC_CACHE_ACCESS_CTL_MASK_ADDRESS_SMASK				0x3FFFFFE000000ull
#define FXR_RXET_CFG_EQ_DESC_CACHE_ACCESS_CTL_ADDRESS_SHIFT					0
#define FXR_RXET_CFG_EQ_DESC_CACHE_ACCESS_CTL_ADDRESS_MASK					0x1FFFFFFull
#define FXR_RXET_CFG_EQ_DESC_CACHE_ACCESS_CTL_ADDRESS_SMASK					0x1FFFFFFull
/*
* Table #9 of fxr_top - RXET_CFG_EQ_DESC_CACHE_ACCESS_DATA
* This csr is used to read, write (warmup/teardown) the EQ Desc Cache. See 
* #%%#RXET_CFG_EQ_DESC_CACHE_ACCESS_CTL#%%# for proper technique. 
* .
*/
#define FXR_RXET_CFG_EQ_DESC_CACHE_ACCESS_DATA							(FXR_RX_ET_CSRS + 0x000000000030)
#define FXR_RXET_CFG_EQ_DESC_CACHE_ACCESS_DATA_RESETCSR						0x0000000000000000ull
#define FXR_RXET_CFG_EQ_DESC_CACHE_ACCESS_DATA_DATA_SHIFT					0
#define FXR_RXET_CFG_EQ_DESC_CACHE_ACCESS_DATA_DATA_MASK					0xFFFFFFFFFFFFFFFFull
#define FXR_RXET_CFG_EQ_DESC_CACHE_ACCESS_DATA_DATA_SMASK					0xFFFFFFFFFFFFFFFFull
/*
* Table #10 of fxr_top - RXET_CFG_EQ_DESC_CACHE_ACCESS_DATA_BIT_ENABLE
* This csr is used for bit enable writes to the EQ Desc Cache. This csr is only 
* used with CACHE_CMD_WR. If this csr is all 1's, no read or fill is necessary. 
* If this csr is not all 1's, we need to do a read-modify-write which may 
* require a fill from host memory. See #%%#RXET_CFG_EQ_DESC_CACHE_ACCESS_CTL#%%# 
* for proper technique. .
*/
#define FXR_RXET_CFG_EQ_DESC_CACHE_ACCESS_DATA_BIT_ENABLE					(FXR_RX_ET_CSRS + 0x000000000040)
#define FXR_RXET_CFG_EQ_DESC_CACHE_ACCESS_DATA_BIT_ENABLE_RESETCSR				0xFFFFFFFFFFFFFFFFull
#define FXR_RXET_CFG_EQ_DESC_CACHE_ACCESS_DATA_BIT_ENABLE_BIT_ENABLE_SHIFT			0
#define FXR_RXET_CFG_EQ_DESC_CACHE_ACCESS_DATA_BIT_ENABLE_BIT_ENABLE_MASK			0xFFFFFFFFFFFFFFFFull
#define FXR_RXET_CFG_EQ_DESC_CACHE_ACCESS_DATA_BIT_ENABLE_BIT_ENABLE_SMASK			0xFFFFFFFFFFFFFFFFull
/*
* Table #11 of fxr_top - RXET_CFG_EQ_DESC_CACHE_ACCESS_TAG
* This is the eq desc cache tag data csr. This csr is used to read, write the EQ 
* Desc Cache Tag. See #%%#RXET_CFG_EQ_DESC_CACHE_ACCESS_CTL#%%# for proper 
* technique. This layout is for two ways. There are 2 of these regs for a total 
* of 4 ways.
*/
#define FXR_RXET_CFG_EQ_DESC_CACHE_ACCESS_TAG							(FXR_RX_ET_CSRS + 0x000000000050)
#define FXR_RXET_CFG_EQ_DESC_CACHE_ACCESS_TAG_RESETCSR						0x0000000000000000ull
#define FXR_RXET_CFG_EQ_DESC_CACHE_ACCESS_TAG_RESERVE_HI_SHIFT					58
#define FXR_RXET_CFG_EQ_DESC_CACHE_ACCESS_TAG_RESERVE_HI_MASK					0x3Full
#define FXR_RXET_CFG_EQ_DESC_CACHE_ACCESS_TAG_RESERVE_HI_SMASK					0xFC00000000000000ull
#define FXR_RXET_CFG_EQ_DESC_CACHE_ACCESS_TAG_TAG_WAY_VALID_HI_SHIFT				57
#define FXR_RXET_CFG_EQ_DESC_CACHE_ACCESS_TAG_TAG_WAY_VALID_HI_MASK				0x1ull
#define FXR_RXET_CFG_EQ_DESC_CACHE_ACCESS_TAG_TAG_WAY_VALID_HI_SMASK				0x200000000000000ull
#define FXR_RXET_CFG_EQ_DESC_CACHE_ACCESS_TAG_TAG_WAY_ADDR_HI_SHIFT				32
#define FXR_RXET_CFG_EQ_DESC_CACHE_ACCESS_TAG_TAG_WAY_ADDR_HI_MASK				0x1FFFFFFull
#define FXR_RXET_CFG_EQ_DESC_CACHE_ACCESS_TAG_TAG_WAY_ADDR_HI_SMASK				0x1FFFFFF00000000ull
#define FXR_RXET_CFG_EQ_DESC_CACHE_ACCESS_TAG_RESERVE_LO_SHIFT					26
#define FXR_RXET_CFG_EQ_DESC_CACHE_ACCESS_TAG_RESERVE_LO_MASK					0x3Full
#define FXR_RXET_CFG_EQ_DESC_CACHE_ACCESS_TAG_RESERVE_LO_SMASK					0xFC000000ull
#define FXR_RXET_CFG_EQ_DESC_CACHE_ACCESS_TAG_TAG_WAY_VALID_LO_SHIFT				25
#define FXR_RXET_CFG_EQ_DESC_CACHE_ACCESS_TAG_TAG_WAY_VALID_LO_MASK				0x1ull
#define FXR_RXET_CFG_EQ_DESC_CACHE_ACCESS_TAG_TAG_WAY_VALID_LO_SMASK				0x2000000ull
#define FXR_RXET_CFG_EQ_DESC_CACHE_ACCESS_TAG_TAG_WAY_ADDR_LO_SHIFT				0
#define FXR_RXET_CFG_EQ_DESC_CACHE_ACCESS_TAG_TAG_WAY_ADDR_LO_MASK				0x1FFFFFFull
#define FXR_RXET_CFG_EQ_DESC_CACHE_ACCESS_TAG_TAG_WAY_ADDR_LO_SMASK				0x1FFFFFFull
/*
* Table #12 of fxr_top - RXET_CFG_TRIG_OP_CACHE_CLIENT_DISABLE
* This CSR contains the disable bit for client Trig Op cache requests. A one 
* value will hold off any client requests. This has no effect on csr Trig Op 
* cache requests. 
*/
#define FXR_RXET_CFG_TRIG_OP_CACHE_CLIENT_DISABLE						(FXR_RX_ET_CSRS + 0x000000000060)
#define FXR_RXET_CFG_TRIG_OP_CACHE_CLIENT_DISABLE_RESETCSR					0x0000000000000000ull
#define FXR_RXET_CFG_TRIG_OP_CACHE_CLIENT_DISABLE_CLIENT_TRIG_OP_CACHE_REQUEST_DISABLE_SHIFT	0
#define FXR_RXET_CFG_TRIG_OP_CACHE_CLIENT_DISABLE_CLIENT_TRIG_OP_CACHE_REQUEST_DISABLE_MASK	0x1ull
#define FXR_RXET_CFG_TRIG_OP_CACHE_CLIENT_DISABLE_CLIENT_TRIG_OP_CACHE_REQUEST_DISABLE_SMASK	0x1ull
/*
* Table #13 of fxr_top - RXET_CFG_TRIG_OP_CACHE_ACCESS_CTL
* The Trig Op Cache access control can be used to write or read, Trig Op cache 
* data and tag memories as well as invalidate tag entries and flush cache data 
* to host memory. For reads, if the requested address is not in cache, a fill 
* request is sent to hiarb with possibly an evict request. For writes, if the 
* requested address is not in cache, an evict request is sent to hiarb (assuming 
* no invalid entries in tag line) and then the Trig Op Cache Data is 
* written.
*/
#define FXR_RXET_CFG_TRIG_OP_CACHE_ACCESS_CTL							(FXR_RX_ET_CSRS + 0x000000000068)
#define FXR_RXET_CFG_TRIG_OP_CACHE_ACCESS_CTL_RESETCSR						0x18FFFFFFF0000000ull
#define FXR_RXET_CFG_TRIG_OP_CACHE_ACCESS_CTL_RSV_SHIFT						61
#define FXR_RXET_CFG_TRIG_OP_CACHE_ACCESS_CTL_RSV_MASK						0x7ull
#define FXR_RXET_CFG_TRIG_OP_CACHE_ACCESS_CTL_RSV_SMASK						0xE000000000000000ull
#define FXR_RXET_CFG_TRIG_OP_CACHE_ACCESS_CTL_BUSY_SHIFT					60
#define FXR_RXET_CFG_TRIG_OP_CACHE_ACCESS_CTL_BUSY_MASK						0x1ull
#define FXR_RXET_CFG_TRIG_OP_CACHE_ACCESS_CTL_BUSY_SMASK					0x1000000000000000ull
#define FXR_RXET_CFG_TRIG_OP_CACHE_ACCESS_CTL_CMD_SHIFT						56
#define FXR_RXET_CFG_TRIG_OP_CACHE_ACCESS_CTL_CMD_MASK						0xFull
#define FXR_RXET_CFG_TRIG_OP_CACHE_ACCESS_CTL_CMD_SMASK						0xF00000000000000ull
#define FXR_RXET_CFG_TRIG_OP_CACHE_ACCESS_CTL_MASK_ADDRESS_SHIFT				28
#define FXR_RXET_CFG_TRIG_OP_CACHE_ACCESS_CTL_MASK_ADDRESS_MASK					0xFFFFFFFull
#define FXR_RXET_CFG_TRIG_OP_CACHE_ACCESS_CTL_MASK_ADDRESS_SMASK				0xFFFFFFF0000000ull
#define FXR_RXET_CFG_TRIG_OP_CACHE_ACCESS_CTL_ADDRESS_SHIFT					0
#define FXR_RXET_CFG_TRIG_OP_CACHE_ACCESS_CTL_ADDRESS_MASK					0xFFFFFFFull
#define FXR_RXET_CFG_TRIG_OP_CACHE_ACCESS_CTL_ADDRESS_SMASK					0xFFFFFFFull
/*
* Table #14 of fxr_top - RXET_CFG_TRIG_OP_CACHE_ACCESS_DATA
* This csr is used to read, write (warmup/teardown) the Trig Op Cache. See 
* #%%#RXET_CFG_TRIG_OP_CACHE_ACCESS_CTL#%%# for proper technique. 
* .
*/
#define FXR_RXET_CFG_TRIG_OP_CACHE_ACCESS_DATA							(FXR_RX_ET_CSRS + 0x000000000100)
#define FXR_RXET_CFG_TRIG_OP_CACHE_ACCESS_DATA_RESETCSR						0x0000000000000000ull
#define FXR_RXET_CFG_TRIG_OP_CACHE_ACCESS_DATA_DATA_SHIFT					0
#define FXR_RXET_CFG_TRIG_OP_CACHE_ACCESS_DATA_DATA_MASK					0xFFFFFFFFFFFFFFFFull
#define FXR_RXET_CFG_TRIG_OP_CACHE_ACCESS_DATA_DATA_SMASK					0xFFFFFFFFFFFFFFFFull
/*
* Table #15 of fxr_top - RXET_CFG_TRIG_OP_CACHE_ACCESS_DATA_BIT_ENABLE
* This csr is used for bit enable writes to the Trig Op Cache. This csr is only 
* used with CACHE_CMD_WR. If this csr is all 1's, no read or fill is necessary. 
* If this csr is not all 1's, we need to do a read-modify-write which may 
* require a fill from host memory. See #%%#RXET_CFG_TRIG_OP_CACHE_ACCESS_CTL#%%# 
* for proper technique. .
*/
#define FXR_RXET_CFG_TRIG_OP_CACHE_ACCESS_DATA_BIT_ENABLE					(FXR_RX_ET_CSRS + 0x000000000180)
#define FXR_RXET_CFG_TRIG_OP_CACHE_ACCESS_DATA_BIT_ENABLE_RESETCSR				0xFFFFFFFFFFFFFFFFull
#define FXR_RXET_CFG_TRIG_OP_CACHE_ACCESS_DATA_BIT_ENABLE_BIT_ENABLE_SHIFT			0
#define FXR_RXET_CFG_TRIG_OP_CACHE_ACCESS_DATA_BIT_ENABLE_BIT_ENABLE_MASK			0xFFFFFFFFFFFFFFFFull
#define FXR_RXET_CFG_TRIG_OP_CACHE_ACCESS_DATA_BIT_ENABLE_BIT_ENABLE_SMASK			0xFFFFFFFFFFFFFFFFull
/*
* Table #16 of fxr_top - RXET_CFG_TRIG_OP_CACHE_ACCESS_TAG
* This is the Trig Op cache tag data csr. This csr is used to read, write the 
* Trig Op Cache Tag. See #%%#RXET_CFG_TRIG_OP_CACHE_ACCESS_CTL#%%# for proper 
* technique. This layout is for two ways. There are 2 of these regs for a total 
* of 4 ways.
*/
#define FXR_RXET_CFG_TRIG_OP_CACHE_ACCESS_TAG							(FXR_RX_ET_CSRS + 0x000000000200)
#define FXR_RXET_CFG_TRIG_OP_CACHE_ACCESS_TAG_RESETCSR						0x0000000000000000ull
#define FXR_RXET_CFG_TRIG_OP_CACHE_ACCESS_TAG_RESERVE_HI_SHIFT					62
#define FXR_RXET_CFG_TRIG_OP_CACHE_ACCESS_TAG_RESERVE_HI_MASK					0x3ull
#define FXR_RXET_CFG_TRIG_OP_CACHE_ACCESS_TAG_RESERVE_HI_SMASK					0xC000000000000000ull
#define FXR_RXET_CFG_TRIG_OP_CACHE_ACCESS_TAG_TAG_WAY_VALID_HI_SHIFT				61
#define FXR_RXET_CFG_TRIG_OP_CACHE_ACCESS_TAG_TAG_WAY_VALID_HI_MASK				0x1ull
#define FXR_RXET_CFG_TRIG_OP_CACHE_ACCESS_TAG_TAG_WAY_VALID_HI_SMASK				0x2000000000000000ull
#define FXR_RXET_CFG_TRIG_OP_CACHE_ACCESS_TAG_TAG_WAY_DIRTY_HI_SHIFT				60
#define FXR_RXET_CFG_TRIG_OP_CACHE_ACCESS_TAG_TAG_WAY_DIRTY_HI_MASK				0x1ull
#define FXR_RXET_CFG_TRIG_OP_CACHE_ACCESS_TAG_TAG_WAY_DIRTY_HI_SMASK				0x1000000000000000ull
#define FXR_RXET_CFG_TRIG_OP_CACHE_ACCESS_TAG_TAG_WAY_ADDR_HI_SHIFT				32
#define FXR_RXET_CFG_TRIG_OP_CACHE_ACCESS_TAG_TAG_WAY_ADDR_HI_MASK				0xFFFFFFFull
#define FXR_RXET_CFG_TRIG_OP_CACHE_ACCESS_TAG_TAG_WAY_ADDR_HI_SMASK				0xFFFFFFF00000000ull
#define FXR_RXET_CFG_TRIG_OP_CACHE_ACCESS_TAG_RESERVE_LO_SHIFT					30
#define FXR_RXET_CFG_TRIG_OP_CACHE_ACCESS_TAG_RESERVE_LO_MASK					0x3ull
#define FXR_RXET_CFG_TRIG_OP_CACHE_ACCESS_TAG_RESERVE_LO_SMASK					0xC0000000ull
#define FXR_RXET_CFG_TRIG_OP_CACHE_ACCESS_TAG_TAG_WAY_VALID_LO_SHIFT				29
#define FXR_RXET_CFG_TRIG_OP_CACHE_ACCESS_TAG_TAG_WAY_VALID_LO_MASK				0x1ull
#define FXR_RXET_CFG_TRIG_OP_CACHE_ACCESS_TAG_TAG_WAY_VALID_LO_SMASK				0x20000000ull
#define FXR_RXET_CFG_TRIG_OP_CACHE_ACCESS_TAG_TAG_WAY_DIRTY_LO_SHIFT				28
#define FXR_RXET_CFG_TRIG_OP_CACHE_ACCESS_TAG_TAG_WAY_DIRTY_LO_MASK				0x1ull
#define FXR_RXET_CFG_TRIG_OP_CACHE_ACCESS_TAG_TAG_WAY_DIRTY_LO_SMASK				0x10000000ull
#define FXR_RXET_CFG_TRIG_OP_CACHE_ACCESS_TAG_TAG_WAY_ADDR_LO_SHIFT				0
#define FXR_RXET_CFG_TRIG_OP_CACHE_ACCESS_TAG_TAG_WAY_ADDR_LO_MASK				0xFFFFFFFull
#define FXR_RXET_CFG_TRIG_OP_CACHE_ACCESS_TAG_TAG_WAY_ADDR_LO_SMASK				0xFFFFFFFull
/*
* Table #17 of fxr_top - RXET_STS_CREDITS
* Outstanding credits RxET has on credited block interface - RxHiArb (cache 
* fill/evicts).
*/
#define FXR_RXET_STS_CREDITS									(FXR_RX_ET_CSRS + 0x000000001000)
#define FXR_RXET_STS_CREDITS_RESETCSR								0x0000000000000000ull
#define FXR_RXET_STS_CREDITS_HIARB_CREDIT_COUNT_SHIFT						0
#define FXR_RXET_STS_CREDITS_HIARB_CREDIT_COUNT_MASK						0x1Full
#define FXR_RXET_STS_CREDITS_HIARB_CREDIT_COUNT_SMASK						0x1Full
/*
* Table #18 of fxr_top - RXET_DBG_EVENT_HDR_VALID
* Valid locations in Event Header queue. Can be compared to CAM valids to see if 
* the sideband has returned from the EQD cache for the event.
*/
#define FXR_RXET_DBG_EVENT_HDR_VALID								(FXR_RX_ET_CSRS + 0x000000001100)
#define FXR_RXET_DBG_EVENT_HDR_VALID_RESETCSR							0x0000000000000000ull
#define FXR_RXET_DBG_EVENT_HDR_VALID_EB_EVENT_HDR_VAL_SHIFT					0
#define FXR_RXET_DBG_EVENT_HDR_VALID_EB_EVENT_HDR_VAL_MASK					0x3FFFFFFFFFFFFFFull
#define FXR_RXET_DBG_EVENT_HDR_VALID_EB_EVENT_HDR_VAL_SMASK					0x3FFFFFFFFFFFFFFull
/*
* Table #19 of fxr_top - RXET_DBG_CAM_VALID
* Valid vector for Event Buffer CAM. Indicates which locations have an event 
* stored..
*/
#define FXR_RXET_DBG_CAM_VALID									(FXR_RX_ET_CSRS + 0x000000001108)
#define FXR_RXET_DBG_CAM_VALID_RESETCSR								0x0000000000000000ull
#define FXR_RXET_DBG_CAM_VALID_EB_CM_VALID_SHIFT						0
#define FXR_RXET_DBG_CAM_VALID_EB_CM_VALID_MASK							0x3FFFFFFFFFFFFFFull
#define FXR_RXET_DBG_CAM_VALID_EB_CM_VALID_SMASK						0x3FFFFFFFFFFFFFFull
/*
* Table #20 of fxr_top - RXET_DBG_EB_EEH_TOH_STATE
* Status flags of buffers and FIFOs.
*/
#define FXR_RXET_DBG_EB_EEH_TOH_STATE								(FXR_RX_ET_CSRS + 0x000000001110)
#define FXR_RXET_DBG_EB_EEH_TOH_STATE_RESETCSR							0x00000000000003FFull
#define FXR_RXET_DBG_EB_EEH_TOH_STATE_TOH_LOAD_TRIG_SHIFT					36
#define FXR_RXET_DBG_EB_EEH_TOH_STATE_TOH_LOAD_TRIG_MASK					0xFull
#define FXR_RXET_DBG_EB_EEH_TOH_STATE_TOH_LOAD_TRIG_SMASK					0xF000000000ull
#define FXR_RXET_DBG_EB_EEH_TOH_STATE_TOH_NEEDS_TRIG_SHIFT					32
#define FXR_RXET_DBG_EB_EEH_TOH_STATE_TOH_NEEDS_TRIG_MASK					0xFull
#define FXR_RXET_DBG_EB_EEH_TOH_STATE_TOH_NEEDS_TRIG_SMASK					0xF00000000ull
#define FXR_RXET_DBG_EB_EEH_TOH_STATE_TOH_NEED_RESPONSE_SHIFT					28
#define FXR_RXET_DBG_EB_EEH_TOH_STATE_TOH_NEED_RESPONSE_MASK					0xFull
#define FXR_RXET_DBG_EB_EEH_TOH_STATE_TOH_NEED_RESPONSE_SMASK					0xF0000000ull
#define FXR_RXET_DBG_EB_EEH_TOH_STATE_TOH_NEED_INVALIDATE_SHIFT					24
#define FXR_RXET_DBG_EB_EEH_TOH_STATE_TOH_NEED_INVALIDATE_MASK					0xFull
#define FXR_RXET_DBG_EB_EEH_TOH_STATE_TOH_NEED_INVALIDATE_SMASK					0xF000000ull
#define FXR_RXET_DBG_EB_EEH_TOH_STATE_TOH_NEED_READ_SHIFT					20
#define FXR_RXET_DBG_EB_EEH_TOH_STATE_TOH_NEED_READ_MASK					0xFull
#define FXR_RXET_DBG_EB_EEH_TOH_STATE_TOH_NEED_READ_SMASK					0xF00000ull
#define FXR_RXET_DBG_EB_EEH_TOH_STATE_TOH_TRIG_TO_PROC_VALID_SHIFT				16
#define FXR_RXET_DBG_EB_EEH_TOH_STATE_TOH_TRIG_TO_PROC_VALID_MASK				0xFull
#define FXR_RXET_DBG_EB_EEH_TOH_STATE_TOH_TRIG_TO_PROC_VALID_SMASK				0xF0000ull
#define FXR_RXET_DBG_EB_EEH_TOH_STATE_TOH_TRIG_IN_FIFO_EMPTY_SHIFT				9
#define FXR_RXET_DBG_EB_EEH_TOH_STATE_TOH_TRIG_IN_FIFO_EMPTY_MASK				0x1ull
#define FXR_RXET_DBG_EB_EEH_TOH_STATE_TOH_TRIG_IN_FIFO_EMPTY_SMASK				0x200ull
#define FXR_RXET_DBG_EB_EEH_TOH_STATE_TOH_CACHE_ISSUE_FIFO_EMPTY_SHIFT				8
#define FXR_RXET_DBG_EB_EEH_TOH_STATE_TOH_CACHE_ISSUE_FIFO_EMPTY_MASK				0x1ull
#define FXR_RXET_DBG_EB_EEH_TOH_STATE_TOH_CACHE_ISSUE_FIFO_EMPTY_SMASK				0x100ull
#define FXR_RXET_DBG_EB_EEH_TOH_STATE_TOH_TRIG_OUT_FIFO_EMPTY_SHIFT				7
#define FXR_RXET_DBG_EB_EEH_TOH_STATE_TOH_TRIG_OUT_FIFO_EMPTY_MASK				0x1ull
#define FXR_RXET_DBG_EB_EEH_TOH_STATE_TOH_TRIG_OUT_FIFO_EMPTY_SMASK				0x80ull
#define FXR_RXET_DBG_EB_EEH_TOH_STATE_EB_TXOTR_FIFO_EMPTY_SHIFT					6
#define FXR_RXET_DBG_EB_EEH_TOH_STATE_EB_TXOTR_FIFO_EMPTY_MASK					0x1ull
#define FXR_RXET_DBG_EB_EEH_TOH_STATE_EB_TXOTR_FIFO_EMPTY_SMASK					0x40ull
#define FXR_RXET_DBG_EB_EEH_TOH_STATE_EB_RXHP_FIFO_EMPTY_SHIFT					5
#define FXR_RXET_DBG_EB_EEH_TOH_STATE_EB_RXHP_FIFO_EMPTY_MASK					0x1ull
#define FXR_RXET_DBG_EB_EEH_TOH_STATE_EB_RXHP_FIFO_EMPTY_SMASK					0x20ull
#define FXR_RXET_DBG_EB_EEH_TOH_STATE_EB_ADDR_Q_EMPTY_SHIFT					4
#define FXR_RXET_DBG_EB_EEH_TOH_STATE_EB_ADDR_Q_EMPTY_MASK					0x1ull
#define FXR_RXET_DBG_EB_EEH_TOH_STATE_EB_ADDR_Q_EMPTY_SMASK					0x10ull
#define FXR_RXET_DBG_EB_EEH_TOH_STATE_EB_RXDMA_FIFO_EMPTY_SHIFT					3
#define FXR_RXET_DBG_EB_EEH_TOH_STATE_EB_RXDMA_FIFO_EMPTY_MASK					0x1ull
#define FXR_RXET_DBG_EB_EEH_TOH_STATE_EB_RXDMA_FIFO_EMPTY_SMASK					0x8ull
#define FXR_RXET_DBG_EB_EEH_TOH_STATE_EEH_EVENT_FIFO_EMPTY_SHIFT				2
#define FXR_RXET_DBG_EB_EEH_TOH_STATE_EEH_EVENT_FIFO_EMPTY_MASK					0x1ull
#define FXR_RXET_DBG_EB_EEH_TOH_STATE_EEH_EVENT_FIFO_EMPTY_SMASK				0x4ull
#define FXR_RXET_DBG_EB_EEH_TOH_STATE_EEH_RSV_FIFO_EMPTY_SHIFT					1
#define FXR_RXET_DBG_EB_EEH_TOH_STATE_EEH_RSV_FIFO_EMPTY_MASK					0x1ull
#define FXR_RXET_DBG_EB_EEH_TOH_STATE_EEH_RSV_FIFO_EMPTY_SMASK					0x2ull
#define FXR_RXET_DBG_EB_EEH_TOH_STATE_EEH_EQD_REQ_FIFO_EMPTY_SHIFT				0
#define FXR_RXET_DBG_EB_EEH_TOH_STATE_EEH_EQD_REQ_FIFO_EMPTY_MASK				0x1ull
#define FXR_RXET_DBG_EB_EEH_TOH_STATE_EEH_EQD_REQ_FIFO_EMPTY_SMASK				0x1ull
/*
* Table #21 of fxr_top - RXET_DBG_TOA_STATE
* Status of processing within TrigOp Append/Insert. There are 8 parallel 
* processing paths. These signals indicate the status of each with 8-bit 
* vectors.
*/
#define FXR_RXET_DBG_TOA_STATE									(FXR_RX_ET_CSRS + 0x000000001118)
#define FXR_RXET_DBG_TOA_STATE_RESETCSR								0x0000000000000000ull
#define FXR_RXET_DBG_TOA_STATE_TOAH_WALKED_SHIFT						48
#define FXR_RXET_DBG_TOA_STATE_TOAH_WALKED_MASK							0xFFull
#define FXR_RXET_DBG_TOA_STATE_TOAH_WALKED_SMASK						0xFF000000000000ull
#define FXR_RXET_DBG_TOA_STATE_TOAH_WRTO_SENT_SHIFT						40
#define FXR_RXET_DBG_TOA_STATE_TOAH_WRTO_SENT_MASK						0xFFull
#define FXR_RXET_DBG_TOA_STATE_TOAH_WRTO_SENT_SMASK						0xFF0000000000ull
#define FXR_RXET_DBG_TOA_STATE_TOAH_WRP_SENT_SHIFT						32
#define FXR_RXET_DBG_TOA_STATE_TOAH_WRP_SENT_MASK						0xFFull
#define FXR_RXET_DBG_TOA_STATE_TOAH_WRP_SENT_SMASK						0xFF00000000ull
#define FXR_RXET_DBG_TOA_STATE_TOAH_RD_SENT_SHIFT						24
#define FXR_RXET_DBG_TOA_STATE_TOAH_RD_SENT_MASK						0xFFull
#define FXR_RXET_DBG_TOA_STATE_TOAH_RD_SENT_SMASK						0xFF000000ull
#define FXR_RXET_DBG_TOA_STATE_TOAH_CT_RCVD_SHIFT						16
#define FXR_RXET_DBG_TOA_STATE_TOAH_CT_RCVD_MASK						0xFFull
#define FXR_RXET_DBG_TOA_STATE_TOAH_CT_RCVD_SMASK						0xFF0000ull
#define FXR_RXET_DBG_TOA_STATE_TOAH_TO_CMD_SHIFT						8
#define FXR_RXET_DBG_TOA_STATE_TOAH_TO_CMD_MASK							0xFFull
#define FXR_RXET_DBG_TOA_STATE_TOAH_TO_CMD_SMASK						0xFF00ull
#define FXR_RXET_DBG_TOA_STATE_TOAH_TO_VALID_SHIFT						0
#define FXR_RXET_DBG_TOA_STATE_TOAH_TO_VALID_MASK						0xFFull
#define FXR_RXET_DBG_TOA_STATE_TOAH_TO_VALID_SMASK						0xFFull
/*
* Table #22 of fxr_top - RXET_DBG_EQ_DESC_CACHE_TAG_WAY_ENABLE
* These bits enable the 4 EQ Desc Cache Tag Ways for filling and evicting. Set 
* bits to 0 to remove them from being an evict or fill candidate. For example, 
* setting to 3 will only enable ways 1 and 0. This will stress the cache causing 
* more evicts and fills. This can be useful for testing the cache. Every bit 
* cleared will decrease the cache capacity by 1/4th. Any valid cache entries 
* that are in a disabled way will be invisible so another request for that entry 
* will result in a fill from memory, with possibly stale data, to one of the 
* enabled ways.
*/
#define FXR_RXET_DBG_EQ_DESC_CACHE_TAG_WAY_ENABLE						(FXR_RX_ET_CSRS + 0x000000001140)
#define FXR_RXET_DBG_EQ_DESC_CACHE_TAG_WAY_ENABLE_RESETCSR					0x000000000000000Full
#define FXR_RXET_DBG_EQ_DESC_CACHE_TAG_WAY_ENABLE_WAY_ENABLE_SHIFT				0
#define FXR_RXET_DBG_EQ_DESC_CACHE_TAG_WAY_ENABLE_WAY_ENABLE_MASK				0xFull
#define FXR_RXET_DBG_EQ_DESC_CACHE_TAG_WAY_ENABLE_WAY_ENABLE_SMASK				0xFull
/*
* Table #23 of fxr_top - RXET_DBG_TRIG_OP_CACHE_TAG_WAY_ENABLE
* These bits enable the 4 Trig Op Cache Tag Ways for filling and evicting. Set 
* bits to 0 to remove them from being an evict or fill candidate. For example, 
* setting to 3 will only enable ways 1 and 0. This will stress the cache causing 
* more evicts and fills. This can be useful for testing the cache. Every bit 
* cleared will decrease the cache capacity by 1/4th. Any valid cache entries 
* that are in a disabled way will be invisible so another request for that entry 
* will result in a fill from memory, with possibly stale data, to one of the 
* enabled ways.
*/
#define FXR_RXET_DBG_TRIG_OP_CACHE_TAG_WAY_ENABLE						(FXR_RX_ET_CSRS + 0x000000001148)
#define FXR_RXET_DBG_TRIG_OP_CACHE_TAG_WAY_ENABLE_RESETCSR					0x000000000000000Full
#define FXR_RXET_DBG_TRIG_OP_CACHE_TAG_WAY_ENABLE_WAY_ENABLE_SHIFT				0
#define FXR_RXET_DBG_TRIG_OP_CACHE_TAG_WAY_ENABLE_WAY_ENABLE_MASK				0xFull
#define FXR_RXET_DBG_TRIG_OP_CACHE_TAG_WAY_ENABLE_WAY_ENABLE_SMASK				0xFull
/*
* Table #24 of fxr_top - RXET_ERR_STS
* Error status registers..
*/
#define FXR_RXET_ERR_STS									(FXR_RX_ET_CSRS + 0x000000002000)
#define FXR_RXET_ERR_STS_RESETCSR								0x0000000000000000ull
#define FXR_RXET_ERR_STS_TXOTR_EVENT_FRAME_ERR_SHIFT						36
#define FXR_RXET_ERR_STS_TXOTR_EVENT_FRAME_ERR_MASK						0x1ull
#define FXR_RXET_ERR_STS_TXOTR_EVENT_FRAME_ERR_SMASK						0x1000000000ull
#define FXR_RXET_ERR_STS_RXHP_EVENT_FRAME_ERR_SHIFT						35
#define FXR_RXET_ERR_STS_RXHP_EVENT_FRAME_ERR_MASK						0x1ull
#define FXR_RXET_ERR_STS_RXHP_EVENT_FRAME_ERR_SMASK						0x800000000ull
#define FXR_RXET_ERR_STS_EB_CAM_MATCH_ERR_SHIFT							34
#define FXR_RXET_ERR_STS_EB_CAM_MATCH_ERR_MASK							0x1ull
#define FXR_RXET_ERR_STS_EB_CAM_MATCH_ERR_SMASK							0x400000000ull
#define FXR_RXET_ERR_STS_EB_CAM_WRITE_ERR_SHIFT							33
#define FXR_RXET_ERR_STS_EB_CAM_WRITE_ERR_MASK							0x1ull
#define FXR_RXET_ERR_STS_EB_CAM_WRITE_ERR_SMASK							0x200000000ull
#define FXR_RXET_ERR_STS_TOA_ERR_SHIFT								32
#define FXR_RXET_ERR_STS_TOA_ERR_MASK								0x1ull
#define FXR_RXET_ERR_STS_TOA_ERR_SMASK								0x100000000ull
#define FXR_RXET_ERR_STS_EQ_CACHE_FR_ERR_SHIFT							31
#define FXR_RXET_ERR_STS_EQ_CACHE_FR_ERR_MASK							0x1ull
#define FXR_RXET_ERR_STS_EQ_CACHE_FR_ERR_SMASK							0x80000000ull
#define FXR_RXET_ERR_STS_EQ_CACHE_RESP_ERR_SHIFT						30
#define FXR_RXET_ERR_STS_EQ_CACHE_RESP_ERR_MASK							0x1ull
#define FXR_RXET_ERR_STS_EQ_CACHE_RESP_ERR_SMASK						0x40000000ull
#define FXR_RXET_ERR_STS_TO_CACHE_FR_ERR_SHIFT							29
#define FXR_RXET_ERR_STS_TO_CACHE_FR_ERR_MASK							0x1ull
#define FXR_RXET_ERR_STS_TO_CACHE_FR_ERR_SMASK							0x20000000ull
#define FXR_RXET_ERR_STS_TO_CACHE_RESP_ERR_SHIFT						28
#define FXR_RXET_ERR_STS_TO_CACHE_RESP_ERR_MASK							0x1ull
#define FXR_RXET_ERR_STS_TO_CACHE_RESP_ERR_SMASK						0x10000000ull
#define FXR_RXET_ERR_STS_TOA_ERR_SBE_SHIFT							27
#define FXR_RXET_ERR_STS_TOA_ERR_SBE_MASK							0x1ull
#define FXR_RXET_ERR_STS_TOA_ERR_SBE_SMASK							0x8000000ull
#define FXR_RXET_ERR_STS_TOA_ERR_MBE_SHIFT							26
#define FXR_RXET_ERR_STS_TOA_ERR_MBE_MASK							0x1ull
#define FXR_RXET_ERR_STS_TOA_ERR_MBE_SMASK							0x4000000ull
#define FXR_RXET_ERR_STS_EVENT_REQ_ERR_SBE_SHIFT						25
#define FXR_RXET_ERR_STS_EVENT_REQ_ERR_SBE_MASK							0x1ull
#define FXR_RXET_ERR_STS_EVENT_REQ_ERR_SBE_SMASK						0x2000000ull
#define FXR_RXET_ERR_STS_EVENT_REQ_ERR_MBE_SHIFT						24
#define FXR_RXET_ERR_STS_EVENT_REQ_ERR_MBE_MASK							0x1ull
#define FXR_RXET_ERR_STS_EVENT_REQ_ERR_MBE_SMASK						0x1000000ull
#define FXR_RXET_ERR_STS_RSV_ERR_SBE_SHIFT							23
#define FXR_RXET_ERR_STS_RSV_ERR_SBE_MASK							0x1ull
#define FXR_RXET_ERR_STS_RSV_ERR_SBE_SMASK							0x800000ull
#define FXR_RXET_ERR_STS_RSV_ERR_MBE_SHIFT							22
#define FXR_RXET_ERR_STS_RSV_ERR_MBE_MASK							0x1ull
#define FXR_RXET_ERR_STS_RSV_ERR_MBE_SMASK							0x400000ull
#define FXR_RXET_ERR_STS_EB_ADDR_Q_ERR_SBE_SHIFT						21
#define FXR_RXET_ERR_STS_EB_ADDR_Q_ERR_SBE_MASK							0x1ull
#define FXR_RXET_ERR_STS_EB_ADDR_Q_ERR_SBE_SMASK						0x200000ull
#define FXR_RXET_ERR_STS_EB_ADDR_Q_ERR_MBE_SHIFT						20
#define FXR_RXET_ERR_STS_EB_ADDR_Q_ERR_MBE_MASK							0x1ull
#define FXR_RXET_ERR_STS_EB_ADDR_Q_ERR_MBE_SMASK						0x100000ull
#define FXR_RXET_ERR_STS_TXOTR_EVENT_OVERFLOW_SHIFT						19
#define FXR_RXET_ERR_STS_TXOTR_EVENT_OVERFLOW_MASK						0x1ull
#define FXR_RXET_ERR_STS_TXOTR_EVENT_OVERFLOW_SMASK						0x80000ull
#define FXR_RXET_ERR_STS_RXHP_EVENT_OVERFLOW_SHIFT						18
#define FXR_RXET_ERR_STS_RXHP_EVENT_OVERFLOW_MASK						0x1ull
#define FXR_RXET_ERR_STS_RXHP_EVENT_OVERFLOW_SMASK						0x40000ull
#define FXR_RXET_ERR_STS_EB_ADDR_Q_OVERFLOW_SHIFT						17
#define FXR_RXET_ERR_STS_EB_ADDR_Q_OVERFLOW_MASK						0x1ull
#define FXR_RXET_ERR_STS_EB_ADDR_Q_OVERFLOW_SMASK						0x20000ull
#define FXR_RXET_ERR_STS_EB_EVENT_HDR_Q_OVERFLOW_SHIFT						16
#define FXR_RXET_ERR_STS_EB_EVENT_HDR_Q_OVERFLOW_MASK						0x1ull
#define FXR_RXET_ERR_STS_EB_EVENT_HDR_Q_OVERFLOW_SMASK						0x10000ull
#define FXR_RXET_ERR_STS_EB_RXDMA_FIFO_OVERFLOW_SHIFT						15
#define FXR_RXET_ERR_STS_EB_RXDMA_FIFO_OVERFLOW_MASK						0x1ull
#define FXR_RXET_ERR_STS_EB_RXDMA_FIFO_OVERFLOW_SMASK						0x8000ull
#define FXR_RXET_ERR_STS_EEH_EVENT_FIFO_OVERFLOW_SHIFT						14
#define FXR_RXET_ERR_STS_EEH_EVENT_FIFO_OVERFLOW_MASK						0x1ull
#define FXR_RXET_ERR_STS_EEH_EVENT_FIFO_OVERFLOW_SMASK						0x4000ull
#define FXR_RXET_ERR_STS_EEH_RSV_FIFO_OVERFLOW_SHIFT						13
#define FXR_RXET_ERR_STS_EEH_RSV_FIFO_OVERFLOW_MASK						0x1ull
#define FXR_RXET_ERR_STS_EEH_RSV_FIFO_OVERFLOW_SMASK						0x2000ull
#define FXR_RXET_ERR_STS_EEH_EQD_REQ_FIFO_OVERFLOW_SHIFT					12
#define FXR_RXET_ERR_STS_EEH_EQD_REQ_FIFO_OVERFLOW_MASK						0x1ull
#define FXR_RXET_ERR_STS_EEH_EQD_REQ_FIFO_OVERFLOW_SMASK					0x1000ull
#define FXR_RXET_ERR_STS_TOH_TRIG_IN_FIFO_OVERFLOW_SHIFT					11
#define FXR_RXET_ERR_STS_TOH_TRIG_IN_FIFO_OVERFLOW_MASK						0x1ull
#define FXR_RXET_ERR_STS_TOH_TRIG_IN_FIFO_OVERFLOW_SMASK					0x800ull
#define FXR_RXET_ERR_STS_TOH_CACHE_REQ_FIFO_OVERFLOW_SHIFT					10
#define FXR_RXET_ERR_STS_TOH_CACHE_REQ_FIFO_OVERFLOW_MASK					0x1ull
#define FXR_RXET_ERR_STS_TOH_CACHE_REQ_FIFO_OVERFLOW_SMASK					0x400ull
#define FXR_RXET_ERR_STS_TOH_TRIG_OUT_OVERFLOW_SHIFT						9
#define FXR_RXET_ERR_STS_TOH_TRIG_OUT_OVERFLOW_MASK						0x1ull
#define FXR_RXET_ERR_STS_TOH_TRIG_OUT_OVERFLOW_SMASK						0x200ull
#define FXR_RXET_ERR_STS_TRIG_OP_CACHE_DATA_SBE_SHIFT						8
#define FXR_RXET_ERR_STS_TRIG_OP_CACHE_DATA_SBE_MASK						0x1ull
#define FXR_RXET_ERR_STS_TRIG_OP_CACHE_DATA_SBE_SMASK						0x100ull
#define FXR_RXET_ERR_STS_TRIG_OP_CACHE_DATA_MBE_SHIFT						7
#define FXR_RXET_ERR_STS_TRIG_OP_CACHE_DATA_MBE_MASK						0x1ull
#define FXR_RXET_ERR_STS_TRIG_OP_CACHE_DATA_MBE_SMASK						0x80ull
#define FXR_RXET_ERR_STS_TRIG_OP_CACHE_TAG_SBE_SHIFT						6
#define FXR_RXET_ERR_STS_TRIG_OP_CACHE_TAG_SBE_MASK						0x1ull
#define FXR_RXET_ERR_STS_TRIG_OP_CACHE_TAG_SBE_SMASK						0x40ull
#define FXR_RXET_ERR_STS_TRIG_OP_CACHE_TAG_MBE_SHIFT						5
#define FXR_RXET_ERR_STS_TRIG_OP_CACHE_TAG_MBE_MASK						0x1ull
#define FXR_RXET_ERR_STS_TRIG_OP_CACHE_TAG_MBE_SMASK						0x20ull
#define FXR_RXET_ERR_STS_EQ_DESC_CACHE_DATA_SBE_SHIFT						4
#define FXR_RXET_ERR_STS_EQ_DESC_CACHE_DATA_SBE_MASK						0x1ull
#define FXR_RXET_ERR_STS_EQ_DESC_CACHE_DATA_SBE_SMASK						0x10ull
#define FXR_RXET_ERR_STS_EQ_DESC_CACHE_DATA_MBE_SHIFT						3
#define FXR_RXET_ERR_STS_EQ_DESC_CACHE_DATA_MBE_MASK						0x1ull
#define FXR_RXET_ERR_STS_EQ_DESC_CACHE_DATA_MBE_SMASK						0x8ull
#define FXR_RXET_ERR_STS_EQ_DESC_CACHE_TAG_SBE_SHIFT						2
#define FXR_RXET_ERR_STS_EQ_DESC_CACHE_TAG_SBE_MASK						0x1ull
#define FXR_RXET_ERR_STS_EQ_DESC_CACHE_TAG_SBE_SMASK						0x4ull
#define FXR_RXET_ERR_STS_EQ_DESC_CACHE_TAG_MBE_SHIFT						1
#define FXR_RXET_ERR_STS_EQ_DESC_CACHE_TAG_MBE_MASK						0x1ull
#define FXR_RXET_ERR_STS_EQ_DESC_CACHE_TAG_MBE_SMASK						0x2ull
#define FXR_RXET_ERR_STS_EB_CAM_PAR_ERR_SHIFT							0
#define FXR_RXET_ERR_STS_EB_CAM_PAR_ERR_MASK							0x1ull
#define FXR_RXET_ERR_STS_EB_CAM_PAR_ERR_SMASK							0x1ull
/*
* Table #25 of fxr_top - RXET_ERR_CLR
* Clear the error by writing a one to the appropriate bit.
*/
#define FXR_RXET_ERR_CLR									(FXR_RX_ET_CSRS + 0x000000002008)
#define FXR_RXET_ERR_CLR_RESETCSR								0x0000000000000000ull
#define FXR_RXET_ERR_CLR_ERROR_CLR_SHIFT							0
#define FXR_RXET_ERR_CLR_ERROR_CLR_MASK								0x1FFFFFFFFFull
#define FXR_RXET_ERR_CLR_ERROR_CLR_SMASK							0x1FFFFFFFFFull
/*
* Table #26 of fxr_top - RXET_ERR_FRC
* Force the error by writing a one to the appropriate bit.
*/
#define FXR_RXET_ERR_FRC									(FXR_RX_ET_CSRS + 0x000000002010)
#define FXR_RXET_ERR_FRC_RESETCSR								0x0000000000000000ull
#define FXR_RXET_ERR_FRC_FORCE_ERR_SHIFT							0
#define FXR_RXET_ERR_FRC_FORCE_ERR_MASK								0x1FFFFFFFFFull
#define FXR_RXET_ERR_FRC_FORCE_ERR_SMASK							0x1FFFFFFFFFull
/*
* Table #27 of fxr_top - RXET_ERR_EN_HOST
* Enable interrupt by writing a one to the appropriate bit.
*/
#define FXR_RXET_ERR_EN_HOST									(FXR_RX_ET_CSRS + 0x000000002018)
#define FXR_RXET_ERR_EN_HOST_RESETCSR								0x0000000000000000ull
#define FXR_RXET_ERR_EN_HOST_ERR_HOST_EN_SHIFT							0
#define FXR_RXET_ERR_EN_HOST_ERR_HOST_EN_MASK							0x1FFFFFFFFFull
#define FXR_RXET_ERR_EN_HOST_ERR_HOST_EN_SMASK							0x1FFFFFFFFFull
/*
* Table #28 of fxr_top - RXET_ERR_FIRST_HOST
* Fist error seen by Host interrupt.
*/
#define FXR_RXET_ERR_FIRST_HOST									(FXR_RX_ET_CSRS + 0x000000002020)
#define FXR_RXET_ERR_FIRST_HOST_RESETCSR							0x0000000000000000ull
#define FXR_RXET_ERR_FIRST_HOST_FIRST_HOST_SHIFT						0
#define FXR_RXET_ERR_FIRST_HOST_FIRST_HOST_MASK							0x1FFFFFFFFFull
#define FXR_RXET_ERR_FIRST_HOST_FIRST_HOST_SMASK						0x1FFFFFFFFFull
/*
* Table #29 of fxr_top - RXET_ERR_EN_BMC
* Enable interrupt by writing a one to the appropriate bit.
*/
#define FXR_RXET_ERR_EN_BMC									(FXR_RX_ET_CSRS + 0x000000002028)
#define FXR_RXET_ERR_EN_BMC_RESETCSR								0x0000000000000000ull
#define FXR_RXET_ERR_EN_BMC_BMC_EN_SHIFT							0
#define FXR_RXET_ERR_EN_BMC_BMC_EN_MASK								0x1FFFFFFFFFull
#define FXR_RXET_ERR_EN_BMC_BMC_EN_SMASK							0x1FFFFFFFFFull
/*
* Table #30 of fxr_top - RXET_ERR_FIRST_BMC
* Fist error seen by BMC interrupt.
*/
#define FXR_RXET_ERR_FIRST_BMC									(FXR_RX_ET_CSRS + 0x000000002030)
#define FXR_RXET_ERR_FIRST_BMC_RESETCSR								0x0000000000000000ull
#define FXR_RXET_ERR_FIRST_BMC_FIRST_BMC_SHIFT							0
#define FXR_RXET_ERR_FIRST_BMC_FIRST_BMC_MASK							0x1FFFFFFFFFull
#define FXR_RXET_ERR_FIRST_BMC_FIRST_BMC_SMASK							0x1FFFFFFFFFull
/*
* Table #31 of fxr_top - RXET_ERR_EN_QUAR
* Enable interrupt by writing a one to the appropriate bit.
*/
#define FXR_RXET_ERR_EN_QUAR									(FXR_RX_ET_CSRS + 0x000000002038)
#define FXR_RXET_ERR_EN_QUAR_RESETCSR								0x0000000000000000ull
#define FXR_RXET_ERR_EN_QUAR_QUAR_EN_SHIFT							0
#define FXR_RXET_ERR_EN_QUAR_QUAR_EN_MASK							0x1FFFFFFFFFull
#define FXR_RXET_ERR_EN_QUAR_QUAR_EN_SMASK							0x1FFFFFFFFFull
/*
* Table #32 of fxr_top - RXET_ERR_FIRST_QUAR
* Force the error by writing a one to the appropriate bit.
*/
#define FXR_RXET_ERR_FIRST_QUAR									(FXR_RX_ET_CSRS + 0x000000002040)
#define FXR_RXET_ERR_FIRST_QUAR_RESETCSR							0x0000000000000000ull
#define FXR_RXET_ERR_FIRST_QUAR_FIRST_QUAR_SHIFT						0
#define FXR_RXET_ERR_FIRST_QUAR_FIRST_QUAR_MASK							0x1FFFFFFFFFull
#define FXR_RXET_ERR_FIRST_QUAR_FIRST_QUAR_SMASK						0x1FFFFFFFFFull
/*
* Table #33 of fxr_top - RXET_ERR_INFO
* SBE counts for non-cache ECC checks. Saturating counters.
*/
#define FXR_RXET_ERR_INFO									(FXR_RX_ET_CSRS + 0x000000002048)
#define FXR_RXET_ERR_INFO_RESETCSR								0x0000000000000000ull
#define FXR_RXET_ERR_INFO_TOA_DATA_SBE_COUNT_SHIFT						48
#define FXR_RXET_ERR_INFO_TOA_DATA_SBE_COUNT_MASK						0xFFFFull
#define FXR_RXET_ERR_INFO_TOA_DATA_SBE_COUNT_SMASK						0xFFFF000000000000ull
#define FXR_RXET_ERR_INFO_EVENT_REQ_SBE_COUNT_SHIFT						32
#define FXR_RXET_ERR_INFO_EVENT_REQ_SBE_COUNT_MASK						0xFFFFull
#define FXR_RXET_ERR_INFO_EVENT_REQ_SBE_COUNT_SMASK						0xFFFF00000000ull
#define FXR_RXET_ERR_INFO_RSV_REQ_SBE_COUNT_SHIFT						16
#define FXR_RXET_ERR_INFO_RSV_REQ_SBE_COUNT_MASK						0xFFFFull
#define FXR_RXET_ERR_INFO_RSV_REQ_SBE_COUNT_SMASK						0xFFFF0000ull
#define FXR_RXET_ERR_INFO_EB_ADDR_SBE_COUNT_SHIFT						0
#define FXR_RXET_ERR_INFO_EB_ADDR_SBE_COUNT_MASK						0xFFFFull
#define FXR_RXET_ERR_INFO_EB_ADDR_SBE_COUNT_SMASK						0xFFFFull
/*
* Table #34 of fxr_top - RXET_ERR_INFO_EQ_DESC_CACHE_TAG_SBE
* Error Info for the EQ Desc Cache tag #%%#eq_desc_cache_tag_sbe#%%# events. 
* There are 2 ecc domains. Each domain covers two tag ways. tag_mem[117:0] = 
* {tag_ecc[1:0][6:0],tag_way_data[1:0][1:0][25:0]}
*/
#define FXR_RXET_ERR_INFO_EQ_DESC_CACHE_TAG_SBE							(FXR_RX_ET_CSRS + 0x000000002050)
#define FXR_RXET_ERR_INFO_EQ_DESC_CACHE_TAG_SBE_RESETCSR					0x0000000000000000ull
#define FXR_RXET_ERR_INFO_EQ_DESC_CACHE_TAG_SBE_SBE_LAST_ADDRESS_SHIFT				22
#define FXR_RXET_ERR_INFO_EQ_DESC_CACHE_TAG_SBE_SBE_LAST_ADDRESS_MASK				0x1FFull
#define FXR_RXET_ERR_INFO_EQ_DESC_CACHE_TAG_SBE_SBE_LAST_ADDRESS_SMASK				0x7FC00000ull
#define FXR_RXET_ERR_INFO_EQ_DESC_CACHE_TAG_SBE_SBE_COUNT_SHIFT					10
#define FXR_RXET_ERR_INFO_EQ_DESC_CACHE_TAG_SBE_SBE_COUNT_MASK					0xFFFull
#define FXR_RXET_ERR_INFO_EQ_DESC_CACHE_TAG_SBE_SBE_COUNT_SMASK					0x3FFC00ull
#define FXR_RXET_ERR_INFO_EQ_DESC_CACHE_TAG_SBE_SBE_SHIFT					8
#define FXR_RXET_ERR_INFO_EQ_DESC_CACHE_TAG_SBE_SBE_MASK					0x3ull
#define FXR_RXET_ERR_INFO_EQ_DESC_CACHE_TAG_SBE_SBE_SMASK					0x300ull
#define FXR_RXET_ERR_INFO_EQ_DESC_CACHE_TAG_SBE_SBE_LAST_DOMAIN_SHIFT				7
#define FXR_RXET_ERR_INFO_EQ_DESC_CACHE_TAG_SBE_SBE_LAST_DOMAIN_MASK				0x1ull
#define FXR_RXET_ERR_INFO_EQ_DESC_CACHE_TAG_SBE_SBE_LAST_DOMAIN_SMASK				0x80ull
#define FXR_RXET_ERR_INFO_EQ_DESC_CACHE_TAG_SBE_SBE_LAST_SYNDROME_SHIFT				0
#define FXR_RXET_ERR_INFO_EQ_DESC_CACHE_TAG_SBE_SBE_LAST_SYNDROME_MASK				0x7Full
#define FXR_RXET_ERR_INFO_EQ_DESC_CACHE_TAG_SBE_SBE_LAST_SYNDROME_SMASK				0x7Full
/*
* Table #35 of fxr_top - RXET_ERR_INFO_EQ_DESC_CACHE_TAG_MBE
* Error Info for the EQ Desc Cache tag #%%#eq_desc_cache_tag_mbe#%%# events. 
* There are 2 ecc domains. Each domain covers two tag ways. tag_mem[117:0] = 
* {tag_ecc[1:0][6:0],tag_way_data[1:0][1:0][25:0]}
*/
#define FXR_RXET_ERR_INFO_EQ_DESC_CACHE_TAG_MBE							(FXR_RX_ET_CSRS + 0x000000002058)
#define FXR_RXET_ERR_INFO_EQ_DESC_CACHE_TAG_MBE_RESETCSR					0x0000000000000000ull
#define FXR_RXET_ERR_INFO_EQ_DESC_CACHE_TAG_MBE_MBE_LAST_ADDRESS_SHIFT				22
#define FXR_RXET_ERR_INFO_EQ_DESC_CACHE_TAG_MBE_MBE_LAST_ADDRESS_MASK				0x1FFull
#define FXR_RXET_ERR_INFO_EQ_DESC_CACHE_TAG_MBE_MBE_LAST_ADDRESS_SMASK				0x7FC00000ull
#define FXR_RXET_ERR_INFO_EQ_DESC_CACHE_TAG_MBE_MBE_COUNT_SHIFT					10
#define FXR_RXET_ERR_INFO_EQ_DESC_CACHE_TAG_MBE_MBE_COUNT_MASK					0xFFFull
#define FXR_RXET_ERR_INFO_EQ_DESC_CACHE_TAG_MBE_MBE_COUNT_SMASK					0x3FFC00ull
#define FXR_RXET_ERR_INFO_EQ_DESC_CACHE_TAG_MBE_MBE_SHIFT					8
#define FXR_RXET_ERR_INFO_EQ_DESC_CACHE_TAG_MBE_MBE_MASK					0x3ull
#define FXR_RXET_ERR_INFO_EQ_DESC_CACHE_TAG_MBE_MBE_SMASK					0x300ull
#define FXR_RXET_ERR_INFO_EQ_DESC_CACHE_TAG_MBE_MBE_LAST_DOMAIN_SHIFT				7
#define FXR_RXET_ERR_INFO_EQ_DESC_CACHE_TAG_MBE_MBE_LAST_DOMAIN_MASK				0x1ull
#define FXR_RXET_ERR_INFO_EQ_DESC_CACHE_TAG_MBE_MBE_LAST_DOMAIN_SMASK				0x80ull
#define FXR_RXET_ERR_INFO_EQ_DESC_CACHE_TAG_MBE_MBE_LAST_SYNDROME_SHIFT				0
#define FXR_RXET_ERR_INFO_EQ_DESC_CACHE_TAG_MBE_MBE_LAST_SYNDROME_MASK				0x7Full
#define FXR_RXET_ERR_INFO_EQ_DESC_CACHE_TAG_MBE_MBE_LAST_SYNDROME_SMASK				0x7Full
/*
* Table #36 of fxr_top - RXET_ERR_INFO_EQ_DESC_CACHE_DATA_SBE_MBE
* Error Info for the EQ Desc Cache Data #%%#eq_desc_cache_data_sbe#%%# and 
* #%%#eq_desc_cache_data_mbe#%%# events. There is no address associated with 
* these. There are 2 ecc domains. data mem[143:0]= {ecc[1:0][7:0],data[1:0][63:0]}. 
* Domains 1:0 cover data[127:0] (64 bits each).
*/
#define FXR_RXET_ERR_INFO_EQ_DESC_CACHE_DATA_SBE_MBE						(FXR_RX_ET_CSRS + 0x000000002060)
#define FXR_RXET_ERR_INFO_EQ_DESC_CACHE_DATA_SBE_MBE_RESETCSR					0x0000000000000000ull
#define FXR_RXET_ERR_INFO_EQ_DESC_CACHE_DATA_SBE_MBE_SBE_LAST_DOMAIN_SHIFT			37
#define FXR_RXET_ERR_INFO_EQ_DESC_CACHE_DATA_SBE_MBE_SBE_LAST_DOMAIN_MASK			0x1ull
#define FXR_RXET_ERR_INFO_EQ_DESC_CACHE_DATA_SBE_MBE_SBE_LAST_DOMAIN_SMASK			0x2000000000ull
#define FXR_RXET_ERR_INFO_EQ_DESC_CACHE_DATA_SBE_MBE_SBE_COUNT_SHIFT				25
#define FXR_RXET_ERR_INFO_EQ_DESC_CACHE_DATA_SBE_MBE_SBE_COUNT_MASK				0xFFFull
#define FXR_RXET_ERR_INFO_EQ_DESC_CACHE_DATA_SBE_MBE_SBE_COUNT_SMASK				0x1FFE000000ull
#define FXR_RXET_ERR_INFO_EQ_DESC_CACHE_DATA_SBE_MBE_SBE_SHIFT					23
#define FXR_RXET_ERR_INFO_EQ_DESC_CACHE_DATA_SBE_MBE_SBE_MASK					0x3ull
#define FXR_RXET_ERR_INFO_EQ_DESC_CACHE_DATA_SBE_MBE_SBE_SMASK					0x1800000ull
#define FXR_RXET_ERR_INFO_EQ_DESC_CACHE_DATA_SBE_MBE_SBE_LAST_SYNDROME_SHIFT			15
#define FXR_RXET_ERR_INFO_EQ_DESC_CACHE_DATA_SBE_MBE_SBE_LAST_SYNDROME_MASK			0xFFull
#define FXR_RXET_ERR_INFO_EQ_DESC_CACHE_DATA_SBE_MBE_SBE_LAST_SYNDROME_SMASK			0x7F8000ull
#define FXR_RXET_ERR_INFO_EQ_DESC_CACHE_DATA_SBE_MBE_MBE_LAST_DOMAIN_SHIFT			14
#define FXR_RXET_ERR_INFO_EQ_DESC_CACHE_DATA_SBE_MBE_MBE_LAST_DOMAIN_MASK			0x1ull
#define FXR_RXET_ERR_INFO_EQ_DESC_CACHE_DATA_SBE_MBE_MBE_LAST_DOMAIN_SMASK			0x4000ull
#define FXR_RXET_ERR_INFO_EQ_DESC_CACHE_DATA_SBE_MBE_MBE_COUNT_SHIFT				10
#define FXR_RXET_ERR_INFO_EQ_DESC_CACHE_DATA_SBE_MBE_MBE_COUNT_MASK				0xFull
#define FXR_RXET_ERR_INFO_EQ_DESC_CACHE_DATA_SBE_MBE_MBE_COUNT_SMASK				0x3C00ull
#define FXR_RXET_ERR_INFO_EQ_DESC_CACHE_DATA_SBE_MBE_MBE_SHIFT					8
#define FXR_RXET_ERR_INFO_EQ_DESC_CACHE_DATA_SBE_MBE_MBE_MASK					0x3ull
#define FXR_RXET_ERR_INFO_EQ_DESC_CACHE_DATA_SBE_MBE_MBE_SMASK					0x300ull
#define FXR_RXET_ERR_INFO_EQ_DESC_CACHE_DATA_SBE_MBE_MBE_LAST_SYNDROME_SHIFT			0
#define FXR_RXET_ERR_INFO_EQ_DESC_CACHE_DATA_SBE_MBE_MBE_LAST_SYNDROME_MASK			0xFFull
#define FXR_RXET_ERR_INFO_EQ_DESC_CACHE_DATA_SBE_MBE_MBE_LAST_SYNDROME_SMASK			0xFFull
/*
* Table #37 of fxr_top - RXET_ERR_INFO_TRIG_OP_CACHE_TAG_SBE
* Error Info for the Trig Op Cache tag #%%#trig_op_cache_tag_sbe#%%# events. 
* There are 2 ecc domains. Each domain covers two tag ways. tag_mem[131:0] = 
* {tag_ecc[1:0][7:0],tag_way_data[1:0][1:0][28:0]}
*/
#define FXR_RXET_ERR_INFO_TRIG_OP_CACHE_TAG_SBE							(FXR_RX_ET_CSRS + 0x000000002068)
#define FXR_RXET_ERR_INFO_TRIG_OP_CACHE_TAG_SBE_RESETCSR					0x0000000000000000ull
#define FXR_RXET_ERR_INFO_TRIG_OP_CACHE_TAG_SBE_SBE_LAST_ADDRESS_SHIFT				23
#define FXR_RXET_ERR_INFO_TRIG_OP_CACHE_TAG_SBE_SBE_LAST_ADDRESS_MASK				0xFFull
#define FXR_RXET_ERR_INFO_TRIG_OP_CACHE_TAG_SBE_SBE_LAST_ADDRESS_SMASK				0x7F800000ull
#define FXR_RXET_ERR_INFO_TRIG_OP_CACHE_TAG_SBE_SBE_COUNT_SHIFT					11
#define FXR_RXET_ERR_INFO_TRIG_OP_CACHE_TAG_SBE_SBE_COUNT_MASK					0xFFFull
#define FXR_RXET_ERR_INFO_TRIG_OP_CACHE_TAG_SBE_SBE_COUNT_SMASK					0x7FF800ull
#define FXR_RXET_ERR_INFO_TRIG_OP_CACHE_TAG_SBE_SBE_SHIFT					9
#define FXR_RXET_ERR_INFO_TRIG_OP_CACHE_TAG_SBE_SBE_MASK					0x3ull
#define FXR_RXET_ERR_INFO_TRIG_OP_CACHE_TAG_SBE_SBE_SMASK					0x600ull
#define FXR_RXET_ERR_INFO_TRIG_OP_CACHE_TAG_SBE_SBE_LAST_DOMAIN_SHIFT				8
#define FXR_RXET_ERR_INFO_TRIG_OP_CACHE_TAG_SBE_SBE_LAST_DOMAIN_MASK				0x1ull
#define FXR_RXET_ERR_INFO_TRIG_OP_CACHE_TAG_SBE_SBE_LAST_DOMAIN_SMASK				0x100ull
#define FXR_RXET_ERR_INFO_TRIG_OP_CACHE_TAG_SBE_SBE_LAST_SYNDROME_SHIFT				0
#define FXR_RXET_ERR_INFO_TRIG_OP_CACHE_TAG_SBE_SBE_LAST_SYNDROME_MASK				0xFFull
#define FXR_RXET_ERR_INFO_TRIG_OP_CACHE_TAG_SBE_SBE_LAST_SYNDROME_SMASK				0xFFull
/*
* Table #38 of fxr_top - RXET_ERR_INFO_TRIG_OP_CACHE_TAG_MBE
* Error Info for the Trig Op Cache tag #%%#trig_op_cache_tag_mbe#%%# events. 
* There are 2 ecc domains. Each domain covers two tag ways. tag_mem[131:0] = 
* {tag_ecc[1:0][7:0],tag_way_data[1:0][1:0][28:0]}
*/
#define FXR_RXET_ERR_INFO_TRIG_OP_CACHE_TAG_MBE							(FXR_RX_ET_CSRS + 0x000000002070)
#define FXR_RXET_ERR_INFO_TRIG_OP_CACHE_TAG_MBE_RESETCSR					0x0000000000000000ull
#define FXR_RXET_ERR_INFO_TRIG_OP_CACHE_TAG_MBE_MBE_LAST_ADDRESS_SHIFT				23
#define FXR_RXET_ERR_INFO_TRIG_OP_CACHE_TAG_MBE_MBE_LAST_ADDRESS_MASK				0xFFull
#define FXR_RXET_ERR_INFO_TRIG_OP_CACHE_TAG_MBE_MBE_LAST_ADDRESS_SMASK				0x7F800000ull
#define FXR_RXET_ERR_INFO_TRIG_OP_CACHE_TAG_MBE_MBE_COUNT_SHIFT					11
#define FXR_RXET_ERR_INFO_TRIG_OP_CACHE_TAG_MBE_MBE_COUNT_MASK					0xFFFull
#define FXR_RXET_ERR_INFO_TRIG_OP_CACHE_TAG_MBE_MBE_COUNT_SMASK					0x7FF800ull
#define FXR_RXET_ERR_INFO_TRIG_OP_CACHE_TAG_MBE_MBE_SHIFT					9
#define FXR_RXET_ERR_INFO_TRIG_OP_CACHE_TAG_MBE_MBE_MASK					0x3ull
#define FXR_RXET_ERR_INFO_TRIG_OP_CACHE_TAG_MBE_MBE_SMASK					0x600ull
#define FXR_RXET_ERR_INFO_TRIG_OP_CACHE_TAG_MBE_MBE_LAST_DOMAIN_SHIFT				8
#define FXR_RXET_ERR_INFO_TRIG_OP_CACHE_TAG_MBE_MBE_LAST_DOMAIN_MASK				0x1ull
#define FXR_RXET_ERR_INFO_TRIG_OP_CACHE_TAG_MBE_MBE_LAST_DOMAIN_SMASK				0x100ull
#define FXR_RXET_ERR_INFO_TRIG_OP_CACHE_TAG_MBE_MBE_LAST_SYNDROME_SHIFT				0
#define FXR_RXET_ERR_INFO_TRIG_OP_CACHE_TAG_MBE_MBE_LAST_SYNDROME_MASK				0xFFull
#define FXR_RXET_ERR_INFO_TRIG_OP_CACHE_TAG_MBE_MBE_LAST_SYNDROME_SMASK				0xFFull
/*
* Table #39 of fxr_top - RXET_ERR_INFO_TRIG_OP_CACHE_DATA_SBE
* Error Info for the Trig Op Cache Data #%%#trig_op_cache_data_sbe#%%#  events. 
* There is no address associated with these. There are 16 ecc domains. data 
* mem[1151:0]= {ecc[15:0][7:0],data[15:0][63:0]}. Domains 15:0 cover 
* data[1023:0] (64 bits each).
*/
#define FXR_RXET_ERR_INFO_TRIG_OP_CACHE_DATA_SBE						(FXR_RX_ET_CSRS + 0x000000002078)
#define FXR_RXET_ERR_INFO_TRIG_OP_CACHE_DATA_SBE_RESETCSR					0x0000000000000000ull
#define FXR_RXET_ERR_INFO_TRIG_OP_CACHE_DATA_SBE_SBE_LAST_DOMAIN_SHIFT				36
#define FXR_RXET_ERR_INFO_TRIG_OP_CACHE_DATA_SBE_SBE_LAST_DOMAIN_MASK				0xFull
#define FXR_RXET_ERR_INFO_TRIG_OP_CACHE_DATA_SBE_SBE_LAST_DOMAIN_SMASK				0xF000000000ull
#define FXR_RXET_ERR_INFO_TRIG_OP_CACHE_DATA_SBE_SBE_COUNT_SHIFT				24
#define FXR_RXET_ERR_INFO_TRIG_OP_CACHE_DATA_SBE_SBE_COUNT_MASK					0xFFFull
#define FXR_RXET_ERR_INFO_TRIG_OP_CACHE_DATA_SBE_SBE_COUNT_SMASK				0xFFF000000ull
#define FXR_RXET_ERR_INFO_TRIG_OP_CACHE_DATA_SBE_SBE_SHIFT					8
#define FXR_RXET_ERR_INFO_TRIG_OP_CACHE_DATA_SBE_SBE_MASK					0xFFFFull
#define FXR_RXET_ERR_INFO_TRIG_OP_CACHE_DATA_SBE_SBE_SMASK					0xFFFF00ull
#define FXR_RXET_ERR_INFO_TRIG_OP_CACHE_DATA_SBE_SBE_LAST_SYNDROME_SHIFT			0
#define FXR_RXET_ERR_INFO_TRIG_OP_CACHE_DATA_SBE_SBE_LAST_SYNDROME_MASK				0xFFull
#define FXR_RXET_ERR_INFO_TRIG_OP_CACHE_DATA_SBE_SBE_LAST_SYNDROME_SMASK			0xFFull
/*
* Table #40 of fxr_top - RXET_ERR_INFO_TRIG_OP_CACHE_DATA_MBE
* Error Info for the Trig Op Cache Data #%%#trig_op_cache_data_mbe#%%#  events. 
* There is no address associated with these. There are 16 ecc domains. data 
* mem[1151:0]= {ecc[15:0][7:0],data[15:0][63:0]}. Domains 15:0 cover 
* data[1023:0] (64 bits each).
*/
#define FXR_RXET_ERR_INFO_TRIG_OP_CACHE_DATA_MBE						(FXR_RX_ET_CSRS + 0x000000002080)
#define FXR_RXET_ERR_INFO_TRIG_OP_CACHE_DATA_MBE_RESETCSR					0x0000000000000000ull
#define FXR_RXET_ERR_INFO_TRIG_OP_CACHE_DATA_MBE_MBE_LAST_DOMAIN_SHIFT				36
#define FXR_RXET_ERR_INFO_TRIG_OP_CACHE_DATA_MBE_MBE_LAST_DOMAIN_MASK				0xFull
#define FXR_RXET_ERR_INFO_TRIG_OP_CACHE_DATA_MBE_MBE_LAST_DOMAIN_SMASK				0xF000000000ull
#define FXR_RXET_ERR_INFO_TRIG_OP_CACHE_DATA_MBE_MBE_COUNT_SHIFT				24
#define FXR_RXET_ERR_INFO_TRIG_OP_CACHE_DATA_MBE_MBE_COUNT_MASK					0xFFFull
#define FXR_RXET_ERR_INFO_TRIG_OP_CACHE_DATA_MBE_MBE_COUNT_SMASK				0xFFF000000ull
#define FXR_RXET_ERR_INFO_TRIG_OP_CACHE_DATA_MBE_MBE_SHIFT					8
#define FXR_RXET_ERR_INFO_TRIG_OP_CACHE_DATA_MBE_MBE_MASK					0xFFFFull
#define FXR_RXET_ERR_INFO_TRIG_OP_CACHE_DATA_MBE_MBE_SMASK					0xFFFF00ull
#define FXR_RXET_ERR_INFO_TRIG_OP_CACHE_DATA_MBE_MBE_LAST_SYNDROME_SHIFT			0
#define FXR_RXET_ERR_INFO_TRIG_OP_CACHE_DATA_MBE_MBE_LAST_SYNDROME_MASK				0xFFull
#define FXR_RXET_ERR_INFO_TRIG_OP_CACHE_DATA_MBE_MBE_LAST_SYNDROME_SMASK			0xFFull
/*
* Table #41 of fxr_top - RXET_CACHE_ERR_INJECT_SBE_MBE
* Error Injection for the various sbe/mbe fields in the TrigOp and EQ Descriptor 
* caches. Setting a single bit will cause an sbe in the ecc field and cause that 
* bit to be flipped, no data bits will be flipped. Setting 2 bits will cause an 
* mbe. An even number of bits > 2 may or may not cause an mbe. Setting an odd 
* number of bits that is a legal syndrome for that data width will cause an sbe 
* and the corresponding data bit to be flipped. See shrtl_ecc_correct.sv for 
* legal syndromes for each data width.
*/
#define FXR_RXET_CACHE_ERR_INJECT_SBE_MBE							(FXR_RX_ET_CSRS + 0x000000002088)
#define FXR_RXET_CACHE_ERR_INJECT_SBE_MBE_RESETCSR						0x0000000000000000ull
#define FXR_RXET_CACHE_ERR_INJECT_SBE_MBE_TRIG_OP_CACHE_DATA_ERR_INJ_ENABLE_SHIFT		41
#define FXR_RXET_CACHE_ERR_INJECT_SBE_MBE_TRIG_OP_CACHE_DATA_ERR_INJ_ENABLE_MASK		0x1ull
#define FXR_RXET_CACHE_ERR_INJECT_SBE_MBE_TRIG_OP_CACHE_DATA_ERR_INJ_ENABLE_SMASK		0x20000000000ull
#define FXR_RXET_CACHE_ERR_INJECT_SBE_MBE_TRIG_OP_CACHE_DATA_ERR_INJ_DOMAIN_SHIFT		37
#define FXR_RXET_CACHE_ERR_INJECT_SBE_MBE_TRIG_OP_CACHE_DATA_ERR_INJ_DOMAIN_MASK		0xFull
#define FXR_RXET_CACHE_ERR_INJECT_SBE_MBE_TRIG_OP_CACHE_DATA_ERR_INJ_DOMAIN_SMASK		0x1E000000000ull
#define FXR_RXET_CACHE_ERR_INJECT_SBE_MBE_TRIG_OP_CACHE_DATA_ERR_INJ_MASK_SHIFT			29
#define FXR_RXET_CACHE_ERR_INJECT_SBE_MBE_TRIG_OP_CACHE_DATA_ERR_INJ_MASK_MASK			0xFFull
#define FXR_RXET_CACHE_ERR_INJECT_SBE_MBE_TRIG_OP_CACHE_DATA_ERR_INJ_MASK_SMASK			0x1FE0000000ull
#define FXR_RXET_CACHE_ERR_INJECT_SBE_MBE_TRIG_OP_CACHE_TAG_ERR_INJ_ENABLE_SHIFT		28
#define FXR_RXET_CACHE_ERR_INJECT_SBE_MBE_TRIG_OP_CACHE_TAG_ERR_INJ_ENABLE_MASK			0x1ull
#define FXR_RXET_CACHE_ERR_INJECT_SBE_MBE_TRIG_OP_CACHE_TAG_ERR_INJ_ENABLE_SMASK		0x10000000ull
#define FXR_RXET_CACHE_ERR_INJECT_SBE_MBE_TRIG_OP_CACHE_TAG_ERR_INJ_DOMAIN_SHIFT		27
#define FXR_RXET_CACHE_ERR_INJECT_SBE_MBE_TRIG_OP_CACHE_TAG_ERR_INJ_DOMAIN_MASK			0x1ull
#define FXR_RXET_CACHE_ERR_INJECT_SBE_MBE_TRIG_OP_CACHE_TAG_ERR_INJ_DOMAIN_SMASK		0x8000000ull
#define FXR_RXET_CACHE_ERR_INJECT_SBE_MBE_TRIG_OP_CACHE_TAG_ERR_INJ_MASK_SHIFT			19
#define FXR_RXET_CACHE_ERR_INJECT_SBE_MBE_TRIG_OP_CACHE_TAG_ERR_INJ_MASK_MASK			0xFFull
#define FXR_RXET_CACHE_ERR_INJECT_SBE_MBE_TRIG_OP_CACHE_TAG_ERR_INJ_MASK_SMASK			0x7F80000ull
#define FXR_RXET_CACHE_ERR_INJECT_SBE_MBE_EQ_DESC_CACHE_DATA_ERR_INJ_ENABLE_SHIFT		18
#define FXR_RXET_CACHE_ERR_INJECT_SBE_MBE_EQ_DESC_CACHE_DATA_ERR_INJ_ENABLE_MASK		0x1ull
#define FXR_RXET_CACHE_ERR_INJECT_SBE_MBE_EQ_DESC_CACHE_DATA_ERR_INJ_ENABLE_SMASK		0x40000ull
#define FXR_RXET_CACHE_ERR_INJECT_SBE_MBE_EQ_DESC_CACHE_DATA_ERR_INJ_DOMAIN_SHIFT		17
#define FXR_RXET_CACHE_ERR_INJECT_SBE_MBE_EQ_DESC_CACHE_DATA_ERR_INJ_DOMAIN_MASK		0x1ull
#define FXR_RXET_CACHE_ERR_INJECT_SBE_MBE_EQ_DESC_CACHE_DATA_ERR_INJ_DOMAIN_SMASK		0x20000ull
#define FXR_RXET_CACHE_ERR_INJECT_SBE_MBE_EQ_DESC_CACHE_DATA_ERR_INJ_MASK_SHIFT			9
#define FXR_RXET_CACHE_ERR_INJECT_SBE_MBE_EQ_DESC_CACHE_DATA_ERR_INJ_MASK_MASK			0xFFull
#define FXR_RXET_CACHE_ERR_INJECT_SBE_MBE_EQ_DESC_CACHE_DATA_ERR_INJ_MASK_SMASK			0x1FE00ull
#define FXR_RXET_CACHE_ERR_INJECT_SBE_MBE_EQ_DESC_CACHE_TAG_ERR_INJ_ENABLE_SHIFT		8
#define FXR_RXET_CACHE_ERR_INJECT_SBE_MBE_EQ_DESC_CACHE_TAG_ERR_INJ_ENABLE_MASK			0x1ull
#define FXR_RXET_CACHE_ERR_INJECT_SBE_MBE_EQ_DESC_CACHE_TAG_ERR_INJ_ENABLE_SMASK		0x100ull
#define FXR_RXET_CACHE_ERR_INJECT_SBE_MBE_EQ_DESC_CACHE_TAG_ERR_INJ_DOMAIN_SHIFT		7
#define FXR_RXET_CACHE_ERR_INJECT_SBE_MBE_EQ_DESC_CACHE_TAG_ERR_INJ_DOMAIN_MASK			0x1ull
#define FXR_RXET_CACHE_ERR_INJECT_SBE_MBE_EQ_DESC_CACHE_TAG_ERR_INJ_DOMAIN_SMASK		0x80ull
#define FXR_RXET_CACHE_ERR_INJECT_SBE_MBE_EQ_DESC_CACHE_TAG_ERR_INJ_MASK_SHIFT			0
#define FXR_RXET_CACHE_ERR_INJECT_SBE_MBE_EQ_DESC_CACHE_TAG_ERR_INJ_MASK_MASK			0x7Full
#define FXR_RXET_CACHE_ERR_INJECT_SBE_MBE_EQ_DESC_CACHE_TAG_ERR_INJ_MASK_SMASK			0x7Full

#endif 		/* DEF_FXR_RX_ET_SW_DEF */
